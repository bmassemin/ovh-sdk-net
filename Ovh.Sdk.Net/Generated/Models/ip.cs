//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
namespace _ip {
    
    
    // Id: Antiphishing Namespace: ip
    public class Antiphishing {
        
        // Key: creationDate Type: datetime FullType: datetime
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("creationDate")]
        public required System.DateTime CreationDate { get; set; }//;
        
        // Key: id Type: long FullType: long
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("id")]
        public required System.Int64 Id { get; set; }//;
        
        // Key: ipOnAntiphishing Type: ipv4 FullType: ipv4
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ipOnAntiphishing")]
        public required System.String IpOnAntiphishing { get; set; }//;
        
        // Key: state Type: ip.AntiphishingStateEnum FullType: ip.AntiphishingStateEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("state")]
        public required _ip.AntiphishingStateEnum State { get; set; }//;
        
        // Key: urlPhishing Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("urlPhishing")]
        public required System.String UrlPhishing { get; set; }//;
    }
    
    // Id: AntiphishingStateEnum Namespace: ip
    public enum AntiphishingStateEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("blocked")]
        blocked,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("blocking")]
        blocking,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("unblocked")]
        unblocked,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("unblocking")]
        unblocking,
    }
    
    // Id: ArpBlockedIp Namespace: ip
    public class ArpBlockedIp {
        
        // Key: blockedSince Type: datetime FullType: datetime
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("blockedSince")]
        public required System.DateTime BlockedSince { get; set; }//;
        
        // Key: ipBlocked Type: ipv4 FullType: ipv4
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ipBlocked")]
        public required System.String IpBlocked { get; set; }//;
        
        // Key: logs Type: text FullType: text
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("logs")]
        public System.String? Logs { get; set; }//;
        
        // Key: state Type: ip.ArpStateEnum FullType: ip.ArpStateEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("state")]
        public required _ip.ArpStateEnum State { get; set; }//;
        
        // Key: time Type: long FullType: long
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("time")]
        public required System.Int64 Time { get; set; }//;
    }
    
    // Id: ArpStateEnum Namespace: ip
    public enum ArpStateEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("blocked")]
        blocked,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("unblocking")]
        unblocking,
    }
    
    // Id: BlockedIp Namespace: ip
    public class BlockedIp {
        
        // Key: blockedSince Type: datetime FullType: datetime
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("blockedSince")]
        public required System.DateTime BlockedSince { get; set; }//;
        
        // Key: ipBlocked Type: ipv4 FullType: ipv4
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ipBlocked")]
        public required System.String IpBlocked { get; set; }//;
        
        // Key: logs Type: text FullType: text
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("logs")]
        public System.String? Logs { get; set; }//;
        
        // Key: state Type: ip.BlockedIpStateEnum FullType: ip.BlockedIpStateEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("state")]
        public required _ip.BlockedIpStateEnum State { get; set; }//;
        
        // Key: time Type: long FullType: long
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("time")]
        public required System.Int64 Time { get; set; }//;
    }
    
    // Id: BlockedIpStateEnum Namespace: ip
    public enum BlockedIpStateEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("blocked")]
        blocked,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("unblocking")]
        unblocking,
    }
    
    // Id: ByoipAggregationPreview Namespace: ip
    public class ByoipAggregationPreview {
        
        // Key: aggregationIp Type: ipBlock FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("aggregationIp")]
        public required System.String AggregationIp { get; set; }//;
        
        // Key: childrenIps Type: ipBlock[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("childrenIps")]
        public required System.String[] ChildrenIps { get; set; }//;
    }
    
    // Id: ByoipSlicingPreview Namespace: ip
    public class ByoipSlicingPreview {
        
        // Key: childrenIps Type: ipBlock[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("childrenIps")]
        public required System.String[] ChildrenIps { get; set; }//;
        
        // Key: slicingSize Type: long FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("slicingSize")]
        public required System.Int64 SlicingSize { get; set; }//;
    }
    
    // Id: Campus Namespace: ip
    public class Campus {
        
        // Key: bringYourOwnIpSupportedRirForIp Type: string[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("bringYourOwnIpSupportedRirForIp")]
        public required System.String[] BringYourOwnIpSupportedRirForIp { get; set; }//;
        
        // Key: datacenters Type: dedicated.DatacenterEnum[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("datacenters")]
        public required _dedicated.DatacenterEnum[] Datacenters { get; set; }//;
        
        // Key: description Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("description")]
        public required System.String Description { get; set; }//;
        
        // Key: name Type: ip.CampusEnum FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("name")]
        public required _ip.CampusEnum Name { get; set; }//;
    }
    
    // Id: CampusEnum Namespace: ip
    public enum CampusEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("BHS")]
        BHS,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ERI")]
        ERI,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("GRA")]
        GRA,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("HIL")]
        HIL,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("LIM")]
        LIM,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("RBX")]
        RBX,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("SBG")]
        SBG,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("SGP")]
        SGP,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("SYD")]
        SYD,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("VIN")]
        VIN,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("WAW")]
        WAW,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("YNM")]
        YNM,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("YYZ")]
        YYZ,
    }
    
    // Id: Destination Namespace: ip
    public class Destination {
        
        // Key: nexthop Type: string[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("nexthop")]
        public System.String[]? Nexthop { get; set; }//;
        
        // Key: service Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("service")]
        public required System.String Service { get; set; }//;
    }
    
    // Id: Destinations Namespace: ip
    public class Destinations {
        
        // Key: cloudProject Type: ip.Destination[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("cloudProject")]
        public _ip.Destination[]? CloudProject { get; set; }//;
        
        // Key: dedicatedCloud Type: ip.Destination[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("dedicatedCloud")]
        public _ip.Destination[]? DedicatedCloud { get; set; }//;
        
        // Key: dedicatedServer Type: ip.Destination[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("dedicatedServer")]
        public _ip.Destination[]? DedicatedServer { get; set; }//;
        
        // Key: hostingReseller Type: ip.Destination[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("hostingReseller")]
        public _ip.Destination[]? HostingReseller { get; set; }//;
        
        // Key: ipLoadbalancing Type: ip.Destination[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ipLoadbalancing")]
        public _ip.Destination[]? IpLoadbalancing { get; set; }//;
        
        // Key: vps Type: ip.Destination[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("vps")]
        public _ip.Destination[]? Vps { get; set; }//;
    }
    
    // Id: FirewallActionEnum Namespace: ip
    public enum FirewallActionEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("deny")]
        deny,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("permit")]
        permit,
    }
    
    // Id: FirewallIp Namespace: ip
    public class FirewallIp {
        
        // Key: enabled Type: boolean FullType: boolean
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("enabled")]
        public required System.Boolean Enabled { get; set; }//;
        
        // Key: ipOnFirewall Type: ipv4 FullType: ipv4
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ipOnFirewall")]
        public required System.String IpOnFirewall { get; set; }//;
        
        // Key: state Type: ip.FirewallStateEnum FullType: ip.FirewallStateEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("state")]
        public required _ip.FirewallStateEnum State { get; set; }//;
    }
    
    // Id: FirewallNetworkRule Namespace: ip
    public class FirewallNetworkRule {
        
        // Key: action Type: ip.FirewallActionEnum FullType: ip.FirewallActionEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("action")]
        public required _ip.FirewallActionEnum Action { get; set; }//;
        
        // Key: creationDate Type: datetime FullType: datetime
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("creationDate")]
        public required System.DateTime CreationDate { get; set; }//;
        
        // Key: destination Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("destination")]
        public required System.String Destination { get; set; }//;
        
        // Key: destinationPort Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("destinationPort")]
        public System.String? DestinationPort { get; set; }//;
        
        // Key: fragments Type: boolean FullType: boolean
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("fragments")]
        public System.Boolean? Fragments { get; set; }//;
        
        // Key: protocol Type: ip.FirewallProtocolEnum FullType: ip.FirewallProtocolEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("protocol")]
        public required _ip.FirewallProtocolEnum Protocol { get; set; }//;
        
        // Key: rule Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("rule")]
        public required System.String Rule { get; set; }//;
        
        // Key: sequence Type: long FullType: long
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("sequence")]
        public required System.Int64 Sequence { get; set; }//;
        
        // Key: source Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("source")]
        public required System.String Source { get; set; }//;
        
        // Key: sourcePort Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("sourcePort")]
        public System.String? SourcePort { get; set; }//;
        
        // Key: state Type: ip.FirewallRuleStateEnum FullType: ip.FirewallRuleStateEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("state")]
        public required _ip.FirewallRuleStateEnum State { get; set; }//;
        
        // Key: tcpOption Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("tcpOption")]
        public System.String? TcpOption { get; set; }//;
    }
    
    // Id: FirewallOptionTCP Namespace: ip
    public class FirewallOptionTCP {
        
        // Key: fragments Type: boolean FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("fragments")]
        public System.Boolean? Fragments { get; set; }//;
        
        // Key: option Type: ip.FirewallTCPOptionEnum FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("option")]
        public _ip.FirewallTCPOptionEnum? Option { get; set; }//;
    }
    
    // Id: FirewallProtocolEnum Namespace: ip
    public enum FirewallProtocolEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ah")]
        ah,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("esp")]
        esp,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("gre")]
        gre,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("icmp")]
        icmp,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ipv4")]
        ipv4,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("tcp")]
        tcp,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("udp")]
        udp,
    }
    
    // Id: FirewallRuleStateEnum Namespace: ip
    public enum FirewallRuleStateEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("creationPending")]
        creationPending,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ok")]
        ok,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("removalPending")]
        removalPending,
    }
    
    // Id: FirewallSequenceRangeEnum Namespace: ip
    public enum FirewallSequenceRangeEnum {
        
        _0 = 0,
        
        _1 = 1,
        
        _2 = 2,
        
        _3 = 3,
        
        _4 = 4,
        
        _5 = 5,
        
        _6 = 6,
        
        _7 = 7,
        
        _8 = 8,
        
        _9 = 9,
        
        _10 = 10,
        
        _11 = 11,
        
        _12 = 12,
        
        _13 = 13,
        
        _14 = 14,
        
        _15 = 15,
        
        _16 = 16,
        
        _17 = 17,
        
        _18 = 18,
        
        _19 = 19,
    }
    
    // Id: FirewallStateEnum Namespace: ip
    public enum FirewallStateEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("disableFirewallPending")]
        disableFirewallPending,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("enableFirewallPending")]
        enableFirewallPending,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ok")]
        ok,
    }
    
    // Id: FirewallTCPOptionEnum Namespace: ip
    public enum FirewallTCPOptionEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("established")]
        established,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("syn")]
        syn,
    }
    
    // Id: GameMitigation Namespace: ip
    public class GameMitigation {
        
        // Key: firewallModeEnabled Type: boolean FullType: boolean
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("firewallModeEnabled")]
        public required System.Boolean FirewallModeEnabled { get; set; }//;
        
        // Key: ipOnGame Type: ipv4 FullType: ipv4
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ipOnGame")]
        public required System.String IpOnGame { get; set; }//;
        
        // Key: maxRules Type: long FullType: long
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("maxRules")]
        public required System.Int64 MaxRules { get; set; }//;
        
        // Key: state Type: ip.GameMitigationStateEnum FullType: ip.GameMitigationStateEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("state")]
        public required _ip.GameMitigationStateEnum State { get; set; }//;
        
        // Key: supportedProtocols Type: ip.GameMitigationRuleProtocolEnum[] FullType: ip.GameMitigationRuleProtocolEnum[]
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("supportedProtocols")]
        public required _ip.GameMitigationRuleProtocolEnum[] SupportedProtocols { get; set; }//;
    }
    
    // Id: GameMitigationRule Namespace: ip
    public class GameMitigationRule {
        
        // Key: id Type: long FullType: long
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("id")]
        public required System.Int64 Id { get; set; }//;
        
        // Key: ports Type: complexType.Range<long> FullType: complexType.Range<long>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ports")]
        public required _complexType.Range<long> Ports { get; set; }//;
        
        // Key: protocol Type: ip.GameMitigationRuleProtocolEnum FullType: ip.GameMitigationRuleProtocolEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("protocol")]
        public required _ip.GameMitigationRuleProtocolEnum Protocol { get; set; }//;
        
        // Key: state Type: ip.GameMitigationRuleStateEnum FullType: ip.GameMitigationRuleStateEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("state")]
        public required _ip.GameMitigationRuleStateEnum State { get; set; }//;
    }
    
    // Id: GameMitigationRuleProtocolEnum Namespace: ip
    public enum GameMitigationRuleProtocolEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("arkSurvivalEvolved")]
        arkSurvivalEvolved,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("arkSurvivalEvolvedV311.78+")]
        arkSurvivalEvolvedV311_78_plus_,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("arma")]
        arma,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("counterStrike2")]
        counterStrike2,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("fiveM")]
        fiveM,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("gtaMultiTheftAutoSanAndreas")]
        gtaMultiTheftAutoSanAndreas,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("gtaSanAndreasMultiplayerMod")]
        gtaSanAndreasMultiplayerMod,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("hl2Source")]
        hl2Source,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("minecraftBedrockWithRacknetCookie")]
        minecraftBedrockWithRacknetCookie,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("minecraftJava")]
        minecraftJava,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("minecraftPocketEdition")]
        minecraftPocketEdition,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("minecraftQuery")]
        minecraftQuery,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("mumble")]
        mumble,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("other")]
        other,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("rust")]
        rust,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("teamspeak2")]
        teamspeak2,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("teamspeak3")]
        teamspeak3,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("trackmaniaShootmania")]
        trackmaniaShootmania,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("valheim")]
        valheim,
    }
    
    // Id: GameMitigationRuleStateEnum Namespace: ip
    public enum GameMitigationRuleStateEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("createRulePending")]
        createRulePending,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("deleteRulePending")]
        deleteRulePending,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ok")]
        ok,
    }
    
    // Id: GameMitigationStateEnum Namespace: ip
    public enum GameMitigationStateEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("cleanRulesPending")]
        cleanRulesPending,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("firewallModeDisablePending")]
        firewallModeDisablePending,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("firewallModeEnablePending")]
        firewallModeEnablePending,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ok")]
        ok,
    }
    
    // Id: Ip Namespace: ip
    public class Ip {
        
        // Key: bringYourOwnIp Type: boolean FullType: boolean
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("bringYourOwnIp")]
        public required System.Boolean BringYourOwnIp { get; set; }//;
        
        // Key: campus Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("campus")]
        public System.String? Campus { get; set; }//;
        
        // Key: canBeTerminated Type: boolean FullType: boolean
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("canBeTerminated")]
        public required System.Boolean CanBeTerminated { get; set; }//;
        
        // Key: country Type: coreTypes.CountryEnum FullType: coreTypes.CountryEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("country")]
        public _coreTypes.CountryEnum? Country { get; set; }//;
        
        // Key: description Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("description")]
        public System.String? Description { get; set; }//;
        
        // Key: ip Type: ipBlock FullType: ipBlock
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ip")]
        public required System.String _Ip { get; set; }//;
        
        // Key: isAdditionalIp Type: boolean FullType: boolean
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("isAdditionalIp")]
        public required System.Boolean IsAdditionalIp { get; set; }//;
        
        // Key: organisationId Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("organisationId")]
        public System.String? OrganisationId { get; set; }//;
        
        // Key: regions Type: coreTypes.RegionCodenameEnum[] FullType: coreTypes.RegionCodenameEnum[]
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("regions")]
        public _coreTypes.RegionCodenameEnum[]? Regions { get; set; }//;
        
        // Key: rir Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("rir")]
        public System.String? Rir { get; set; }//;
        
        // Key: routedTo Type: ip.RoutedTo FullType: ip.RoutedTo
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("routedTo")]
        public _ip.RoutedTo? RoutedTo { get; set; }//;
        
        // Key: type Type: ip.IpTypeEnum FullType: ip.IpTypeEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("type")]
        public required _ip.IpTypeEnum Type { get; set; }//;
        
        // Key: version Type: ip.IpVersionEnum FullType: ip.IpVersionEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("version")]
        public required _ip.IpVersionEnum Version { get; set; }//;
    }
    
    // Id: IpMigrationToken Namespace: ip
    public class IpMigrationToken {
        
        // Key: customerId Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("customerId")]
        public required System.String CustomerId { get; set; }//;
        
        // Key: token Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("token")]
        public required System.String Token { get; set; }//;
    }
    
    // Id: IpTask Namespace: ip
    public class IpTask {
        
        // Key: comment Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("comment")]
        public System.String? Comment { get; set; }//;
        
        // Key: destination Type: ip.RoutedTo FullType: ip.RoutedTo
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("destination")]
        public _ip.RoutedTo? Destination { get; set; }//;
        
        // Key: doneDate Type: datetime FullType: datetime
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("doneDate")]
        public System.DateTime? DoneDate { get; set; }//;
        
        // Key: function Type: ip.TaskFunctionEnum FullType: ip.TaskFunctionEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("function")]
        public required _ip.TaskFunctionEnum Function { get; set; }//;
        
        // Key: lastUpdate Type: datetime FullType: datetime
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("lastUpdate")]
        public System.DateTime? LastUpdate { get; set; }//;
        
        // Key: startDate Type: datetime FullType: datetime
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("startDate")]
        public required System.DateTime StartDate { get; set; }//;
        
        // Key: status Type: ip.TaskStatusEnum FullType: ip.TaskStatusEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("status")]
        public required _ip.TaskStatusEnum Status { get; set; }//;
        
        // Key: taskId Type: long FullType: long
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("taskId")]
        public required System.Int64 TaskId { get; set; }//;
    }
    
    // Id: IpTypeEnum Namespace: ip
    public enum IpTypeEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("cdn")]
        cdn,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("cloud")]
        cloud,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("dedicated")]
        dedicated,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("failover")]
        failover,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("hosted_ssl")]
        hosted_ssl,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("housing")]
        housing,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("loadBalancing")]
        loadBalancing,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("mail")]
        mail,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("overthebox")]
        overthebox,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("pcc")]
        pcc,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("pci")]
        pci,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("private")]
        @private,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("vpn")]
        vpn,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("vps")]
        vps,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("vrack")]
        vrack,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("xdsl")]
        xdsl,
    }
    
    // Id: IpVersionEnum Namespace: ip
    public enum IpVersionEnum {
        
        _4 = 4,
        
        _6 = 6,
    }
    
    // Id: Ip Namespace: ip
    public class IpWithIAM {
        
        // Key: bringYourOwnIp Type: boolean FullType: boolean
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("bringYourOwnIp")]
        public required System.Boolean BringYourOwnIp { get; set; }//;
        
        // Key: campus Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("campus")]
        public System.String? Campus { get; set; }//;
        
        // Key: canBeTerminated Type: boolean FullType: boolean
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("canBeTerminated")]
        public required System.Boolean CanBeTerminated { get; set; }//;
        
        // Key: country Type: coreTypes.CountryEnum FullType: coreTypes.CountryEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("country")]
        public _coreTypes.CountryEnum? Country { get; set; }//;
        
        // Key: description Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("description")]
        public System.String? Description { get; set; }//;
        
        // Key: iam Type: iam.ResourceMetadata FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("iam")]
        public _iam.ResourceMetadata? Iam { get; set; }//;
        
        // Key: ip Type: ipBlock FullType: ipBlock
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ip")]
        public required System.String Ip { get; set; }//;
        
        // Key: isAdditionalIp Type: boolean FullType: boolean
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("isAdditionalIp")]
        public required System.Boolean IsAdditionalIp { get; set; }//;
        
        // Key: organisationId Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("organisationId")]
        public System.String? OrganisationId { get; set; }//;
        
        // Key: regions Type: coreTypes.RegionCodenameEnum[] FullType: coreTypes.RegionCodenameEnum[]
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("regions")]
        public _coreTypes.RegionCodenameEnum[]? Regions { get; set; }//;
        
        // Key: rir Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("rir")]
        public System.String? Rir { get; set; }//;
        
        // Key: routedTo Type: ip.RoutedTo FullType: ip.RoutedTo
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("routedTo")]
        public _ip.RoutedTo? RoutedTo { get; set; }//;
        
        // Key: type Type: ip.IpTypeEnum FullType: ip.IpTypeEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("type")]
        public required _ip.IpTypeEnum Type { get; set; }//;
        
        // Key: version Type: ip.IpVersionEnum FullType: ip.IpVersionEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("version")]
        public required _ip.IpVersionEnum Version { get; set; }//;
    }
    
    // Id: MitigationIp Namespace: ip
    public class MitigationIp {
        
        // Key: auto Type: boolean FullType: boolean
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("auto")]
        public required System.Boolean Auto { get; set; }//;
        
        // Key: ipOnMitigation Type: ipv4 FullType: ipv4
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ipOnMitigation")]
        public required System.String IpOnMitigation { get; set; }//;
        
        // Key: permanent Type: boolean FullType: boolean
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("permanent")]
        public required System.Boolean Permanent { get; set; }//;
        
        // Key: state Type: ip.MitigationStateEnum FullType: ip.MitigationStateEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("state")]
        public required _ip.MitigationStateEnum State { get; set; }//;
    }
    
    // Id: MitigationProfile Namespace: ip
    public class MitigationProfile {
        
        // Key: autoMitigationTimeOut Type: ip.MitigationProfileAutoMitigationTimeOutEnum FullType: ip.MitigationProfileAutoMitigationTimeOutEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("autoMitigationTimeOut")]
        public required _ip.MitigationProfileAutoMitigationTimeOutEnum AutoMitigationTimeOut { get; set; }//;
        
        // Key: ipMitigationProfile Type: ipv4 FullType: ipv4
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ipMitigationProfile")]
        public required System.String IpMitigationProfile { get; set; }//;
        
        // Key: state Type: ip.MitigationProfileStateEnum FullType: ip.MitigationProfileStateEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("state")]
        public required _ip.MitigationProfileStateEnum State { get; set; }//;
    }
    
    // Id: MitigationProfileAutoMitigationTimeOutEnum Namespace: ip
    public enum MitigationProfileAutoMitigationTimeOutEnum {
        
        _0 = 0,
        
        _15 = 15,
        
        _60 = 60,
        
        _360 = 360,
        
        _1560 = 1560,
    }
    
    // Id: MitigationProfileStateEnum Namespace: ip
    public enum MitigationProfileStateEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ok")]
        ok,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("tasksPending")]
        tasksPending,
    }
    
    // Id: MitigationStateEnum Namespace: ip
    public enum MitigationStateEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("creationPending")]
        creationPending,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ok")]
        ok,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("removalPending")]
        removalPending,
    }
    
    // Id: ReverseDelegation Namespace: ip
    public class ReverseDelegation {
        
        // Key: target Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("target")]
        public required System.String Target { get; set; }//;
    }
    
    // Id: ReverseIp Namespace: ip
    public class ReverseIp {
        
        // Key: ipReverse Type: ip FullType: ip
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ipReverse")]
        public required System.String IpReverse { get; set; }//;
        
        // Key: reverse Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("reverse")]
        public required System.String Reverse { get; set; }//;
    }
    
    // Id: RipeInfos Namespace: ip
    public class RipeInfos {
        
        // Key: description Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("description")]
        public System.String? Description { get; set; }//;
        
        // Key: netname Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("netname")]
        public System.String? Netname { get; set; }//;
    }
    
    // Id: RoutedTo Namespace: ip
    public class RoutedTo {
        
        // Key: serviceName Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("serviceName")]
        public System.String? ServiceName { get; set; }//;
    }
    
    // Id: ServiceIp Namespace: ip
    public class ServiceIp {
        
        // Key: canBeTerminated Type: boolean FullType: boolean
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("canBeTerminated")]
        public required System.Boolean CanBeTerminated { get; set; }//;
        
        // Key: country Type: coreTypes.CountryEnum FullType: coreTypes.CountryEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("country")]
        public _coreTypes.CountryEnum? Country { get; set; }//;
        
        // Key: description Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("description")]
        public System.String? Description { get; set; }//;
        
        // Key: ip Type: ipBlock FullType: ipBlock
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ip")]
        public required System.String Ip { get; set; }//;
        
        // Key: organisationId Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("organisationId")]
        public System.String? OrganisationId { get; set; }//;
        
        // Key: routedTo Type: ip.RoutedTo FullType: ip.RoutedTo
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("routedTo")]
        public _ip.RoutedTo? RoutedTo { get; set; }//;
        
        // Key: type Type: ip.IpTypeEnum FullType: ip.IpTypeEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("type")]
        public required _ip.IpTypeEnum Type { get; set; }//;
    }
    
    // Id: ServiceIp Namespace: ip
    public class ServiceIpWithIAM {
        
        // Key: canBeTerminated Type: boolean FullType: boolean
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("canBeTerminated")]
        public required System.Boolean CanBeTerminated { get; set; }//;
        
        // Key: country Type: coreTypes.CountryEnum FullType: coreTypes.CountryEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("country")]
        public _coreTypes.CountryEnum? Country { get; set; }//;
        
        // Key: description Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("description")]
        public System.String? Description { get; set; }//;
        
        // Key: iam Type: iam.ResourceMetadata FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("iam")]
        public _iam.ResourceMetadata? Iam { get; set; }//;
        
        // Key: ip Type: ipBlock FullType: ipBlock
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ip")]
        public required System.String Ip { get; set; }//;
        
        // Key: organisationId Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("organisationId")]
        public System.String? OrganisationId { get; set; }//;
        
        // Key: routedTo Type: ip.RoutedTo FullType: ip.RoutedTo
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("routedTo")]
        public _ip.RoutedTo? RoutedTo { get; set; }//;
        
        // Key: type Type: ip.IpTypeEnum FullType: ip.IpTypeEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("type")]
        public required _ip.IpTypeEnum Type { get; set; }//;
    }
    
    // Id: SpamIp Namespace: ip
    public class SpamIp {
        
        // Key: date Type: datetime FullType: datetime
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("date")]
        public required System.DateTime Date { get; set; }//;
        
        // Key: ipSpamming Type: ipv4 FullType: ipv4
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ipSpamming")]
        public required System.String IpSpamming { get; set; }//;
        
        // Key: state Type: ip.SpamStateEnum FullType: ip.SpamStateEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("state")]
        public required _ip.SpamStateEnum State { get; set; }//;
        
        // Key: time Type: long FullType: long
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("time")]
        public required System.Int64 Time { get; set; }//;
    }
    
    // Id: SpamStateEnum Namespace: ip
    public enum SpamStateEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("blockedForSpam")]
        blockedForSpam,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("unblocked")]
        unblocked,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("unblocking")]
        unblocking,
    }
    
    // Id: SpamStats Namespace: ip
    public class SpamStats {
        
        // Key: averageSpamscore Type: long FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("averageSpamscore")]
        public System.Int64? AverageSpamscore { get; set; }//;
        
        // Key: detectedSpams Type: ip.SpamTarget[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("detectedSpams")]
        public _ip.SpamTarget[]? DetectedSpams { get; set; }//;
        
        // Key: numberOfSpams Type: long FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("numberOfSpams")]
        public required System.Int64 NumberOfSpams { get; set; }//;
        
        // Key: timestamp Type: long FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("timestamp")]
        public required System.Int64 Timestamp { get; set; }//;
        
        // Key: total Type: long FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("total")]
        public required System.Int64 Total { get; set; }//;
    }
    
    // Id: SpamTarget Namespace: ip
    public class SpamTarget {
        
        // Key: date Type: long FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("date")]
        public required System.Int64 Date { get; set; }//;
        
        // Key: destinationIp Type: ipv4 FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("destinationIp")]
        public required System.String DestinationIp { get; set; }//;
        
        // Key: messageId Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("messageId")]
        public required System.String MessageId { get; set; }//;
        
        // Key: spamscore Type: long FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("spamscore")]
        public required System.Int64 Spamscore { get; set; }//;
    }
    
    // Id: TaskFunctionEnum Namespace: ip
    public enum TaskFunctionEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("arinBlockReassign")]
        arinBlockReassign,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("changeRipeOrg")]
        changeRipeOrg,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("checkAndReleaseIp")]
        checkAndReleaseIp,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("genericMoveFloatingIp")]
        genericMoveFloatingIp,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("supernetByoipFailoverPartitioning")]
        supernetByoipFailoverPartitioning,
    }
    
    // Id: TaskStatusEnum Namespace: ip
    public enum TaskStatusEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("cancelled")]
        cancelled,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("customerError")]
        customerError,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("doing")]
        doing,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("done")]
        done,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("init")]
        init,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ovhError")]
        ovhError,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("todo")]
        todo,
    }
}
