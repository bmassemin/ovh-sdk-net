//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
namespace _dedicated_server {
    
    
    // Id: AvailabilityEnum Namespace: dedicated.server
    public enum AvailabilityEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("120H")]
        _120H,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("1440H")]
        _1440H,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("1H-high")]
        _1H_high,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("1H-low")]
        _1H_low,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("2160H")]
        _2160H,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("240H")]
        _240H,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("24H")]
        _24H,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("480H")]
        _480H,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("720H")]
        _720H,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("72H")]
        _72H,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("comingSoon")]
        comingSoon,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("unavailable")]
        unavailable,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("unknown")]
        unknown,
    }
    
    // Id: AvailabilityRegionalizationEnum Namespace: dedicated.server
    public enum AvailabilityRegionalizationEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ap-south-1")]
        ap_south_1,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ap-southeast-sgp")]
        ap_southeast_sgp,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ap-southeast-syd")]
        ap_southeast_syd,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ca-east-1")]
        ca_east_1,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ca-east-bhs")]
        ca_east_bhs,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("eu-central-waw")]
        eu_central_waw,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("eu-west-eri")]
        eu_west_eri,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("eu-west-gra")]
        eu_west_gra,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("eu-west-lim")]
        eu_west_lim,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("eu-west-par")]
        eu_west_par,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("eu-west-rbx")]
        eu_west_rbx,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("eu-west-sbg")]
        eu_west_sbg,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("us-east-vin")]
        us_east_vin,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("us-west-hil")]
        us_west_hil,
    }
    
    // Id: BackupFtp Namespace: dedicated.server
    public class BackupFtp {
        
        // Key: ftpBackupName Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ftpBackupName")]
        public required System.String FtpBackupName { get; set; }//;
        
        // Key: quota Type: complexType.UnitAndValue<long> FullType: complexType.UnitAndValue<long>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("quota")]
        public _complexType.UnitAndValue<long>? Quota { get; set; }//;
        
        // Key: readOnlyDate Type: datetime FullType: datetime
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("readOnlyDate")]
        public System.DateTime? ReadOnlyDate { get; set; }//;
        
        // Key: type Type: dedicated.server.BackupStorageTypeEnum FullType: dedicated.server.BackupStorageTypeEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("type")]
        public required _dedicated_server.BackupStorageTypeEnum Type { get; set; }//;
        
        // Key: usage Type: complexType.UnitAndValue<long> FullType: complexType.UnitAndValue<long>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("usage")]
        public _complexType.UnitAndValue<long>? Usage { get; set; }//;
    }
    
    // Id: BackupFtpAcl Namespace: dedicated.server
    public class BackupFtpAcl {
        
        // Key: cifs Type: boolean FullType: boolean
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("cifs")]
        public required System.Boolean Cifs { get; set; }//;
        
        // Key: ftp Type: boolean FullType: boolean
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ftp")]
        public required System.Boolean Ftp { get; set; }//;
        
        // Key: ipBlock Type: ipBlock FullType: ipBlock
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ipBlock")]
        public required System.String IpBlock { get; set; }//;
        
        // Key: isApplied Type: boolean FullType: boolean
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("isApplied")]
        public required System.Boolean IsApplied { get; set; }//;
        
        // Key: lastUpdate Type: datetime FullType: datetime
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("lastUpdate")]
        public required System.DateTime LastUpdate { get; set; }//;
        
        // Key: nfs Type: boolean FullType: boolean
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("nfs")]
        public required System.Boolean Nfs { get; set; }//;
    }
    
    // Id: BackupStorageTypeEnum Namespace: dedicated.server
    public enum BackupStorageTypeEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("included")]
        included,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("storage")]
        storage,
    }
    
    // Id: Task Namespace: dedicated.server
    public class Task {
        
        // Key: comment Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("comment")]
        public System.String? Comment { get; set; }//;
        
        // Key: doneDate Type: datetime FullType: datetime
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("doneDate")]
        public System.DateTime? DoneDate { get; set; }//;
        
        // Key: function Type: dedicated.TaskFunctionEnum FullType: dedicated.TaskFunctionEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("function")]
        public required _dedicated.TaskFunctionEnum Function { get; set; }//;
        
        // Key: lastUpdate Type: datetime FullType: datetime
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("lastUpdate")]
        public System.DateTime? LastUpdate { get; set; }//;
        
        // Key: needSchedule Type: boolean FullType: boolean
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("needSchedule")]
        public required System.Boolean NeedSchedule { get; set; }//;
        
        // Key: note Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("note")]
        public System.String? Note { get; set; }//;
        
        // Key: plannedInterventionId Type: long FullType: long
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("plannedInterventionId")]
        public System.Int64? PlannedInterventionId { get; set; }//;
        
        // Key: startDate Type: datetime FullType: datetime
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("startDate")]
        public required System.DateTime StartDate { get; set; }//;
        
        // Key: status Type: dedicated.TaskStatusEnum FullType: dedicated.TaskStatusEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("status")]
        public required _dedicated.TaskStatusEnum Status { get; set; }//;
        
        // Key: tags Type: complexType.SafeKeyValueCanBeNull<string>[] FullType: complexType.SafeKeyValueCanBeNull<string>[]
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("tags")]
        public _complexType.SafeKeyValueCanBeNull<string>? Tags { get; set; }//;
        
        // Key: taskId Type: long FullType: long
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("taskId")]
        public required System.Int64 TaskId { get; set; }//;
        
        // Key: ticketReference Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ticketReference")]
        public System.String? TicketReference { get; set; }//;
    }
    
    // Id: BitFormatEnum Namespace: dedicated.server
    public enum BitFormatEnum {
        
        _32 = 32,
        
        _64 = 64,
    }
    
    // Id: FileSystemEnum Namespace: dedicated.server
    public enum FileSystemEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("btrfs")]
        btrfs,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ext3")]
        ext3,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ext4")]
        ext4,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("fat16")]
        fat16,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("none")]
        none,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ntfs")]
        ntfs,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("reiserfs")]
        reiserfs,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("swap")]
        swap,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ufs")]
        ufs,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("vmfs5")]
        vmfs5,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("vmfs6")]
        vmfs6,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("vmfsl")]
        vmfsl,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("xfs")]
        xfs,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("zfs")]
        zfs,
    }
    
    // Id: PartitionRaidEnum Namespace: dedicated.server
    public enum PartitionRaidEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("0")]
        _0,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("1")]
        _1,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("10")]
        _10,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("5")]
        _5,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("6")]
        _6,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("7")]
        _7,
    }
    
    // Id: Access Namespace: dedicated.server
    public class Access {
        
        // Key: password Type: password FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("password")]
        public System.String? Password { get; set; }//;
        
        // Key: type Type: dedicated.server.AccessTypeEnum FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("type")]
        public required _dedicated_server.AccessTypeEnum Type { get; set; }//;
        
        // Key: url Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("url")]
        public System.String? Url { get; set; }//;
        
        // Key: user Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("user")]
        public System.String? User { get; set; }//;
    }
    
    // Id: AccessTypeEnum Namespace: dedicated.server
    public enum AccessTypeEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("DIRECTADMIN_PANEL")]
        DIRECTADMIN_PANEL,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("PLESK_PANEL")]
        PLESK_PANEL,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("PROXMOX_PANEL")]
        PROXMOX_PANEL,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("RDP")]
        RDP,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("SQL_SERVER")]
        SQL_SERVER,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("SSH")]
        SSH,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("WEB_PANEL")]
        WEB_PANEL,
    }
    
    // Id: AddonFamilyEnum Namespace: dedicated.server
    public enum AddonFamilyEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("memory")]
        memory,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("storage")]
        storage,
    }
    
    // Id: AvailabilityByRegion Namespace: dedicated.server
    public class AvailabilityByRegion {
        
        // Key: availability Type: dedicated.server.AvailabilityEnum FullType: dedicated.server.AvailabilityEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("availability")]
        public required _dedicated_server.AvailabilityEnum Availability { get; set; }//;
        
        // Key: availabilityZones Type: dedicated.server.AvailabilityZones[] FullType: dedicated.server.AvailabilityZones[]
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("availabilityZones")]
        public required _dedicated_server.AvailabilityZones[] AvailabilityZones { get; set; }//;
        
        // Key: region Type: dedicated.server.AvailabilityRegionalizationEnum FullType: dedicated.server.AvailabilityRegionalizationEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("region")]
        public required _dedicated_server.AvailabilityRegionalizationEnum Region { get; set; }//;
    }
    
    // Id: AvailabilityZones Namespace: dedicated.server
    public class AvailabilityZones {
        
        // Key: availability Type: dedicated.server.AvailabilityEnum FullType: dedicated.server.AvailabilityEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("availability")]
        public required _dedicated_server.AvailabilityEnum Availability { get; set; }//;
        
        // Key: availabilityZone Type: dedicated.server.AvailabilityZonesEnum FullType: dedicated.server.AvailabilityZonesEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("availabilityZone")]
        public required _dedicated_server.AvailabilityZonesEnum AvailabilityZone { get; set; }//;
    }
    
    // Id: AvailabilityZonesEnum Namespace: dedicated.server
    public enum AvailabilityZonesEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ap-south-1-a")]
        ap_south_1_a,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ap-southeast-sgp-a")]
        ap_southeast_sgp_a,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ap-southeast-syd-a")]
        ap_southeast_syd_a,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ca-east-1-a")]
        ca_east_1_a,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ca-east-bhs-a")]
        ca_east_bhs_a,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("eu-central-waw-a")]
        eu_central_waw_a,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("eu-west-1-a")]
        eu_west_1_a,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("eu-west-1-b")]
        eu_west_1_b,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("eu-west-1-c")]
        eu_west_1_c,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("eu-west-eri-a")]
        eu_west_eri_a,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("eu-west-gra-a")]
        eu_west_gra_a,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("eu-west-lim-a")]
        eu_west_lim_a,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("eu-west-rbx-a")]
        eu_west_rbx_a,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("eu-west-sbg-a")]
        eu_west_sbg_a,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("us-east-vin-a")]
        us_east_vin_a,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("us-west-hil-a")]
        us_west_hil_a,
    }
    
    // Id: BMC Namespace: dedicated.server
    public class BMC {
        
        // Key: available Type: boolean FullType: boolean
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("available")]
        public required System.Boolean Available { get; set; }//;
        
        // Key: supportedFeatures Type: dedicated.server.BmcSupportedFeatures FullType: dedicated.server.BmcSupportedFeatures
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("supportedFeatures")]
        public required _dedicated_server.BmcSupportedFeatures SupportedFeatures { get; set; }//;
    }
    
    // Id: BackupCloud Namespace: dedicated.server
    public class BackupCloud {
        
        // Key: agreements Type: long[] FullType: long[]
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("agreements")]
        public System.Int64[]? Agreements { get; set; }//;
        
        // Key: archive Type: dedicated.server.backup.BackupContainer FullType: dedicated.server.backup.BackupContainer
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("archive")]
        public _dedicated_server_backup.BackupContainer? Archive { get; set; }//;
        
        // Key: status Type: dedicated.server.backup.BackupStatus FullType: dedicated.server.backup.BackupStatus
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("status")]
        public required _dedicated_server_backup.BackupStatus Status { get; set; }//;
        
        // Key: storage Type: dedicated.server.backup.BackupContainer FullType: dedicated.server.backup.BackupContainer
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("storage")]
        public _dedicated_server_backup.BackupContainer? Storage { get; set; }//;
    }
    
    // Id: BackupStorageCapacityEnum Namespace: dedicated.server
    public enum BackupStorageCapacityEnum {
        
        _500 = 500,
        
        _1000 = 1000,
        
        _5000 = 5000,
        
        _10000 = 10000,
    }
    
    // Id: BackupStorageOrderable Namespace: dedicated.server
    public class BackupStorageOrderable {
        
        // Key: capacities Type: dedicated.server.BackupStorageCapacityEnum[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("capacities")]
        public _dedicated_server.BackupStorageCapacityEnum[]? Capacities { get; set; }//;
        
        // Key: orderable Type: boolean FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("orderable")]
        public required System.Boolean Orderable { get; set; }//;
    }
    
    // Id: BandwidthDetails Namespace: dedicated.server
    public class BandwidthDetails {
        
        // Key: InternetToOvh Type: complexType.UnitAndValue<long> FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("InternetToOvh")]
        public _complexType.UnitAndValue<long>? InternetToOvh { get; set; }//;
        
        // Key: OvhToInternet Type: complexType.UnitAndValue<long> FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("OvhToInternet")]
        public _complexType.UnitAndValue<long>? OvhToInternet { get; set; }//;
        
        // Key: OvhToOvh Type: complexType.UnitAndValue<long> FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("OvhToOvh")]
        public _complexType.UnitAndValue<long>? OvhToOvh { get; set; }//;
        
        // Key: type Type: dedicated.server.BandwidthTypeEnum FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("type")]
        public _dedicated_server.BandwidthTypeEnum? Type { get; set; }//;
    }
    
    // Id: BandwidthOrderEnum Namespace: dedicated.server
    public enum BandwidthOrderEnum {
        
        _1000 = 1000,
        
        _2000 = 2000,
        
        _3000 = 3000,
    }
    
    // Id: BandwidthOrderable Namespace: dedicated.server
    public class BandwidthOrderable {
        
        // Key: orderable Type: boolean FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("orderable")]
        public required System.Boolean Orderable { get; set; }//;
        
        // Key: platinum Type: dedicated.server.BandwidthOrderEnum[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("platinum")]
        public _dedicated_server.BandwidthOrderEnum[]? Platinum { get; set; }//;
        
        // Key: premium Type: dedicated.server.BandwidthOrderEnum[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("premium")]
        public _dedicated_server.BandwidthOrderEnum[]? Premium { get; set; }//;
        
        // Key: ultimate Type: dedicated.server.BandwidthOrderEnum[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ultimate")]
        public _dedicated_server.BandwidthOrderEnum[]? Ultimate { get; set; }//;
    }
    
    // Id: BandwidthTypeEnum Namespace: dedicated.server
    public enum BandwidthTypeEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("improved")]
        improved,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("included")]
        included,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("platinum")]
        platinum,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("premium")]
        premium,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("standard")]
        standard,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ultimate")]
        ultimate,
    }
    
    // Id: BandwidthvRackDetails Namespace: dedicated.server
    public class BandwidthvRackDetails {
        
        // Key: bandwidth Type: complexType.UnitAndValue<long> FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("bandwidth")]
        public _complexType.UnitAndValue<long>? Bandwidth { get; set; }//;
        
        // Key: type Type: dedicated.server.BandwidthvRackTypeEnum FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("type")]
        public _dedicated_server.BandwidthvRackTypeEnum? Type { get; set; }//;
    }
    
    // Id: BandwidthvRackOrderEnum Namespace: dedicated.server
    public enum BandwidthvRackOrderEnum {
        
        _1000 = 1000,
        
        _3000 = 3000,
    }
    
    // Id: BandwidthvRackOrderable Namespace: dedicated.server
    public class BandwidthvRackOrderable {
        
        // Key: orderable Type: boolean FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("orderable")]
        public required System.Boolean Orderable { get; set; }//;
        
        // Key: vrack Type: dedicated.server.BandwidthvRackOrderEnum[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("vrack")]
        public _dedicated_server.BandwidthvRackOrderEnum[]? Vrack { get; set; }//;
    }
    
    // Id: BandwidthvRackTypeEnum Namespace: dedicated.server
    public enum BandwidthvRackTypeEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("included")]
        included,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("standard")]
        standard,
    }
    
    // Id: BillingAddon Namespace: dedicated.server
    public class BillingAddon {
        
        // Key: family Type: dedicated.server.AddonFamilyEnum FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("family")]
        public required _dedicated_server.AddonFamilyEnum Family { get; set; }//;
        
        // Key: planCode Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("planCode")]
        public required System.String PlanCode { get; set; }//;
    }
    
    // Id: BiosSettingsSgxPrmrrEnum Namespace: dedicated.server
    public enum BiosSettingsSgxPrmrrEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("128")]
        _128,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("131072")]
        _131072,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("16384")]
        _16384,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("2048")]
        _2048,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("256")]
        _256,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("32")]
        _32,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("32768")]
        _32768,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("4096")]
        _4096,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("512")]
        _512,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("64")]
        _64,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("65536")]
        _65536,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("8192")]
        _8192,
    }
    
    // Id: BiosSettingsSgxStatusEnum Namespace: dedicated.server
    public enum BiosSettingsSgxStatusEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("disabled")]
        disabled,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("enabled")]
        enabled,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("software controlled")]
        software_controlled,
    }
    
    // Id: BiosSettingsSupport Namespace: dedicated.server
    public class BiosSettingsSupport {
        
        // Key: sgx Type: boolean FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("sgx")]
        public required System.Boolean Sgx { get; set; }//;
        
        // Key: sgxOptions Type: dedicated.server.BiosSettingsSupportSgxOptions FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("sgxOptions")]
        public required _dedicated_server.BiosSettingsSupportSgxOptions SgxOptions { get; set; }//;
    }
    
    // Id: BiosSettingsSupportSgxOptions Namespace: dedicated.server
    public class BiosSettingsSupportSgxOptions {
        
        // Key: prmrr Type: dedicated.server.BiosSettingsSgxPrmrrEnum[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("prmrr")]
        public required _dedicated_server.BiosSettingsSgxPrmrrEnum[] Prmrr { get; set; }//;
        
        // Key: status Type: dedicated.server.BiosSettingsSgxStatusEnum[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("status")]
        public required _dedicated_server.BiosSettingsSgxStatusEnum[] Status { get; set; }//;
    }
    
    // Id: BmcJavaKvmValue Namespace: dedicated.server
    public class BmcJavaKvmValue {
        
        // Key: expirationDate Type: datetime FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("expirationDate")]
        public required System.DateTime ExpirationDate { get; set; }//;
        
        // Key: jnlp Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("jnlp")]
        public required System.String Jnlp { get; set; }//;
    }
    
    // Id: BmcSshSolValue Namespace: dedicated.server
    public class BmcSshSolValue {
        
        // Key: expirationDate Type: datetime FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("expirationDate")]
        public required System.DateTime ExpirationDate { get; set; }//;
        
        // Key: uri Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("uri")]
        public required System.String Uri { get; set; }//;
    }
    
    // Id: BmcSupportedFeatures Namespace: dedicated.server
    public class BmcSupportedFeatures {
        
        // Key: javaKvm Type: boolean FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("javaKvm")]
        public required System.Boolean JavaKvm { get; set; }//;
        
        // Key: sshSol Type: boolean FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("sshSol")]
        public required System.Boolean SshSol { get; set; }//;
        
        // Key: testPassword Type: boolean FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("testPassword")]
        public required System.Boolean TestPassword { get; set; }//;
        
        // Key: testPing Type: boolean FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("testPing")]
        public required System.Boolean TestPing { get; set; }//;
        
        // Key: testWeb Type: boolean FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("testWeb")]
        public required System.Boolean TestWeb { get; set; }//;
        
        // Key: webKvm Type: boolean FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("webKvm")]
        public required System.Boolean WebKvm { get; set; }//;
        
        // Key: webSol Type: boolean FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("webSol")]
        public required System.Boolean WebSol { get; set; }//;
    }
    
    // Id: BmcTestResult Namespace: dedicated.server
    public class BmcTestResult {
        
        // Key: expirationDate Type: datetime FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("expirationDate")]
        public required System.DateTime ExpirationDate { get; set; }//;
        
        // Key: message Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("message")]
        public System.String? Message { get; set; }//;
        
        // Key: status Type: boolean FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("status")]
        public required System.Boolean Status { get; set; }//;
    }
    
    // Id: BmcTestTypeEnum Namespace: dedicated.server
    public enum BmcTestTypeEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("password")]
        password,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ping")]
        ping,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("web")]
        web,
    }
    
    // Id: BmcWebKvmValue Namespace: dedicated.server
    public class BmcWebKvmValue {
        
        // Key: expirationDate Type: datetime FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("expirationDate")]
        public required System.DateTime ExpirationDate { get; set; }//;
        
        // Key: url Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("url")]
        public required System.String Url { get; set; }//;
    }
    
    // Id: BmcWebSolValue Namespace: dedicated.server
    public class BmcWebSolValue {
        
        // Key: expirationDate Type: datetime FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("expirationDate")]
        public required System.DateTime ExpirationDate { get; set; }//;
        
        // Key: url Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("url")]
        public required System.String Url { get; set; }//;
    }
    
    // Id: BootModeEnum Namespace: dedicated.server
    public enum BootModeEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("legacy")]
        legacy,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("uefi")]
        uefi,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("uefi-legacy")]
        uefi_legacy,
    }
    
    // Id: BootOptionEnum Namespace: dedicated.server
    public enum BootOptionEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("cpufamily")]
        cpufamily,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("grsec")]
        grsec,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ipv6")]
        ipv6,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("smp")]
        smp,
    }
    
    // Id: BootTypeEnum Namespace: dedicated.server
    public enum BootTypeEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("harddisk")]
        harddisk,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("internal")]
        @internal,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("network")]
        network,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("power")]
        power,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("rescue")]
        rescue,
    }
    
    // Id: BurstStatusEnum Namespace: dedicated.server
    public enum BurstStatusEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("active")]
        active,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("inactive")]
        inactive,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("inactiveLocked")]
        inactiveLocked,
    }
    
    // Id: CacheTTLEnum Namespace: dedicated.server
    public enum CacheTTLEnum {
        
        _1 = 1,
        
        _3 = 3,
        
        _5 = 5,
        
        _10 = 10,
        
        _15 = 15,
    }
    
    // Id: CpuFamilyEnum Namespace: dedicated.server
    public enum CpuFamilyEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("arm64")]
        arm64,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("armhf32")]
        armhf32,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ppc64")]
        ppc64,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("x86")]
        x86,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("x86-ht")]
        x86_ht,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("x86_64")]
        x86_64,
    }
    
    // Id: Dedicated Namespace: dedicated.server
    public class Dedicated {
        
        // Key: availabilityZone Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("availabilityZone")]
        public required System.String AvailabilityZone { get; set; }//;
        
        // Key: bootId Type: long FullType: long
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("bootId")]
        public System.Int64? BootId { get; set; }//;
        
        // Key: bootScript Type: text FullType: text
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("bootScript")]
        public System.String? BootScript { get; set; }//;
        
        // Key: commercialRange Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("commercialRange")]
        public System.String? CommercialRange { get; set; }//;
        
        // Key: datacenter Type: dedicated.DatacenterEnum FullType: dedicated.DatacenterEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("datacenter")]
        public required _dedicated.DatacenterEnum Datacenter { get; set; }//;
        
        // Key: efiBootloaderPath Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("efiBootloaderPath")]
        public System.String? EfiBootloaderPath { get; set; }//;
        
        // Key: ip Type: ipv4 FullType: ipv4
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ip")]
        public required System.String Ip { get; set; }//;
        
        // Key: linkSpeed Type: long FullType: long
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("linkSpeed")]
        public System.Int64? LinkSpeed { get; set; }//;
        
        // Key: monitoring Type: boolean FullType: boolean
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("monitoring")]
        public required System.Boolean Monitoring { get; set; }//;
        
        // Key: name Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("name")]
        public required System.String Name { get; set; }//;
        
        // Key: newUpgradeSystem Type: boolean FullType: boolean
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("newUpgradeSystem")]
        public required System.Boolean NewUpgradeSystem { get; set; }//;
        
        // Key: noIntervention Type: boolean FullType: boolean
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("noIntervention")]
        public required System.Boolean NoIntervention { get; set; }//;
        
        // Key: os Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("os")]
        public required System.String Os { get; set; }//;
        
        // Key: powerState Type: dedicated.server.PowerStateEnum FullType: dedicated.server.PowerStateEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("powerState")]
        public required _dedicated_server.PowerStateEnum PowerState { get; set; }//;
        
        // Key: professionalUse Type: boolean FullType: boolean
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("professionalUse")]
        public required System.Boolean ProfessionalUse { get; set; }//;
        
        // Key: rack Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("rack")]
        public required System.String Rack { get; set; }//;
        
        // Key: region Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("region")]
        public required System.String Region { get; set; }//;
        
        // Key: rescueMail Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("rescueMail")]
        public System.String? RescueMail { get; set; }//;
        
        // Key: rescueSshKey Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("rescueSshKey")]
        public System.String? RescueSshKey { get; set; }//;
        
        // Key: reverse Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("reverse")]
        public System.String? Reverse { get; set; }//;
        
        // Key: rootDevice Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("rootDevice")]
        public System.String? RootDevice { get; set; }//;
        
        // Key: serverId Type: long FullType: long
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("serverId")]
        public required System.Int64 ServerId { get; set; }//;
        
        // Key: state Type: dedicated.server.StateEnum FullType: dedicated.server.StateEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("state")]
        public required _dedicated_server.StateEnum State { get; set; }//;
        
        // Key: supportLevel Type: dedicated.server.SupportLevelEnum FullType: dedicated.server.SupportLevelEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("supportLevel")]
        public required _dedicated_server.SupportLevelEnum SupportLevel { get; set; }//;
    }
    
    // Id: Dedicated Namespace: dedicated.server
    public class DedicatedWithIAM {
        
        // Key: availabilityZone Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("availabilityZone")]
        public required System.String AvailabilityZone { get; set; }//;
        
        // Key: bootId Type: long FullType: long
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("bootId")]
        public System.Int64? BootId { get; set; }//;
        
        // Key: bootScript Type: text FullType: text
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("bootScript")]
        public System.String? BootScript { get; set; }//;
        
        // Key: commercialRange Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("commercialRange")]
        public System.String? CommercialRange { get; set; }//;
        
        // Key: datacenter Type: dedicated.DatacenterEnum FullType: dedicated.DatacenterEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("datacenter")]
        public required _dedicated.DatacenterEnum Datacenter { get; set; }//;
        
        // Key: efiBootloaderPath Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("efiBootloaderPath")]
        public System.String? EfiBootloaderPath { get; set; }//;
        
        // Key: iam Type: iam.ResourceMetadata FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("iam")]
        public _iam.ResourceMetadata? Iam { get; set; }//;
        
        // Key: ip Type: ipv4 FullType: ipv4
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ip")]
        public required System.String Ip { get; set; }//;
        
        // Key: linkSpeed Type: long FullType: long
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("linkSpeed")]
        public System.Int64? LinkSpeed { get; set; }//;
        
        // Key: monitoring Type: boolean FullType: boolean
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("monitoring")]
        public required System.Boolean Monitoring { get; set; }//;
        
        // Key: name Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("name")]
        public required System.String Name { get; set; }//;
        
        // Key: newUpgradeSystem Type: boolean FullType: boolean
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("newUpgradeSystem")]
        public required System.Boolean NewUpgradeSystem { get; set; }//;
        
        // Key: noIntervention Type: boolean FullType: boolean
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("noIntervention")]
        public required System.Boolean NoIntervention { get; set; }//;
        
        // Key: os Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("os")]
        public required System.String Os { get; set; }//;
        
        // Key: powerState Type: dedicated.server.PowerStateEnum FullType: dedicated.server.PowerStateEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("powerState")]
        public required _dedicated_server.PowerStateEnum PowerState { get; set; }//;
        
        // Key: professionalUse Type: boolean FullType: boolean
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("professionalUse")]
        public required System.Boolean ProfessionalUse { get; set; }//;
        
        // Key: rack Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("rack")]
        public required System.String Rack { get; set; }//;
        
        // Key: region Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("region")]
        public required System.String Region { get; set; }//;
        
        // Key: rescueMail Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("rescueMail")]
        public System.String? RescueMail { get; set; }//;
        
        // Key: rescueSshKey Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("rescueSshKey")]
        public System.String? RescueSshKey { get; set; }//;
        
        // Key: reverse Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("reverse")]
        public System.String? Reverse { get; set; }//;
        
        // Key: rootDevice Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("rootDevice")]
        public System.String? RootDevice { get; set; }//;
        
        // Key: serverId Type: long FullType: long
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("serverId")]
        public required System.Int64 ServerId { get; set; }//;
        
        // Key: state Type: dedicated.server.StateEnum FullType: dedicated.server.StateEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("state")]
        public required _dedicated_server.StateEnum State { get; set; }//;
        
        // Key: supportLevel Type: dedicated.server.SupportLevelEnum FullType: dedicated.server.SupportLevelEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("supportLevel")]
        public required _dedicated_server.SupportLevelEnum SupportLevel { get; set; }//;
    }
    
    // Id: DiskTypeEnum Namespace: dedicated.server
    public enum DiskTypeEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("NVMe")]
        NVMe,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("SAS")]
        SAS,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("SATA")]
        SATA,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("SSD")]
        SSD,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("Unknown")]
        Unknown,
    }
    
    // Id: Firewall Namespace: dedicated.server
    public class Firewall {
        
        // Key: enabled Type: boolean FullType: boolean
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("enabled")]
        public required System.Boolean Enabled { get; set; }//;
        
        // Key: firewall Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("firewall")]
        public required System.String _Firewall { get; set; }//;
        
        // Key: ip Type: ipv4 FullType: ipv4
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ip")]
        public required System.String Ip { get; set; }//;
        
        // Key: mode Type: dedicated.server.FirewallModeEnum FullType: dedicated.server.FirewallModeEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("mode")]
        public required _dedicated_server.FirewallModeEnum Mode { get; set; }//;
        
        // Key: model Type: dedicated.server.FirewallModelEnum FullType: dedicated.server.FirewallModelEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("model")]
        public _dedicated_server.FirewallModelEnum? Model { get; set; }//;
    }
    
    // Id: FirewallModeEnum Namespace: dedicated.server
    public enum FirewallModeEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("routed")]
        routed,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("transparent")]
        transparent,
    }
    
    // Id: FirewallModelEnum Namespace: dedicated.server
    public enum FirewallModelEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("asa5505")]
        asa5505,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("asa5510")]
        asa5510,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("asa5520")]
        asa5520,
    }
    
    // Id: FormFactorEnum Namespace: dedicated.server
    public enum FormFactorEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("0.25u")]
        _0_25u,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("0.5u")]
        _0_5u,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("1u")]
        _1u,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("2u")]
        _2u,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("3u")]
        _3u,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("4u")]
        _4u,
    }
    
    // Id: HardwareRaidConfiguration Namespace: dedicated.server
    public class HardwareRaidConfiguration {
        
        // Key: capacity Type: complexType.UnitAndValue<long> FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("capacity")]
        public required _complexType.UnitAndValue<long> Capacity { get; set; }//;
        
        // Key: diskCount Type: long FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("diskCount")]
        public required System.Int64 DiskCount { get; set; }//;
        
        // Key: diskSize Type: complexType.UnitAndValue<long> FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("diskSize")]
        public required _complexType.UnitAndValue<long> DiskSize { get; set; }//;
        
        // Key: diskSpanSize Type: long FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("diskSpanSize")]
        public required System.Int64 DiskSpanSize { get; set; }//;
        
        // Key: mode Type: dedicated.server.HardwareSpecificationsRaidHardEnum FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("mode")]
        public required _dedicated_server.HardwareSpecificationsRaidHardEnum Mode { get; set; }//;
        
        // Key: name Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("name")]
        public required System.String Name { get; set; }//;
        
        // Key: type Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("type")]
        public required System.String Type { get; set; }//;
    }
    
    // Id: HardwareRaidController Namespace: dedicated.server
    public class HardwareRaidController {
        
        // Key: disks Type: dedicated.server.HardwareRaidDiskGroup[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("disks")]
        public required _dedicated_server.HardwareRaidDiskGroup[] Disks { get; set; }//;
        
        // Key: model Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("model")]
        public required System.String Model { get; set; }//;
        
        // Key: type Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("type")]
        public required System.String Type { get; set; }//;
    }
    
    // Id: HardwareRaidDiskGroup Namespace: dedicated.server
    public class HardwareRaidDiskGroup {
        
        // Key: capacity Type: complexType.UnitAndValue<long> FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("capacity")]
        public required _complexType.UnitAndValue<long> Capacity { get; set; }//;
        
        // Key: names Type: string[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("names")]
        public required System.String[] Names { get; set; }//;
        
        // Key: speed Type: complexType.UnitAndValue<string> FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("speed")]
        public required _complexType.UnitAndValue<string> Speed { get; set; }//;
        
        // Key: type Type: dedicated.server.DiskTypeEnum FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("type")]
        public required _dedicated_server.DiskTypeEnum Type { get; set; }//;
    }
    
    // Id: HardwareRaidProfile Namespace: dedicated.server
    public class HardwareRaidProfile {
        
        // Key: controllers Type: dedicated.server.HardwareRaidController[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("controllers")]
        public required _dedicated_server.HardwareRaidController[] Controllers { get; set; }//;
    }
    
    // Id: HardwareRaidSize Namespace: dedicated.server
    public class HardwareRaidSize {
        
        // Key: configurations Type: dedicated.server.HardwareRaidConfiguration[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("configurations")]
        public required _dedicated_server.HardwareRaidConfiguration[] Configurations { get; set; }//;
    }
    
    // Id: HardwareSpecifications Namespace: dedicated.server
    public class HardwareSpecifications {
        
        // Key: bootMode Type: dedicated.server.BootModeEnum FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("bootMode")]
        public required _dedicated_server.BootModeEnum BootMode { get; set; }//;
        
        // Key: coresPerProcessor Type: long FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("coresPerProcessor")]
        public System.Int64? CoresPerProcessor { get; set; }//;
        
        // Key: defaultHardwareRaidSize Type: complexType.UnitAndValue<long> FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("defaultHardwareRaidSize")]
        public _complexType.UnitAndValue<long>? DefaultHardwareRaidSize { get; set; }//;
        
        // Key: defaultHardwareRaidType Type: dedicated.server.HardwareSpecificationsRaidHardEnum FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("defaultHardwareRaidType")]
        public _dedicated_server.HardwareSpecificationsRaidHardEnum? DefaultHardwareRaidType { get; set; }//;
        
        // Key: description Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("description")]
        public System.String? Description { get; set; }//;
        
        // Key: diskGroups Type: dedicated.server.HardwareSpecificationsDisk[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("diskGroups")]
        public _dedicated_server.HardwareSpecificationsDisk[]? DiskGroups { get; set; }//;
        
        // Key: expansionCards Type: dedicated.server.HardwareSpecificationsExpansionCard[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("expansionCards")]
        public _dedicated_server.HardwareSpecificationsExpansionCard[]? ExpansionCards { get; set; }//;
        
        // Key: formFactor Type: dedicated.server.FormFactorEnum FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("formFactor")]
        public _dedicated_server.FormFactorEnum? FormFactor { get; set; }//;
        
        // Key: memorySize Type: complexType.UnitAndValue<long> FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("memorySize")]
        public _complexType.UnitAndValue<long>? MemorySize { get; set; }//;
        
        // Key: motherboard Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("motherboard")]
        public System.String? Motherboard { get; set; }//;
        
        // Key: numberOfProcessors Type: long FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("numberOfProcessors")]
        public System.Int64? NumberOfProcessors { get; set; }//;
        
        // Key: processorArchitecture Type: dedicated.server.CpuFamilyEnum FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("processorArchitecture")]
        public _dedicated_server.CpuFamilyEnum? ProcessorArchitecture { get; set; }//;
        
        // Key: processorName Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("processorName")]
        public System.String? ProcessorName { get; set; }//;
        
        // Key: threadsPerProcessor Type: long FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("threadsPerProcessor")]
        public System.Int64? ThreadsPerProcessor { get; set; }//;
        
        // Key: usbKeys Type: complexType.UnitAndValue<long>[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("usbKeys")]
        public _complexType.UnitAndValue<long>? UsbKeys { get; set; }//;
    }
    
    // Id: HardwareSpecificationsDisk Namespace: dedicated.server
    public class HardwareSpecificationsDisk {
        
        // Key: defaultHardwareRaidSize Type: complexType.UnitAndValue<long> FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("defaultHardwareRaidSize")]
        public _complexType.UnitAndValue<long>? DefaultHardwareRaidSize { get; set; }//;
        
        // Key: defaultHardwareRaidType Type: dedicated.server.HardwareSpecificationsRaidHardEnum FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("defaultHardwareRaidType")]
        public _dedicated_server.HardwareSpecificationsRaidHardEnum? DefaultHardwareRaidType { get; set; }//;
        
        // Key: description Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("description")]
        public System.String? Description { get; set; }//;
        
        // Key: diskGroupId Type: long FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("diskGroupId")]
        public System.Int64? DiskGroupId { get; set; }//;
        
        // Key: diskSize Type: complexType.UnitAndValue<long> FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("diskSize")]
        public _complexType.UnitAndValue<long>? DiskSize { get; set; }//;
        
        // Key: diskType Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("diskType")]
        public System.String? DiskType { get; set; }//;
        
        // Key: numberOfDisks Type: long FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("numberOfDisks")]
        public System.Int64? NumberOfDisks { get; set; }//;
        
        // Key: raidController Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("raidController")]
        public System.String? RaidController { get; set; }//;
    }
    
    // Id: HardwareSpecificationsExpansionCard Namespace: dedicated.server
    public class HardwareSpecificationsExpansionCard {
        
        // Key: description Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("description")]
        public required System.String Description { get; set; }//;
        
        // Key: type Type: dedicated.server.HardwareSpecificationsExpansionCardTypeEnum FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("type")]
        public required _dedicated_server.HardwareSpecificationsExpansionCardTypeEnum Type { get; set; }//;
    }
    
    // Id: HardwareSpecificationsExpansionCardTypeEnum Namespace: dedicated.server
    public enum HardwareSpecificationsExpansionCardTypeEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("fpga")]
        fpga,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("gpu")]
        gpu,
    }
    
    // Id: HardwareSpecificationsRaidHardEnum Namespace: dedicated.server
    public enum HardwareSpecificationsRaidHardEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("raid0")]
        raid0,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("raid1")]
        raid1,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("raid10")]
        raid10,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("raid1E")]
        raid1E,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("raid5")]
        raid5,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("raid50")]
        raid50,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("raid6")]
        raid6,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("raid60")]
        raid60,
    }
    
    // Id: InstallCustom Namespace: dedicated.server
    public class InstallCustom {
        
        // Key: customHostname Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("customHostname")]
        public System.String? CustomHostname { get; set; }//;
        
        // Key: diskGroupId Type: long FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("diskGroupId")]
        public System.Int64? DiskGroupId { get; set; }//;
        
        // Key: noRaid Type: boolean FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("noRaid")]
        public System.Boolean? NoRaid { get; set; }//;
        
        // Key: postInstallationScriptLink Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("postInstallationScriptLink")]
        public System.String? PostInstallationScriptLink { get; set; }//;
        
        // Key: postInstallationScriptReturn Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("postInstallationScriptReturn")]
        public System.String? PostInstallationScriptReturn { get; set; }//;
        
        // Key: softRaidDevices Type: long FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("softRaidDevices")]
        public System.Int64? SoftRaidDevices { get; set; }//;
    }
    
    // Id: InstallTemplate Namespace: dedicated.server
    public class InstallTemplate {
        
        // Key: ovh Type: string[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ovh")]
        public System.String[]? Ovh { get; set; }//;
        
        // Key: personal Type: string[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("personal")]
        public System.String[]? Personal { get; set; }//;
    }
    
    // Id: InstallationProgressStatus Namespace: dedicated.server
    public class InstallationProgressStatus {
        
        // Key: elapsedTime Type: long FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("elapsedTime")]
        public required System.Int64 ElapsedTime { get; set; }//;
        
        // Key: progress Type: dedicated.server.InstallationProgressSteps[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("progress")]
        public _dedicated_server.InstallationProgressSteps[]? Progress { get; set; }//;
    }
    
    // Id: InstallationProgressStatusEnum Namespace: dedicated.server
    public enum InstallationProgressStatusEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("doing")]
        doing,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("done")]
        done,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("error")]
        error,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("expired")]
        expired,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("idle")]
        idle,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("pending")]
        pending,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("stopping")]
        stopping,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("todo")]
        todo,
    }
    
    // Id: InstallationProgressSteps Namespace: dedicated.server
    public class InstallationProgressSteps {
        
        // Key: comment Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("comment")]
        public required System.String Comment { get; set; }//;
        
        // Key: error Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("error")]
        public System.String? Error { get; set; }//;
        
        // Key: status Type: dedicated.server.InstallationProgressStatusEnum FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("status")]
        public required _dedicated_server.InstallationProgressStatusEnum Status { get; set; }//;
    }
    
    // Id: Interfaces Namespace: dedicated.server
    public class Interfaces {
        
        // Key: macs Type: macAddress[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("macs")]
        public required System.String[] Macs { get; set; }//;
        
        // Key: type Type: dedicated.server.NetworkingTypeEnum FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("type")]
        public required _dedicated_server.NetworkingTypeEnum Type { get; set; }//;
    }
    
    // Id: Intervention Namespace: dedicated.server
    public class Intervention {
        
        // Key: date Type: datetime FullType: datetime
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("date")]
        public System.DateTime? Date { get; set; }//;
        
        // Key: interventionId Type: long FullType: long
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("interventionId")]
        public required System.Int64 InterventionId { get; set; }//;
        
        // Key: type Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("type")]
        public System.String? Type { get; set; }//;
    }
    
    // Id: IpBlockSizeEnum Namespace: dedicated.server
    public enum IpBlockSizeEnum {
        
        _1 = 1,
        
        _4 = 4,
        
        _8 = 8,
        
        _16 = 16,
        
        _32 = 32,
        
        _64 = 64,
        
        _128 = 128,
        
        _256 = 256,
    }
    
    // Id: IpCountryEnum Namespace: dedicated.server
    public enum IpCountryEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("au")]
        au,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("be")]
        be,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ca")]
        ca,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("cz")]
        cz,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("de")]
        de,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("es")]
        es,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("fi")]
        fi,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("fr")]
        fr,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ie")]
        ie,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("in")]
        @in,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("it")]
        it,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("lt")]
        lt,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("nl")]
        nl,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("pl")]
        pl,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("pt")]
        pt,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("sg")]
        sg,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("uk")]
        uk,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("us")]
        us,
    }
    
    // Id: IpOrderable Namespace: dedicated.server
    public class IpOrderable {
        
        // Key: ipv4 Type: dedicated.server.IpOrderableDetails[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ipv4")]
        public _dedicated_server.IpOrderableDetails[]? Ipv4 { get; set; }//;
        
        // Key: ipv6 Type: dedicated.server.IpOrderableDetails[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ipv6")]
        public _dedicated_server.IpOrderableDetails[]? Ipv6 { get; set; }//;
    }
    
    // Id: IpOrderableDetails Namespace: dedicated.server
    public class IpOrderableDetails {
        
        // Key: blockSizes Type: dedicated.server.IpBlockSizeEnum[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("blockSizes")]
        public required _dedicated_server.IpBlockSizeEnum[] BlockSizes { get; set; }//;
        
        // Key: included Type: boolean FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("included")]
        public required System.Boolean Included { get; set; }//;
        
        // Key: ipNumber Type: long FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ipNumber")]
        public System.Int64? IpNumber { get; set; }//;
        
        // Key: number Type: long FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("number")]
        public required System.Int64 Number { get; set; }//;
        
        // Key: optionRequired Type: dedicated.server.OptionRequiredEnum FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("optionRequired")]
        public _dedicated_server.OptionRequiredEnum? OptionRequired { get; set; }//;
        
        // Key: type Type: dedicated.server.IpTypeOrderableEnum FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("type")]
        public required _dedicated_server.IpTypeOrderableEnum Type { get; set; }//;
    }
    
    // Id: IpTypeOrderableEnum Namespace: dedicated.server
    public enum IpTypeOrderableEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("failover")]
        failover,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("static")]
        @static,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("unshielded")]
        unshielded,
    }
    
    // Id: Ipmi Namespace: dedicated.server
    public class Ipmi {
        
        // Key: activated Type: boolean FullType: boolean
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("activated")]
        public required System.Boolean Activated { get; set; }//;
        
        // Key: supportedFeatures Type: dedicated.server.IpmiSupportedFeatures FullType: dedicated.server.IpmiSupportedFeatures
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("supportedFeatures")]
        public required _dedicated_server.IpmiSupportedFeatures SupportedFeatures { get; set; }//;
    }
    
    // Id: IpmiAccessTypeEnum Namespace: dedicated.server
    public enum IpmiAccessTypeEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("kvmipHtml5URL")]
        kvmipHtml5URL,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("kvmipJnlp")]
        kvmipJnlp,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("serialOverLanSshKey")]
        serialOverLanSshKey,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("serialOverLanURL")]
        serialOverLanURL,
    }
    
    // Id: IpmiAccessValue Namespace: dedicated.server
    public class IpmiAccessValue {
        
        // Key: expiration Type: datetime FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("expiration")]
        public System.DateTime? Expiration { get; set; }//;
        
        // Key: value Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("value")]
        public System.String? Value { get; set; }//;
    }
    
    // Id: IpmiSupportedFeatures Namespace: dedicated.server
    public class IpmiSupportedFeatures {
        
        // Key: kvmipHtml5URL Type: boolean FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("kvmipHtml5URL")]
        public required System.Boolean KvmipHtml5URL { get; set; }//;
        
        // Key: kvmipJnlp Type: boolean FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("kvmipJnlp")]
        public required System.Boolean KvmipJnlp { get; set; }//;
        
        // Key: serialOverLanSshKey Type: boolean FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("serialOverLanSshKey")]
        public required System.Boolean SerialOverLanSshKey { get; set; }//;
        
        // Key: serialOverLanURL Type: boolean FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("serialOverLanURL")]
        public required System.Boolean SerialOverLanURL { get; set; }//;
    }
    
    // Id: IpmiTestResult Namespace: dedicated.server
    public class IpmiTestResult {
        
        // Key: date Type: datetime FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("date")]
        public System.DateTime? Date { get; set; }//;
        
        // Key: status Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("status")]
        public System.String? Status { get; set; }//;
    }
    
    // Id: IpmiTestTypeEnum Namespace: dedicated.server
    public enum IpmiTestTypeEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("http")]
        http,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("password")]
        password,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ping")]
        ping,
    }
    
    // Id: MrtgPeriodEnum Namespace: dedicated.server
    public enum MrtgPeriodEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("daily")]
        daily,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("hourly")]
        hourly,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("monthly")]
        monthly,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("weekly")]
        weekly,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("yearly")]
        yearly,
    }
    
    // Id: MrtgTimestampValue Namespace: dedicated.server
    public class MrtgTimestampValue {
        
        // Key: timestamp Type: long FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("timestamp")]
        public required System.Int64 Timestamp { get; set; }//;
        
        // Key: value Type: complexType.UnitAndValue<double> FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("value")]
        public _complexType.UnitAndValue<double>? Value { get; set; }//;
    }
    
    // Id: MrtgTypeEnum Namespace: dedicated.server
    public enum MrtgTypeEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("errors:download")]
        errors_download,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("errors:upload")]
        errors_upload,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("packets:download")]
        packets_download,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("packets:upload")]
        packets_upload,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("traffic:download")]
        traffic_download,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("traffic:upload")]
        traffic_upload,
    }
    
    // Id: Netboot Namespace: dedicated.server
    public class Netboot {
        
        // Key: bootId Type: long FullType: long
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("bootId")]
        public required System.Int64 BootId { get; set; }//;
        
        // Key: bootType Type: dedicated.server.BootTypeEnum FullType: dedicated.server.BootTypeEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("bootType")]
        public required _dedicated_server.BootTypeEnum BootType { get; set; }//;
        
        // Key: description Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("description")]
        public required System.String Description { get; set; }//;
        
        // Key: kernel Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("kernel")]
        public required System.String Kernel { get; set; }//;
    }
    
    // Id: NetworkSpecifications Namespace: dedicated.server
    public class NetworkSpecifications {
        
        // Key: bandwidth Type: dedicated.server.BandwidthDetails FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("bandwidth")]
        public _dedicated_server.BandwidthDetails? Bandwidth { get; set; }//;
        
        // Key: connection Type: complexType.UnitAndValue<long> FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("connection")]
        public _complexType.UnitAndValue<long>? Connection { get; set; }//;
        
        // Key: ola Type: dedicated.server.OlaDetails FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ola")]
        public _dedicated_server.OlaDetails? Ola { get; set; }//;
        
        // Key: routing Type: dedicated.server.RoutingDetails FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("routing")]
        public _dedicated_server.RoutingDetails? Routing { get; set; }//;
        
        // Key: switching Type: dedicated.server.SwitchingDetails FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("switching")]
        public _dedicated_server.SwitchingDetails? Switching { get; set; }//;
        
        // Key: traffic Type: dedicated.server.TrafficDetails FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("traffic")]
        public _dedicated_server.TrafficDetails? Traffic { get; set; }//;
        
        // Key: vmac Type: dedicated.server.VmacDetails FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("vmac")]
        public required _dedicated_server.VmacDetails Vmac { get; set; }//;
        
        // Key: vrack Type: dedicated.server.BandwidthvRackDetails FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("vrack")]
        public _dedicated_server.BandwidthvRackDetails? Vrack { get; set; }//;
    }
    
    // Id: Networking Namespace: dedicated.server
    public class Networking {
        
        // Key: description Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("description")]
        public System.String? Description { get; set; }//;
        
        // Key: interfaces Type: dedicated.server.Interfaces[] FullType: dedicated.server.Interfaces[]
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("interfaces")]
        public required _dedicated_server.Interfaces[] Interfaces { get; set; }//;
        
        // Key: status Type: dedicated.server.NetworkingOperationEnum FullType: dedicated.server.NetworkingOperationEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("status")]
        public _dedicated_server.NetworkingOperationEnum? Status { get; set; }//;
    }
    
    // Id: NetworkingOperationEnum Namespace: dedicated.server
    public enum NetworkingOperationEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("active")]
        active,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("deploying")]
        deploying,
    }
    
    // Id: NetworkingTypeEnum Namespace: dedicated.server
    public enum NetworkingTypeEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("public")]
        @public,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("vrack")]
        vrack,
    }
    
    // Id: OlaAvailableModes Namespace: dedicated.server
    public class OlaAvailableModes {
        
        // Key: default Type: boolean FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("default")]
        public required System.Boolean @default { get; set; }//;
        
        // Key: interfaces Type: dedicated.server.OlaInterface[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("interfaces")]
        public required _dedicated_server.OlaInterface[] Interfaces { get; set; }//;
        
        // Key: name Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("name")]
        public required System.String Name { get; set; }//;
    }
    
    // Id: OlaDetails Namespace: dedicated.server
    public class OlaDetails {
        
        // Key: available Type: boolean FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("available")]
        public required System.Boolean Available { get; set; }//;
        
        // Key: availableModes Type: dedicated.server.OlaAvailableModes[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("availableModes")]
        public required _dedicated_server.OlaAvailableModes[] AvailableModes { get; set; }//;
        
        // Key: supportedModes Type: dedicated.virtualNetworkInterface.VirtualNetworkInterfaceModeEnum[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("supportedModes")]
        public _dedicated_virtualNetworkInterface.VirtualNetworkInterfaceModeEnum[]? SupportedModes { get; set; }//;
    }
    
    // Id: OlaInterface Namespace: dedicated.server
    public class OlaInterface {
        
        // Key: aggregation Type: boolean FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("aggregation")]
        public required System.Boolean Aggregation { get; set; }//;
        
        // Key: count Type: long FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("count")]
        public required System.Int64 Count { get; set; }//;
        
        // Key: type Type: dedicated.server.OlaInterfaceModeEnum FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("type")]
        public required _dedicated_server.OlaInterfaceModeEnum Type { get; set; }//;
    }
    
    // Id: OlaInterfaceModeEnum Namespace: dedicated.server
    public enum OlaInterfaceModeEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("public")]
        @public,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("vrack")]
        vrack,
    }
    
    // Id: Operation Namespace: dedicated.server
    public class Operation {
        
        // Key: comment Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("comment")]
        public System.String? Comment { get; set; }//;
        
        // Key: doneDate Type: datetime FullType: datetime
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("doneDate")]
        public System.DateTime? DoneDate { get; set; }//;
        
        // Key: function Type: dedicated.OperationFunctionEnum FullType: dedicated.OperationFunctionEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("function")]
        public required _dedicated.OperationFunctionEnum Function { get; set; }//;
        
        // Key: lastUpdate Type: datetime FullType: datetime
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("lastUpdate")]
        public System.DateTime? LastUpdate { get; set; }//;
        
        // Key: operationId Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("operationId")]
        public required System.String OperationId { get; set; }//;
        
        // Key: startDate Type: datetime FullType: datetime
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("startDate")]
        public required System.DateTime StartDate { get; set; }//;
        
        // Key: status Type: dedicated.TaskStatusEnum FullType: dedicated.TaskStatusEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("status")]
        public required _dedicated.TaskStatusEnum Status { get; set; }//;
    }
    
    // Id: Option Namespace: dedicated.server
    public class Option {
        
        // Key: option Type: dedicated.server.OptionEnum FullType: dedicated.server.OptionEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("option")]
        public required _dedicated_server.OptionEnum _Option { get; set; }//;
        
        // Key: state Type: dedicated.server.OptionStateEnum FullType: dedicated.server.OptionStateEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("state")]
        public required _dedicated_server.OptionStateEnum State { get; set; }//;
    }
    
    // Id: OptionEnum Namespace: dedicated.server
    public enum OptionEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("BACKUPPROTOCOL")]
        BACKUPPROTOCOL,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("BANDWIDTH")]
        BANDWIDTH,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("BANDWIDTH_VRACK")]
        BANDWIDTH_VRACK,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("OLA")]
        OLA,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("SGX")]
        SGX,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("TRAFFIC")]
        TRAFFIC,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("TRAFFIC_DISCOVER")]
        TRAFFIC_DISCOVER,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("TUNING")]
        TUNING,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("TUNING_FIREWALL")]
        TUNING_FIREWALL,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("TUNING_KVM")]
        TUNING_KVM,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("USB_KVM_IP")]
        USB_KVM_IP,
    }
    
    // Id: OptionRequiredEnum Namespace: dedicated.server
    public enum OptionRequiredEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("professionalUse")]
        professionalUse,
    }
    
    // Id: OptionStateEnum Namespace: dedicated.server
    public enum OptionStateEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("released")]
        released,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("subscribed")]
        subscribed,
    }
    
    // Id: OrderableSysFeatureEnum Namespace: dedicated.server
    public enum OrderableSysFeatureEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("backupProtocol")]
        backupProtocol,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("monitoring")]
        monitoring,
    }
    
    // Id: PlannedIntervention Namespace: dedicated.server
    public class PlannedIntervention {
        
        // Key: expectedEndDate Type: datetime FullType: datetime
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("expectedEndDate")]
        public required System.DateTime ExpectedEndDate { get; set; }//;
        
        // Key: id Type: long FullType: long
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("id")]
        public required System.Int64 Id { get; set; }//;
        
        // Key: status Type: dedicated.PlannedInterventionStatusEnum FullType: dedicated.PlannedInterventionStatusEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("status")]
        public required _dedicated.PlannedInterventionStatusEnum Status { get; set; }//;
        
        // Key: type Type: dedicated.PlannedInterventionTypeEnum FullType: dedicated.PlannedInterventionTypeEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("type")]
        public required _dedicated.PlannedInterventionTypeEnum Type { get; set; }//;
        
        // Key: wantedStartDate Type: datetime FullType: datetime
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("wantedStartDate")]
        public required System.DateTime WantedStartDate { get; set; }//;
    }
    
    // Id: PowerStateEnum Namespace: dedicated.server
    public enum PowerStateEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("poweroff")]
        poweroff,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("poweron")]
        poweron,
    }
    
    // Id: RegionAvailability Namespace: dedicated.server
    public class RegionAvailability {
        
        // Key: fqn Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("fqn")]
        public required System.String Fqn { get; set; }//;
        
        // Key: gpu Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("gpu")]
        public System.String? Gpu { get; set; }//;
        
        // Key: memory Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("memory")]
        public System.String? Memory { get; set; }//;
        
        // Key: planCode Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("planCode")]
        public required System.String PlanCode { get; set; }//;
        
        // Key: regions Type: dedicated.server.AvailabilityByRegion[] FullType: dedicated.server.AvailabilityByRegion[]
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("regions")]
        public _dedicated_server.AvailabilityByRegion[]? Regions { get; set; }//;
        
        // Key: server Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("server")]
        public required System.String Server { get; set; }//;
        
        // Key: storage Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("storage")]
        public System.String? Storage { get; set; }//;
        
        // Key: systemStorage Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("systemStorage")]
        public System.String? SystemStorage { get; set; }//;
    }
    
    // Id: RoutingDetails Namespace: dedicated.server
    public class RoutingDetails {
        
        // Key: ipv4 Type: dedicated.server.RoutingDetailsIpv4 FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ipv4")]
        public _dedicated_server.RoutingDetailsIpv4? Ipv4 { get; set; }//;
        
        // Key: ipv6 Type: dedicated.server.RoutingDetailsIpv6 FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ipv6")]
        public _dedicated_server.RoutingDetailsIpv6? Ipv6 { get; set; }//;
    }
    
    // Id: RoutingDetailsIpv4 Namespace: dedicated.server
    public class RoutingDetailsIpv4 {
        
        // Key: gateway Type: ipv4 FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("gateway")]
        public System.String? Gateway { get; set; }//;
        
        // Key: ip Type: ipv4 FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ip")]
        public System.String? Ip { get; set; }//;
        
        // Key: network Type: ipv4Block FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("network")]
        public System.String? Network { get; set; }//;
    }
    
    // Id: RoutingDetailsIpv6 Namespace: dedicated.server
    public class RoutingDetailsIpv6 {
        
        // Key: gateway Type: ipv6 FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("gateway")]
        public System.String? Gateway { get; set; }//;
        
        // Key: ip Type: ipv6Block FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ip")]
        public System.String? Ip { get; set; }//;
        
        // Key: network Type: ipv6Block FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("network")]
        public System.String? Network { get; set; }//;
    }
    
    // Id: ServerBurst Namespace: dedicated.server
    public class ServerBurst {
        
        // Key: capacity Type: complexType.UnitAndValue<long> FullType: complexType.UnitAndValue<long>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("capacity")]
        public _complexType.UnitAndValue<long>? Capacity { get; set; }//;
        
        // Key: status Type: dedicated.server.BurstStatusEnum FullType: dedicated.server.BurstStatusEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("status")]
        public required _dedicated_server.BurstStatusEnum Status { get; set; }//;
    }
    
    // Id: SplaStatusEnum Namespace: dedicated.server
    public enum SplaStatusEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("terminated")]
        terminated,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("used")]
        used,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("waitingToCheck")]
        waitingToCheck,
    }
    
    // Id: SplaTypeEnum Namespace: dedicated.server
    public enum SplaTypeEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("os")]
        os,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("sqlstd")]
        sqlstd,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("sqlweb")]
        sqlweb,
    }
    
    // Id: StateEnum Namespace: dedicated.server
    public enum StateEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("error")]
        error,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("hacked")]
        hacked,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("hackedBlocked")]
        hackedBlocked,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ok")]
        ok,
    }
    
    // Id: SupportLevelEnum Namespace: dedicated.server
    public enum SupportLevelEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("critical")]
        critical,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("fastpath")]
        fastpath,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("gs")]
        gs,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("pro")]
        pro,
    }
    
    // Id: SupportLevelOrderable Namespace: dedicated.server
    public class SupportLevelOrderable {
        
        // Key: levels Type: dedicated.server.SupportLevelOrderableEnum[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("levels")]
        public _dedicated_server.SupportLevelOrderableEnum[]? Levels { get; set; }//;
        
        // Key: orderable Type: boolean FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("orderable")]
        public required System.Boolean Orderable { get; set; }//;
    }
    
    // Id: SupportLevelOrderableEnum Namespace: dedicated.server
    public enum SupportLevelOrderableEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("critical")]
        critical,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("fastpath")]
        fastpath,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("gs")]
        gs,
    }
    
    // Id: SupportReplaceHddInfo Namespace: dedicated.server
    public class SupportReplaceHddInfo {
        
        // Key: disk_serial Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("disk_serial")]
        public required System.String Disk_serial { get; set; }//;
        
        // Key: slot_id Type: long FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("slot_id")]
        public System.Int64? Slot_id { get; set; }//;
    }
    
    // Id: SwitchingDetails Namespace: dedicated.server
    public class SwitchingDetails {
        
        // Key: name Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("name")]
        public System.String? Name { get; set; }//;
    }
    
    // Id: TrafficDetails Namespace: dedicated.server
    public class TrafficDetails {
        
        // Key: inputQuotaSize Type: complexType.UnitAndValue<long> FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("inputQuotaSize")]
        public _complexType.UnitAndValue<long>? InputQuotaSize { get; set; }//;
        
        // Key: inputQuotaUsed Type: complexType.UnitAndValue<long> FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("inputQuotaUsed")]
        public _complexType.UnitAndValue<long>? InputQuotaUsed { get; set; }//;
        
        // Key: isThrottled Type: boolean FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("isThrottled")]
        public System.Boolean? IsThrottled { get; set; }//;
        
        // Key: outputQuotaSize Type: complexType.UnitAndValue<long> FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("outputQuotaSize")]
        public _complexType.UnitAndValue<long>? OutputQuotaSize { get; set; }//;
        
        // Key: outputQuotaUsed Type: complexType.UnitAndValue<long> FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("outputQuotaUsed")]
        public _complexType.UnitAndValue<long>? OutputQuotaUsed { get; set; }//;
        
        // Key: resetQuotaDate Type: string FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("resetQuotaDate")]
        public System.String? ResetQuotaDate { get; set; }//;
    }
    
    // Id: TrafficOrderEnum Namespace: dedicated.server
    public enum TrafficOrderEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("100Mbps-Unlimited")]
        _100Mbps_Unlimited,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("250Mbps-Unlimited")]
        _250Mbps_Unlimited,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("500Mbps-Unlimited")]
        _500Mbps_Unlimited,
    }
    
    // Id: TrafficOrderable Namespace: dedicated.server
    public class TrafficOrderable {
        
        // Key: orderable Type: boolean FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("orderable")]
        public required System.Boolean Orderable { get; set; }//;
        
        // Key: traffic Type: dedicated.server.TrafficOrderEnum[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("traffic")]
        public _dedicated_server.TrafficOrderEnum[]? Traffic { get; set; }//;
    }
    
    // Id: UsbKeyCapacityEnum Namespace: dedicated.server
    public enum UsbKeyCapacityEnum {
        
        _16 = 16,
        
        _32 = 32,
        
        _64 = 64,
        
        _128 = 128,
        
        _256 = 256,
    }
    
    // Id: UsbKeyOrderableDetails Namespace: dedicated.server
    public class UsbKeyOrderableDetails {
        
        // Key: capacity Type: dedicated.server.UsbKeyCapacityEnum[] FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("capacity")]
        public required _dedicated_server.UsbKeyCapacityEnum[] Capacity { get; set; }//;
        
        // Key: number Type: long FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("number")]
        public required System.Int64 Number { get; set; }//;
        
        // Key: optionRequired Type: dedicated.server.OptionRequiredEnum FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("optionRequired")]
        public _dedicated_server.OptionRequiredEnum? OptionRequired { get; set; }//;
        
        // Key: orderable Type: boolean FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("orderable")]
        public required System.Boolean Orderable { get; set; }//;
    }
    
    // Id: VirtualMac Namespace: dedicated.server
    public class VirtualMac {
        
        // Key: macAddress Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("macAddress")]
        public required System.String MacAddress { get; set; }//;
        
        // Key: type Type: dedicated.server.VmacTypeEnum FullType: dedicated.server.VmacTypeEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("type")]
        public required _dedicated_server.VmacTypeEnum Type { get; set; }//;
    }
    
    // Id: VirtualMacManagement Namespace: dedicated.server
    public class VirtualMacManagement {
        
        // Key: ipAddress Type: ipv4 FullType: ipv4
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ipAddress")]
        public required System.String IpAddress { get; set; }//;
        
        // Key: virtualMachineName Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("virtualMachineName")]
        public required System.String VirtualMachineName { get; set; }//;
    }
    
    // Id: VirtualNetworkInterface Namespace: dedicated.server
    public class VirtualNetworkInterface {
        
        // Key: enabled Type: boolean FullType: boolean
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("enabled")]
        public required System.Boolean Enabled { get; set; }//;
        
        // Key: mode Type: dedicated.virtualNetworkInterface.VirtualNetworkInterfaceModeEnum FullType: dedicated.virtualNetworkInterface.VirtualNetworkInterfaceModeEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("mode")]
        public required _dedicated_virtualNetworkInterface.VirtualNetworkInterfaceModeEnum Mode { get; set; }//;
        
        // Key: name Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("name")]
        public required System.String Name { get; set; }//;
        
        // Key: networkInterfaceController Type: string[] FullType: string[]
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("networkInterfaceController")]
        public required System.String[] NetworkInterfaceController { get; set; }//;
        
        // Key: serverName Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("serverName")]
        public required System.String ServerName { get; set; }//;
        
        // Key: uuid Type: uuid FullType: uuid
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("uuid")]
        public required System.Guid Uuid { get; set; }//;
        
        // Key: vrack Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("vrack")]
        public System.String? Vrack { get; set; }//;
    }
    
    // Id: VmacDetails Namespace: dedicated.server
    public class VmacDetails {
        
        // Key: supported Type: boolean FullType: 
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("supported")]
        public required System.Boolean Supported { get; set; }//;
    }
    
    // Id: VmacTypeEnum Namespace: dedicated.server
    public enum VmacTypeEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ovh")]
        ovh,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("vmware")]
        vmware,
    }
    
    // Id: kvm Namespace: dedicated.server
    public class kvm {
        
        // Key: expiration Type: datetime FullType: datetime
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("expiration")]
        public required System.DateTime Expiration { get; set; }//;
        
        // Key: ip Type: ipv4 FullType: ipv4
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ip")]
        public System.String? Ip { get; set; }//;
        
        // Key: name Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("name")]
        public required System.String Name { get; set; }//;
    }
    
    // Id: netbootOption Namespace: dedicated.server
    public class netbootOption {
        
        // Key: option Type: dedicated.server.BootOptionEnum FullType: dedicated.server.BootOptionEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("option")]
        public required _dedicated_server.BootOptionEnum Option { get; set; }//;
        
        // Key: value Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("value")]
        public required System.String Value { get; set; }//;
    }
    
    // Id: spla Namespace: dedicated.server
    public class spla {
        
        // Key: id Type: long FullType: long
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("id")]
        public required System.Int64 Id { get; set; }//;
        
        // Key: lastUpdate Type: datetime FullType: datetime
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("lastUpdate")]
        public required System.DateTime LastUpdate { get; set; }//;
        
        // Key: serialNumber Type: string FullType: string
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("serialNumber")]
        public required System.String SerialNumber { get; set; }//;
        
        // Key: status Type: dedicated.server.SplaStatusEnum FullType: dedicated.server.SplaStatusEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("status")]
        public required _dedicated_server.SplaStatusEnum Status { get; set; }//;
        
        // Key: type Type: dedicated.server.SplaTypeEnum FullType: dedicated.server.SplaTypeEnum
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("type")]
        public required _dedicated_server.SplaTypeEnum Type { get; set; }//;
    }
    
    // Id: BandwidthOrderTypeEnum Namespace: dedicated.server
    public enum BandwidthOrderTypeEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("platinum")]
        platinum,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("premium")]
        premium,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ultimate")]
        ultimate,
    }
    
    // Id: IpStaticCountryEnum Namespace: dedicated.server
    public enum IpStaticCountryEnum {
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("be")]
        be,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("cz")]
        cz,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("de")]
        de,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("es")]
        es,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("fi")]
        fi,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("fr")]
        fr,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ie")]
        ie,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("it")]
        it,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("lt")]
        lt,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("nl")]
        nl,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("pl")]
        pl,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("pt")]
        pt,
        
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("uk")]
        uk,
    }
}
