//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
namespace Ovh.Sdk.Net {
    using System.Net.Http;
    using System.Net.Http.Json;
    
    
    public partial class Client {
        
        // Path: /v1/allDom
        public Task<System.String[]> GetV1AllDomAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/allDom{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/allDom/{serviceName}
        public Task<_allDom.AllDomServiceWithIAM> GetV1AllDomServiceNameAsync(string serviceName) {
            string uri = $"/v1/allDom/{serviceName}";
            return this.SendAsync<_allDom.AllDomServiceWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/allDom/{serviceName}/domain
        public Task<System.String[]> GetV1AllDomServiceNameDomainAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? domain) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("domain", domain);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/allDom/{serviceName}/domain{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/allDom/{serviceName}/domain/{domain}
        public Task<_allDom.Domain> GetV1AllDomServiceNameDomainDomainAsync(string domain, string serviceName) {
            string uri = $"/v1/allDom/{serviceName}/domain/{domain}";
            return this.SendAsync<_allDom.Domain>("GET", uri, null, null, true);
        }
        
        // Path: /v1/allDom/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1AllDomServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/allDom/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/allDom/{serviceName}/serviceInfos
        public Task PutV1AllDomServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/allDom/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/auth/credential
        public Task<_auth.ApiCredentialRequest> PostV1AuthCredentialAsync(_auth.ApiCredentialRequestParams _body) {
            string uri = $"/v1/auth/credential";
            return this.SendAsync<_auth.ApiCredentialRequest>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/auth/currentCredential
        public Task<_auth.ApiCredential> GetV1AuthCurrentCredentialAsync() {
            string uri = $"/v1/auth/currentCredential";
            return this.SendAsync<_auth.ApiCredential>("GET", uri, null, null, true);
        }
        
        // Path: /v1/auth/details
        public Task<_auth.Details> GetV1AuthDetailsAsync() {
            string uri = $"/v1/auth/details";
            return this.SendAsync<_auth.Details>("GET", uri, null, null, true);
        }
        
        // Path: /v1/auth/logout
        public Task PostV1AuthLogoutAsync() {
            string uri = $"/v1/auth/logout";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/auth/time
        public Task<System.Int64> GetV1AuthTimeAsync() {
            string uri = $"/v1/auth/time";
            return this.SendAsync<long>("GET", uri, null, null, false);
        }
        
        // Path: /v1/auth/token
        public Task<_auth.Token> PostV1AuthTokenAsync() {
            string uri = $"/v1/auth/token";
            return this.SendAsync<_auth.Token>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cdn/dedicated
        public Task<System.String[]> GetV1CdnDedicatedAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cdn/dedicated{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cdn/dedicated/pops
        public Task<System.String[]> GetV1CdnDedicatedPopsAsync() {
            string uri = $"/v1/cdn/dedicated/pops";
            return this.SendAsync<string[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/cdn/dedicated/pops/{name}
        public Task<_cdnanycast.Pop> GetV1CdnDedicatedPopsNameAsync(string name) {
            string uri = $"/v1/cdn/dedicated/pops/{name}";
            return this.SendAsync<_cdnanycast.Pop>("GET", uri, null, null, false);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}
        public Task<_cdnanycast.AnycastWithIAM> GetV1CdnDedicatedServiceNameAsync(string serviceName) {
            string uri = $"/v1/cdn/dedicated/{serviceName}";
            return this.SendAsync<_cdnanycast.AnycastWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/changeContact
        public Task<System.Int64[]> PostV1CdnDedicatedServiceNameChangeContactAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactTech) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("contactAdmin", contactAdmin);
            _body.Add("contactBilling", contactBilling);
            _body.Add("contactTech", contactTech);
            string uri = $"/v1/cdn/dedicated/{serviceName}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/domains
        public Task<System.String[]> GetV1CdnDedicatedServiceNameDomainsAsync(string serviceName) {
            string uri = $"/v1/cdn/dedicated/{serviceName}/domains";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/domains
        public Task<_cdnanycast.Domain> PostV1CdnDedicatedServiceNameDomainsAsync(string domain, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("domain", domain);
            string uri = $"/v1/cdn/dedicated/{serviceName}/domains";
            return this.SendAsync<_cdnanycast.Domain>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/domains/{domain}
        public Task<_cdnanycast.Task> DeleteV1CdnDedicatedServiceNameDomainsDomainAsync(string domain, string serviceName) {
            string uri = $"/v1/cdn/dedicated/{serviceName}/domains/{domain}";
            return this.SendAsync<_cdnanycast.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/domains/{domain}
        public Task<_cdnanycast.Domain> GetV1CdnDedicatedServiceNameDomainsDomainAsync(string domain, string serviceName) {
            string uri = $"/v1/cdn/dedicated/{serviceName}/domains/{domain}";
            return this.SendAsync<_cdnanycast.Domain>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/domains/{domain}
        public Task PutV1CdnDedicatedServiceNameDomainsDomainAsync(_cdnanycast.Domain _body, string domain, string serviceName) {
            string uri = $"/v1/cdn/dedicated/{serviceName}/domains/{domain}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/domains/{domain}/backends
        public Task<System.String[]> GetV1CdnDedicatedServiceNameDomainsDomainBackendsAsync(string domain, string serviceName) {
            string uri = $"/v1/cdn/dedicated/{serviceName}/domains/{domain}/backends";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/domains/{domain}/backends
        public Task<_cdnanycast.Backend> PostV1CdnDedicatedServiceNameDomainsDomainBackendsAsync(string domain, string ip, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("ip", ip);
            string uri = $"/v1/cdn/dedicated/{serviceName}/domains/{domain}/backends";
            return this.SendAsync<_cdnanycast.Backend>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/domains/{domain}/backends/{ip}
        public Task<System.String> DeleteV1CdnDedicatedServiceNameDomainsDomainBackendsIpAsync(string domain, string ip, string serviceName) {
            string uri = $"/v1/cdn/dedicated/{serviceName}/domains/{domain}/backends/{ip}";
            return this.SendAsync<string>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/domains/{domain}/backends/{ip}
        public Task<_cdnanycast.Backend> GetV1CdnDedicatedServiceNameDomainsDomainBackendsIpAsync(string domain, string ip, string serviceName) {
            string uri = $"/v1/cdn/dedicated/{serviceName}/domains/{domain}/backends/{ip}";
            return this.SendAsync<_cdnanycast.Backend>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/domains/{domain}/cacheRules
        public Task<System.Int64[]> GetV1CdnDedicatedServiceNameDomainsDomainCacheRulesAsync(string domain, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? fileMatch) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("fileMatch", fileMatch);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cdn/dedicated/{serviceName}/domains/{domain}/cacheRules{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/domains/{domain}/cacheRules
        public Task<_cdnanycast.CacheRule> PostV1CdnDedicatedServiceNameDomainsDomainCacheRulesAsync(_cdnanycast.CacheRuleCacheTypeEnum cacheType, string domain, string fileMatch, _cdnanycast.CacheRuleFileTypeEnum fileType, string serviceName, long ttl) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("cacheType", cacheType);
            _body.Add("fileMatch", fileMatch);
            _body.Add("fileType", fileType);
            _body.Add("ttl", ttl);
            string uri = $"/v1/cdn/dedicated/{serviceName}/domains/{domain}/cacheRules";
            return this.SendAsync<_cdnanycast.CacheRule>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}
        public Task<_cdnanycast.Task> DeleteV1CdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdAsync(long cacheRuleId, string domain, string serviceName) {
            string uri = $"/v1/cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}";
            return this.SendAsync<_cdnanycast.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}
        public Task<_cdnanycast.CacheRule> GetV1CdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdAsync(long cacheRuleId, string domain, string serviceName) {
            string uri = $"/v1/cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}";
            return this.SendAsync<_cdnanycast.CacheRule>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}
        public Task PutV1CdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdAsync(_cdnanycast.CacheRule _body, long cacheRuleId, string domain, string serviceName) {
            string uri = $"/v1/cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}/flush
        public Task<_cdnanycast.Task> PostV1CdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdFlushAsync(long cacheRuleId, string domain, string serviceName) {
            string uri = $"/v1/cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}/flush";
            return this.SendAsync<_cdnanycast.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}/tasks
        public Task<System.Int64[]> GetV1CdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksAsync(long cacheRuleId, string domain, string serviceName) {
            string uri = $"/v1/cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}/tasks";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}/tasks/{taskId}
        public Task<_cdnanycast.Task> GetV1CdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksTaskIdAsync(long cacheRuleId, string domain, string serviceName, long taskId) {
            string uri = $"/v1/cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}/tasks/{taskId}";
            return this.SendAsync<_cdnanycast.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/domains/{domain}/flush
        public Task<_cdnanycast.Task> PostV1CdnDedicatedServiceNameDomainsDomainFlushAsync(string domain, string serviceName) {
            string uri = $"/v1/cdn/dedicated/{serviceName}/domains/{domain}/flush";
            return this.SendAsync<_cdnanycast.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/domains/{domain}/logs
        public Task<_cdnanycast.LogsURL> PostV1CdnDedicatedServiceNameDomainsDomainLogsAsync(string domain, string serviceName) {
            string uri = $"/v1/cdn/dedicated/{serviceName}/domains/{domain}/logs";
            return this.SendAsync<_cdnanycast.LogsURL>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/domains/{domain}/statistics
        public Task<_cdnanycast.StatsDataType[]> GetV1CdnDedicatedServiceNameDomainsDomainStatisticsAsync(string domain, _cdnanycast.StatsPeriodEnum period, string serviceName, _cdnanycast.StatsTypeEnum type, _cdnanycast.StatsValueEnum value) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("period", period);
            queryParametersTemp.Add("type", type);
            queryParametersTemp.Add("value", value);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cdn/dedicated/{serviceName}/domains/{domain}/statistics{queryParameters}";
            return this.SendAsync<_cdnanycast.StatsDataType[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/domains/{domain}/tasks
        public Task<System.Int64[]> GetV1CdnDedicatedServiceNameDomainsDomainTasksAsync(string domain, string serviceName) {
            string uri = $"/v1/cdn/dedicated/{serviceName}/domains/{domain}/tasks";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/domains/{domain}/tasks/{taskId}
        public Task<_cdnanycast.Task> GetV1CdnDedicatedServiceNameDomainsDomainTasksTaskIdAsync(string domain, string serviceName, long taskId) {
            string uri = $"/v1/cdn/dedicated/{serviceName}/domains/{domain}/tasks/{taskId}";
            return this.SendAsync<_cdnanycast.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/logs
        public Task<_cdnanycast.LogsURL> PostV1CdnDedicatedServiceNameLogsAsync(string serviceName) {
            string uri = $"/v1/cdn/dedicated/{serviceName}/logs";
            return this.SendAsync<_cdnanycast.LogsURL>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/quota
        public Task<_cdnanycast.StatsDataType[]> GetV1CdnDedicatedServiceNameQuotaAsync(_cdnanycast.StatsPeriodEnum period, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("period", period);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cdn/dedicated/{serviceName}/quota{queryParameters}";
            return this.SendAsync<_cdnanycast.StatsDataType[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1CdnDedicatedServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/cdn/dedicated/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/serviceInfos
        public Task PutV1CdnDedicatedServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/cdn/dedicated/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/ssl
        public Task<_cdnanycast.Task> DeleteV1CdnDedicatedServiceNameSslAsync(string serviceName) {
            string uri = $"/v1/cdn/dedicated/{serviceName}/ssl";
            return this.SendAsync<_cdnanycast.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/ssl
        public Task<_cdnanycast.Ssl> GetV1CdnDedicatedServiceNameSslAsync(string serviceName) {
            string uri = $"/v1/cdn/dedicated/{serviceName}/ssl";
            return this.SendAsync<_cdnanycast.Ssl>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/ssl
        public Task<_cdnanycast.Ssl> PostV1CdnDedicatedServiceNameSslAsync(string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? certificate, [System.Runtime.InteropServices.OptionalAttribute()] System.String? chain, [System.Runtime.InteropServices.OptionalAttribute()] System.String? key) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("certificate", certificate);
            _body.Add("chain", chain);
            _body.Add("key", key);
            _body.Add("name", name);
            string uri = $"/v1/cdn/dedicated/{serviceName}/ssl";
            return this.SendAsync<_cdnanycast.Ssl>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/ssl/tasks
        public Task<System.Int64[]> GetV1CdnDedicatedServiceNameSslTasksAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _cdnanycast.TaskFunctionEnum? function, [System.Runtime.InteropServices.OptionalAttribute()] _cdnanycast.TaskStateEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("function", function);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cdn/dedicated/{serviceName}/ssl/tasks{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/ssl/tasks/{taskId}
        public Task<_cdnanycast.Task> GetV1CdnDedicatedServiceNameSslTasksTaskIdAsync(string serviceName, long taskId) {
            string uri = $"/v1/cdn/dedicated/{serviceName}/ssl/tasks/{taskId}";
            return this.SendAsync<_cdnanycast.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cdn/dedicated/{serviceName}/ssl/update
        public Task<_cdnanycast.Task> PostV1CdnDedicatedServiceNameSslUpdateAsync(string certificate, string key, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? chain) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("certificate", certificate);
            _body.Add("chain", chain);
            _body.Add("key", key);
            string uri = $"/v1/cdn/dedicated/{serviceName}/ssl/update";
            return this.SendAsync<_cdnanycast.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/agreements
        public Task<_cloud_project.ProductAgreements> GetV1CloudAgreementsAsync(_cloud_project.ProductNameEnum product) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("product", product);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/agreements{queryParameters}";
            return this.SendAsync<_cloud_project.ProductAgreements>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/eligibility
        public Task<_cloud_project.EligibilityInfo> GetV1CloudEligibilityAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? voucher) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("voucher", voucher);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/eligibility{queryParameters}";
            return this.SendAsync<_cloud_project.EligibilityInfo>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/order
        public Task<_cloud_order.Order[]> GetV1CloudOrderAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/order{queryParameters}";
            return this.SendAsync<_cloud_order.Order[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/order/rule/availability
        public Task<_cloud_order_rule.Availability> GetV1CloudOrderRuleAvailabilityAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary, [System.Runtime.InteropServices.OptionalAttribute()] System.String? addonFamily, [System.Runtime.InteropServices.OptionalAttribute()] System.String? planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("addonFamily", addonFamily);
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/order/rule/availability{queryParameters}";
            return this.SendAsync<_cloud_order_rule.Availability>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/order/rule/instanceCategory
        public Task<_cloud_order_rule.InstanceCategories> GetV1CloudOrderRuleInstanceCategoryAsync() {
            string uri = $"/v1/cloud/order/rule/instanceCategory";
            return this.SendAsync<_cloud_order_rule.InstanceCategories>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project
        public Task<System.String[]> GetV1CloudProjectAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}
        public Task<_cloud.ProjectWithIAM> GetV1CloudProjectServiceNameAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}";
            return this.SendAsync<_cloud.ProjectWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}
        public Task PutV1CloudProjectServiceNameAsync(_cloud.Project _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/acl
        public Task<System.String[]> GetV1CloudProjectServiceNameAclAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _cloud.AclTypeEnum? type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/acl{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/acl
        public Task<_cloud.Acl> PostV1CloudProjectServiceNameAclAsync(string accountId, string serviceName, _cloud.AclTypeEnum type) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("accountId", accountId);
            _body.Add("type", type);
            string uri = $"/v1/cloud/project/{serviceName}/acl";
            return this.SendAsync<_cloud.Acl>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/acl/{accountId}
        public Task DeleteV1CloudProjectServiceNameAclAccountIdAsync(string accountId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/acl/{accountId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/acl/{accountId}
        public Task<_cloud.Acl> GetV1CloudProjectServiceNameAclAccountIdAsync(string accountId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/acl/{accountId}";
            return this.SendAsync<_cloud.Acl>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/activateMonthlyBilling
        public Task<_cloud_instance.InstanceDetail[]> PostV1CloudProjectServiceNameActivateMonthlyBillingAsync(_cloud.ProjectActivateMonthlyBillingCreation _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/activateMonthlyBilling";
            return this.SendAsync<_cloud_instance.InstanceDetail[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/app
        public Task<_cloud_project_ai_app.App[]> GetV1CloudProjectServiceNameAiAppAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? labelSelector, [System.Runtime.InteropServices.OptionalAttribute()] _cloud_project_ai.OrderEnum? order, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? page, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? size, [System.Runtime.InteropServices.OptionalAttribute()] System.String? sort, [System.Runtime.InteropServices.OptionalAttribute()] _cloud_project_ai_app.AppStateEnum[]? statusState, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? updatedAfter, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? updatedBefore, [System.Runtime.InteropServices.OptionalAttribute()] System.String? userName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("labelSelector", labelSelector);
            queryParametersTemp.Add("order", order);
            queryParametersTemp.Add("page", page);
            queryParametersTemp.Add("size", size);
            queryParametersTemp.Add("sort", sort);
            queryParametersTemp.Add("statusState", statusState);
            queryParametersTemp.Add("updatedAfter", updatedAfter);
            queryParametersTemp.Add("updatedBefore", updatedBefore);
            queryParametersTemp.Add("userName", userName);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/ai/app{queryParameters}";
            return this.SendAsync<_cloud_project_ai_app.App[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/app
        public Task<_cloud_project_ai_app.App> PostV1CloudProjectServiceNameAiAppAsync(_cloud_project_ai_app.AppSpecInput _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/app";
            return this.SendAsync<_cloud_project_ai_app.App>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/app/command
        public Task<_cloud_project_ai.Command> PostV1CloudProjectServiceNameAiAppCommandAsync(_cloud_project_ai_app.AppSpecInput _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/app/command";
            return this.SendAsync<_cloud_project_ai.Command>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/app/{appId}
        public Task DeleteV1CloudProjectServiceNameAiAppAppIdAsync(System.Guid appId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? force) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("force", force);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/ai/app/{appId}{queryParameters}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/app/{appId}
        public Task<_cloud_project_ai_app.App> GetV1CloudProjectServiceNameAiAppAppIdAsync(System.Guid appId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/app/{appId}";
            return this.SendAsync<_cloud_project_ai_app.App>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/app/{appId}
        public Task<_cloud_project_ai_app.App> PutV1CloudProjectServiceNameAiAppAppIdAsync(_cloud_project_ai_app.UpdateInput _body, System.Guid appId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/app/{appId}";
            return this.SendAsync<_cloud_project_ai_app.App>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/app/{appId}/datasync
        public Task<_cloud_project_ai_volume.DataSync> PostV1CloudProjectServiceNameAiAppAppIdDatasyncAsync(_cloud_project_ai_volume.DataSyncSpec _body, System.Guid appId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/app/{appId}/datasync";
            return this.SendAsync<_cloud_project_ai_volume.DataSync>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/app/{appId}/image
        public Task<_cloud_project_ai.GenericResponse> PutV1CloudProjectServiceNameAiAppAppIdImageAsync(_cloud_project_ai_app.AppImageInput _body, System.Guid appId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/app/{appId}/image";
            return this.SendAsync<_cloud_project_ai.GenericResponse>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/app/{appId}/label
        public Task PutV1CloudProjectServiceNameAiAppAppIdLabelAsync(_cloud_project_ai.Label _body, System.Guid appId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/app/{appId}/label";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/app/{appId}/log
        public Task<_cloud_project_ai.Logs> GetV1CloudProjectServiceNameAiAppAppIdLogAsync(System.Guid appId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? page, [System.Runtime.InteropServices.OptionalAttribute()] System.String? replica, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? size) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("page", page);
            queryParametersTemp.Add("replica", replica);
            queryParametersTemp.Add("size", size);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/ai/app/{appId}/log{queryParameters}";
            return this.SendAsync<_cloud_project_ai.Logs>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/app/{appId}/scalingstrategy
        public Task PutV1CloudProjectServiceNameAiAppAppIdScalingstrategyAsync(_cloud_project_ai_app.ScalingStrategyInput _body, System.Guid appId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/app/{appId}/scalingstrategy";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/app/{appId}/start
        public Task PutV1CloudProjectServiceNameAiAppAppIdStartAsync(System.Guid appId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/app/{appId}/start";
            return this.SendAsync("PUT", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/app/{appId}/stop
        public Task PutV1CloudProjectServiceNameAiAppAppIdStopAsync(System.Guid appId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/app/{appId}/stop";
            return this.SendAsync("PUT", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/authorization
        public Task<_cloud_project_ai.AuthorizationStatus> GetV1CloudProjectServiceNameAiAuthorizationAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/authorization";
            return this.SendAsync<_cloud_project_ai.AuthorizationStatus>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/authorization
        public Task PostV1CloudProjectServiceNameAiAuthorizationAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/authorization";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/capabilities/feature
        public Task<_cloud_project_ai_capabilities.Features> GetV1CloudProjectServiceNameAiCapabilitiesFeatureAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/capabilities/feature";
            return this.SendAsync<_cloud_project_ai_capabilities.Features>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/capabilities/quota
        public Task<_cloud_project_ai_capabilities.ProjectQuotas> GetV1CloudProjectServiceNameAiCapabilitiesQuotaAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/capabilities/quota";
            return this.SendAsync<_cloud_project_ai_capabilities.ProjectQuotas>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/capabilities/region
        public Task<_cloud_project_ai_capabilities.Region[]> GetV1CloudProjectServiceNameAiCapabilitiesRegionAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/capabilities/region";
            return this.SendAsync<_cloud_project_ai_capabilities.Region[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/capabilities/region/{region}
        public Task<_cloud_project_ai_capabilities.Region> GetV1CloudProjectServiceNameAiCapabilitiesRegionRegionAsync(string region, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/capabilities/region/{region}";
            return this.SendAsync<_cloud_project_ai_capabilities.Region>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/capabilities/region/{region}/app/image
        public Task<_cloud_project_ai_capabilities_app.Image[]> GetV1CloudProjectServiceNameAiCapabilitiesRegionRegionAppImageAsync(string region, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/capabilities/region/{region}/app/image";
            return this.SendAsync<_cloud_project_ai_capabilities_app.Image[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/capabilities/region/{region}/data/region
        public Task<System.String[]> GetV1CloudProjectServiceNameAiCapabilitiesRegionRegionDataRegionAsync(string region, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/capabilities/region/{region}/data/region";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/capabilities/region/{region}/flavor
        public Task<_cloud_project_ai_capabilities.Flavor[]> GetV1CloudProjectServiceNameAiCapabilitiesRegionRegionFlavorAsync(string region, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/capabilities/region/{region}/flavor";
            return this.SendAsync<_cloud_project_ai_capabilities.Flavor[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/capabilities/region/{region}/flavor/{flavorId}
        public Task<_cloud_project_ai_capabilities.Flavor> GetV1CloudProjectServiceNameAiCapabilitiesRegionRegionFlavorFlavorIdAsync(string flavorId, string region, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/capabilities/region/{region}/flavor/{flavorId}";
            return this.SendAsync<_cloud_project_ai_capabilities.Flavor>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/capabilities/region/{region}/preset
        public Task<_cloud_project_ai_capabilities.Preset[]> GetV1CloudProjectServiceNameAiCapabilitiesRegionRegionPresetAsync(string region, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/ai/capabilities/region/{region}/preset{queryParameters}";
            return this.SendAsync<_cloud_project_ai_capabilities.Preset[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/capabilities/region/{region}/preset/{presetId}
        public Task<_cloud_project_ai_capabilities.Preset> GetV1CloudProjectServiceNameAiCapabilitiesRegionRegionPresetPresetIdAsync(string presetId, string region, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/capabilities/region/{region}/preset/{presetId}";
            return this.SendAsync<_cloud_project_ai_capabilities.Preset>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/data/region
        public Task<_cloud_project_ai_capabilities.Region[]> GetV1CloudProjectServiceNameAiDataRegionAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/data/region";
            return this.SendAsync<_cloud_project_ai_capabilities.Region[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/data/region/{region}
        public Task<_cloud_project_ai_capabilities.Region> GetV1CloudProjectServiceNameAiDataRegionRegionAsync(string region, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/data/region/{region}";
            return this.SendAsync<_cloud_project_ai_capabilities.Region>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/data/region/{region}/alias
        public Task<_cloud_project_ai.DataStore[]> GetV1CloudProjectServiceNameAiDataRegionRegionAliasAsync(string region, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/data/region/{region}/alias";
            return this.SendAsync<_cloud_project_ai.DataStore[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/data/region/{region}/alias
        public Task<_cloud_project_ai.DataStore> PostV1CloudProjectServiceNameAiDataRegionRegionAliasAsync(_cloud_project_ai.DataStoreInput _body, string region, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? skipDataStoreConnectionCheck) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("skipDataStoreConnectionCheck", skipDataStoreConnectionCheck);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/ai/data/region/{region}/alias{queryParameters}";
            return this.SendAsync<_cloud_project_ai.DataStore>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/data/region/{region}/alias/{alias}
        public Task DeleteV1CloudProjectServiceNameAiDataRegionRegionAliasAliasAsync(string alias, string region, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/data/region/{region}/alias/{alias}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/data/region/{region}/alias/{alias}
        public Task<_cloud_project_ai.DataStore> GetV1CloudProjectServiceNameAiDataRegionRegionAliasAliasAsync(string alias, string region, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/data/region/{region}/alias/{alias}";
            return this.SendAsync<_cloud_project_ai.DataStore>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/data/region/{region}/alias/{alias}
        public Task PutV1CloudProjectServiceNameAiDataRegionRegionAliasAliasAsync(_cloud_project_ai.DataStoreInput _body, string alias, string region, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/data/region/{region}/alias/{alias}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/data/region/{region}/alias/{alias}/auth
        public Task<_cloud_project_ai.DataStoreAuth> GetV1CloudProjectServiceNameAiDataRegionRegionAliasAliasAuthAsync(string alias, string region, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/data/region/{region}/alias/{alias}/auth";
            return this.SendAsync<_cloud_project_ai.DataStoreAuth>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/job
        public Task<_cloud_project_ai_job.Job[]> GetV1CloudProjectServiceNameAiJobAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? labelSelector, [System.Runtime.InteropServices.OptionalAttribute()] _cloud_project_ai.OrderEnum? order, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? page, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? size, [System.Runtime.InteropServices.OptionalAttribute()] System.String? sort, [System.Runtime.InteropServices.OptionalAttribute()] _cloud_project_ai_job.JobStateEnum[]? statusState, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? updatedAfter, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? updatedBefore, [System.Runtime.InteropServices.OptionalAttribute()] System.String? userName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("labelSelector", labelSelector);
            queryParametersTemp.Add("order", order);
            queryParametersTemp.Add("page", page);
            queryParametersTemp.Add("size", size);
            queryParametersTemp.Add("sort", sort);
            queryParametersTemp.Add("statusState", statusState);
            queryParametersTemp.Add("updatedAfter", updatedAfter);
            queryParametersTemp.Add("updatedBefore", updatedBefore);
            queryParametersTemp.Add("userName", userName);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/ai/job{queryParameters}";
            return this.SendAsync<_cloud_project_ai_job.Job[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/job
        public Task<_cloud_project_ai_job.Job> PostV1CloudProjectServiceNameAiJobAsync(_cloud_project_ai_job.JobSpecInput _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/job";
            return this.SendAsync<_cloud_project_ai_job.Job>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/job/capabilities/presetImage
        public Task<_cloud_project_ai_job.PresetImage[]> GetV1CloudProjectServiceNameAiJobCapabilitiesPresetImageAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/job/capabilities/presetImage";
            return this.SendAsync<_cloud_project_ai_job.PresetImage[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/job/command
        public Task<_cloud_project_ai.Command> PostV1CloudProjectServiceNameAiJobCommandAsync(_cloud_project_ai_job.JobSpecInput _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/job/command";
            return this.SendAsync<_cloud_project_ai.Command>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/job/{jobId}
        public Task DeleteV1CloudProjectServiceNameAiJobJobIdAsync(System.Guid jobId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? force) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("force", force);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/ai/job/{jobId}{queryParameters}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/job/{jobId}
        public Task<_cloud_project_ai_job.Job> GetV1CloudProjectServiceNameAiJobJobIdAsync(System.Guid jobId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/job/{jobId}";
            return this.SendAsync<_cloud_project_ai_job.Job>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/job/{jobId}/datasync
        public Task<_cloud_project_ai_volume.DataSync> PostV1CloudProjectServiceNameAiJobJobIdDatasyncAsync(_cloud_project_ai_volume.DataSyncSpec _body, System.Guid jobId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/job/{jobId}/datasync";
            return this.SendAsync<_cloud_project_ai_volume.DataSync>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/job/{jobId}/kill
        public Task PutV1CloudProjectServiceNameAiJobJobIdKillAsync(System.Guid jobId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/job/{jobId}/kill";
            return this.SendAsync("PUT", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/job/{jobId}/label
        public Task PutV1CloudProjectServiceNameAiJobJobIdLabelAsync(_cloud_project_ai.Label _body, System.Guid jobId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/job/{jobId}/label";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/job/{jobId}/log
        public Task<_cloud_project_ai.Logs> GetV1CloudProjectServiceNameAiJobJobIdLogAsync(System.Guid jobId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? page, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? size) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("page", page);
            queryParametersTemp.Add("size", size);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/ai/job/{jobId}/log{queryParameters}";
            return this.SendAsync<_cloud_project_ai.Logs>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/notebook
        public Task<_cloud_project_ai_notebook.Notebook[]> GetV1CloudProjectServiceNameAiNotebookAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? labelSelector, [System.Runtime.InteropServices.OptionalAttribute()] _cloud_project_ai.OrderEnum? order, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? page, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? size, [System.Runtime.InteropServices.OptionalAttribute()] System.String? sort, [System.Runtime.InteropServices.OptionalAttribute()] _cloud_project_ai_notebook.NotebookStateEnum[]? statusState, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? updatedAfter, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? updatedBefore, [System.Runtime.InteropServices.OptionalAttribute()] System.String? userName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? withSpark) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("labelSelector", labelSelector);
            queryParametersTemp.Add("order", order);
            queryParametersTemp.Add("page", page);
            queryParametersTemp.Add("size", size);
            queryParametersTemp.Add("sort", sort);
            queryParametersTemp.Add("statusState", statusState);
            queryParametersTemp.Add("updatedAfter", updatedAfter);
            queryParametersTemp.Add("updatedBefore", updatedBefore);
            queryParametersTemp.Add("userName", userName);
            queryParametersTemp.Add("withSpark", withSpark);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/ai/notebook{queryParameters}";
            return this.SendAsync<_cloud_project_ai_notebook.Notebook[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/notebook
        public Task<_cloud_project_ai_notebook.Notebook> PostV1CloudProjectServiceNameAiNotebookAsync(_cloud_project_ai_notebook.NotebookSpecInput _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/notebook";
            return this.SendAsync<_cloud_project_ai_notebook.Notebook>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/notebook/capabilities/editor
        public Task<_cloud_project_ai_notebook.Editor[]> GetV1CloudProjectServiceNameAiNotebookCapabilitiesEditorAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? compatibleWithFramework) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("compatibleWithFramework", compatibleWithFramework);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/ai/notebook/capabilities/editor{queryParameters}";
            return this.SendAsync<_cloud_project_ai_notebook.Editor[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/notebook/capabilities/framework
        public Task<_cloud_project_ai_notebook.Framework[]> GetV1CloudProjectServiceNameAiNotebookCapabilitiesFrameworkAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? compatibleWithEditor) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("compatibleWithEditor", compatibleWithEditor);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/ai/notebook/capabilities/framework{queryParameters}";
            return this.SendAsync<_cloud_project_ai_notebook.Framework[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/notebook/command
        public Task<_cloud_project_ai.Command> PostV1CloudProjectServiceNameAiNotebookCommandAsync(_cloud_project_ai_notebook.NotebookSpecInput _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/notebook/command";
            return this.SendAsync<_cloud_project_ai.Command>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/notebook/{notebookId}
        public Task DeleteV1CloudProjectServiceNameAiNotebookNotebookIdAsync(string notebookId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? force) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("force", force);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/ai/notebook/{notebookId}{queryParameters}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/notebook/{notebookId}
        public Task<_cloud_project_ai_notebook.Notebook> GetV1CloudProjectServiceNameAiNotebookNotebookIdAsync(string notebookId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/notebook/{notebookId}";
            return this.SendAsync<_cloud_project_ai_notebook.Notebook>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/notebook/{notebookId}
        public Task PutV1CloudProjectServiceNameAiNotebookNotebookIdAsync(_cloud_project_ai_notebook.NotebookUpdate _body, string notebookId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/notebook/{notebookId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/notebook/{notebookId}/backup
        public Task<_cloud_project_ai_notebook.Backup[]> GetV1CloudProjectServiceNameAiNotebookNotebookIdBackupAsync(string notebookId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _cloud_project_ai.OrderEnum? order, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? page, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? size, [System.Runtime.InteropServices.OptionalAttribute()] System.String? sort, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? updatedAfter, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? updatedBefore) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("order", order);
            queryParametersTemp.Add("page", page);
            queryParametersTemp.Add("size", size);
            queryParametersTemp.Add("sort", sort);
            queryParametersTemp.Add("updatedAfter", updatedAfter);
            queryParametersTemp.Add("updatedBefore", updatedBefore);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/ai/notebook/{notebookId}/backup{queryParameters}";
            return this.SendAsync<_cloud_project_ai_notebook.Backup[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/notebook/{notebookId}/backup/{backupId}
        public Task<_cloud_project_ai_notebook.Backup> GetV1CloudProjectServiceNameAiNotebookNotebookIdBackupBackupIdAsync(string backupId, string notebookId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/notebook/{notebookId}/backup/{backupId}";
            return this.SendAsync<_cloud_project_ai_notebook.Backup>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/notebook/{notebookId}/backup/{backupId}/fork
        public Task<_cloud_project_ai_notebook.Notebook> PostV1CloudProjectServiceNameAiNotebookNotebookIdBackupBackupIdForkAsync(string backupId, string notebookId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/notebook/{notebookId}/backup/{backupId}/fork";
            return this.SendAsync<_cloud_project_ai_notebook.Notebook>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/notebook/{notebookId}/datasync
        public Task<_cloud_project_ai_volume.DataSync> PostV1CloudProjectServiceNameAiNotebookNotebookIdDatasyncAsync(_cloud_project_ai_volume.DataSyncSpec _body, string notebookId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/notebook/{notebookId}/datasync";
            return this.SendAsync<_cloud_project_ai_volume.DataSync>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/notebook/{notebookId}/label
        public Task PutV1CloudProjectServiceNameAiNotebookNotebookIdLabelAsync(_cloud_project_ai.Label _body, string notebookId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/notebook/{notebookId}/label";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/notebook/{notebookId}/log
        public Task<_cloud_project_ai.Logs> GetV1CloudProjectServiceNameAiNotebookNotebookIdLogAsync(string notebookId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/notebook/{notebookId}/log";
            return this.SendAsync<_cloud_project_ai.Logs>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/notebook/{notebookId}/restart
        public Task PutV1CloudProjectServiceNameAiNotebookNotebookIdRestartAsync(string notebookId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/notebook/{notebookId}/restart";
            return this.SendAsync("PUT", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/notebook/{notebookId}/start
        public Task PutV1CloudProjectServiceNameAiNotebookNotebookIdStartAsync(string notebookId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/notebook/{notebookId}/start";
            return this.SendAsync("PUT", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/notebook/{notebookId}/stop
        public Task PutV1CloudProjectServiceNameAiNotebookNotebookIdStopAsync(string notebookId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/notebook/{notebookId}/stop";
            return this.SendAsync("PUT", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/partners/region
        public Task<_cloud_project_ai_capabilities.Region[]> GetV1CloudProjectServiceNameAiPartnersRegionAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/partners/region";
            return this.SendAsync<_cloud_project_ai_capabilities.Region[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/partners/region/{region}
        public Task<_cloud_project_ai_capabilities.Region> GetV1CloudProjectServiceNameAiPartnersRegionRegionAsync(string region, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/partners/region/{region}";
            return this.SendAsync<_cloud_project_ai_capabilities.Region>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/partners/region/{region}/partner
        public Task<_cloud_project_ai_partner.Partner[]> GetV1CloudProjectServiceNameAiPartnersRegionRegionPartnerAsync(string region, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/partners/region/{region}/partner";
            return this.SendAsync<_cloud_project_ai_partner.Partner[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/partners/region/{region}/partner/{partnerId}
        public Task<_cloud_project_ai_partner.Partner> GetV1CloudProjectServiceNameAiPartnersRegionRegionPartnerPartnerIdAsync(string partnerId, string region, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/partners/region/{region}/partner/{partnerId}";
            return this.SendAsync<_cloud_project_ai_partner.Partner>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/registry
        public Task<_cloud_project_ai_registry.Registry[]> GetV1CloudProjectServiceNameAiRegistryAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/registry";
            return this.SendAsync<_cloud_project_ai_registry.Registry[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/registry
        public Task<_cloud_project_ai_registry.Registry> PostV1CloudProjectServiceNameAiRegistryAsync(_cloud_project_ai_registry.Registry _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/registry";
            return this.SendAsync<_cloud_project_ai_registry.Registry>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/registry/{registryId}
        public Task DeleteV1CloudProjectServiceNameAiRegistryRegistryIdAsync(string registryId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/registry/{registryId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/registry/{registryId}
        public Task<_cloud_project_ai_registry.Registry> GetV1CloudProjectServiceNameAiRegistryRegistryIdAsync(string registryId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/registry/{registryId}";
            return this.SendAsync<_cloud_project_ai_registry.Registry>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/registry/{registryId}
        public Task PutV1CloudProjectServiceNameAiRegistryRegistryIdAsync(_cloud_project_ai_registry.RegistryUpdateInput _body, string registryId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/registry/{registryId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/token
        public Task<_cloud_project_ai_token.Token[]> GetV1CloudProjectServiceNameAiTokenAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/token";
            return this.SendAsync<_cloud_project_ai_token.Token[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/token
        public Task<_cloud_project_ai_token.Token> PostV1CloudProjectServiceNameAiTokenAsync(_cloud_project_ai_token.TokenSpec _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/token";
            return this.SendAsync<_cloud_project_ai_token.Token>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/token/{id}
        public Task DeleteV1CloudProjectServiceNameAiTokenIdAsync(System.Guid id, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/token/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/token/{id}
        public Task<_cloud_project_ai_token.Token> GetV1CloudProjectServiceNameAiTokenIdAsync(System.Guid id, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/token/{id}";
            return this.SendAsync<_cloud_project_ai_token.Token>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ai/token/{id}/renew
        public Task<_cloud_project_ai_token.Token> PostV1CloudProjectServiceNameAiTokenIdRenewAsync(System.Guid id, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ai/token/{id}/renew";
            return this.SendAsync<_cloud_project_ai_token.Token>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/alerting
        public Task<System.String[]> GetV1CloudProjectServiceNameAlertingAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/alerting";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/alerting
        public Task<_cloud.Alerting> PostV1CloudProjectServiceNameAlertingAsync(_cloud.AlertingDelayEnum delay, string email, long monthlyThreshold, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("delay", delay);
            _body.Add("email", email);
            _body.Add("monthlyThreshold", monthlyThreshold);
            string uri = $"/v1/cloud/project/{serviceName}/alerting";
            return this.SendAsync<_cloud.Alerting>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/alerting/{id}
        public Task DeleteV1CloudProjectServiceNameAlertingIdAsync(string id, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/alerting/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/alerting/{id}
        public Task<_cloud.Alerting> GetV1CloudProjectServiceNameAlertingIdAsync(string id, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/alerting/{id}";
            return this.SendAsync<_cloud.Alerting>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/alerting/{id}
        public Task PutV1CloudProjectServiceNameAlertingIdAsync(_cloud.Alerting _body, string id, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/alerting/{id}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/alerting/{id}/alert
        public Task<System.Int64[]> GetV1CloudProjectServiceNameAlertingIdAlertAsync(string id, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/alerting/{id}/alert";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/alerting/{id}/alert/{alertId}
        public Task<_cloud.AlertingAlert> GetV1CloudProjectServiceNameAlertingIdAlertAlertIdAsync(long alertId, string id, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/alerting/{id}/alert/{alertId}";
            return this.SendAsync<_cloud.AlertingAlert>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/bill
        public Task<_cloud_project.Bill[]> GetV1CloudProjectServiceNameBillAsync(System.DateTime from, string serviceName, System.DateTime to) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("from", from);
            queryParametersTemp.Add("to", to);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/bill{queryParameters}";
            return this.SendAsync<_cloud_project.Bill[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/cancel
        public Task PostV1CloudProjectServiceNameCancelAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/cancel";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/capabilities/containerRegistry
        public Task<_cloud_containerRegistry.Capability[]> GetV1CloudProjectServiceNameCapabilitiesContainerRegistryAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/capabilities/containerRegistry";
            return this.SendAsync<_cloud_containerRegistry.Capability[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/capabilities/kube/admissionplugins
        public Task<_cloud.ProjectKubeCustomizationAPIServerAdmissionPluginsEnum[]> GetV1CloudProjectServiceNameCapabilitiesKubeAdmissionpluginsAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/capabilities/kube/admissionplugins";
            return this.SendAsync<_cloud.ProjectKubeCustomizationAPIServerAdmissionPluginsEnum[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/capabilities/kube/flavors
        public Task<_cloud_kube.Flavor[]> GetV1CloudProjectServiceNameCapabilitiesKubeFlavorsAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? region) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("region", region);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/capabilities/kube/flavors{queryParameters}";
            return this.SendAsync<_cloud_kube.Flavor[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/capabilities/kube/log/kind
        public Task<System.String[]> GetV1CloudProjectServiceNameCapabilitiesKubeLogKindAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/capabilities/kube/log/kind";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/capabilities/kube/log/kind/{name}
        public Task<_dbaas_logs.LogKind> GetV1CloudProjectServiceNameCapabilitiesKubeLogKindNameAsync(string name, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/capabilities/kube/log/kind/{name}";
            return this.SendAsync<_dbaas_logs.LogKind>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/capabilities/kube/regions
        public Task<System.String[]> GetV1CloudProjectServiceNameCapabilitiesKubeRegionsAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/capabilities/kube/regions";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/capabilities/loadbalancer/region
        public Task<System.String[]> GetV1CloudProjectServiceNameCapabilitiesLoadbalancerRegionAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/capabilities/loadbalancer/region";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/capabilities/loadbalancer/region/{regionName}
        public Task<_cloud_project_loadbalancer.Region> GetV1CloudProjectServiceNameCapabilitiesLoadbalancerRegionRegionNameAsync(string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/capabilities/loadbalancer/region/{regionName}";
            return this.SendAsync<_cloud_project_loadbalancer.Region>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/capabilities/productAvailability
        public Task<_cloud_capabilities.Availability> GetV1CloudProjectServiceNameCapabilitiesProductAvailabilityAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? addonFamily, [System.Runtime.InteropServices.OptionalAttribute()] System.String? planCode, [System.Runtime.InteropServices.OptionalAttribute()] System.String? planFamily, [System.Runtime.InteropServices.OptionalAttribute()] System.String? product) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("addonFamily", addonFamily);
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            queryParametersTemp.Add("planCode", planCode);
            queryParametersTemp.Add("planFamily", planFamily);
            queryParametersTemp.Add("product", product);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/capabilities/productAvailability{queryParameters}";
            return this.SendAsync<_cloud_capabilities.Availability>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/changeContact
        public Task<System.Int64[]> PostV1CloudProjectServiceNameChangeContactAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactTech) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("contactAdmin", contactAdmin);
            _body.Add("contactBilling", contactBilling);
            _body.Add("contactTech", contactTech);
            string uri = $"/v1/cloud/project/{serviceName}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/confirmTermination
        public Task<System.String> PostV1CloudProjectServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] System.String? commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum? futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum? reason) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("commentary", commentary);
            _body.Add("futureUse", futureUse);
            _body.Add("reason", reason);
            _body.Add("token", token);
            string uri = $"/v1/cloud/project/{serviceName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/consumption
        public Task<_cloud_project.ProjectUsage> GetV1CloudProjectServiceNameConsumptionAsync(System.DateTime from, string serviceName, System.DateTime to) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("from", from);
            queryParametersTemp.Add("to", to);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/consumption{queryParameters}";
            return this.SendAsync<_cloud_project.ProjectUsage>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/containerRegistry
        public Task<_cloud_containerRegistry.Registry[]> GetV1CloudProjectServiceNameContainerRegistryAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/containerRegistry";
            return this.SendAsync<_cloud_containerRegistry.Registry[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/containerRegistry
        public Task<_cloud_containerRegistry.Registry> PostV1CloudProjectServiceNameContainerRegistryAsync(_cloud.ProjectContainerRegistryCreation _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/containerRegistry";
            return this.SendAsync<_cloud_containerRegistry.Registry>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/containerRegistry/{registryID}
        public Task DeleteV1CloudProjectServiceNameContainerRegistryRegistryIDAsync(string registryID, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/containerRegistry/{registryID}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/containerRegistry/{registryID}
        public Task<_cloud_containerRegistry.Registry> GetV1CloudProjectServiceNameContainerRegistryRegistryIDAsync(string registryID, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/containerRegistry/{registryID}";
            return this.SendAsync<_cloud_containerRegistry.Registry>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/containerRegistry/{registryID}
        public Task PutV1CloudProjectServiceNameContainerRegistryRegistryIDAsync(_cloud.ProjectContainerRegistryUpdate _body, string registryID, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/containerRegistry/{registryID}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/containerRegistry/{registryID}/capabilities/plan
        public Task<_cloud_containerRegistry.Plan[]> GetV1CloudProjectServiceNameContainerRegistryRegistryIDCapabilitiesPlanAsync(string registryID, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/containerRegistry/{registryID}/capabilities/plan";
            return this.SendAsync<_cloud_containerRegistry.Plan[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/containerRegistry/{registryID}/ipRestrictions/management
        public Task<_cloud_containerRegistry.IPRestrictions[]> GetV1CloudProjectServiceNameContainerRegistryRegistryIDIpRestrictionsManagementAsync(string registryID, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/containerRegistry/{registryID}/ipRestrictions/management";
            return this.SendAsync<_cloud_containerRegistry.IPRestrictions[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/containerRegistry/{registryID}/ipRestrictions/management
        public Task<_cloud_containerRegistry.IPRestrictions[]> PutV1CloudProjectServiceNameContainerRegistryRegistryIDIpRestrictionsManagementAsync(_cloud_containerRegistry.IPRestrictions[] _body, string registryID, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/containerRegistry/{registryID}/ipRestrictions/management";
            return this.SendAsync<_cloud_containerRegistry.IPRestrictions[]>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/containerRegistry/{registryID}/ipRestrictions/registry
        public Task<_cloud_containerRegistry.IPRestrictions[]> GetV1CloudProjectServiceNameContainerRegistryRegistryIDIpRestrictionsRegistryAsync(string registryID, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/containerRegistry/{registryID}/ipRestrictions/registry";
            return this.SendAsync<_cloud_containerRegistry.IPRestrictions[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/containerRegistry/{registryID}/ipRestrictions/registry
        public Task<_cloud_containerRegistry.IPRestrictions[]> PutV1CloudProjectServiceNameContainerRegistryRegistryIDIpRestrictionsRegistryAsync(_cloud_containerRegistry.IPRestrictions[] _body, string registryID, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/containerRegistry/{registryID}/ipRestrictions/registry";
            return this.SendAsync<_cloud_containerRegistry.IPRestrictions[]>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/containerRegistry/{registryID}/openIdConnect
        public Task DeleteV1CloudProjectServiceNameContainerRegistryRegistryIDOpenIdConnectAsync(string registryID, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/containerRegistry/{registryID}/openIdConnect";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/containerRegistry/{registryID}/openIdConnect
        public Task<_cloud_containerRegistry.OIDCConfiguration> GetV1CloudProjectServiceNameContainerRegistryRegistryIDOpenIdConnectAsync(string registryID, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/containerRegistry/{registryID}/openIdConnect";
            return this.SendAsync<_cloud_containerRegistry.OIDCConfiguration>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/containerRegistry/{registryID}/openIdConnect
        public Task PostV1CloudProjectServiceNameContainerRegistryRegistryIDOpenIdConnectAsync(_cloud_containerRegistry.OIDCPost _body, string registryID, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/containerRegistry/{registryID}/openIdConnect";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/containerRegistry/{registryID}/openIdConnect
        public Task PutV1CloudProjectServiceNameContainerRegistryRegistryIDOpenIdConnectAsync(_cloud_containerRegistry.OIDCPut _body, string registryID, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/containerRegistry/{registryID}/openIdConnect";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/containerRegistry/{registryID}/plan
        public Task<_cloud_containerRegistry.Plan> GetV1CloudProjectServiceNameContainerRegistryRegistryIDPlanAsync(string registryID, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/containerRegistry/{registryID}/plan";
            return this.SendAsync<_cloud_containerRegistry.Plan>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/containerRegistry/{registryID}/plan
        public Task PutV1CloudProjectServiceNameContainerRegistryRegistryIDPlanAsync(_cloud_containerRegistry.PlanUpdate _body, string registryID, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/containerRegistry/{registryID}/plan";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/containerRegistry/{registryID}/users
        public Task<_cloud_containerRegistry.User[]> GetV1CloudProjectServiceNameContainerRegistryRegistryIDUsersAsync(string registryID, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/containerRegistry/{registryID}/users";
            return this.SendAsync<_cloud_containerRegistry.User[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/containerRegistry/{registryID}/users
        public Task<_cloud_containerRegistry.User> PostV1CloudProjectServiceNameContainerRegistryRegistryIDUsersAsync(_cloud.ProjectContainerRegistryUsersCreation _body, string registryID, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/containerRegistry/{registryID}/users";
            return this.SendAsync<_cloud_containerRegistry.User>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/containerRegistry/{registryID}/users/{userID}
        public Task DeleteV1CloudProjectServiceNameContainerRegistryRegistryIDUsersUserIDAsync(string registryID, string serviceName, string userID) {
            string uri = $"/v1/cloud/project/{serviceName}/containerRegistry/{registryID}/users/{userID}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/containerRegistry/{registryID}/users/{userID}
        public Task<_cloud_containerRegistry.User> GetV1CloudProjectServiceNameContainerRegistryRegistryIDUsersUserIDAsync(string registryID, string serviceName, string userID) {
            string uri = $"/v1/cloud/project/{serviceName}/containerRegistry/{registryID}/users/{userID}";
            return this.SendAsync<_cloud_containerRegistry.User>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/containerRegistry/{registryID}/users/{userID}/setAsAdmin
        public Task PutV1CloudProjectServiceNameContainerRegistryRegistryIDUsersUserIDSetAsAdminAsync(string registryID, string serviceName, string userID) {
            string uri = $"/v1/cloud/project/{serviceName}/containerRegistry/{registryID}/users/{userID}/setAsAdmin";
            return this.SendAsync("PUT", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/credit
        public Task<System.Int64[]> GetV1CloudProjectServiceNameCreditAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/credit";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/credit
        public Task PostV1CloudProjectServiceNameCreditAsync(string code, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("code", code);
            string uri = $"/v1/cloud/project/{serviceName}/credit";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/credit/{id}
        public Task<_cloud.Credit> GetV1CloudProjectServiceNameCreditIdAsync(long id, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/credit/{id}";
            return this.SendAsync<_cloud.Credit>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/dataProcessing/authorization
        public Task<_cloud_project_dataProcessing.AuthorizationStatus> GetV1CloudProjectServiceNameDataProcessingAuthorizationAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/dataProcessing/authorization";
            return this.SendAsync<_cloud_project_dataProcessing.AuthorizationStatus>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/dataProcessing/authorization
        public Task PostV1CloudProjectServiceNameDataProcessingAuthorizationAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/dataProcessing/authorization";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/dataProcessing/capabilities
        public Task<_cloud_project_dataProcessing.Capability[]> GetV1CloudProjectServiceNameDataProcessingCapabilitiesAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/dataProcessing/capabilities";
            return this.SendAsync<_cloud_project_dataProcessing.Capability[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/dataProcessing/jobs
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDataProcessingJobsAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/dataProcessing/jobs";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/dataProcessing/jobs
        public Task<_cloud_project_dataProcessing.Job> PostV1CloudProjectServiceNameDataProcessingJobsAsync(_cloud_project_dataProcessing.Job _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/dataProcessing/jobs";
            return this.SendAsync<_cloud_project_dataProcessing.Job>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/dataProcessing/jobs/{jobId}
        public Task DeleteV1CloudProjectServiceNameDataProcessingJobsJobIdAsync(System.Guid jobId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/dataProcessing/jobs/{jobId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/dataProcessing/jobs/{jobId}
        public Task<_cloud_project_dataProcessing.Job> GetV1CloudProjectServiceNameDataProcessingJobsJobIdAsync(System.Guid jobId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/dataProcessing/jobs/{jobId}";
            return this.SendAsync<_cloud_project_dataProcessing.Job>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/dataProcessing/jobs/{jobId}/logs
        public Task<_cloud_project_dataProcessing.JobLogs> GetV1CloudProjectServiceNameDataProcessingJobsJobIdLogsAsync(System.Guid jobId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? from) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("from", from);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/dataProcessing/jobs/{jobId}/logs{queryParameters}";
            return this.SendAsync<_cloud_project_dataProcessing.JobLogs>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/dataProcessing/notebooks
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDataProcessingNotebooksAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/dataProcessing/notebooks";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/dataProcessing/notebooks
        public Task<_cloud_project_dataProcessing_notebook.Notebook> PostV1CloudProjectServiceNameDataProcessingNotebooksAsync(_cloud_project_dataProcessing_notebook.NotebookSpec _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/dataProcessing/notebooks";
            return this.SendAsync<_cloud_project_dataProcessing_notebook.Notebook>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/dataProcessing/notebooks/capabilities
        public Task<_cloud_project_dataProcessing_notebook.Capability[]> GetV1CloudProjectServiceNameDataProcessingNotebooksCapabilitiesAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/dataProcessing/notebooks/capabilities";
            return this.SendAsync<_cloud_project_dataProcessing_notebook.Capability[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/dataProcessing/notebooks/{notebookId}
        public Task DeleteV1CloudProjectServiceNameDataProcessingNotebooksNotebookIdAsync(System.Guid notebookId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/dataProcessing/notebooks/{notebookId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/dataProcessing/notebooks/{notebookId}
        public Task<_cloud_project_dataProcessing_notebook.Notebook> GetV1CloudProjectServiceNameDataProcessingNotebooksNotebookIdAsync(System.Guid notebookId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/dataProcessing/notebooks/{notebookId}";
            return this.SendAsync<_cloud_project_dataProcessing_notebook.Notebook>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/dataProcessing/notebooks/{notebookId}/start
        public Task PutV1CloudProjectServiceNameDataProcessingNotebooksNotebookIdStartAsync(System.Guid notebookId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/dataProcessing/notebooks/{notebookId}/start";
            return this.SendAsync("PUT", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/dataProcessing/notebooks/{notebookId}/stop
        public Task PutV1CloudProjectServiceNameDataProcessingNotebooksNotebookIdStopAsync(System.Guid notebookId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/dataProcessing/notebooks/{notebookId}/stop";
            return this.SendAsync("PUT", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/availability
        public Task<_cloud_project_database.Availability[]> GetV1CloudProjectServiceNameDatabaseAvailabilityAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _cloud_project_database_availability.ActionEnum? action, [System.Runtime.InteropServices.OptionalAttribute()] System.Guid? clusterId, [System.Runtime.InteropServices.OptionalAttribute()] _cloud_project_database_availability.TargetEnum? target) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("action", action);
            queryParametersTemp.Add("clusterId", clusterId);
            queryParametersTemp.Add("target", target);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/availability{queryParameters}";
            return this.SendAsync<_cloud_project_database.Availability[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/capabilities
        public Task<_cloud_project_database.Capabilities> GetV1CloudProjectServiceNameDatabaseCapabilitiesAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/capabilities";
            return this.SendAsync<_cloud_project_database.Capabilities>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseCassandraAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra
        public Task<_cloud_project_database.Service> PostV1CloudProjectServiceNameDatabaseCassandraAsync(_cloud_project_database.ServiceCreation _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra";
            return this.SendAsync<_cloud_project_database.Service>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}
        public Task DeleteV1CloudProjectServiceNameDatabaseCassandraClusterIdAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}
        public Task<_cloud_project_database.Service> GetV1CloudProjectServiceNameDatabaseCassandraClusterIdAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}";
            return this.SendAsync<_cloud_project_database.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}
        public Task<_cloud_project_database.Service> PutV1CloudProjectServiceNameDatabaseCassandraClusterIdAsync(_cloud_project_database.Service _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}";
            return this.SendAsync<_cloud_project_database.Service>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> GetV1CloudProjectServiceNameDatabaseCassandraClusterIdAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/advancedConfiguration";
            return this.SendAsync<Dictionary<string, string>>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> PutV1CloudProjectServiceNameDatabaseCassandraClusterIdAdvancedConfigurationAsync(Dictionary<string, string> _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/advancedConfiguration";
            return this.SendAsync<Dictionary<string, string>>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/backup
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseCassandraClusterIdBackupAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/backup";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/backup/{backupId}
        public Task<_cloud_project_database.Backup> GetV1CloudProjectServiceNameDatabaseCassandraClusterIdBackupBackupIdAsync(System.Guid backupId, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/backup/{backupId}";
            return this.SendAsync<_cloud_project_database.Backup>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/capabilities/advancedConfiguration
        public Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]> GetV1CloudProjectServiceNameDatabaseCassandraClusterIdCapabilitiesAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/capabilities/advancedConfiguration";
            return this.SendAsync<_cloud_project_database_capabilities_advancedConfiguration.Property[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/capabilities/integration
        public Task<_cloud_project_database_capabilities.Integration[]> GetV1CloudProjectServiceNameDatabaseCassandraClusterIdCapabilitiesIntegrationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/capabilities/integration";
            return this.SendAsync<_cloud_project_database_capabilities.Integration[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/certificates
        public Task<_cloud_project_database_service.Certificates> GetV1CloudProjectServiceNameDatabaseCassandraClusterIdCertificatesAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/certificates";
            return this.SendAsync<_cloud_project_database_service.Certificates>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/integration
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseCassandraClusterIdIntegrationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/integration";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/integration
        public Task<_cloud_project_database_service.Integration> PostV1CloudProjectServiceNameDatabaseCassandraClusterIdIntegrationAsync(_cloud_project_database_service.Integration _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/integration";
            return this.SendAsync<_cloud_project_database_service.Integration>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/integration/{integrationId}
        public Task DeleteV1CloudProjectServiceNameDatabaseCassandraClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/integration/{integrationId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/integration/{integrationId}
        public Task<_cloud_project_database_service.Integration> GetV1CloudProjectServiceNameDatabaseCassandraClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/integration/{integrationId}";
            return this.SendAsync<_cloud_project_database_service.Integration>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/ipRestriction
        public Task<System.String[]> GetV1CloudProjectServiceNameDatabaseCassandraClusterIdIpRestrictionAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/ipRestriction";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/ipRestriction
        public Task<_cloud_project_database.IpRestriction> PostV1CloudProjectServiceNameDatabaseCassandraClusterIdIpRestrictionAsync(_cloud_project_database.IpRestrictionCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/ipRestriction";
            return this.SendAsync<_cloud_project_database.IpRestriction>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/ipRestriction/{ipBlock}
        public Task DeleteV1CloudProjectServiceNameDatabaseCassandraClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/ipRestriction/{ipBlock}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> GetV1CloudProjectServiceNameDatabaseCassandraClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/ipRestriction/{ipBlock}";
            return this.SendAsync<_cloud_project_database.IpRestriction>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> PutV1CloudProjectServiceNameDatabaseCassandraClusterIdIpRestrictionIpBlockAsync(_cloud_project_database.IpRestriction _body, System.Guid clusterId, string ipBlock, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/ipRestriction/{ipBlock}";
            return this.SendAsync<_cloud_project_database.IpRestriction>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/log/subscription
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseCassandraClusterIdLogSubscriptionAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? kind) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("kind", kind);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/log/subscription{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostV1CloudProjectServiceNameDatabaseCassandraClusterIdLogSubscriptionAsync(_cloud_project_database.LogSubscriptionCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/log/subscription";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteV1CloudProjectServiceNameDatabaseCassandraClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetV1CloudProjectServiceNameDatabaseCassandraClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscription>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/logs
        public Task<_cloud_project_database_service.LogEntry[]> GetV1CloudProjectServiceNameDatabaseCassandraClusterIdLogsAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/logs";
            return this.SendAsync<_cloud_project_database_service.LogEntry[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/maintenance
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseCassandraClusterIdMaintenanceAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/maintenance";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/maintenance/{maintenanceId}
        public Task<_cloud_project_database_service.Maintenance> GetV1CloudProjectServiceNameDatabaseCassandraClusterIdMaintenanceMaintenanceIdAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/maintenance/{maintenanceId}";
            return this.SendAsync<_cloud_project_database_service.Maintenance>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/maintenance/{maintenanceId}/apply
        public Task<_cloud_project_database_service.Maintenance> PostV1CloudProjectServiceNameDatabaseCassandraClusterIdMaintenanceMaintenanceIdApplyAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/maintenance/{maintenanceId}/apply";
            return this.SendAsync<_cloud_project_database_service.Maintenance>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/metric
        public Task<System.String[]> GetV1CloudProjectServiceNameDatabaseCassandraClusterIdMetricAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? extended) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("extended", extended);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/metric{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/metric/{metricName}
        public Task<_cloud_project_database_service.Metric> GetV1CloudProjectServiceNameDatabaseCassandraClusterIdMetricMetricNameAsync(System.Guid clusterId, string metricName, _cloud_project_database_service.MetricPeriodEnum period, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("period", period);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/metric/{metricName}{queryParameters}";
            return this.SendAsync<_cloud_project_database_service.Metric>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/node
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseCassandraClusterIdNodeAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/node";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/node/{nodeId}
        public Task<_cloud_project_database_service.Node> GetV1CloudProjectServiceNameDatabaseCassandraClusterIdNodeNodeIdAsync(System.Guid clusterId, System.Guid nodeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/node/{nodeId}";
            return this.SendAsync<_cloud_project_database_service.Node>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/user
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseCassandraClusterIdUserAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/user";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/user
        public Task<_cloud_project_database_service.UserWithPassword> PostV1CloudProjectServiceNameDatabaseCassandraClusterIdUserAsync(_cloud_project_database_service.UserCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/user";
            return this.SendAsync<_cloud_project_database_service.UserWithPassword>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/user/{userId}
        public Task DeleteV1CloudProjectServiceNameDatabaseCassandraClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/user/{userId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/user/{userId}
        public Task<_cloud_project_database_service.User> GetV1CloudProjectServiceNameDatabaseCassandraClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/user/{userId}";
            return this.SendAsync<_cloud_project_database_service.User>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/user/{userId}/credentials/reset
        public Task<_cloud_project_database_service.UserWithPassword> PostV1CloudProjectServiceNameDatabaseCassandraClusterIdUserUserIdCredentialsResetAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/cassandra/{clusterId}/user/{userId}/credentials/reset";
            return this.SendAsync<_cloud_project_database_service.UserWithPassword>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseGrafanaAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana
        public Task<_cloud_project_database.Service> PostV1CloudProjectServiceNameDatabaseGrafanaAsync(_cloud_project_database.ServiceCreation _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana";
            return this.SendAsync<_cloud_project_database.Service>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}
        public Task DeleteV1CloudProjectServiceNameDatabaseGrafanaClusterIdAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}
        public Task<_cloud_project_database.Service> GetV1CloudProjectServiceNameDatabaseGrafanaClusterIdAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}";
            return this.SendAsync<_cloud_project_database.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}
        public Task<_cloud_project_database.Service> PutV1CloudProjectServiceNameDatabaseGrafanaClusterIdAsync(_cloud_project_database.Service _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}";
            return this.SendAsync<_cloud_project_database.Service>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> GetV1CloudProjectServiceNameDatabaseGrafanaClusterIdAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}/advancedConfiguration";
            return this.SendAsync<Dictionary<string, string>>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> PutV1CloudProjectServiceNameDatabaseGrafanaClusterIdAdvancedConfigurationAsync(Dictionary<string, string> _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}/advancedConfiguration";
            return this.SendAsync<Dictionary<string, string>>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}/backup
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseGrafanaClusterIdBackupAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}/backup";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}/backup/{backupId}
        public Task<_cloud_project_database.Backup> GetV1CloudProjectServiceNameDatabaseGrafanaClusterIdBackupBackupIdAsync(System.Guid backupId, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}/backup/{backupId}";
            return this.SendAsync<_cloud_project_database.Backup>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}/capabilities/advancedConfiguration
        public Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]> GetV1CloudProjectServiceNameDatabaseGrafanaClusterIdCapabilitiesAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}/capabilities/advancedConfiguration";
            return this.SendAsync<_cloud_project_database_capabilities_advancedConfiguration.Property[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}/capabilities/integration
        public Task<_cloud_project_database_capabilities.Integration[]> GetV1CloudProjectServiceNameDatabaseGrafanaClusterIdCapabilitiesIntegrationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}/capabilities/integration";
            return this.SendAsync<_cloud_project_database_capabilities.Integration[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}/integration
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseGrafanaClusterIdIntegrationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}/integration";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}/integration
        public Task<_cloud_project_database_service.Integration> PostV1CloudProjectServiceNameDatabaseGrafanaClusterIdIntegrationAsync(_cloud_project_database_service.Integration _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}/integration";
            return this.SendAsync<_cloud_project_database_service.Integration>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}/integration/{integrationId}
        public Task DeleteV1CloudProjectServiceNameDatabaseGrafanaClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}/integration/{integrationId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}/integration/{integrationId}
        public Task<_cloud_project_database_service.Integration> GetV1CloudProjectServiceNameDatabaseGrafanaClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}/integration/{integrationId}";
            return this.SendAsync<_cloud_project_database_service.Integration>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}/ipRestriction
        public Task<System.String[]> GetV1CloudProjectServiceNameDatabaseGrafanaClusterIdIpRestrictionAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}/ipRestriction";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}/ipRestriction
        public Task<_cloud_project_database.IpRestriction> PostV1CloudProjectServiceNameDatabaseGrafanaClusterIdIpRestrictionAsync(_cloud_project_database.IpRestrictionCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}/ipRestriction";
            return this.SendAsync<_cloud_project_database.IpRestriction>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}/ipRestriction/{ipBlock}
        public Task DeleteV1CloudProjectServiceNameDatabaseGrafanaClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}/ipRestriction/{ipBlock}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> GetV1CloudProjectServiceNameDatabaseGrafanaClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}/ipRestriction/{ipBlock}";
            return this.SendAsync<_cloud_project_database.IpRestriction>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> PutV1CloudProjectServiceNameDatabaseGrafanaClusterIdIpRestrictionIpBlockAsync(_cloud_project_database.IpRestriction _body, System.Guid clusterId, string ipBlock, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}/ipRestriction/{ipBlock}";
            return this.SendAsync<_cloud_project_database.IpRestriction>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}/log/subscription
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseGrafanaClusterIdLogSubscriptionAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? kind) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("kind", kind);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}/log/subscription{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostV1CloudProjectServiceNameDatabaseGrafanaClusterIdLogSubscriptionAsync(_cloud_project_database.LogSubscriptionCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}/log/subscription";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteV1CloudProjectServiceNameDatabaseGrafanaClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetV1CloudProjectServiceNameDatabaseGrafanaClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscription>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}/logs
        public Task<_cloud_project_database_service.LogEntry[]> GetV1CloudProjectServiceNameDatabaseGrafanaClusterIdLogsAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}/logs";
            return this.SendAsync<_cloud_project_database_service.LogEntry[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}/maintenance
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseGrafanaClusterIdMaintenanceAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}/maintenance";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}/maintenance/{maintenanceId}
        public Task<_cloud_project_database_service.Maintenance> GetV1CloudProjectServiceNameDatabaseGrafanaClusterIdMaintenanceMaintenanceIdAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}/maintenance/{maintenanceId}";
            return this.SendAsync<_cloud_project_database_service.Maintenance>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}/maintenance/{maintenanceId}/apply
        public Task<_cloud_project_database_service.Maintenance> PostV1CloudProjectServiceNameDatabaseGrafanaClusterIdMaintenanceMaintenanceIdApplyAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}/maintenance/{maintenanceId}/apply";
            return this.SendAsync<_cloud_project_database_service.Maintenance>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}/metric
        public Task<System.String[]> GetV1CloudProjectServiceNameDatabaseGrafanaClusterIdMetricAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? extended) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("extended", extended);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}/metric{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}/metric/{metricName}
        public Task<_cloud_project_database_service.Metric> GetV1CloudProjectServiceNameDatabaseGrafanaClusterIdMetricMetricNameAsync(System.Guid clusterId, string metricName, _cloud_project_database_service.MetricPeriodEnum period, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("period", period);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}/metric/{metricName}{queryParameters}";
            return this.SendAsync<_cloud_project_database_service.Metric>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}/node
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseGrafanaClusterIdNodeAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}/node";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}/node/{nodeId}
        public Task<_cloud_project_database_service.Node> GetV1CloudProjectServiceNameDatabaseGrafanaClusterIdNodeNodeIdAsync(System.Guid clusterId, System.Guid nodeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}/node/{nodeId}";
            return this.SendAsync<_cloud_project_database_service.Node>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}/user
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseGrafanaClusterIdUserAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}/user";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}/user/{userId}
        public Task<_cloud_project_database_service.User> GetV1CloudProjectServiceNameDatabaseGrafanaClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}/user/{userId}";
            return this.SendAsync<_cloud_project_database_service.User>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/grafana/{clusterId}/user/{userId}/credentials/reset
        public Task<_cloud_project_database_service.UserWithPassword> PostV1CloudProjectServiceNameDatabaseGrafanaClusterIdUserUserIdCredentialsResetAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/grafana/{clusterId}/user/{userId}/credentials/reset";
            return this.SendAsync<_cloud_project_database_service.UserWithPassword>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseKafkaAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka
        public Task<_cloud_project_database.Service> PostV1CloudProjectServiceNameDatabaseKafkaAsync(_cloud_project_database.ServiceCreation _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka";
            return this.SendAsync<_cloud_project_database.Service>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}
        public Task DeleteV1CloudProjectServiceNameDatabaseKafkaClusterIdAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}
        public Task<_cloud_project_database_kafka.Service> GetV1CloudProjectServiceNameDatabaseKafkaClusterIdAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}";
            return this.SendAsync<_cloud_project_database_kafka.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}
        public Task<_cloud_project_database_kafka.Service> PutV1CloudProjectServiceNameDatabaseKafkaClusterIdAsync(_cloud_project_database_kafka.Service _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}";
            return this.SendAsync<_cloud_project_database_kafka.Service>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/acl
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseKafkaClusterIdAclAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/acl";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/acl
        public Task<_cloud_project_database_kafka.TopicAcl> PostV1CloudProjectServiceNameDatabaseKafkaClusterIdAclAsync(_cloud_project_database_kafka.TopicAcl _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/acl";
            return this.SendAsync<_cloud_project_database_kafka.TopicAcl>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/acl/{aclId}
        public Task DeleteV1CloudProjectServiceNameDatabaseKafkaClusterIdAclAclIdAsync(System.Guid aclId, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/acl/{aclId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/acl/{aclId}
        public Task<_cloud_project_database_kafka.TopicAcl> GetV1CloudProjectServiceNameDatabaseKafkaClusterIdAclAclIdAsync(System.Guid aclId, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/acl/{aclId}";
            return this.SendAsync<_cloud_project_database_kafka.TopicAcl>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> GetV1CloudProjectServiceNameDatabaseKafkaClusterIdAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/advancedConfiguration";
            return this.SendAsync<Dictionary<string, string>>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> PutV1CloudProjectServiceNameDatabaseKafkaClusterIdAdvancedConfigurationAsync(Dictionary<string, string> _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/advancedConfiguration";
            return this.SendAsync<Dictionary<string, string>>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/capabilities/advancedConfiguration
        public Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]> GetV1CloudProjectServiceNameDatabaseKafkaClusterIdCapabilitiesAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/capabilities/advancedConfiguration";
            return this.SendAsync<_cloud_project_database_capabilities_advancedConfiguration.Property[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/capabilities/integration
        public Task<_cloud_project_database_capabilities.Integration[]> GetV1CloudProjectServiceNameDatabaseKafkaClusterIdCapabilitiesIntegrationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/capabilities/integration";
            return this.SendAsync<_cloud_project_database_capabilities.Integration[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/certificates
        public Task<_cloud_project_database_service.Certificates> GetV1CloudProjectServiceNameDatabaseKafkaClusterIdCertificatesAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/certificates";
            return this.SendAsync<_cloud_project_database_service.Certificates>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/integration
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseKafkaClusterIdIntegrationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/integration";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/integration
        public Task<_cloud_project_database_service.Integration> PostV1CloudProjectServiceNameDatabaseKafkaClusterIdIntegrationAsync(_cloud_project_database_service.Integration _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/integration";
            return this.SendAsync<_cloud_project_database_service.Integration>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/integration/{integrationId}
        public Task DeleteV1CloudProjectServiceNameDatabaseKafkaClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/integration/{integrationId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/integration/{integrationId}
        public Task<_cloud_project_database_service.Integration> GetV1CloudProjectServiceNameDatabaseKafkaClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/integration/{integrationId}";
            return this.SendAsync<_cloud_project_database_service.Integration>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/ipRestriction
        public Task<System.String[]> GetV1CloudProjectServiceNameDatabaseKafkaClusterIdIpRestrictionAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/ipRestriction";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/ipRestriction
        public Task<_cloud_project_database.IpRestriction> PostV1CloudProjectServiceNameDatabaseKafkaClusterIdIpRestrictionAsync(_cloud_project_database.IpRestrictionCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/ipRestriction";
            return this.SendAsync<_cloud_project_database.IpRestriction>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/ipRestriction/{ipBlock}
        public Task DeleteV1CloudProjectServiceNameDatabaseKafkaClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/ipRestriction/{ipBlock}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> GetV1CloudProjectServiceNameDatabaseKafkaClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/ipRestriction/{ipBlock}";
            return this.SendAsync<_cloud_project_database.IpRestriction>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> PutV1CloudProjectServiceNameDatabaseKafkaClusterIdIpRestrictionIpBlockAsync(_cloud_project_database.IpRestriction _body, System.Guid clusterId, string ipBlock, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/ipRestriction/{ipBlock}";
            return this.SendAsync<_cloud_project_database.IpRestriction>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/log/subscription
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseKafkaClusterIdLogSubscriptionAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? kind) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("kind", kind);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/log/subscription{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostV1CloudProjectServiceNameDatabaseKafkaClusterIdLogSubscriptionAsync(_cloud_project_database.LogSubscriptionCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/log/subscription";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteV1CloudProjectServiceNameDatabaseKafkaClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetV1CloudProjectServiceNameDatabaseKafkaClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscription>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/logs
        public Task<_cloud_project_database_service.LogEntry[]> GetV1CloudProjectServiceNameDatabaseKafkaClusterIdLogsAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/logs";
            return this.SendAsync<_cloud_project_database_service.LogEntry[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/maintenance
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseKafkaClusterIdMaintenanceAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/maintenance";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/maintenance/{maintenanceId}
        public Task<_cloud_project_database_service.Maintenance> GetV1CloudProjectServiceNameDatabaseKafkaClusterIdMaintenanceMaintenanceIdAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/maintenance/{maintenanceId}";
            return this.SendAsync<_cloud_project_database_service.Maintenance>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/maintenance/{maintenanceId}/apply
        public Task<_cloud_project_database_service.Maintenance> PostV1CloudProjectServiceNameDatabaseKafkaClusterIdMaintenanceMaintenanceIdApplyAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/maintenance/{maintenanceId}/apply";
            return this.SendAsync<_cloud_project_database_service.Maintenance>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/metric
        public Task<System.String[]> GetV1CloudProjectServiceNameDatabaseKafkaClusterIdMetricAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? extended) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("extended", extended);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/metric{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/metric/{metricName}
        public Task<_cloud_project_database_service.Metric> GetV1CloudProjectServiceNameDatabaseKafkaClusterIdMetricMetricNameAsync(System.Guid clusterId, string metricName, _cloud_project_database_service.MetricPeriodEnum period, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("period", period);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/metric/{metricName}{queryParameters}";
            return this.SendAsync<_cloud_project_database_service.Metric>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/node
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseKafkaClusterIdNodeAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/node";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/node/{nodeId}
        public Task<_cloud_project_database_service.Node> GetV1CloudProjectServiceNameDatabaseKafkaClusterIdNodeNodeIdAsync(System.Guid clusterId, System.Guid nodeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/node/{nodeId}";
            return this.SendAsync<_cloud_project_database_service.Node>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/permissions
        public Task<_cloud_project_database_kafka.Permissions> GetV1CloudProjectServiceNameDatabaseKafkaClusterIdPermissionsAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/permissions";
            return this.SendAsync<_cloud_project_database_kafka.Permissions>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/schemaRegistryAcl
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseKafkaClusterIdSchemaRegistryAclAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/schemaRegistryAcl";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/schemaRegistryAcl
        public Task<_cloud_project_database_kafka.SchemaRegistryAcl> PostV1CloudProjectServiceNameDatabaseKafkaClusterIdSchemaRegistryAclAsync(_cloud_project_database_kafka.SchemaRegistryAcl _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/schemaRegistryAcl";
            return this.SendAsync<_cloud_project_database_kafka.SchemaRegistryAcl>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/schemaRegistryAcl/{aclId}
        public Task DeleteV1CloudProjectServiceNameDatabaseKafkaClusterIdSchemaRegistryAclAclIdAsync(System.Guid aclId, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/schemaRegistryAcl/{aclId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/schemaRegistryAcl/{aclId}
        public Task<_cloud_project_database_kafka.SchemaRegistryAcl> GetV1CloudProjectServiceNameDatabaseKafkaClusterIdSchemaRegistryAclAclIdAsync(System.Guid aclId, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/schemaRegistryAcl/{aclId}";
            return this.SendAsync<_cloud_project_database_kafka.SchemaRegistryAcl>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/topic
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseKafkaClusterIdTopicAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/topic";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/topic
        public Task<_cloud_project_database_kafka.Topic> PostV1CloudProjectServiceNameDatabaseKafkaClusterIdTopicAsync(_cloud_project_database_kafka.TopicCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/topic";
            return this.SendAsync<_cloud_project_database_kafka.Topic>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/topic/{topicId}
        public Task DeleteV1CloudProjectServiceNameDatabaseKafkaClusterIdTopicTopicIdAsync(System.Guid clusterId, string serviceName, System.Guid topicId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/topic/{topicId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/topic/{topicId}
        public Task<_cloud_project_database_kafka.Topic> GetV1CloudProjectServiceNameDatabaseKafkaClusterIdTopicTopicIdAsync(System.Guid clusterId, string serviceName, System.Guid topicId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/topic/{topicId}";
            return this.SendAsync<_cloud_project_database_kafka.Topic>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/topic/{topicId}
        public Task<_cloud_project_database_kafka.Topic> PutV1CloudProjectServiceNameDatabaseKafkaClusterIdTopicTopicIdAsync(_cloud_project_database_kafka.Topic _body, System.Guid clusterId, string serviceName, System.Guid topicId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/topic/{topicId}";
            return this.SendAsync<_cloud_project_database_kafka.Topic>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/topicAcl
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseKafkaClusterIdTopicAclAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/topicAcl";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/topicAcl
        public Task<_cloud_project_database_kafka.TopicAcl> PostV1CloudProjectServiceNameDatabaseKafkaClusterIdTopicAclAsync(_cloud_project_database_kafka.TopicAcl _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/topicAcl";
            return this.SendAsync<_cloud_project_database_kafka.TopicAcl>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/topicAcl/{aclId}
        public Task DeleteV1CloudProjectServiceNameDatabaseKafkaClusterIdTopicAclAclIdAsync(System.Guid aclId, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/topicAcl/{aclId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/topicAcl/{aclId}
        public Task<_cloud_project_database_kafka.TopicAcl> GetV1CloudProjectServiceNameDatabaseKafkaClusterIdTopicAclAclIdAsync(System.Guid aclId, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/topicAcl/{aclId}";
            return this.SendAsync<_cloud_project_database_kafka.TopicAcl>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/user
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseKafkaClusterIdUserAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/user";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/user
        public Task<_cloud_project_database_service.UserWithPassword> PostV1CloudProjectServiceNameDatabaseKafkaClusterIdUserAsync(_cloud_project_database_service.UserCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/user";
            return this.SendAsync<_cloud_project_database_service.UserWithPassword>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/user/{userId}
        public Task DeleteV1CloudProjectServiceNameDatabaseKafkaClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/user/{userId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/user/{userId}
        public Task<_cloud_project_database_service.User> GetV1CloudProjectServiceNameDatabaseKafkaClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/user/{userId}";
            return this.SendAsync<_cloud_project_database_service.User>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/user/{userId}/access
        public Task<_cloud_project_database_kafka_user.Access> GetV1CloudProjectServiceNameDatabaseKafkaClusterIdUserUserIdAccessAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/user/{userId}/access";
            return this.SendAsync<_cloud_project_database_kafka_user.Access>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafka/{clusterId}/user/{userId}/credentials/reset
        public Task<_cloud_project_database_service.UserWithPassword> PostV1CloudProjectServiceNameDatabaseKafkaClusterIdUserUserIdCredentialsResetAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafka/{clusterId}/user/{userId}/credentials/reset";
            return this.SendAsync<_cloud_project_database_service.UserWithPassword>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseKafkaConnectAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect
        public Task<_cloud_project_database.Service> PostV1CloudProjectServiceNameDatabaseKafkaConnectAsync(_cloud_project_database.ServiceCreation _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect";
            return this.SendAsync<_cloud_project_database.Service>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}
        public Task DeleteV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}
        public Task<_cloud_project_database.Service> GetV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}";
            return this.SendAsync<_cloud_project_database.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}
        public Task<_cloud_project_database.Service> PutV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdAsync(_cloud_project_database.Service _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}";
            return this.SendAsync<_cloud_project_database.Service>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> GetV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/advancedConfiguration";
            return this.SendAsync<Dictionary<string, string>>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> PutV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdAdvancedConfigurationAsync(Dictionary<string, string> _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/advancedConfiguration";
            return this.SendAsync<Dictionary<string, string>>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/advancedConfiguration
        public Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]> GetV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdCapabilitiesAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/advancedConfiguration";
            return this.SendAsync<_cloud_project_database_capabilities_advancedConfiguration.Property[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/connector
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdCapabilitiesConnectorAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/connector";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/connector/{connectorId}
        public Task<_cloud_project_database_kafkaConnect_capabilities.Connector> GetV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdCapabilitiesConnectorConnectorIdAsync(System.Guid clusterId, System.Guid connectorId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/connector/{connectorId}";
            return this.SendAsync<_cloud_project_database_kafkaConnect_capabilities.Connector>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/connector/{connectorId}/configuration
        public Task<_cloud_project_database_kafkaConnect_capabilities_connector_configuration.Property[]> GetV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdCapabilitiesConnectorConnectorIdConfigurationAsync(System.Guid clusterId, System.Guid connectorId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/connector/{connectorId}/configuration";
            return this.SendAsync<_cloud_project_database_kafkaConnect_capabilities_connector_configuration.Property[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/connector/{connectorId}/transforms
        public Task<_cloud_project_database_kafkaConnect_capabilities_connector.Transform[]> GetV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdCapabilitiesConnectorConnectorIdTransformsAsync(System.Guid clusterId, System.Guid connectorId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/connector/{connectorId}/transforms";
            return this.SendAsync<_cloud_project_database_kafkaConnect_capabilities_connector.Transform[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/integration
        public Task<_cloud_project_database_capabilities.Integration[]> GetV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdCapabilitiesIntegrationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/integration";
            return this.SendAsync<_cloud_project_database_capabilities.Integration[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector
        public Task<_cloud_project_database_kafkaConnect.Connector> PostV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorAsync(_cloud_project_database_kafkaConnect.ConnectorCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector";
            return this.SendAsync<_cloud_project_database_kafkaConnect.Connector>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}
        public Task DeleteV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorConnectorIdAsync(System.Guid clusterId, System.Guid connectorId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}
        public Task<_cloud_project_database_kafkaConnect.Connector> GetV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorConnectorIdAsync(System.Guid clusterId, System.Guid connectorId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}";
            return this.SendAsync<_cloud_project_database_kafkaConnect.Connector>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}
        public Task<_cloud_project_database_kafkaConnect.Connector> PutV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorConnectorIdAsync(_cloud_project_database_kafkaConnect.Connector _body, System.Guid clusterId, System.Guid connectorId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}";
            return this.SendAsync<_cloud_project_database_kafkaConnect.Connector>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}/pause
        public Task PostV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorConnectorIdPauseAsync(System.Guid clusterId, System.Guid connectorId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}/pause";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}/restart
        public Task PostV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorConnectorIdRestartAsync(System.Guid clusterId, System.Guid connectorId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}/restart";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}/resume
        public Task PostV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorConnectorIdResumeAsync(System.Guid clusterId, System.Guid connectorId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}/resume";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}/task
        public Task<System.Int64[]> GetV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorConnectorIdTaskAsync(System.Guid clusterId, System.Guid connectorId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}/task";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}/task/{taskId}
        public Task<_cloud_project_database_kafkaConnect_connector.Task> GetV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorConnectorIdTaskTaskIdAsync(System.Guid clusterId, System.Guid connectorId, string serviceName, long taskId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}/task/{taskId}";
            return this.SendAsync<_cloud_project_database_kafkaConnect_connector.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}/task/{taskId}/restart
        public Task PostV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorConnectorIdTaskTaskIdRestartAsync(System.Guid clusterId, System.Guid connectorId, string serviceName, long taskId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}/task/{taskId}/restart";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/integration
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdIntegrationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/integration";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/integration
        public Task<_cloud_project_database_service.Integration> PostV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdIntegrationAsync(_cloud_project_database_service.Integration _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/integration";
            return this.SendAsync<_cloud_project_database_service.Integration>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/integration/{integrationId}
        public Task DeleteV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/integration/{integrationId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/integration/{integrationId}
        public Task<_cloud_project_database_service.Integration> GetV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/integration/{integrationId}";
            return this.SendAsync<_cloud_project_database_service.Integration>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/ipRestriction
        public Task<System.String[]> GetV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdIpRestrictionAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/ipRestriction";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/ipRestriction
        public Task<_cloud_project_database.IpRestriction> PostV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdIpRestrictionAsync(_cloud_project_database.IpRestrictionCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/ipRestriction";
            return this.SendAsync<_cloud_project_database.IpRestriction>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/ipRestriction/{ipBlock}
        public Task DeleteV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/ipRestriction/{ipBlock}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> GetV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/ipRestriction/{ipBlock}";
            return this.SendAsync<_cloud_project_database.IpRestriction>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> PutV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdIpRestrictionIpBlockAsync(_cloud_project_database.IpRestriction _body, System.Guid clusterId, string ipBlock, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/ipRestriction/{ipBlock}";
            return this.SendAsync<_cloud_project_database.IpRestriction>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/log/subscription
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdLogSubscriptionAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? kind) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("kind", kind);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/log/subscription{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdLogSubscriptionAsync(_cloud_project_database.LogSubscriptionCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/log/subscription";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscription>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/logs
        public Task<_cloud_project_database_service.LogEntry[]> GetV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdLogsAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/logs";
            return this.SendAsync<_cloud_project_database_service.LogEntry[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/maintenance
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdMaintenanceAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/maintenance";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/maintenance/{maintenanceId}
        public Task<_cloud_project_database_service.Maintenance> GetV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdMaintenanceMaintenanceIdAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/maintenance/{maintenanceId}";
            return this.SendAsync<_cloud_project_database_service.Maintenance>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/maintenance/{maintenanceId}/apply
        public Task<_cloud_project_database_service.Maintenance> PostV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdMaintenanceMaintenanceIdApplyAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/maintenance/{maintenanceId}/apply";
            return this.SendAsync<_cloud_project_database_service.Maintenance>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/metric
        public Task<System.String[]> GetV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdMetricAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? extended) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("extended", extended);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/metric{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/metric/{metricName}
        public Task<_cloud_project_database_service.Metric> GetV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdMetricMetricNameAsync(System.Guid clusterId, string metricName, _cloud_project_database_service.MetricPeriodEnum period, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("period", period);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/metric/{metricName}{queryParameters}";
            return this.SendAsync<_cloud_project_database_service.Metric>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/node
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdNodeAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/node";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/node/{nodeId}
        public Task<_cloud_project_database_service.Node> GetV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdNodeNodeIdAsync(System.Guid clusterId, System.Guid nodeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/node/{nodeId}";
            return this.SendAsync<_cloud_project_database_service.Node>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/user
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdUserAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/user";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/user
        public Task<_cloud_project_database_service.UserWithPassword> PostV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdUserAsync(_cloud_project_database_service.UserCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/user";
            return this.SendAsync<_cloud_project_database_service.UserWithPassword>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/user/{userId}
        public Task DeleteV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/user/{userId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/user/{userId}
        public Task<_cloud_project_database_service.User> GetV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/user/{userId}";
            return this.SendAsync<_cloud_project_database_service.User>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/user/{userId}/credentials/reset
        public Task<_cloud_project_database_service.UserWithPassword> PostV1CloudProjectServiceNameDatabaseKafkaConnectClusterIdUserUserIdCredentialsResetAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/user/{userId}/credentials/reset";
            return this.SendAsync<_cloud_project_database_service.UserWithPassword>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaMirrorMaker
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseKafkaMirrorMakerAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaMirrorMaker";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaMirrorMaker
        public Task<_cloud_project_database.Service> PostV1CloudProjectServiceNameDatabaseKafkaMirrorMakerAsync(_cloud_project_database.ServiceCreation _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaMirrorMaker";
            return this.SendAsync<_cloud_project_database.Service>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}
        public Task DeleteV1CloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}
        public Task<_cloud_project_database.Service> GetV1CloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}";
            return this.SendAsync<_cloud_project_database.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}
        public Task<_cloud_project_database.Service> PutV1CloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdAsync(_cloud_project_database.Service _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}";
            return this.SendAsync<_cloud_project_database.Service>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/capabilities/integration
        public Task<_cloud_project_database_capabilities.Integration[]> GetV1CloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdCapabilitiesIntegrationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/capabilities/integration";
            return this.SendAsync<_cloud_project_database_capabilities.Integration[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/integration
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdIntegrationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/integration";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/integration
        public Task<_cloud_project_database_service.Integration> PostV1CloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdIntegrationAsync(_cloud_project_database_service.Integration _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/integration";
            return this.SendAsync<_cloud_project_database_service.Integration>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/integration/{integrationId}
        public Task DeleteV1CloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/integration/{integrationId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/integration/{integrationId}
        public Task<_cloud_project_database_service.Integration> GetV1CloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/integration/{integrationId}";
            return this.SendAsync<_cloud_project_database_service.Integration>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/log/subscription
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdLogSubscriptionAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? kind) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("kind", kind);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/log/subscription{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostV1CloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdLogSubscriptionAsync(_cloud_project_database.LogSubscriptionCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/log/subscription";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteV1CloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetV1CloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscription>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/logs
        public Task<_cloud_project_database_service.LogEntry[]> GetV1CloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdLogsAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/logs";
            return this.SendAsync<_cloud_project_database_service.LogEntry[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/maintenance
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdMaintenanceAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/maintenance";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/maintenance/{maintenanceId}
        public Task<_cloud_project_database_service.Maintenance> GetV1CloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdMaintenanceMaintenanceIdAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/maintenance/{maintenanceId}";
            return this.SendAsync<_cloud_project_database_service.Maintenance>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/maintenance/{maintenanceId}/apply
        public Task<_cloud_project_database_service.Maintenance> PostV1CloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdMaintenanceMaintenanceIdApplyAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/maintenance/{maintenanceId}/apply";
            return this.SendAsync<_cloud_project_database_service.Maintenance>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/metric
        public Task<System.String[]> GetV1CloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdMetricAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? extended) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("extended", extended);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/metric{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/metric/{metricName}
        public Task<_cloud_project_database_service.Metric> GetV1CloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdMetricMetricNameAsync(System.Guid clusterId, string metricName, _cloud_project_database_service.MetricPeriodEnum period, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("period", period);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/metric/{metricName}{queryParameters}";
            return this.SendAsync<_cloud_project_database_service.Metric>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/node
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdNodeAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/node";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/node/{nodeId}
        public Task<_cloud_project_database_service.Node> GetV1CloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdNodeNodeIdAsync(System.Guid clusterId, System.Guid nodeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/node/{nodeId}";
            return this.SendAsync<_cloud_project_database_service.Node>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/replication
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdReplicationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/replication";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/replication
        public Task<_cloud_project_database_service.Replication> PostV1CloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdReplicationAsync(_cloud_project_database_service.ReplicationCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/replication";
            return this.SendAsync<_cloud_project_database_service.Replication>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/replication/{replicationId}
        public Task DeleteV1CloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdReplicationReplicationIdAsync(System.Guid clusterId, System.Guid replicationId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/replication/{replicationId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/replication/{replicationId}
        public Task<_cloud_project_database_service.Replication> GetV1CloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdReplicationReplicationIdAsync(System.Guid clusterId, System.Guid replicationId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/replication/{replicationId}";
            return this.SendAsync<_cloud_project_database_service.Replication>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/replication/{replicationId}
        public Task<_cloud_project_database_service.Replication> PutV1CloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdReplicationReplicationIdAsync(_cloud_project_database_service.Replication _body, System.Guid clusterId, System.Guid replicationId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/replication/{replicationId}";
            return this.SendAsync<_cloud_project_database_service.Replication>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3aggregator
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseM3aggregatorAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3aggregator";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3aggregator
        public Task<_cloud_project_database.Service> PostV1CloudProjectServiceNameDatabaseM3aggregatorAsync(_cloud_project_database.ServiceCreation _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3aggregator";
            return this.SendAsync<_cloud_project_database.Service>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}
        public Task DeleteV1CloudProjectServiceNameDatabaseM3aggregatorClusterIdAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}
        public Task<_cloud_project_database.Service> GetV1CloudProjectServiceNameDatabaseM3aggregatorClusterIdAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}";
            return this.SendAsync<_cloud_project_database.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}
        public Task<_cloud_project_database.Service> PutV1CloudProjectServiceNameDatabaseM3aggregatorClusterIdAsync(_cloud_project_database.Service _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}";
            return this.SendAsync<_cloud_project_database.Service>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/capabilities/integration
        public Task<_cloud_project_database_capabilities.Integration[]> GetV1CloudProjectServiceNameDatabaseM3aggregatorClusterIdCapabilitiesIntegrationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/capabilities/integration";
            return this.SendAsync<_cloud_project_database_capabilities.Integration[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/integration
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseM3aggregatorClusterIdIntegrationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/integration";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/integration
        public Task<_cloud_project_database_service.Integration> PostV1CloudProjectServiceNameDatabaseM3aggregatorClusterIdIntegrationAsync(_cloud_project_database_service.Integration _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/integration";
            return this.SendAsync<_cloud_project_database_service.Integration>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/integration/{integrationId}
        public Task DeleteV1CloudProjectServiceNameDatabaseM3aggregatorClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/integration/{integrationId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/integration/{integrationId}
        public Task<_cloud_project_database_service.Integration> GetV1CloudProjectServiceNameDatabaseM3aggregatorClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/integration/{integrationId}";
            return this.SendAsync<_cloud_project_database_service.Integration>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/log/subscription
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseM3aggregatorClusterIdLogSubscriptionAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? kind) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("kind", kind);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/log/subscription{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostV1CloudProjectServiceNameDatabaseM3aggregatorClusterIdLogSubscriptionAsync(_cloud_project_database.LogSubscriptionCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/log/subscription";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteV1CloudProjectServiceNameDatabaseM3aggregatorClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetV1CloudProjectServiceNameDatabaseM3aggregatorClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscription>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/logs
        public Task<_cloud_project_database_service.LogEntry[]> GetV1CloudProjectServiceNameDatabaseM3aggregatorClusterIdLogsAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/logs";
            return this.SendAsync<_cloud_project_database_service.LogEntry[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/maintenance
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseM3aggregatorClusterIdMaintenanceAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/maintenance";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/maintenance/{maintenanceId}
        public Task<_cloud_project_database_service.Maintenance> GetV1CloudProjectServiceNameDatabaseM3aggregatorClusterIdMaintenanceMaintenanceIdAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/maintenance/{maintenanceId}";
            return this.SendAsync<_cloud_project_database_service.Maintenance>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/maintenance/{maintenanceId}/apply
        public Task<_cloud_project_database_service.Maintenance> PostV1CloudProjectServiceNameDatabaseM3aggregatorClusterIdMaintenanceMaintenanceIdApplyAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/maintenance/{maintenanceId}/apply";
            return this.SendAsync<_cloud_project_database_service.Maintenance>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/metric
        public Task<System.String[]> GetV1CloudProjectServiceNameDatabaseM3aggregatorClusterIdMetricAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? extended) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("extended", extended);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/metric{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/metric/{metricName}
        public Task<_cloud_project_database_service.Metric> GetV1CloudProjectServiceNameDatabaseM3aggregatorClusterIdMetricMetricNameAsync(System.Guid clusterId, string metricName, _cloud_project_database_service.MetricPeriodEnum period, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("period", period);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/metric/{metricName}{queryParameters}";
            return this.SendAsync<_cloud_project_database_service.Metric>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/node
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseM3aggregatorClusterIdNodeAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/node";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/node/{nodeId}
        public Task<_cloud_project_database_service.Node> GetV1CloudProjectServiceNameDatabaseM3aggregatorClusterIdNodeNodeIdAsync(System.Guid clusterId, System.Guid nodeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/node/{nodeId}";
            return this.SendAsync<_cloud_project_database_service.Node>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseM3dbAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db
        public Task<_cloud_project_database.Service> PostV1CloudProjectServiceNameDatabaseM3dbAsync(_cloud_project_database.ServiceCreation _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db";
            return this.SendAsync<_cloud_project_database.Service>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}
        public Task DeleteV1CloudProjectServiceNameDatabaseM3dbClusterIdAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}
        public Task<_cloud_project_database.Service> GetV1CloudProjectServiceNameDatabaseM3dbClusterIdAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}";
            return this.SendAsync<_cloud_project_database.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}
        public Task<_cloud_project_database.Service> PutV1CloudProjectServiceNameDatabaseM3dbClusterIdAsync(_cloud_project_database.Service _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}";
            return this.SendAsync<_cloud_project_database.Service>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> GetV1CloudProjectServiceNameDatabaseM3dbClusterIdAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/advancedConfiguration";
            return this.SendAsync<Dictionary<string, string>>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> PutV1CloudProjectServiceNameDatabaseM3dbClusterIdAdvancedConfigurationAsync(Dictionary<string, string> _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/advancedConfiguration";
            return this.SendAsync<Dictionary<string, string>>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/backup
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseM3dbClusterIdBackupAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/backup";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/backup/{backupId}
        public Task<_cloud_project_database.Backup> GetV1CloudProjectServiceNameDatabaseM3dbClusterIdBackupBackupIdAsync(System.Guid backupId, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/backup/{backupId}";
            return this.SendAsync<_cloud_project_database.Backup>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/capabilities/advancedConfiguration
        public Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]> GetV1CloudProjectServiceNameDatabaseM3dbClusterIdCapabilitiesAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/capabilities/advancedConfiguration";
            return this.SendAsync<_cloud_project_database_capabilities_advancedConfiguration.Property[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/capabilities/integration
        public Task<_cloud_project_database_capabilities.Integration[]> GetV1CloudProjectServiceNameDatabaseM3dbClusterIdCapabilitiesIntegrationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/capabilities/integration";
            return this.SendAsync<_cloud_project_database_capabilities.Integration[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/integration
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseM3dbClusterIdIntegrationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/integration";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/integration
        public Task<_cloud_project_database_service.Integration> PostV1CloudProjectServiceNameDatabaseM3dbClusterIdIntegrationAsync(_cloud_project_database_service.Integration _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/integration";
            return this.SendAsync<_cloud_project_database_service.Integration>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/integration/{integrationId}
        public Task DeleteV1CloudProjectServiceNameDatabaseM3dbClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/integration/{integrationId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/integration/{integrationId}
        public Task<_cloud_project_database_service.Integration> GetV1CloudProjectServiceNameDatabaseM3dbClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/integration/{integrationId}";
            return this.SendAsync<_cloud_project_database_service.Integration>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/ipRestriction
        public Task<System.String[]> GetV1CloudProjectServiceNameDatabaseM3dbClusterIdIpRestrictionAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/ipRestriction";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/ipRestriction
        public Task<_cloud_project_database.IpRestriction> PostV1CloudProjectServiceNameDatabaseM3dbClusterIdIpRestrictionAsync(_cloud_project_database.IpRestrictionCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/ipRestriction";
            return this.SendAsync<_cloud_project_database.IpRestriction>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/ipRestriction/{ipBlock}
        public Task DeleteV1CloudProjectServiceNameDatabaseM3dbClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/ipRestriction/{ipBlock}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> GetV1CloudProjectServiceNameDatabaseM3dbClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/ipRestriction/{ipBlock}";
            return this.SendAsync<_cloud_project_database.IpRestriction>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> PutV1CloudProjectServiceNameDatabaseM3dbClusterIdIpRestrictionIpBlockAsync(_cloud_project_database.IpRestriction _body, System.Guid clusterId, string ipBlock, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/ipRestriction/{ipBlock}";
            return this.SendAsync<_cloud_project_database.IpRestriction>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/log/subscription
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseM3dbClusterIdLogSubscriptionAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? kind) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("kind", kind);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/log/subscription{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostV1CloudProjectServiceNameDatabaseM3dbClusterIdLogSubscriptionAsync(_cloud_project_database.LogSubscriptionCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/log/subscription";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteV1CloudProjectServiceNameDatabaseM3dbClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetV1CloudProjectServiceNameDatabaseM3dbClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscription>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/logs
        public Task<_cloud_project_database_service.LogEntry[]> GetV1CloudProjectServiceNameDatabaseM3dbClusterIdLogsAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/logs";
            return this.SendAsync<_cloud_project_database_service.LogEntry[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/maintenance
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseM3dbClusterIdMaintenanceAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/maintenance";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/maintenance/{maintenanceId}
        public Task<_cloud_project_database_service.Maintenance> GetV1CloudProjectServiceNameDatabaseM3dbClusterIdMaintenanceMaintenanceIdAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/maintenance/{maintenanceId}";
            return this.SendAsync<_cloud_project_database_service.Maintenance>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/maintenance/{maintenanceId}/apply
        public Task<_cloud_project_database_service.Maintenance> PostV1CloudProjectServiceNameDatabaseM3dbClusterIdMaintenanceMaintenanceIdApplyAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/maintenance/{maintenanceId}/apply";
            return this.SendAsync<_cloud_project_database_service.Maintenance>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/metric
        public Task<System.String[]> GetV1CloudProjectServiceNameDatabaseM3dbClusterIdMetricAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? extended) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("extended", extended);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/metric{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/metric/{metricName}
        public Task<_cloud_project_database_service.Metric> GetV1CloudProjectServiceNameDatabaseM3dbClusterIdMetricMetricNameAsync(System.Guid clusterId, string metricName, _cloud_project_database_service.MetricPeriodEnum period, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("period", period);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/metric/{metricName}{queryParameters}";
            return this.SendAsync<_cloud_project_database_service.Metric>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/namespace
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseM3dbClusterIdNamespaceAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/namespace";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/namespace
        public Task<_cloud_project_database_m3db.Namespace> PostV1CloudProjectServiceNameDatabaseM3dbClusterIdNamespaceAsync(_cloud_project_database_m3db.NamespaceCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/namespace";
            return this.SendAsync<_cloud_project_database_m3db.Namespace>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/namespace/{namespaceId}
        public Task DeleteV1CloudProjectServiceNameDatabaseM3dbClusterIdNamespaceNamespaceIdAsync(System.Guid clusterId, System.Guid namespaceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/namespace/{namespaceId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/namespace/{namespaceId}
        public Task<_cloud_project_database_m3db.Namespace> GetV1CloudProjectServiceNameDatabaseM3dbClusterIdNamespaceNamespaceIdAsync(System.Guid clusterId, System.Guid namespaceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/namespace/{namespaceId}";
            return this.SendAsync<_cloud_project_database_m3db.Namespace>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/namespace/{namespaceId}
        public Task<_cloud_project_database_m3db.Namespace> PutV1CloudProjectServiceNameDatabaseM3dbClusterIdNamespaceNamespaceIdAsync(_cloud_project_database_m3db.Namespace _body, System.Guid clusterId, System.Guid namespaceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/namespace/{namespaceId}";
            return this.SendAsync<_cloud_project_database_m3db.Namespace>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/node
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseM3dbClusterIdNodeAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/node";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/node/{nodeId}
        public Task<_cloud_project_database_service.Node> GetV1CloudProjectServiceNameDatabaseM3dbClusterIdNodeNodeIdAsync(System.Guid clusterId, System.Guid nodeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/node/{nodeId}";
            return this.SendAsync<_cloud_project_database_service.Node>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/user
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseM3dbClusterIdUserAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/user";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/user
        public Task<_cloud_project_database_m3db.UserWithPassword> PostV1CloudProjectServiceNameDatabaseM3dbClusterIdUserAsync(_cloud_project_database_m3db.UserCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/user";
            return this.SendAsync<_cloud_project_database_m3db.UserWithPassword>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/user/{userId}
        public Task DeleteV1CloudProjectServiceNameDatabaseM3dbClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/user/{userId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/user/{userId}
        public Task<_cloud_project_database_m3db.User> GetV1CloudProjectServiceNameDatabaseM3dbClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/user/{userId}";
            return this.SendAsync<_cloud_project_database_m3db.User>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/user/{userId}
        public Task<_cloud_project_database_m3db.User> PutV1CloudProjectServiceNameDatabaseM3dbClusterIdUserUserIdAsync(_cloud_project_database_m3db.User _body, System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/user/{userId}";
            return this.SendAsync<_cloud_project_database_m3db.User>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/m3db/{clusterId}/user/{userId}/credentials/reset
        public Task<_cloud_project_database_m3db.UserWithPassword> PostV1CloudProjectServiceNameDatabaseM3dbClusterIdUserUserIdCredentialsResetAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/m3db/{clusterId}/user/{userId}/credentials/reset";
            return this.SendAsync<_cloud_project_database_m3db.UserWithPassword>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseMongodbAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb
        public Task<_cloud_project_database.Service> PostV1CloudProjectServiceNameDatabaseMongodbAsync(_cloud_project_database.ServiceCreation _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb";
            return this.SendAsync<_cloud_project_database.Service>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}
        public Task DeleteV1CloudProjectServiceNameDatabaseMongodbClusterIdAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}
        public Task<_cloud_project_database.Service> GetV1CloudProjectServiceNameDatabaseMongodbClusterIdAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}";
            return this.SendAsync<_cloud_project_database.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}
        public Task<_cloud_project_database.Service> PutV1CloudProjectServiceNameDatabaseMongodbClusterIdAsync(_cloud_project_database.Service _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}";
            return this.SendAsync<_cloud_project_database.Service>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/backup
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseMongodbClusterIdBackupAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/backup";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/backup/{backupId}
        public Task<_cloud_project_database.Backup> GetV1CloudProjectServiceNameDatabaseMongodbClusterIdBackupBackupIdAsync(System.Guid backupId, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/backup/{backupId}";
            return this.SendAsync<_cloud_project_database.Backup>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/backup/{backupId}/restore
        public Task<_cloud_project_database.Backup> PostV1CloudProjectServiceNameDatabaseMongodbClusterIdBackupBackupIdRestoreAsync(System.Guid backupId, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/backup/{backupId}/restore";
            return this.SendAsync<_cloud_project_database.Backup>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/ipRestriction
        public Task<System.String[]> GetV1CloudProjectServiceNameDatabaseMongodbClusterIdIpRestrictionAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/ipRestriction";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/ipRestriction
        public Task<_cloud_project_database.IpRestriction> PostV1CloudProjectServiceNameDatabaseMongodbClusterIdIpRestrictionAsync(_cloud_project_database.IpRestrictionCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/ipRestriction";
            return this.SendAsync<_cloud_project_database.IpRestriction>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/ipRestriction/{ipBlock}
        public Task DeleteV1CloudProjectServiceNameDatabaseMongodbClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/ipRestriction/{ipBlock}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> GetV1CloudProjectServiceNameDatabaseMongodbClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/ipRestriction/{ipBlock}";
            return this.SendAsync<_cloud_project_database.IpRestriction>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> PutV1CloudProjectServiceNameDatabaseMongodbClusterIdIpRestrictionIpBlockAsync(_cloud_project_database.IpRestriction _body, System.Guid clusterId, string ipBlock, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/ipRestriction/{ipBlock}";
            return this.SendAsync<_cloud_project_database.IpRestriction>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/log/subscription
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseMongodbClusterIdLogSubscriptionAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? kind) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("kind", kind);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/log/subscription{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostV1CloudProjectServiceNameDatabaseMongodbClusterIdLogSubscriptionAsync(_cloud_project_database.LogSubscriptionCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/log/subscription";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteV1CloudProjectServiceNameDatabaseMongodbClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetV1CloudProjectServiceNameDatabaseMongodbClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscription>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/logs
        public Task<_cloud_project_database_service.LogEntry[]> GetV1CloudProjectServiceNameDatabaseMongodbClusterIdLogsAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/logs";
            return this.SendAsync<_cloud_project_database_service.LogEntry[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/maintenance
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseMongodbClusterIdMaintenanceAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/maintenance";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/maintenance/{maintenanceId}
        public Task<_cloud_project_database_service.Maintenance> GetV1CloudProjectServiceNameDatabaseMongodbClusterIdMaintenanceMaintenanceIdAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/maintenance/{maintenanceId}";
            return this.SendAsync<_cloud_project_database_service.Maintenance>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/maintenance/{maintenanceId}/apply
        public Task<_cloud_project_database_service.Maintenance> PostV1CloudProjectServiceNameDatabaseMongodbClusterIdMaintenanceMaintenanceIdApplyAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/maintenance/{maintenanceId}/apply";
            return this.SendAsync<_cloud_project_database_service.Maintenance>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/metric
        public Task<System.String[]> GetV1CloudProjectServiceNameDatabaseMongodbClusterIdMetricAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? extended) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("extended", extended);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/metric{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/metric/{metricName}
        public Task<_cloud_project_database_service.Metric> GetV1CloudProjectServiceNameDatabaseMongodbClusterIdMetricMetricNameAsync(System.Guid clusterId, string metricName, _cloud_project_database_service.MetricPeriodEnum period, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("period", period);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/metric/{metricName}{queryParameters}";
            return this.SendAsync<_cloud_project_database_service.Metric>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/node
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseMongodbClusterIdNodeAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/node";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/node
        public Task<_cloud_project_database_service.Node> PostV1CloudProjectServiceNameDatabaseMongodbClusterIdNodeAsync(_cloud_project_database_service.NodeCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/node";
            return this.SendAsync<_cloud_project_database_service.Node>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/node/{nodeId}
        public Task DeleteV1CloudProjectServiceNameDatabaseMongodbClusterIdNodeNodeIdAsync(System.Guid clusterId, System.Guid nodeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/node/{nodeId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/node/{nodeId}
        public Task<_cloud_project_database_service.Node> GetV1CloudProjectServiceNameDatabaseMongodbClusterIdNodeNodeIdAsync(System.Guid clusterId, System.Guid nodeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/node/{nodeId}";
            return this.SendAsync<_cloud_project_database_service.Node>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/node/{nodeId}
        public Task<_cloud_project_database_service.Node> PutV1CloudProjectServiceNameDatabaseMongodbClusterIdNodeNodeIdAsync(_cloud_project_database_service.Node _body, System.Guid clusterId, System.Guid nodeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/node/{nodeId}";
            return this.SendAsync<_cloud_project_database_service.Node>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/restore
        public Task PostV1CloudProjectServiceNameDatabaseMongodbClusterIdRestoreAsync(_cloud_project_database_service.Restore _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/restore";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/roles
        public Task<System.String[]> GetV1CloudProjectServiceNameDatabaseMongodbClusterIdRolesAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? advanced) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("advanced", advanced);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/roles{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/user
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseMongodbClusterIdUserAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/user";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/user
        public Task<_cloud_project_database_service.UserWithPasswordAndRoles> PostV1CloudProjectServiceNameDatabaseMongodbClusterIdUserAsync(_cloud_project_database_service.UserWithRolesCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/user";
            return this.SendAsync<_cloud_project_database_service.UserWithPasswordAndRoles>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/user/{userId}
        public Task DeleteV1CloudProjectServiceNameDatabaseMongodbClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/user/{userId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/user/{userId}
        public Task<_cloud_project_database_service.UserWithRoles> GetV1CloudProjectServiceNameDatabaseMongodbClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/user/{userId}";
            return this.SendAsync<_cloud_project_database_service.UserWithRoles>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/user/{userId}
        public Task<_cloud_project_database_service.UserWithRoles> PutV1CloudProjectServiceNameDatabaseMongodbClusterIdUserUserIdAsync(_cloud_project_database_service.UserWithPasswordAndRoles _body, System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/user/{userId}";
            return this.SendAsync<_cloud_project_database_service.UserWithRoles>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/user/{userId}/credentials/reset
        public Task<_cloud_project_database_service.UserWithPasswordAndRoles> PostV1CloudProjectServiceNameDatabaseMongodbClusterIdUserUserIdCredentialsResetAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mongodb/{clusterId}/user/{userId}/credentials/reset";
            return this.SendAsync<_cloud_project_database_service.UserWithPasswordAndRoles>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseMysqlAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql
        public Task<_cloud_project_database.Service> PostV1CloudProjectServiceNameDatabaseMysqlAsync(_cloud_project_database.ServiceCreation _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql";
            return this.SendAsync<_cloud_project_database.Service>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}
        public Task DeleteV1CloudProjectServiceNameDatabaseMysqlClusterIdAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}
        public Task<_cloud_project_database.Service> GetV1CloudProjectServiceNameDatabaseMysqlClusterIdAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}";
            return this.SendAsync<_cloud_project_database.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}
        public Task<_cloud_project_database.Service> PutV1CloudProjectServiceNameDatabaseMysqlClusterIdAsync(_cloud_project_database.Service _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}";
            return this.SendAsync<_cloud_project_database.Service>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> GetV1CloudProjectServiceNameDatabaseMysqlClusterIdAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/advancedConfiguration";
            return this.SendAsync<Dictionary<string, string>>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> PutV1CloudProjectServiceNameDatabaseMysqlClusterIdAdvancedConfigurationAsync(Dictionary<string, string> _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/advancedConfiguration";
            return this.SendAsync<Dictionary<string, string>>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/backup
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseMysqlClusterIdBackupAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/backup";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/backup/{backupId}
        public Task<_cloud_project_database.Backup> GetV1CloudProjectServiceNameDatabaseMysqlClusterIdBackupBackupIdAsync(System.Guid backupId, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/backup/{backupId}";
            return this.SendAsync<_cloud_project_database.Backup>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/capabilities/advancedConfiguration
        public Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]> GetV1CloudProjectServiceNameDatabaseMysqlClusterIdCapabilitiesAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/capabilities/advancedConfiguration";
            return this.SendAsync<_cloud_project_database_capabilities_advancedConfiguration.Property[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/capabilities/integration
        public Task<_cloud_project_database_capabilities.Integration[]> GetV1CloudProjectServiceNameDatabaseMysqlClusterIdCapabilitiesIntegrationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/capabilities/integration";
            return this.SendAsync<_cloud_project_database_capabilities.Integration[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/certificates
        public Task<_cloud_project_database_service.Certificates> GetV1CloudProjectServiceNameDatabaseMysqlClusterIdCertificatesAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/certificates";
            return this.SendAsync<_cloud_project_database_service.Certificates>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/currentQueries
        public Task<_cloud_project_database_service.CurrentQueries> GetV1CloudProjectServiceNameDatabaseMysqlClusterIdCurrentQueriesAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? limit, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? offset) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("limit", limit);
            queryParametersTemp.Add("offset", offset);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/currentQueries{queryParameters}";
            return this.SendAsync<_cloud_project_database_service.CurrentQueries>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/currentQueries/cancel
        public Task<_cloud_project_database_service_currentqueries_query.CancelResponse> PostV1CloudProjectServiceNameDatabaseMysqlClusterIdCurrentQueriesCancelAsync(_cloud_project_database_service_currentqueries_query.CancelRequest _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/currentQueries/cancel";
            return this.SendAsync<_cloud_project_database_service_currentqueries_query.CancelResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/database
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseMysqlClusterIdDatabaseAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/database";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/database
        public Task<_cloud_project_database_service.Database> PostV1CloudProjectServiceNameDatabaseMysqlClusterIdDatabaseAsync(_cloud_project_database_service.Database _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/database";
            return this.SendAsync<_cloud_project_database_service.Database>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/database/{databaseId}
        public Task DeleteV1CloudProjectServiceNameDatabaseMysqlClusterIdDatabaseDatabaseIdAsync(System.Guid clusterId, System.Guid databaseId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/database/{databaseId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/database/{databaseId}
        public Task<_cloud_project_database_service.Database> GetV1CloudProjectServiceNameDatabaseMysqlClusterIdDatabaseDatabaseIdAsync(System.Guid clusterId, System.Guid databaseId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/database/{databaseId}";
            return this.SendAsync<_cloud_project_database_service.Database>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/enableWrites
        public Task<_cloud_project_database.TemporaryWriteDeadline> PostV1CloudProjectServiceNameDatabaseMysqlClusterIdEnableWritesAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/enableWrites";
            return this.SendAsync<_cloud_project_database.TemporaryWriteDeadline>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/integration
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseMysqlClusterIdIntegrationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/integration";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/integration
        public Task<_cloud_project_database_service.Integration> PostV1CloudProjectServiceNameDatabaseMysqlClusterIdIntegrationAsync(_cloud_project_database_service.Integration _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/integration";
            return this.SendAsync<_cloud_project_database_service.Integration>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/integration/{integrationId}
        public Task DeleteV1CloudProjectServiceNameDatabaseMysqlClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/integration/{integrationId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/integration/{integrationId}
        public Task<_cloud_project_database_service.Integration> GetV1CloudProjectServiceNameDatabaseMysqlClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/integration/{integrationId}";
            return this.SendAsync<_cloud_project_database_service.Integration>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/ipRestriction
        public Task<System.String[]> GetV1CloudProjectServiceNameDatabaseMysqlClusterIdIpRestrictionAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/ipRestriction";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/ipRestriction
        public Task<_cloud_project_database.IpRestriction> PostV1CloudProjectServiceNameDatabaseMysqlClusterIdIpRestrictionAsync(_cloud_project_database.IpRestrictionCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/ipRestriction";
            return this.SendAsync<_cloud_project_database.IpRestriction>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/ipRestriction/{ipBlock}
        public Task DeleteV1CloudProjectServiceNameDatabaseMysqlClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/ipRestriction/{ipBlock}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> GetV1CloudProjectServiceNameDatabaseMysqlClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/ipRestriction/{ipBlock}";
            return this.SendAsync<_cloud_project_database.IpRestriction>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> PutV1CloudProjectServiceNameDatabaseMysqlClusterIdIpRestrictionIpBlockAsync(_cloud_project_database.IpRestriction _body, System.Guid clusterId, string ipBlock, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/ipRestriction/{ipBlock}";
            return this.SendAsync<_cloud_project_database.IpRestriction>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/log/subscription
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseMysqlClusterIdLogSubscriptionAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? kind) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("kind", kind);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/log/subscription{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostV1CloudProjectServiceNameDatabaseMysqlClusterIdLogSubscriptionAsync(_cloud_project_database.LogSubscriptionCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/log/subscription";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteV1CloudProjectServiceNameDatabaseMysqlClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetV1CloudProjectServiceNameDatabaseMysqlClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscription>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/logs
        public Task<_cloud_project_database_service.LogEntry[]> GetV1CloudProjectServiceNameDatabaseMysqlClusterIdLogsAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/logs";
            return this.SendAsync<_cloud_project_database_service.LogEntry[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/maintenance
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseMysqlClusterIdMaintenanceAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/maintenance";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/maintenance/{maintenanceId}
        public Task<_cloud_project_database_service.Maintenance> GetV1CloudProjectServiceNameDatabaseMysqlClusterIdMaintenanceMaintenanceIdAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/maintenance/{maintenanceId}";
            return this.SendAsync<_cloud_project_database_service.Maintenance>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/maintenance/{maintenanceId}/apply
        public Task<_cloud_project_database_service.Maintenance> PostV1CloudProjectServiceNameDatabaseMysqlClusterIdMaintenanceMaintenanceIdApplyAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/maintenance/{maintenanceId}/apply";
            return this.SendAsync<_cloud_project_database_service.Maintenance>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/metric
        public Task<System.String[]> GetV1CloudProjectServiceNameDatabaseMysqlClusterIdMetricAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? extended) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("extended", extended);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/metric{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/metric/{metricName}
        public Task<_cloud_project_database_service.Metric> GetV1CloudProjectServiceNameDatabaseMysqlClusterIdMetricMetricNameAsync(System.Guid clusterId, string metricName, _cloud_project_database_service.MetricPeriodEnum period, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("period", period);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/metric/{metricName}{queryParameters}";
            return this.SendAsync<_cloud_project_database_service.Metric>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/node
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseMysqlClusterIdNodeAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/node";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/node/{nodeId}
        public Task<_cloud_project_database_service.Node> GetV1CloudProjectServiceNameDatabaseMysqlClusterIdNodeNodeIdAsync(System.Guid clusterId, System.Guid nodeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/node/{nodeId}";
            return this.SendAsync<_cloud_project_database_service.Node>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/queryStatistics
        public Task<_cloud_project_database_mysql.QueryStatistics> GetV1CloudProjectServiceNameDatabaseMysqlClusterIdQueryStatisticsAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? limit, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? offset) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("limit", limit);
            queryParametersTemp.Add("offset", offset);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/queryStatistics{queryParameters}";
            return this.SendAsync<_cloud_project_database_mysql.QueryStatistics>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/queryStatistics/reset
        public Task PostV1CloudProjectServiceNameDatabaseMysqlClusterIdQueryStatisticsResetAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/queryStatistics/reset";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/user
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseMysqlClusterIdUserAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/user";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/user
        public Task<_cloud_project_database_service.UserWithPassword> PostV1CloudProjectServiceNameDatabaseMysqlClusterIdUserAsync(_cloud_project_database_service.UserCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/user";
            return this.SendAsync<_cloud_project_database_service.UserWithPassword>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/user/{userId}
        public Task DeleteV1CloudProjectServiceNameDatabaseMysqlClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/user/{userId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/user/{userId}
        public Task<_cloud_project_database_service.User> GetV1CloudProjectServiceNameDatabaseMysqlClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/user/{userId}";
            return this.SendAsync<_cloud_project_database_service.User>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/mysql/{clusterId}/user/{userId}/credentials/reset
        public Task<_cloud_project_database_service.UserWithPassword> PostV1CloudProjectServiceNameDatabaseMysqlClusterIdUserUserIdCredentialsResetAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/mysql/{clusterId}/user/{userId}/credentials/reset";
            return this.SendAsync<_cloud_project_database_service.UserWithPassword>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseOpensearchAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch
        public Task<_cloud_project_database.Service> PostV1CloudProjectServiceNameDatabaseOpensearchAsync(_cloud_project_database.ServiceCreation _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch";
            return this.SendAsync<_cloud_project_database.Service>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}
        public Task DeleteV1CloudProjectServiceNameDatabaseOpensearchClusterIdAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}
        public Task<_cloud_project_database_opensearch.Service> GetV1CloudProjectServiceNameDatabaseOpensearchClusterIdAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}";
            return this.SendAsync<_cloud_project_database_opensearch.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}
        public Task<_cloud_project_database_opensearch.Service> PutV1CloudProjectServiceNameDatabaseOpensearchClusterIdAsync(_cloud_project_database_opensearch.Service _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}";
            return this.SendAsync<_cloud_project_database_opensearch.Service>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> GetV1CloudProjectServiceNameDatabaseOpensearchClusterIdAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/advancedConfiguration";
            return this.SendAsync<Dictionary<string, string>>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> PutV1CloudProjectServiceNameDatabaseOpensearchClusterIdAdvancedConfigurationAsync(Dictionary<string, string> _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/advancedConfiguration";
            return this.SendAsync<Dictionary<string, string>>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/backup
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseOpensearchClusterIdBackupAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/backup";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/backup/{backupId}
        public Task<_cloud_project_database.Backup> GetV1CloudProjectServiceNameDatabaseOpensearchClusterIdBackupBackupIdAsync(System.Guid backupId, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/backup/{backupId}";
            return this.SendAsync<_cloud_project_database.Backup>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/capabilities/advancedConfiguration
        public Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]> GetV1CloudProjectServiceNameDatabaseOpensearchClusterIdCapabilitiesAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/capabilities/advancedConfiguration";
            return this.SendAsync<_cloud_project_database_capabilities_advancedConfiguration.Property[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/capabilities/integration
        public Task<_cloud_project_database_capabilities.Integration[]> GetV1CloudProjectServiceNameDatabaseOpensearchClusterIdCapabilitiesIntegrationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/capabilities/integration";
            return this.SendAsync<_cloud_project_database_capabilities.Integration[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/index
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseOpensearchClusterIdIndexAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/index";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/index/{indexId}
        public Task DeleteV1CloudProjectServiceNameDatabaseOpensearchClusterIdIndexIndexIdAsync(System.Guid clusterId, System.Guid indexId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/index/{indexId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/index/{indexId}
        public Task<_cloud_project_database_opensearch.Index> GetV1CloudProjectServiceNameDatabaseOpensearchClusterIdIndexIndexIdAsync(System.Guid clusterId, System.Guid indexId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/index/{indexId}";
            return this.SendAsync<_cloud_project_database_opensearch.Index>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/integration
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseOpensearchClusterIdIntegrationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/integration";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/integration
        public Task<_cloud_project_database_service.Integration> PostV1CloudProjectServiceNameDatabaseOpensearchClusterIdIntegrationAsync(_cloud_project_database_service.Integration _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/integration";
            return this.SendAsync<_cloud_project_database_service.Integration>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/integration/{integrationId}
        public Task DeleteV1CloudProjectServiceNameDatabaseOpensearchClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/integration/{integrationId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/integration/{integrationId}
        public Task<_cloud_project_database_service.Integration> GetV1CloudProjectServiceNameDatabaseOpensearchClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/integration/{integrationId}";
            return this.SendAsync<_cloud_project_database_service.Integration>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/ipRestriction
        public Task<System.String[]> GetV1CloudProjectServiceNameDatabaseOpensearchClusterIdIpRestrictionAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/ipRestriction";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/ipRestriction
        public Task<_cloud_project_database.IpRestriction> PostV1CloudProjectServiceNameDatabaseOpensearchClusterIdIpRestrictionAsync(_cloud_project_database.IpRestrictionCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/ipRestriction";
            return this.SendAsync<_cloud_project_database.IpRestriction>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/ipRestriction/{ipBlock}
        public Task DeleteV1CloudProjectServiceNameDatabaseOpensearchClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/ipRestriction/{ipBlock}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> GetV1CloudProjectServiceNameDatabaseOpensearchClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/ipRestriction/{ipBlock}";
            return this.SendAsync<_cloud_project_database.IpRestriction>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> PutV1CloudProjectServiceNameDatabaseOpensearchClusterIdIpRestrictionIpBlockAsync(_cloud_project_database.IpRestriction _body, System.Guid clusterId, string ipBlock, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/ipRestriction/{ipBlock}";
            return this.SendAsync<_cloud_project_database.IpRestriction>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/log/subscription
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseOpensearchClusterIdLogSubscriptionAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? kind) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("kind", kind);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/log/subscription{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostV1CloudProjectServiceNameDatabaseOpensearchClusterIdLogSubscriptionAsync(_cloud_project_database.LogSubscriptionCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/log/subscription";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteV1CloudProjectServiceNameDatabaseOpensearchClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetV1CloudProjectServiceNameDatabaseOpensearchClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscription>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/logs
        public Task<_cloud_project_database_service.LogEntry[]> GetV1CloudProjectServiceNameDatabaseOpensearchClusterIdLogsAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/logs";
            return this.SendAsync<_cloud_project_database_service.LogEntry[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/maintenance
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseOpensearchClusterIdMaintenanceAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/maintenance";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/maintenance/{maintenanceId}
        public Task<_cloud_project_database_service.Maintenance> GetV1CloudProjectServiceNameDatabaseOpensearchClusterIdMaintenanceMaintenanceIdAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/maintenance/{maintenanceId}";
            return this.SendAsync<_cloud_project_database_service.Maintenance>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/maintenance/{maintenanceId}/apply
        public Task<_cloud_project_database_service.Maintenance> PostV1CloudProjectServiceNameDatabaseOpensearchClusterIdMaintenanceMaintenanceIdApplyAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/maintenance/{maintenanceId}/apply";
            return this.SendAsync<_cloud_project_database_service.Maintenance>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/metric
        public Task<System.String[]> GetV1CloudProjectServiceNameDatabaseOpensearchClusterIdMetricAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? extended) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("extended", extended);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/metric{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/metric/{metricName}
        public Task<_cloud_project_database_service.Metric> GetV1CloudProjectServiceNameDatabaseOpensearchClusterIdMetricMetricNameAsync(System.Guid clusterId, string metricName, _cloud_project_database_service.MetricPeriodEnum period, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("period", period);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/metric/{metricName}{queryParameters}";
            return this.SendAsync<_cloud_project_database_service.Metric>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/node
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseOpensearchClusterIdNodeAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/node";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/node/{nodeId}
        public Task<_cloud_project_database_service.Node> GetV1CloudProjectServiceNameDatabaseOpensearchClusterIdNodeNodeIdAsync(System.Guid clusterId, System.Guid nodeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/node/{nodeId}";
            return this.SendAsync<_cloud_project_database_service.Node>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/pattern
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseOpensearchClusterIdPatternAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/pattern";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/pattern
        public Task<_cloud_project_database_opensearch.Pattern> PostV1CloudProjectServiceNameDatabaseOpensearchClusterIdPatternAsync(_cloud_project_database_opensearch.Pattern _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/pattern";
            return this.SendAsync<_cloud_project_database_opensearch.Pattern>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/pattern/{patternId}
        public Task DeleteV1CloudProjectServiceNameDatabaseOpensearchClusterIdPatternPatternIdAsync(System.Guid clusterId, System.Guid patternId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/pattern/{patternId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/pattern/{patternId}
        public Task<_cloud_project_database_opensearch.Pattern> GetV1CloudProjectServiceNameDatabaseOpensearchClusterIdPatternPatternIdAsync(System.Guid clusterId, System.Guid patternId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/pattern/{patternId}";
            return this.SendAsync<_cloud_project_database_opensearch.Pattern>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/permissions
        public Task<_cloud_project_database_opensearch.Permissions> GetV1CloudProjectServiceNameDatabaseOpensearchClusterIdPermissionsAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/permissions";
            return this.SendAsync<_cloud_project_database_opensearch.Permissions>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/user
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseOpensearchClusterIdUserAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/user";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/user
        public Task<_cloud_project_database_opensearch.UserWithPassword> PostV1CloudProjectServiceNameDatabaseOpensearchClusterIdUserAsync(_cloud_project_database_opensearch.UserCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/user";
            return this.SendAsync<_cloud_project_database_opensearch.UserWithPassword>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/user/{userId}
        public Task DeleteV1CloudProjectServiceNameDatabaseOpensearchClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/user/{userId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/user/{userId}
        public Task<_cloud_project_database_opensearch.User> GetV1CloudProjectServiceNameDatabaseOpensearchClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/user/{userId}";
            return this.SendAsync<_cloud_project_database_opensearch.User>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/user/{userId}
        public Task<_cloud_project_database_opensearch.User> PutV1CloudProjectServiceNameDatabaseOpensearchClusterIdUserUserIdAsync(_cloud_project_database_opensearch.User _body, System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/user/{userId}";
            return this.SendAsync<_cloud_project_database_opensearch.User>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/user/{userId}/credentials/reset
        public Task<_cloud_project_database_opensearch.UserWithPassword> PostV1CloudProjectServiceNameDatabaseOpensearchClusterIdUserUserIdCredentialsResetAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/opensearch/{clusterId}/user/{userId}/credentials/reset";
            return this.SendAsync<_cloud_project_database_opensearch.UserWithPassword>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabasePostgresqlAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql
        public Task<_cloud_project_database.Service> PostV1CloudProjectServiceNameDatabasePostgresqlAsync(_cloud_project_database.ServiceCreation _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql";
            return this.SendAsync<_cloud_project_database.Service>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}
        public Task DeleteV1CloudProjectServiceNameDatabasePostgresqlClusterIdAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}
        public Task<_cloud_project_database.Service> GetV1CloudProjectServiceNameDatabasePostgresqlClusterIdAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}";
            return this.SendAsync<_cloud_project_database.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}
        public Task<_cloud_project_database.Service> PutV1CloudProjectServiceNameDatabasePostgresqlClusterIdAsync(_cloud_project_database.Service _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}";
            return this.SendAsync<_cloud_project_database.Service>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> GetV1CloudProjectServiceNameDatabasePostgresqlClusterIdAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/advancedConfiguration";
            return this.SendAsync<Dictionary<string, string>>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> PutV1CloudProjectServiceNameDatabasePostgresqlClusterIdAdvancedConfigurationAsync(Dictionary<string, string> _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/advancedConfiguration";
            return this.SendAsync<Dictionary<string, string>>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/backup
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabasePostgresqlClusterIdBackupAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/backup";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/backup/{backupId}
        public Task<_cloud_project_database.Backup> GetV1CloudProjectServiceNameDatabasePostgresqlClusterIdBackupBackupIdAsync(System.Guid backupId, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/backup/{backupId}";
            return this.SendAsync<_cloud_project_database.Backup>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/capabilities/advancedConfiguration
        public Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]> GetV1CloudProjectServiceNameDatabasePostgresqlClusterIdCapabilitiesAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/capabilities/advancedConfiguration";
            return this.SendAsync<_cloud_project_database_capabilities_advancedConfiguration.Property[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/capabilities/integration
        public Task<_cloud_project_database_capabilities.Integration[]> GetV1CloudProjectServiceNameDatabasePostgresqlClusterIdCapabilitiesIntegrationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/capabilities/integration";
            return this.SendAsync<_cloud_project_database_capabilities.Integration[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/certificates
        public Task<_cloud_project_database_service.Certificates> GetV1CloudProjectServiceNameDatabasePostgresqlClusterIdCertificatesAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/certificates";
            return this.SendAsync<_cloud_project_database_service.Certificates>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/connectionPool
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabasePostgresqlClusterIdConnectionPoolAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/connectionPool";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/connectionPool
        public Task<_cloud_project_database_postgresql.ConnectionPool> PostV1CloudProjectServiceNameDatabasePostgresqlClusterIdConnectionPoolAsync(_cloud_project_database_postgresql.ConnectionPoolCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/connectionPool";
            return this.SendAsync<_cloud_project_database_postgresql.ConnectionPool>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/connectionPool/{connectionPoolId}
        public Task DeleteV1CloudProjectServiceNameDatabasePostgresqlClusterIdConnectionPoolConnectionPoolIdAsync(System.Guid clusterId, System.Guid connectionPoolId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/connectionPool/{connectionPoolId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/connectionPool/{connectionPoolId}
        public Task<_cloud_project_database_postgresql.ConnectionPool> GetV1CloudProjectServiceNameDatabasePostgresqlClusterIdConnectionPoolConnectionPoolIdAsync(System.Guid clusterId, System.Guid connectionPoolId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/connectionPool/{connectionPoolId}";
            return this.SendAsync<_cloud_project_database_postgresql.ConnectionPool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/connectionPool/{connectionPoolId}
        public Task<_cloud_project_database_postgresql.ConnectionPool> PutV1CloudProjectServiceNameDatabasePostgresqlClusterIdConnectionPoolConnectionPoolIdAsync(_cloud_project_database_postgresql.ConnectionPool _body, System.Guid clusterId, System.Guid connectionPoolId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/connectionPool/{connectionPoolId}";
            return this.SendAsync<_cloud_project_database_postgresql.ConnectionPool>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/currentQueries
        public Task<_cloud_project_database_service.CurrentQueries> GetV1CloudProjectServiceNameDatabasePostgresqlClusterIdCurrentQueriesAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? limit, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? offset) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("limit", limit);
            queryParametersTemp.Add("offset", offset);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/currentQueries{queryParameters}";
            return this.SendAsync<_cloud_project_database_service.CurrentQueries>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/currentQueries/cancel
        public Task<_cloud_project_database_service_currentqueries_query.CancelResponse> PostV1CloudProjectServiceNameDatabasePostgresqlClusterIdCurrentQueriesCancelAsync(_cloud_project_database_service_currentqueries_query.CancelRequest _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/currentQueries/cancel";
            return this.SendAsync<_cloud_project_database_service_currentqueries_query.CancelResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/database
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabasePostgresqlClusterIdDatabaseAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/database";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/database
        public Task<_cloud_project_database_service.Database> PostV1CloudProjectServiceNameDatabasePostgresqlClusterIdDatabaseAsync(_cloud_project_database_service.Database _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/database";
            return this.SendAsync<_cloud_project_database_service.Database>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/database/{databaseId}
        public Task DeleteV1CloudProjectServiceNameDatabasePostgresqlClusterIdDatabaseDatabaseIdAsync(System.Guid clusterId, System.Guid databaseId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/database/{databaseId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/database/{databaseId}
        public Task<_cloud_project_database_service.Database> GetV1CloudProjectServiceNameDatabasePostgresqlClusterIdDatabaseDatabaseIdAsync(System.Guid clusterId, System.Guid databaseId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/database/{databaseId}";
            return this.SendAsync<_cloud_project_database_service.Database>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/enableWrites
        public Task<_cloud_project_database.TemporaryWriteDeadline> PostV1CloudProjectServiceNameDatabasePostgresqlClusterIdEnableWritesAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/enableWrites";
            return this.SendAsync<_cloud_project_database.TemporaryWriteDeadline>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/integration
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabasePostgresqlClusterIdIntegrationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/integration";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/integration
        public Task<_cloud_project_database_service.Integration> PostV1CloudProjectServiceNameDatabasePostgresqlClusterIdIntegrationAsync(_cloud_project_database_service.Integration _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/integration";
            return this.SendAsync<_cloud_project_database_service.Integration>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/integration/{integrationId}
        public Task DeleteV1CloudProjectServiceNameDatabasePostgresqlClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/integration/{integrationId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/integration/{integrationId}
        public Task<_cloud_project_database_service.Integration> GetV1CloudProjectServiceNameDatabasePostgresqlClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/integration/{integrationId}";
            return this.SendAsync<_cloud_project_database_service.Integration>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/ipRestriction
        public Task<System.String[]> GetV1CloudProjectServiceNameDatabasePostgresqlClusterIdIpRestrictionAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/ipRestriction";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/ipRestriction
        public Task<_cloud_project_database.IpRestriction> PostV1CloudProjectServiceNameDatabasePostgresqlClusterIdIpRestrictionAsync(_cloud_project_database.IpRestrictionCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/ipRestriction";
            return this.SendAsync<_cloud_project_database.IpRestriction>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/ipRestriction/{ipBlock}
        public Task DeleteV1CloudProjectServiceNameDatabasePostgresqlClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/ipRestriction/{ipBlock}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> GetV1CloudProjectServiceNameDatabasePostgresqlClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/ipRestriction/{ipBlock}";
            return this.SendAsync<_cloud_project_database.IpRestriction>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> PutV1CloudProjectServiceNameDatabasePostgresqlClusterIdIpRestrictionIpBlockAsync(_cloud_project_database.IpRestriction _body, System.Guid clusterId, string ipBlock, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/ipRestriction/{ipBlock}";
            return this.SendAsync<_cloud_project_database.IpRestriction>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/log/subscription
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabasePostgresqlClusterIdLogSubscriptionAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? kind) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("kind", kind);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/log/subscription{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostV1CloudProjectServiceNameDatabasePostgresqlClusterIdLogSubscriptionAsync(_cloud_project_database.LogSubscriptionCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/log/subscription";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteV1CloudProjectServiceNameDatabasePostgresqlClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetV1CloudProjectServiceNameDatabasePostgresqlClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscription>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/logs
        public Task<_cloud_project_database_service.LogEntry[]> GetV1CloudProjectServiceNameDatabasePostgresqlClusterIdLogsAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/logs";
            return this.SendAsync<_cloud_project_database_service.LogEntry[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/maintenance
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabasePostgresqlClusterIdMaintenanceAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/maintenance";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/maintenance/{maintenanceId}
        public Task<_cloud_project_database_service.Maintenance> GetV1CloudProjectServiceNameDatabasePostgresqlClusterIdMaintenanceMaintenanceIdAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/maintenance/{maintenanceId}";
            return this.SendAsync<_cloud_project_database_service.Maintenance>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/maintenance/{maintenanceId}/apply
        public Task<_cloud_project_database_service.Maintenance> PostV1CloudProjectServiceNameDatabasePostgresqlClusterIdMaintenanceMaintenanceIdApplyAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/maintenance/{maintenanceId}/apply";
            return this.SendAsync<_cloud_project_database_service.Maintenance>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/metric
        public Task<System.String[]> GetV1CloudProjectServiceNameDatabasePostgresqlClusterIdMetricAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? extended) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("extended", extended);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/metric{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/metric/{metricName}
        public Task<_cloud_project_database_service.Metric> GetV1CloudProjectServiceNameDatabasePostgresqlClusterIdMetricMetricNameAsync(System.Guid clusterId, string metricName, _cloud_project_database_service.MetricPeriodEnum period, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("period", period);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/metric/{metricName}{queryParameters}";
            return this.SendAsync<_cloud_project_database_service.Metric>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/node
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabasePostgresqlClusterIdNodeAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/node";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/node/{nodeId}
        public Task<_cloud_project_database_service.Node> GetV1CloudProjectServiceNameDatabasePostgresqlClusterIdNodeNodeIdAsync(System.Guid clusterId, System.Guid nodeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/node/{nodeId}";
            return this.SendAsync<_cloud_project_database_service.Node>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/queryStatistics
        public Task<_cloud_project_database_postgresql.QueryStatistics> GetV1CloudProjectServiceNameDatabasePostgresqlClusterIdQueryStatisticsAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? limit, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? offset) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("limit", limit);
            queryParametersTemp.Add("offset", offset);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/queryStatistics{queryParameters}";
            return this.SendAsync<_cloud_project_database_postgresql.QueryStatistics>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/queryStatistics/reset
        public Task PostV1CloudProjectServiceNameDatabasePostgresqlClusterIdQueryStatisticsResetAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/queryStatistics/reset";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/roles
        public Task<System.String[]> GetV1CloudProjectServiceNameDatabasePostgresqlClusterIdRolesAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/roles";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/user
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabasePostgresqlClusterIdUserAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/user";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/user
        public Task<_cloud_project_database_service.UserWithPasswordAndRoles> PostV1CloudProjectServiceNameDatabasePostgresqlClusterIdUserAsync(_cloud_project_database_service.UserWithRolesCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/user";
            return this.SendAsync<_cloud_project_database_service.UserWithPasswordAndRoles>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/user/{userId}
        public Task DeleteV1CloudProjectServiceNameDatabasePostgresqlClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/user/{userId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/user/{userId}
        public Task<_cloud_project_database_service.UserWithRoles> GetV1CloudProjectServiceNameDatabasePostgresqlClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/user/{userId}";
            return this.SendAsync<_cloud_project_database_service.UserWithRoles>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/user/{userId}
        public Task<_cloud_project_database_service.UserWithRoles> PutV1CloudProjectServiceNameDatabasePostgresqlClusterIdUserUserIdAsync(_cloud_project_database_service.UserWithRoles _body, System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/user/{userId}";
            return this.SendAsync<_cloud_project_database_service.UserWithRoles>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/user/{userId}/credentials/reset
        public Task<_cloud_project_database_service.UserWithPasswordAndRoles> PostV1CloudProjectServiceNameDatabasePostgresqlClusterIdUserUserIdCredentialsResetAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/postgresql/{clusterId}/user/{userId}/credentials/reset";
            return this.SendAsync<_cloud_project_database_service.UserWithPasswordAndRoles>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseRedisAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis
        public Task<_cloud_project_database.Service> PostV1CloudProjectServiceNameDatabaseRedisAsync(_cloud_project_database.ServiceCreation _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis";
            return this.SendAsync<_cloud_project_database.Service>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}
        public Task DeleteV1CloudProjectServiceNameDatabaseRedisClusterIdAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}
        public Task<_cloud_project_database.Service> GetV1CloudProjectServiceNameDatabaseRedisClusterIdAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}";
            return this.SendAsync<_cloud_project_database.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}
        public Task<_cloud_project_database.Service> PutV1CloudProjectServiceNameDatabaseRedisClusterIdAsync(_cloud_project_database.Service _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}";
            return this.SendAsync<_cloud_project_database.Service>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> GetV1CloudProjectServiceNameDatabaseRedisClusterIdAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/advancedConfiguration";
            return this.SendAsync<Dictionary<string, string>>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> PutV1CloudProjectServiceNameDatabaseRedisClusterIdAdvancedConfigurationAsync(Dictionary<string, string> _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/advancedConfiguration";
            return this.SendAsync<Dictionary<string, string>>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/backup
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseRedisClusterIdBackupAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/backup";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/backup/{backupId}
        public Task<_cloud_project_database.Backup> GetV1CloudProjectServiceNameDatabaseRedisClusterIdBackupBackupIdAsync(System.Guid backupId, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/backup/{backupId}";
            return this.SendAsync<_cloud_project_database.Backup>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/capabilities/advancedConfiguration
        public Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]> GetV1CloudProjectServiceNameDatabaseRedisClusterIdCapabilitiesAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/capabilities/advancedConfiguration";
            return this.SendAsync<_cloud_project_database_capabilities_advancedConfiguration.Property[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/capabilities/categories
        public Task<System.String[]> GetV1CloudProjectServiceNameDatabaseRedisClusterIdCapabilitiesCategoriesAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/capabilities/categories";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/capabilities/commands
        public Task<System.String[]> GetV1CloudProjectServiceNameDatabaseRedisClusterIdCapabilitiesCommandsAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/capabilities/commands";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/capabilities/integration
        public Task<_cloud_project_database_capabilities.Integration[]> GetV1CloudProjectServiceNameDatabaseRedisClusterIdCapabilitiesIntegrationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/capabilities/integration";
            return this.SendAsync<_cloud_project_database_capabilities.Integration[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/integration
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseRedisClusterIdIntegrationAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/integration";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/integration
        public Task<_cloud_project_database_service.Integration> PostV1CloudProjectServiceNameDatabaseRedisClusterIdIntegrationAsync(_cloud_project_database_service.Integration _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/integration";
            return this.SendAsync<_cloud_project_database_service.Integration>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/integration/{integrationId}
        public Task DeleteV1CloudProjectServiceNameDatabaseRedisClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/integration/{integrationId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/integration/{integrationId}
        public Task<_cloud_project_database_service.Integration> GetV1CloudProjectServiceNameDatabaseRedisClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/integration/{integrationId}";
            return this.SendAsync<_cloud_project_database_service.Integration>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/ipRestriction
        public Task<System.String[]> GetV1CloudProjectServiceNameDatabaseRedisClusterIdIpRestrictionAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/ipRestriction";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/ipRestriction
        public Task<_cloud_project_database.IpRestriction> PostV1CloudProjectServiceNameDatabaseRedisClusterIdIpRestrictionAsync(_cloud_project_database.IpRestrictionCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/ipRestriction";
            return this.SendAsync<_cloud_project_database.IpRestriction>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/ipRestriction/{ipBlock}
        public Task DeleteV1CloudProjectServiceNameDatabaseRedisClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/ipRestriction/{ipBlock}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> GetV1CloudProjectServiceNameDatabaseRedisClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/ipRestriction/{ipBlock}";
            return this.SendAsync<_cloud_project_database.IpRestriction>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> PutV1CloudProjectServiceNameDatabaseRedisClusterIdIpRestrictionIpBlockAsync(_cloud_project_database.IpRestriction _body, System.Guid clusterId, string ipBlock, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/ipRestriction/{ipBlock}";
            return this.SendAsync<_cloud_project_database.IpRestriction>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/log/subscription
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseRedisClusterIdLogSubscriptionAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? kind) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("kind", kind);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/log/subscription{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostV1CloudProjectServiceNameDatabaseRedisClusterIdLogSubscriptionAsync(_cloud_project_database.LogSubscriptionCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/log/subscription";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteV1CloudProjectServiceNameDatabaseRedisClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetV1CloudProjectServiceNameDatabaseRedisClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscription>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/logs
        public Task<_cloud_project_database_service.LogEntry[]> GetV1CloudProjectServiceNameDatabaseRedisClusterIdLogsAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/logs";
            return this.SendAsync<_cloud_project_database_service.LogEntry[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/maintenance
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseRedisClusterIdMaintenanceAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/maintenance";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/maintenance/{maintenanceId}
        public Task<_cloud_project_database_service.Maintenance> GetV1CloudProjectServiceNameDatabaseRedisClusterIdMaintenanceMaintenanceIdAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/maintenance/{maintenanceId}";
            return this.SendAsync<_cloud_project_database_service.Maintenance>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/maintenance/{maintenanceId}/apply
        public Task<_cloud_project_database_service.Maintenance> PostV1CloudProjectServiceNameDatabaseRedisClusterIdMaintenanceMaintenanceIdApplyAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/maintenance/{maintenanceId}/apply";
            return this.SendAsync<_cloud_project_database_service.Maintenance>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/metric
        public Task<System.String[]> GetV1CloudProjectServiceNameDatabaseRedisClusterIdMetricAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? extended) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("extended", extended);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/metric{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/metric/{metricName}
        public Task<_cloud_project_database_service.Metric> GetV1CloudProjectServiceNameDatabaseRedisClusterIdMetricMetricNameAsync(System.Guid clusterId, string metricName, _cloud_project_database_service.MetricPeriodEnum period, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("period", period);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/metric/{metricName}{queryParameters}";
            return this.SendAsync<_cloud_project_database_service.Metric>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/node
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseRedisClusterIdNodeAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/node";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/node/{nodeId}
        public Task<_cloud_project_database_service.Node> GetV1CloudProjectServiceNameDatabaseRedisClusterIdNodeNodeIdAsync(System.Guid clusterId, System.Guid nodeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/node/{nodeId}";
            return this.SendAsync<_cloud_project_database_service.Node>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/user
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseRedisClusterIdUserAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/user";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/user
        public Task<_cloud_project_database_redis.UserWithPassword> PostV1CloudProjectServiceNameDatabaseRedisClusterIdUserAsync(_cloud_project_database_redis.UserCreation _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/user";
            return this.SendAsync<_cloud_project_database_redis.UserWithPassword>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/user/{userId}
        public Task DeleteV1CloudProjectServiceNameDatabaseRedisClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/user/{userId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/user/{userId}
        public Task<_cloud_project_database_redis.User> GetV1CloudProjectServiceNameDatabaseRedisClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/user/{userId}";
            return this.SendAsync<_cloud_project_database_redis.User>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/user/{userId}
        public Task<_cloud_project_database_redis.User> PutV1CloudProjectServiceNameDatabaseRedisClusterIdUserUserIdAsync(_cloud_project_database_redis.User _body, System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/user/{userId}";
            return this.SendAsync<_cloud_project_database_redis.User>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/redis/{clusterId}/user/{userId}/credentials/reset
        public Task<_cloud_project_database_redis.UserWithPassword> PostV1CloudProjectServiceNameDatabaseRedisClusterIdUserUserIdCredentialsResetAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            string uri = $"/v1/cloud/project/{serviceName}/database/redis/{clusterId}/user/{userId}/credentials/reset";
            return this.SendAsync<_cloud_project_database_redis.UserWithPassword>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/service
        public Task<System.Guid[]> GetV1CloudProjectServiceNameDatabaseServiceAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _cloud_project_database_engine.CategoryEnum? category) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("category", category);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/database/service{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/database/service/{clusterId}
        public Task<_cloud_project_database.Service> GetV1CloudProjectServiceNameDatabaseServiceClusterIdAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/database/service/{clusterId}";
            return this.SendAsync<_cloud_project_database.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/flavor
        public Task<_cloud_flavor.Flavor[]> GetV1CloudProjectServiceNameFlavorAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? region) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("region", region);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/flavor{queryParameters}";
            return this.SendAsync<_cloud_flavor.Flavor[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/flavor/{flavorId}
        public Task<_cloud_flavor.Flavor> GetV1CloudProjectServiceNameFlavorFlavorIdAsync(string flavorId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/flavor/{flavorId}";
            return this.SendAsync<_cloud_flavor.Flavor>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/image
        public Task<_cloud_image.Image[]> GetV1CloudProjectServiceNameImageAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? flavorType, [System.Runtime.InteropServices.OptionalAttribute()] _cloud_image.OSTypeEnum? osType, [System.Runtime.InteropServices.OptionalAttribute()] System.String? region) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("flavorType", flavorType);
            queryParametersTemp.Add("osType", osType);
            queryParametersTemp.Add("region", region);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/image{queryParameters}";
            return this.SendAsync<_cloud_image.Image[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/image/{imageId}
        public Task<_cloud_image.Image> GetV1CloudProjectServiceNameImageImageIdAsync(string imageId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/image/{imageId}";
            return this.SendAsync<_cloud_image.Image>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/instance
        public Task<_cloud_instance.Instance[]> GetV1CloudProjectServiceNameInstanceAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? region) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("region", region);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/instance{queryParameters}";
            return this.SendAsync<_cloud_instance.Instance[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/instance
        public Task<_cloud_instance.InstanceDetail> PostV1CloudProjectServiceNameInstanceAsync(_cloud.ProjectInstanceCreation _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/instance";
            return this.SendAsync<_cloud_instance.InstanceDetail>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/instance/bulk
        public Task<_cloud_instance.Instance[]> PostV1CloudProjectServiceNameInstanceBulkAsync(_cloud.ProjectInstanceBulkCreation _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/instance/bulk";
            return this.SendAsync<_cloud_instance.Instance[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/instance/group
        public Task<_cloud_instancegroup.InstanceGroup[]> GetV1CloudProjectServiceNameInstanceGroupAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? region) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("region", region);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/instance/group{queryParameters}";
            return this.SendAsync<_cloud_instancegroup.InstanceGroup[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/instance/group
        public Task<_cloud_instancegroup.InstanceGroup> PostV1CloudProjectServiceNameInstanceGroupAsync(_cloud.ProjectInstanceGroupCreation _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/instance/group";
            return this.SendAsync<_cloud_instancegroup.InstanceGroup>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/instance/group/{groupId}
        public Task DeleteV1CloudProjectServiceNameInstanceGroupGroupIdAsync(string groupId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/instance/group/{groupId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/instance/group/{groupId}
        public Task<_cloud_instancegroup.InstanceGroup> GetV1CloudProjectServiceNameInstanceGroupGroupIdAsync(string groupId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? region) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("region", region);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/instance/group/{groupId}{queryParameters}";
            return this.SendAsync<_cloud_instancegroup.InstanceGroup>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/instance/{instanceId}
        public Task DeleteV1CloudProjectServiceNameInstanceInstanceIdAsync(string instanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/instance/{instanceId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/instance/{instanceId}
        public Task<_cloud_instance.InstanceDetail> GetV1CloudProjectServiceNameInstanceInstanceIdAsync(string instanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/instance/{instanceId}";
            return this.SendAsync<_cloud_instance.InstanceDetail>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/instance/{instanceId}
        public Task PutV1CloudProjectServiceNameInstanceInstanceIdAsync(_cloud.ProjectInstanceUpdate _body, string instanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/instance/{instanceId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/instance/{instanceId}/activeMonthlyBilling
        public Task<_cloud_instance.InstanceDetail> PostV1CloudProjectServiceNameInstanceInstanceIdActiveMonthlyBillingAsync(string instanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/instance/{instanceId}/activeMonthlyBilling";
            return this.SendAsync<_cloud_instance.InstanceDetail>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/instance/{instanceId}/applicationAccess
        public Task<_cloud_instance.ApplicationAccess> PostV1CloudProjectServiceNameInstanceInstanceIdApplicationAccessAsync(string instanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/instance/{instanceId}/applicationAccess";
            return this.SendAsync<_cloud_instance.ApplicationAccess>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/instance/{instanceId}/interface
        public Task<_cloud_instanceInterface.Interface[]> GetV1CloudProjectServiceNameInstanceInstanceIdInterfaceAsync(string instanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/instance/{instanceId}/interface";
            return this.SendAsync<_cloud_instanceInterface.Interface[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/instance/{instanceId}/interface
        public Task<_cloud_instanceInterface.Interface> PostV1CloudProjectServiceNameInstanceInstanceIdInterfaceAsync(_cloud.ProjectInstanceInterfaceCreation _body, string instanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/instance/{instanceId}/interface";
            return this.SendAsync<_cloud_instanceInterface.Interface>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/instance/{instanceId}/interface/{interfaceId}
        public Task DeleteV1CloudProjectServiceNameInstanceInstanceIdInterfaceInterfaceIdAsync(string instanceId, string interfaceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/instance/{instanceId}/interface/{interfaceId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/instance/{instanceId}/interface/{interfaceId}
        public Task<_cloud_instanceInterface.Interface> GetV1CloudProjectServiceNameInstanceInstanceIdInterfaceInterfaceIdAsync(string instanceId, string interfaceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/instance/{instanceId}/interface/{interfaceId}";
            return this.SendAsync<_cloud_instanceInterface.Interface>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/instance/{instanceId}/monitoring
        public Task<_cloud_instance.InstanceMetrics> GetV1CloudProjectServiceNameInstanceInstanceIdMonitoringAsync(string instanceId, _cloud_instance.MetricsPeriodEnum period, string serviceName, _cloud_instance.MetricsTypeEnum type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("period", period);
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/instance/{instanceId}/monitoring{queryParameters}";
            return this.SendAsync<_cloud_instance.InstanceMetrics>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/instance/{instanceId}/reboot
        public Task PostV1CloudProjectServiceNameInstanceInstanceIdRebootAsync(_cloud.ProjectInstanceRebootCreation _body, string instanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/instance/{instanceId}/reboot";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/instance/{instanceId}/reinstall
        public Task<_cloud_instance.InstanceDetail> PostV1CloudProjectServiceNameInstanceInstanceIdReinstallAsync(_cloud.ProjectInstanceReinstallCreation _body, string instanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/instance/{instanceId}/reinstall";
            return this.SendAsync<_cloud_instance.InstanceDetail>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/instance/{instanceId}/rescueMode
        public Task<_cloud_instance.RescueAdminPassword> PostV1CloudProjectServiceNameInstanceInstanceIdRescueModeAsync(_cloud.ProjectInstanceRescueModeCreation _body, string instanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/instance/{instanceId}/rescueMode";
            return this.SendAsync<_cloud_instance.RescueAdminPassword>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/instance/{instanceId}/resize
        public Task<_cloud_instance.InstanceDetail> PostV1CloudProjectServiceNameInstanceInstanceIdResizeAsync(_cloud.ProjectInstanceResizeCreation _body, string instanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/instance/{instanceId}/resize";
            return this.SendAsync<_cloud_instance.InstanceDetail>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/instance/{instanceId}/resume
        public Task PostV1CloudProjectServiceNameInstanceInstanceIdResumeAsync(string instanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/instance/{instanceId}/resume";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/instance/{instanceId}/shelve
        public Task PostV1CloudProjectServiceNameInstanceInstanceIdShelveAsync(string instanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/instance/{instanceId}/shelve";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/instance/{instanceId}/snapshot
        public Task PostV1CloudProjectServiceNameInstanceInstanceIdSnapshotAsync(_cloud.ProjectInstanceSnapshotCreation _body, string instanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/instance/{instanceId}/snapshot";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/instance/{instanceId}/start
        public Task PostV1CloudProjectServiceNameInstanceInstanceIdStartAsync(string instanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/instance/{instanceId}/start";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/instance/{instanceId}/stop
        public Task PostV1CloudProjectServiceNameInstanceInstanceIdStopAsync(string instanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/instance/{instanceId}/stop";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/instance/{instanceId}/unshelve
        public Task PostV1CloudProjectServiceNameInstanceInstanceIdUnshelveAsync(string instanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/instance/{instanceId}/unshelve";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/instance/{instanceId}/vnc
        public Task<_cloud_instance.InstanceVnc> PostV1CloudProjectServiceNameInstanceInstanceIdVncAsync(string instanceId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/instance/{instanceId}/vnc";
            return this.SendAsync<_cloud_instance.InstanceVnc>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/io/capabilities/stream/region
        public Task<System.String[]> GetV1CloudProjectServiceNameIoCapabilitiesStreamRegionAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/io/capabilities/stream/region";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/io/capabilities/stream/region/{regionName}
        public Task<_cloud_project_io_stream.Region> GetV1CloudProjectServiceNameIoCapabilitiesStreamRegionRegionNameAsync(string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/io/capabilities/stream/region/{regionName}";
            return this.SendAsync<_cloud_project_io_stream.Region>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/io/stream
        public Task<System.Guid[]> GetV1CloudProjectServiceNameIoStreamAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/io/stream";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/io/stream
        public Task<_cloud_project_io.Stream> PostV1CloudProjectServiceNameIoStreamAsync(_cloud_project_io.StreamCreation _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/io/stream";
            return this.SendAsync<_cloud_project_io.Stream>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/io/stream/{streamId}
        public Task DeleteV1CloudProjectServiceNameIoStreamStreamIdAsync(string serviceName, System.Guid streamId) {
            string uri = $"/v1/cloud/project/{serviceName}/io/stream/{streamId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/io/stream/{streamId}
        public Task<_cloud_project_io.Stream> GetV1CloudProjectServiceNameIoStreamStreamIdAsync(string serviceName, System.Guid streamId) {
            string uri = $"/v1/cloud/project/{serviceName}/io/stream/{streamId}";
            return this.SendAsync<_cloud_project_io.Stream>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/io/stream/{streamId}
        public Task<_cloud_project_io.Stream> PutV1CloudProjectServiceNameIoStreamStreamIdAsync(_cloud_project_io.Stream _body, string serviceName, System.Guid streamId) {
            string uri = $"/v1/cloud/project/{serviceName}/io/stream/{streamId}";
            return this.SendAsync<_cloud_project_io.Stream>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/io/stream/{streamId}/stats
        public Task<_cloud_project_io.StreamStats> GetV1CloudProjectServiceNameIoStreamStreamIdStatsAsync(string serviceName, System.Guid streamId) {
            string uri = $"/v1/cloud/project/{serviceName}/io/stream/{streamId}/stats";
            return this.SendAsync<_cloud_project_io.StreamStats>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/io/stream/{streamId}/subscription
        public Task<System.Guid[]> GetV1CloudProjectServiceNameIoStreamStreamIdSubscriptionAsync(string serviceName, System.Guid streamId) {
            string uri = $"/v1/cloud/project/{serviceName}/io/stream/{streamId}/subscription";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/io/stream/{streamId}/subscription
        public Task<_cloud_project_io_stream.Subscription> PostV1CloudProjectServiceNameIoStreamStreamIdSubscriptionAsync(_cloud_project_io_stream.SubscriptionCreation _body, string serviceName, System.Guid streamId) {
            string uri = $"/v1/cloud/project/{serviceName}/io/stream/{streamId}/subscription";
            return this.SendAsync<_cloud_project_io_stream.Subscription>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/io/stream/{streamId}/subscription/{subscriptionId}
        public Task DeleteV1CloudProjectServiceNameIoStreamStreamIdSubscriptionSubscriptionIdAsync(string serviceName, System.Guid streamId, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/io/stream/{streamId}/subscription/{subscriptionId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/io/stream/{streamId}/subscription/{subscriptionId}
        public Task<_cloud_project_io_stream.Subscription> GetV1CloudProjectServiceNameIoStreamStreamIdSubscriptionSubscriptionIdAsync(string serviceName, System.Guid streamId, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/io/stream/{streamId}/subscription/{subscriptionId}";
            return this.SendAsync<_cloud_project_io_stream.Subscription>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/io/stream/{streamId}/subscription/{subscriptionId}/resetCursor
        public Task PostV1CloudProjectServiceNameIoStreamStreamIdSubscriptionSubscriptionIdResetCursorAsync(string serviceName, System.Guid streamId, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/io/stream/{streamId}/subscription/{subscriptionId}/resetCursor";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/io/stream/{streamId}/subscription/{subscriptionId}/stats
        public Task<_cloud_project_io_stream.SubscriptionStats> GetV1CloudProjectServiceNameIoStreamStreamIdSubscriptionSubscriptionIdStatsAsync(string serviceName, System.Guid streamId, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/io/stream/{streamId}/subscription/{subscriptionId}/stats";
            return this.SendAsync<_cloud_project_io_stream.SubscriptionStats>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/io/stream/{streamId}/token
        public Task<System.Guid[]> GetV1CloudProjectServiceNameIoStreamStreamIdTokenAsync(string serviceName, System.Guid streamId) {
            string uri = $"/v1/cloud/project/{serviceName}/io/stream/{streamId}/token";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/io/stream/{streamId}/token
        public Task<_cloud_project_io_stream.Token> PostV1CloudProjectServiceNameIoStreamStreamIdTokenAsync(_cloud_project_io_stream.TokenCreation _body, string serviceName, System.Guid streamId) {
            string uri = $"/v1/cloud/project/{serviceName}/io/stream/{streamId}/token";
            return this.SendAsync<_cloud_project_io_stream.Token>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/io/stream/{streamId}/token/{tokenId}
        public Task DeleteV1CloudProjectServiceNameIoStreamStreamIdTokenTokenIdAsync(string serviceName, System.Guid streamId, System.Guid tokenId) {
            string uri = $"/v1/cloud/project/{serviceName}/io/stream/{streamId}/token/{tokenId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/io/stream/{streamId}/token/{tokenId}
        public Task<_cloud_project_io_stream.Token> GetV1CloudProjectServiceNameIoStreamStreamIdTokenTokenIdAsync(string serviceName, System.Guid streamId, System.Guid tokenId) {
            string uri = $"/v1/cloud/project/{serviceName}/io/stream/{streamId}/token/{tokenId}";
            return this.SendAsync<_cloud_project_io_stream.Token>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ip
        public Task<_cloud_ip.CloudIp[]> GetV1CloudProjectServiceNameIpAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ip";
            return this.SendAsync<_cloud_ip.CloudIp[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ip/failover
        public Task<_cloud_ip.FailoverIp[]> GetV1CloudProjectServiceNameIpFailoverAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ip/failover";
            return this.SendAsync<_cloud_ip.FailoverIp[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ip/failover/{id}
        public Task<_cloud_ip.FailoverIp> GetV1CloudProjectServiceNameIpFailoverIdAsync(string id, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ip/failover/{id}";
            return this.SendAsync<_cloud_ip.FailoverIp>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/ip/failover/{id}/attach
        public Task<_cloud_ip.FailoverIp> PostV1CloudProjectServiceNameIpFailoverIdAttachAsync(_cloud.ProjectIpFailoverAttachCreation _body, string id, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/ip/failover/{id}/attach";
            return this.SendAsync<_cloud_ip.FailoverIp>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube
        public Task<System.String[]> GetV1CloudProjectServiceNameKubeAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube
        public Task<_cloud_kube.Cluster> PostV1CloudProjectServiceNameKubeAsync(_cloud.ProjectKubeCreation _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube";
            return this.SendAsync<_cloud_kube.Cluster>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/regions
        public Task<System.String[]> GetV1CloudProjectServiceNameKubeRegionsAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/regions";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}
        public Task DeleteV1CloudProjectServiceNameKubeKubeIdAsync(string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}
        public Task<_cloud_kube.Cluster> GetV1CloudProjectServiceNameKubeKubeIdAsync(string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}";
            return this.SendAsync<_cloud_kube.Cluster>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}
        public Task PutV1CloudProjectServiceNameKubeKubeIdAsync(_cloud.ProjectKubeUpdate _body, string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/auditLogs
        public Task<_dbaas_logs.TemporaryLogsLink> PostV1CloudProjectServiceNameKubeKubeIdAuditLogsAsync(string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/auditLogs";
            return this.SendAsync<_dbaas_logs.TemporaryLogsLink>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/auditLogs/forward
        public Task<_dbaas_logs.LogSubscriptionResponse> PostV1CloudProjectServiceNameKubeKubeIdAuditLogsForwardAsync(_dbaas_logs.LogSubscriptionCreation _body, string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/auditLogs/forward";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/customization
        public Task<_cloud.ProjectKubeCustomization> GetV1CloudProjectServiceNameKubeKubeIdCustomizationAsync(string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/customization";
            return this.SendAsync<_cloud.ProjectKubeCustomization>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/customization
        public Task<_cloud_kube.ResponseMessage> PutV1CloudProjectServiceNameKubeKubeIdCustomizationAsync(_cloud.ProjectKubeCustomization _body, string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/customization";
            return this.SendAsync<_cloud_kube.ResponseMessage>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/flavors
        public Task<_cloud_kube.Flavor[]> GetV1CloudProjectServiceNameKubeKubeIdFlavorsAsync(string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/flavors";
            return this.SendAsync<_cloud_kube.Flavor[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/ipRestrictions
        public Task<System.String[]> GetV1CloudProjectServiceNameKubeKubeIdIpRestrictionsAsync(string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/ipRestrictions";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/ipRestrictions
        public Task<System.String[]> PostV1CloudProjectServiceNameKubeKubeIdIpRestrictionsAsync(_cloud.ProjectKubeIpRestrictionUpsert _body, string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/ipRestrictions";
            return this.SendAsync<string[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/ipRestrictions
        public Task<System.String[]> PutV1CloudProjectServiceNameKubeKubeIdIpRestrictionsAsync(_cloud.ProjectKubeIpRestrictionUpsert _body, string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/ipRestrictions";
            return this.SendAsync<string[]>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/ipRestrictions/{ip}
        public Task DeleteV1CloudProjectServiceNameKubeKubeIdIpRestrictionsIpAsync(string ip, string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/ipRestrictions/{ip}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/kubeconfig
        public Task<_cloud_kube.Kubeconfig> PostV1CloudProjectServiceNameKubeKubeIdKubeconfigAsync(string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/kubeconfig";
            return this.SendAsync<_cloud_kube.Kubeconfig>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/kubeconfig/reset
        public Task PostV1CloudProjectServiceNameKubeKubeIdKubeconfigResetAsync(string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/kubeconfig/reset";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/log/subscription
        public Task<System.Guid[]> GetV1CloudProjectServiceNameKubeKubeIdLogSubscriptionAsync(string kubeId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? kind) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("kind", kind);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/log/subscription{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostV1CloudProjectServiceNameKubeKubeIdLogSubscriptionAsync(_dbaas_logs.LogSubscriptionCreation _body, string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/log/subscription";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteV1CloudProjectServiceNameKubeKubeIdLogSubscriptionSubscriptionIdAsync(string kubeId, string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetV1CloudProjectServiceNameKubeKubeIdLogSubscriptionSubscriptionIdAsync(string kubeId, string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscription>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/log/url
        public Task<_dbaas_logs.TemporaryLogsLink> PostV1CloudProjectServiceNameKubeKubeIdLogUrlAsync(_dbaas_logs.LogUrlCreation _body, string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/log/url";
            return this.SendAsync<_dbaas_logs.TemporaryLogsLink>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/metrics/etcdUsage
        public Task<_cloud_kube.EtcdUsage> GetV1CloudProjectServiceNameKubeKubeIdMetricsEtcdUsageAsync(string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/metrics/etcdUsage";
            return this.SendAsync<_cloud_kube.EtcdUsage>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/node
        public Task<_cloud_kube.Node[]> GetV1CloudProjectServiceNameKubeKubeIdNodeAsync(string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/node";
            return this.SendAsync<_cloud_kube.Node[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/node/{nodeId}
        public Task DeleteV1CloudProjectServiceNameKubeKubeIdNodeNodeIdAsync(string kubeId, string nodeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/node/{nodeId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/node/{nodeId}
        public Task<_cloud_kube.Node> GetV1CloudProjectServiceNameKubeKubeIdNodeNodeIdAsync(string kubeId, string nodeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/node/{nodeId}";
            return this.SendAsync<_cloud_kube.Node>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/nodepool
        public Task<_cloud_kube.NodePool[]> GetV1CloudProjectServiceNameKubeKubeIdNodepoolAsync(string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/nodepool";
            return this.SendAsync<_cloud_kube.NodePool[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/nodepool
        public Task<_cloud_kube.NodePool> PostV1CloudProjectServiceNameKubeKubeIdNodepoolAsync(_cloud.ProjectKubeNodePoolCreation _body, string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/nodepool";
            return this.SendAsync<_cloud_kube.NodePool>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/nodepool/{nodePoolId}
        public Task DeleteV1CloudProjectServiceNameKubeKubeIdNodepoolNodePoolIdAsync(string kubeId, string nodePoolId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/nodepool/{nodePoolId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/nodepool/{nodePoolId}
        public Task<_cloud_kube.NodePool> GetV1CloudProjectServiceNameKubeKubeIdNodepoolNodePoolIdAsync(string kubeId, string nodePoolId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/nodepool/{nodePoolId}";
            return this.SendAsync<_cloud_kube.NodePool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/nodepool/{nodePoolId}
        public Task PutV1CloudProjectServiceNameKubeKubeIdNodepoolNodePoolIdAsync(_cloud.ProjectKubeNodePoolUpdate _body, string kubeId, string nodePoolId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/nodepool/{nodePoolId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/nodepool/{nodePoolId}/nodes
        public Task<_cloud_kube.Node[]> GetV1CloudProjectServiceNameKubeKubeIdNodepoolNodePoolIdNodesAsync(string kubeId, string nodePoolId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/nodepool/{nodePoolId}/nodes";
            return this.SendAsync<_cloud_kube.Node[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/openIdConnect
        public Task DeleteV1CloudProjectServiceNameKubeKubeIdOpenIdConnectAsync(string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/openIdConnect";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/openIdConnect
        public Task<_cloud_kube.OpenIdConnect> GetV1CloudProjectServiceNameKubeKubeIdOpenIdConnectAsync(string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/openIdConnect";
            return this.SendAsync<_cloud_kube.OpenIdConnect>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/openIdConnect
        public Task<_cloud_kube.OpenIdConnect> PostV1CloudProjectServiceNameKubeKubeIdOpenIdConnectAsync(_cloud.ProjectKubeOpenIdConnectCreation _body, string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/openIdConnect";
            return this.SendAsync<_cloud_kube.OpenIdConnect>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/openIdConnect
        public Task PutV1CloudProjectServiceNameKubeKubeIdOpenIdConnectAsync(_cloud.ProjectKubeOpenIdConnectUpdate _body, string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/openIdConnect";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/privateNetworkConfiguration
        public Task<_cloud_kube.PrivateNetworkConfiguration> GetV1CloudProjectServiceNameKubeKubeIdPrivateNetworkConfigurationAsync(string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/privateNetworkConfiguration";
            return this.SendAsync<_cloud_kube.PrivateNetworkConfiguration>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/privateNetworkConfiguration
        public Task<_cloud_kube.ResponseMessage> PutV1CloudProjectServiceNameKubeKubeIdPrivateNetworkConfigurationAsync(_cloud_kube.PrivateNetworkConfiguration _body, string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/privateNetworkConfiguration";
            return this.SendAsync<_cloud_kube.ResponseMessage>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/reset
        public Task PostV1CloudProjectServiceNameKubeKubeIdResetAsync(_cloud.ProjectKubeResetCreation _body, string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/reset";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/restart
        public Task PostV1CloudProjectServiceNameKubeKubeIdRestartAsync(_cloud.ProjectKubeRestart _body, string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/restart";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/update
        public Task PostV1CloudProjectServiceNameKubeKubeIdUpdateAsync(_cloud.ProjectKubeUpdateCreation _body, string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/update";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/updateLoadBalancersSubnetId
        public Task PutV1CloudProjectServiceNameKubeKubeIdUpdateLoadBalancersSubnetIdAsync(_cloud.ProjectKubeUpdateLoadBalancersSubnetId _body, string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/updateLoadBalancersSubnetId";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/kube/{kubeId}/updatePolicy
        public Task PutV1CloudProjectServiceNameKubeKubeIdUpdatePolicyAsync(_cloud.ProjectKubeUpdatePolicyUpdate _body, string kubeId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/kube/{kubeId}/updatePolicy";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/lab
        public Task<_cloud.Lab[]> GetV1CloudProjectServiceNameLabAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/lab";
            return this.SendAsync<_cloud.Lab[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/lab/{labId}
        public Task<_cloud.Lab> GetV1CloudProjectServiceNameLabLabIdAsync(string labId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/lab/{labId}";
            return this.SendAsync<_cloud.Lab>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/lab/{labId}
        public Task<_cloud.Operation> PostV1CloudProjectServiceNameLabLabIdAsync(string labId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/lab/{labId}";
            return this.SendAsync<_cloud.Operation>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/lab/{labId}/agreement
        public Task<_cloud.LabAgreements> GetV1CloudProjectServiceNameLabLabIdAgreementAsync(string labId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/lab/{labId}/agreement";
            return this.SendAsync<_cloud.LabAgreements>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/loadbalancer
        public Task<System.Guid[]> GetV1CloudProjectServiceNameLoadbalancerAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/loadbalancer";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/loadbalancer
        public Task<_cloud_project.LoadBalancer> PostV1CloudProjectServiceNameLoadbalancerAsync(_cloud_project.LoadBalancerCreation _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/loadbalancer";
            return this.SendAsync<_cloud_project.LoadBalancer>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/loadbalancer/{loadBalancerId}
        public Task DeleteV1CloudProjectServiceNameLoadbalancerLoadBalancerIdAsync(System.Guid loadBalancerId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/loadbalancer/{loadBalancerId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/loadbalancer/{loadBalancerId}
        public Task<_cloud_project.LoadBalancer> GetV1CloudProjectServiceNameLoadbalancerLoadBalancerIdAsync(System.Guid loadBalancerId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/loadbalancer/{loadBalancerId}";
            return this.SendAsync<_cloud_project.LoadBalancer>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/loadbalancer/{loadBalancerId}
        public Task<_cloud_project.LoadBalancer> PutV1CloudProjectServiceNameLoadbalancerLoadBalancerIdAsync(_cloud_project.LoadBalancer _body, System.Guid loadBalancerId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/loadbalancer/{loadBalancerId}";
            return this.SendAsync<_cloud_project.LoadBalancer>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/loadbalancer/{loadBalancerId}/configuration
        public Task<System.Int64[]> GetV1CloudProjectServiceNameLoadbalancerLoadBalancerIdConfigurationAsync(System.Guid loadBalancerId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/loadbalancer/{loadBalancerId}/configuration";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/loadbalancer/{loadBalancerId}/configuration
        public Task<_cloud_project_loadbalancer.Configuration> PostV1CloudProjectServiceNameLoadbalancerLoadBalancerIdConfigurationAsync(_cloud_project_loadbalancer.ConfigurationCreation _body, System.Guid loadBalancerId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/loadbalancer/{loadBalancerId}/configuration";
            return this.SendAsync<_cloud_project_loadbalancer.Configuration>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/loadbalancer/{loadBalancerId}/configuration/{version}
        public Task DeleteV1CloudProjectServiceNameLoadbalancerLoadBalancerIdConfigurationVersionAsync(System.Guid loadBalancerId, string serviceName, long version) {
            string uri = $"/v1/cloud/project/{serviceName}/loadbalancer/{loadBalancerId}/configuration/{version}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/loadbalancer/{loadBalancerId}/configuration/{version}
        public Task<_cloud_project_loadbalancer.Configuration> GetV1CloudProjectServiceNameLoadbalancerLoadBalancerIdConfigurationVersionAsync(System.Guid loadBalancerId, string serviceName, long version) {
            string uri = $"/v1/cloud/project/{serviceName}/loadbalancer/{loadBalancerId}/configuration/{version}";
            return this.SendAsync<_cloud_project_loadbalancer.Configuration>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/loadbalancer/{loadBalancerId}/configuration/{version}/apply
        public Task<_cloud_project_loadbalancer.Configuration> PostV1CloudProjectServiceNameLoadbalancerLoadBalancerIdConfigurationVersionApplyAsync(System.Guid loadBalancerId, string serviceName, long version) {
            string uri = $"/v1/cloud/project/{serviceName}/loadbalancer/{loadBalancerId}/configuration/{version}/apply";
            return this.SendAsync<_cloud_project_loadbalancer.Configuration>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/migration
        public Task<_cloud_migration.Migration[]> GetV1CloudProjectServiceNameMigrationAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/migration";
            return this.SendAsync<_cloud_migration.Migration[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/migration/{migrationId}
        public Task<_cloud_migration.Migration> GetV1CloudProjectServiceNameMigrationMigrationIdAsync(string migrationId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/migration/{migrationId}";
            return this.SendAsync<_cloud_migration.Migration>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/migration/{migrationId}
        public Task<_cloud_migration.Migration> PutV1CloudProjectServiceNameMigrationMigrationIdAsync(_cloud.ProjectMigrationUpdate _body, string migrationId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/migration/{migrationId}";
            return this.SendAsync<_cloud_migration.Migration>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/network/private
        public Task<_cloud_network.Network[]> GetV1CloudProjectServiceNameNetworkPrivateAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/network/private";
            return this.SendAsync<_cloud_network.Network[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/network/private
        public Task<_cloud_network.Network> PostV1CloudProjectServiceNameNetworkPrivateAsync(_cloud.ProjectNetworkPrivateCreation _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/network/private";
            return this.SendAsync<_cloud_network.Network>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/network/private/{networkId}
        public Task DeleteV1CloudProjectServiceNameNetworkPrivateNetworkIdAsync(string networkId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/network/private/{networkId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/network/private/{networkId}
        public Task<_cloud_network.Network> GetV1CloudProjectServiceNameNetworkPrivateNetworkIdAsync(string networkId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/network/private/{networkId}";
            return this.SendAsync<_cloud_network.Network>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/network/private/{networkId}
        public Task PutV1CloudProjectServiceNameNetworkPrivateNetworkIdAsync(_cloud.ProjectNetworkPrivateUpdate _body, string networkId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/network/private/{networkId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/network/private/{networkId}/region
        public Task<_cloud_network.Network> PostV1CloudProjectServiceNameNetworkPrivateNetworkIdRegionAsync(_cloud.ProjectNetworkPrivateRegionCreation _body, string networkId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/network/private/{networkId}/region";
            return this.SendAsync<_cloud_network.Network>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/network/private/{networkId}/subnet
        public Task<_cloud_network.Subnet[]> GetV1CloudProjectServiceNameNetworkPrivateNetworkIdSubnetAsync(string networkId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/network/private/{networkId}/subnet";
            return this.SendAsync<_cloud_network.Subnet[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/network/private/{networkId}/subnet
        public Task<_cloud_network.Subnet> PostV1CloudProjectServiceNameNetworkPrivateNetworkIdSubnetAsync(_cloud.ProjectNetworkPrivateSubnetCreation _body, string networkId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/network/private/{networkId}/subnet";
            return this.SendAsync<_cloud_network.Subnet>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/network/private/{networkId}/subnet/{subnetId}
        public Task DeleteV1CloudProjectServiceNameNetworkPrivateNetworkIdSubnetSubnetIdAsync(string networkId, string serviceName, string subnetId) {
            string uri = $"/v1/cloud/project/{serviceName}/network/private/{networkId}/subnet/{subnetId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/network/public
        public Task<_cloud_network.Network[]> GetV1CloudProjectServiceNameNetworkPublicAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/network/public";
            return this.SendAsync<_cloud_network.Network[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/operation
        public Task<_cloud.Operation[]> GetV1CloudProjectServiceNameOperationAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/operation";
            return this.SendAsync<_cloud.Operation[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/operation/{operationId}
        public Task<_cloud.Operation> GetV1CloudProjectServiceNameOperationOperationIdAsync(string operationId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/operation/{operationId}";
            return this.SendAsync<_cloud.Operation>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/quota
        public Task<_cloud_quota.Quotas[]> GetV1CloudProjectServiceNameQuotaAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/quota";
            return this.SendAsync<_cloud_quota.Quotas[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region
        public Task<System.String[]> GetV1CloudProjectServiceNameRegionAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region
        public Task<_cloud.Region> PostV1CloudProjectServiceNameRegionAsync(_cloud.ProjectRegionCreation _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region";
            return this.SendAsync<_cloud.Region>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}
        public Task<_cloud.Region> GetV1CloudProjectServiceNameRegionRegionNameAsync(string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}";
            return this.SendAsync<_cloud.Region>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/coldArchive
        public Task<_cloud.ColdArchiveContainer[]> GetV1CloudProjectServiceNameRegionRegionNameColdArchiveAsync(string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/coldArchive";
            return this.SendAsync<_cloud.ColdArchiveContainer[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/coldArchive
        public Task<_cloud.ColdArchiveContainer> PostV1CloudProjectServiceNameRegionRegionNameColdArchiveAsync(_cloud.StorageContainerCreation _body, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/coldArchive";
            return this.SendAsync<_cloud.ColdArchiveContainer>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}
        public Task DeleteV1CloudProjectServiceNameRegionRegionNameColdArchiveNameAsync(string name, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}
        public Task<_cloud.ColdArchiveContainer> GetV1CloudProjectServiceNameRegionRegionNameColdArchiveNameAsync(string name, string regionName, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? limit, [System.Runtime.InteropServices.OptionalAttribute()] System.String? marker, [System.Runtime.InteropServices.OptionalAttribute()] System.String? prefix) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("limit", limit);
            queryParametersTemp.Add("marker", marker);
            queryParametersTemp.Add("prefix", prefix);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}{queryParameters}";
            return this.SendAsync<_cloud.ColdArchiveContainer>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}/archive
        public Task PostV1CloudProjectServiceNameRegionRegionNameColdArchiveNameArchiveAsync(_cloud_storage.ArchiveColdArchiveContainer _body, string name, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}/archive";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}/destroy
        public Task PostV1CloudProjectServiceNameRegionRegionNameColdArchiveNameDestroyAsync(string name, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}/destroy";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}/object/{objectKey}
        public Task DeleteV1CloudProjectServiceNameRegionRegionNameColdArchiveNameObjectObjectKeyAsync(string name, string objectKey, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}/object/{objectKey}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}/policy/{userId}
        public Task PostV1CloudProjectServiceNameRegionRegionNameColdArchiveNamePolicyUserIdAsync(_cloud_storage.AddContainerPolicy _body, string name, string regionName, string serviceName, string userId) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}/policy/{userId}";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}/presign
        public Task<_cloud_storage.PresignedURL> PostV1CloudProjectServiceNameRegionRegionNameColdArchiveNamePresignAsync(_cloud_storage.PresignedURLInput _body, string name, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}/presign";
            return this.SendAsync<_cloud_storage.PresignedURL>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}/restore
        public Task PostV1CloudProjectServiceNameRegionRegionNameColdArchiveNameRestoreAsync(string name, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}/restore";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/floatingip
        public Task<_cloud_project.FloatingIp[]> GetV1CloudProjectServiceNameRegionRegionNameFloatingipAsync(string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/floatingip";
            return this.SendAsync<_cloud_project.FloatingIp[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/floatingip/{floatingIpId}
        public Task DeleteV1CloudProjectServiceNameRegionRegionNameFloatingipFloatingIpIdAsync(System.Guid floatingIpId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/floatingip/{floatingIpId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/floatingip/{floatingIpId}
        public Task<_cloud_project.FloatingIp> GetV1CloudProjectServiceNameRegionRegionNameFloatingipFloatingIpIdAsync(System.Guid floatingIpId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/floatingip/{floatingIpId}";
            return this.SendAsync<_cloud_project.FloatingIp>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/floatingip/{floatingIpId}/detach
        public Task PostV1CloudProjectServiceNameRegionRegionNameFloatingipFloatingIpIdDetachAsync(System.Guid floatingIpId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/floatingip/{floatingIpId}/detach";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/gateway
        public Task<_cloud_network.Gateway[]> GetV1CloudProjectServiceNameRegionRegionNameGatewayAsync(string regionName, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? subnetId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("subnetId", subnetId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/gateway{queryParameters}";
            return this.SendAsync<_cloud_network.Gateway[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/gateway
        public Task<_cloud.Operation> PostV1CloudProjectServiceNameRegionRegionNameGatewayAsync(_cloud_network.CreateGateway _body, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/gateway";
            return this.SendAsync<_cloud.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/gateway/{id}
        public Task<_cloud.Operation> DeleteV1CloudProjectServiceNameRegionRegionNameGatewayIdAsync(System.Guid id, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/gateway/{id}";
            return this.SendAsync<_cloud.Operation>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/gateway/{id}
        public Task<_cloud_network.Gateway> GetV1CloudProjectServiceNameRegionRegionNameGatewayIdAsync(System.Guid id, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/gateway/{id}";
            return this.SendAsync<_cloud_network.Gateway>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/gateway/{id}
        public Task<_cloud_network.Gateway> PutV1CloudProjectServiceNameRegionRegionNameGatewayIdAsync(_cloud_network.UpdateGateway _body, System.Guid id, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/gateway/{id}";
            return this.SendAsync<_cloud_network.Gateway>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/gateway/{id}/expose
        public Task<_cloud_network.Gateway> PostV1CloudProjectServiceNameRegionRegionNameGatewayIdExposeAsync(System.Guid id, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/gateway/{id}/expose";
            return this.SendAsync<_cloud_network.Gateway>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/gateway/{id}/interface
        public Task<_cloud_network_gateway.Interface[]> GetV1CloudProjectServiceNameRegionRegionNameGatewayIdInterfaceAsync(System.Guid id, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/gateway/{id}/interface";
            return this.SendAsync<_cloud_network_gateway.Interface[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/gateway/{id}/interface
        public Task<_cloud_network_gateway.Interface> PostV1CloudProjectServiceNameRegionRegionNameGatewayIdInterfaceAsync(_cloud_network_gateway.CreateInterface _body, System.Guid id, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/gateway/{id}/interface";
            return this.SendAsync<_cloud_network_gateway.Interface>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/gateway/{id}/interface/{interfaceId}
        public Task DeleteV1CloudProjectServiceNameRegionRegionNameGatewayIdInterfaceInterfaceIdAsync(System.Guid id, System.Guid interfaceId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/gateway/{id}/interface/{interfaceId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/gateway/{id}/interface/{interfaceId}
        public Task<_cloud_network_gateway.Interface> GetV1CloudProjectServiceNameRegionRegionNameGatewayIdInterfaceInterfaceIdAsync(System.Guid id, System.Guid interfaceId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/gateway/{id}/interface/{interfaceId}";
            return this.SendAsync<_cloud_network_gateway.Interface>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/instance
        public Task<_cloud_instance.InstanceSummary[]> GetV1CloudProjectServiceNameRegionRegionNameInstanceAsync(string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/instance";
            return this.SendAsync<_cloud_instance.InstanceSummary[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/instance
        public Task<_cloud.Operation> PostV1CloudProjectServiceNameRegionRegionNameInstanceAsync(_cloud_instance.CreateInput _body, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/instance";
            return this.SendAsync<_cloud.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/instance/{instanceId}
        public Task<_cloud_instance.InstanceSummary> GetV1CloudProjectServiceNameRegionRegionNameInstanceInstanceIdAsync(System.Guid instanceId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/instance/{instanceId}";
            return this.SendAsync<_cloud_instance.InstanceSummary>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/instance/{instanceId}/abortSnapshot
        public Task<_cloud.Operation> PostV1CloudProjectServiceNameRegionRegionNameInstanceInstanceIdAbortSnapshotAsync(System.Guid instanceId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/instance/{instanceId}/abortSnapshot";
            return this.SendAsync<_cloud.Operation>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/instance/{instanceId}/associateFloatingIp
        public Task<_cloud.Operation> PostV1CloudProjectServiceNameRegionRegionNameInstanceInstanceIdAssociateFloatingIpAsync(_cloud_instance.AssociateFloatingIp _body, System.Guid instanceId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/instance/{instanceId}/associateFloatingIp";
            return this.SendAsync<_cloud.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/instance/{instanceId}/floatingIp
        public Task<_cloud.Operation> PostV1CloudProjectServiceNameRegionRegionNameInstanceInstanceIdFloatingIpAsync(_cloud_instance.CreateFloatingIp _body, System.Guid instanceId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/instance/{instanceId}/floatingIp";
            return this.SendAsync<_cloud.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/keymanager/certificate
        public Task<_cloud_keymanager.Certificate[]> GetV1CloudProjectServiceNameRegionRegionNameKeymanagerCertificateAsync(string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/keymanager/certificate";
            return this.SendAsync<_cloud_keymanager.Certificate[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/keymanager/certificate
        public Task<_cloud_keymanager.Certificate> PostV1CloudProjectServiceNameRegionRegionNameKeymanagerCertificateAsync(_cloud_keymanager.CertificateCreate _body, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/keymanager/certificate";
            return this.SendAsync<_cloud_keymanager.Certificate>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/keymanager/certificate/{certificateId}
        public Task DeleteV1CloudProjectServiceNameRegionRegionNameKeymanagerCertificateCertificateIdAsync(System.Guid certificateId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/keymanager/certificate/{certificateId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/keymanager/certificate/{certificateId}
        public Task<_cloud_keymanager.Certificate> GetV1CloudProjectServiceNameRegionRegionNameKeymanagerCertificateCertificateIdAsync(System.Guid certificateId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/keymanager/certificate/{certificateId}";
            return this.SendAsync<_cloud_keymanager.Certificate>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/keymanager/secret
        public Task<_cloud_keymanager.Secret[]> GetV1CloudProjectServiceNameRegionRegionNameKeymanagerSecretAsync(string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/keymanager/secret";
            return this.SendAsync<_cloud_keymanager.Secret[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/keymanager/secret/{secretId}
        public Task DeleteV1CloudProjectServiceNameRegionRegionNameKeymanagerSecretSecretIdAsync(string regionName, System.Guid secretId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/keymanager/secret/{secretId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/keymanager/secret/{secretId}
        public Task<_cloud_keymanager.Secret> GetV1CloudProjectServiceNameRegionRegionNameKeymanagerSecretSecretIdAsync(string regionName, System.Guid secretId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/keymanager/secret/{secretId}";
            return this.SendAsync<_cloud_keymanager.Secret>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/flavor
        public Task<_cloud_loadbalancing.Flavor[]> GetV1CloudProjectServiceNameRegionRegionNameLoadbalancingFlavorAsync(string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/flavor";
            return this.SendAsync<_cloud_loadbalancing.Flavor[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/flavor/{flavorId}
        public Task<_cloud_loadbalancing.Flavor> GetV1CloudProjectServiceNameRegionRegionNameLoadbalancingFlavorFlavorIdAsync(System.Guid flavorId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/flavor/{flavorId}";
            return this.SendAsync<_cloud_loadbalancing.Flavor>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/healthMonitor
        public Task<_cloud_loadbalancing.HealthMonitor[]> GetV1CloudProjectServiceNameRegionRegionNameLoadbalancingHealthMonitorAsync(string regionName, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? poolId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("poolId", poolId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/healthMonitor{queryParameters}";
            return this.SendAsync<_cloud_loadbalancing.HealthMonitor[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/healthMonitor
        public Task<_cloud_loadbalancing.HealthMonitor> PostV1CloudProjectServiceNameRegionRegionNameLoadbalancingHealthMonitorAsync(_cloud_loadbalancing.HealthMonitor _body, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/healthMonitor";
            return this.SendAsync<_cloud_loadbalancing.HealthMonitor>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/healthMonitor/{healthMonitorId}
        public Task DeleteV1CloudProjectServiceNameRegionRegionNameLoadbalancingHealthMonitorHealthMonitorIdAsync(System.Guid healthMonitorId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/healthMonitor/{healthMonitorId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/healthMonitor/{healthMonitorId}
        public Task<_cloud_loadbalancing.HealthMonitor> GetV1CloudProjectServiceNameRegionRegionNameLoadbalancingHealthMonitorHealthMonitorIdAsync(System.Guid healthMonitorId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/healthMonitor/{healthMonitorId}";
            return this.SendAsync<_cloud_loadbalancing.HealthMonitor>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/healthMonitor/{healthMonitorId}
        public Task<_cloud_loadbalancing.HealthMonitor> PutV1CloudProjectServiceNameRegionRegionNameLoadbalancingHealthMonitorHealthMonitorIdAsync(_cloud_loadbalancing.UpdateHealthMonitor _body, System.Guid healthMonitorId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/healthMonitor/{healthMonitorId}";
            return this.SendAsync<_cloud_loadbalancing.HealthMonitor>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy
        public Task<_cloud_loadbalancing.L7Policy[]> GetV1CloudProjectServiceNameRegionRegionNameLoadbalancingL7PolicyAsync(string regionName, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? listenerId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("listenerId", listenerId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy{queryParameters}";
            return this.SendAsync<_cloud_loadbalancing.L7Policy[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy
        public Task<_cloud_loadbalancing.L7Policy> PostV1CloudProjectServiceNameRegionRegionNameLoadbalancingL7PolicyAsync(_cloud_loadbalancing.L7Policy _body, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy";
            return this.SendAsync<_cloud_loadbalancing.L7Policy>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}
        public Task DeleteV1CloudProjectServiceNameRegionRegionNameLoadbalancingL7PolicyL7PolicyIdAsync(System.Guid l7PolicyId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}
        public Task<_cloud_loadbalancing.L7Policy> GetV1CloudProjectServiceNameRegionRegionNameLoadbalancingL7PolicyL7PolicyIdAsync(System.Guid l7PolicyId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}";
            return this.SendAsync<_cloud_loadbalancing.L7Policy>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}
        public Task<_cloud_loadbalancing.L7Policy> PutV1CloudProjectServiceNameRegionRegionNameLoadbalancingL7PolicyL7PolicyIdAsync(_cloud_loadbalancing.L7PolicyUpdate _body, System.Guid l7PolicyId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}";
            return this.SendAsync<_cloud_loadbalancing.L7Policy>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}/l7Rule
        public Task<_cloud_loadbalancing.L7Rule[]> GetV1CloudProjectServiceNameRegionRegionNameLoadbalancingL7PolicyL7PolicyIdL7RuleAsync(System.Guid l7PolicyId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}/l7Rule";
            return this.SendAsync<_cloud_loadbalancing.L7Rule[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}/l7Rule
        public Task<_cloud_loadbalancing.L7Rule> PostV1CloudProjectServiceNameRegionRegionNameLoadbalancingL7PolicyL7PolicyIdL7RuleAsync(_cloud_loadbalancing.L7Rule _body, System.Guid l7PolicyId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}/l7Rule";
            return this.SendAsync<_cloud_loadbalancing.L7Rule>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}/l7Rule/{l7RuleId}
        public Task DeleteV1CloudProjectServiceNameRegionRegionNameLoadbalancingL7PolicyL7PolicyIdL7RuleL7RuleIdAsync(System.Guid l7PolicyId, System.Guid l7RuleId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}/l7Rule/{l7RuleId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}/l7Rule/{l7RuleId}
        public Task<_cloud_loadbalancing.L7Rule> GetV1CloudProjectServiceNameRegionRegionNameLoadbalancingL7PolicyL7PolicyIdL7RuleL7RuleIdAsync(System.Guid l7PolicyId, System.Guid l7RuleId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}/l7Rule/{l7RuleId}";
            return this.SendAsync<_cloud_loadbalancing.L7Rule>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}/l7Rule/{l7RuleId}
        public Task<_cloud_loadbalancing.L7Rule> PutV1CloudProjectServiceNameRegionRegionNameLoadbalancingL7PolicyL7PolicyIdL7RuleL7RuleIdAsync(_cloud_loadbalancing.L7Rule _body, System.Guid l7PolicyId, System.Guid l7RuleId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}/l7Rule/{l7RuleId}";
            return this.SendAsync<_cloud_loadbalancing.L7Rule>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/listener
        public Task<_cloud_loadbalancing.Listener[]> GetV1CloudProjectServiceNameRegionRegionNameLoadbalancingListenerAsync(string regionName, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Guid? loadbalancerId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("loadbalancerId", loadbalancerId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/listener{queryParameters}";
            return this.SendAsync<_cloud_loadbalancing.Listener[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/listener
        public Task<_cloud_loadbalancing.Listener> PostV1CloudProjectServiceNameRegionRegionNameLoadbalancingListenerAsync(_cloud_loadbalancing.CreateListener _body, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/listener";
            return this.SendAsync<_cloud_loadbalancing.Listener>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/listener/{listenerId}
        public Task DeleteV1CloudProjectServiceNameRegionRegionNameLoadbalancingListenerListenerIdAsync(System.Guid listenerId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/listener/{listenerId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/listener/{listenerId}
        public Task<_cloud_loadbalancing.Listener> GetV1CloudProjectServiceNameRegionRegionNameLoadbalancingListenerListenerIdAsync(System.Guid listenerId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/listener/{listenerId}";
            return this.SendAsync<_cloud_loadbalancing.Listener>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/listener/{listenerId}
        public Task<_cloud_loadbalancing.Listener> PutV1CloudProjectServiceNameRegionRegionNameLoadbalancingListenerListenerIdAsync(_cloud_loadbalancing.EditListener _body, System.Guid listenerId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/listener/{listenerId}";
            return this.SendAsync<_cloud_loadbalancing.Listener>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer
        public Task<_cloud_loadbalancing.LoadBalancer[]> GetV1CloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerAsync(string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer";
            return this.SendAsync<_cloud_loadbalancing.LoadBalancer[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer
        public Task<_cloud.Operation> PostV1CloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerAsync(_cloud_loadbalancing_Loadbalancer.CreateInput _body, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer";
            return this.SendAsync<_cloud.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}
        public Task DeleteV1CloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdAsync(System.Guid loadBalancerId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}
        public Task<_cloud_loadbalancing.LoadBalancer> GetV1CloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdAsync(System.Guid loadBalancerId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}";
            return this.SendAsync<_cloud_loadbalancing.LoadBalancer>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}
        public Task<_cloud_loadbalancing.LoadBalancer> PutV1CloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdAsync(_cloud_loadbalancing.LoadbalancerEdit _body, System.Guid loadBalancerId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}";
            return this.SendAsync<_cloud_loadbalancing.LoadBalancer>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/associateFloatingIp
        public Task<_cloud.Operation> PostV1CloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdAssociateFloatingIpAsync(_cloud_loadbalancing.AssociateFloatingIp _body, System.Guid loadBalancerId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/associateFloatingIp";
            return this.SendAsync<_cloud.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/floatingIp
        public Task<_cloud.Operation> PostV1CloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdFloatingIpAsync(_cloud_loadbalancing.CreateFloatingIp _body, System.Guid loadBalancerId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/floatingIp";
            return this.SendAsync<_cloud.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/log/subscription
        public Task<System.Guid[]> GetV1CloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdLogSubscriptionAsync(System.Guid loadBalancerId, string regionName, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? kind) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("kind", kind);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/log/subscription{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostV1CloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdLogSubscriptionAsync(_dbaas_logs.LogSubscriptionCreation _body, System.Guid loadBalancerId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/log/subscription";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteV1CloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdLogSubscriptionSubscriptionIdAsync(System.Guid loadBalancerId, string regionName, string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetV1CloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdLogSubscriptionSubscriptionIdAsync(System.Guid loadBalancerId, string regionName, string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscription>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/log/url
        public Task<_dbaas_logs.TemporaryLogsLink> PostV1CloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdLogUrlAsync(_dbaas_logs.LogUrlCreation _body, System.Guid loadBalancerId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/log/url";
            return this.SendAsync<_dbaas_logs.TemporaryLogsLink>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/stats
        public Task<_cloud_loadbalancing_loadbalancer.Stats> GetV1CloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdStatsAsync(System.Guid loadBalancerId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/stats";
            return this.SendAsync<_cloud_loadbalancing_loadbalancer.Stats>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/log/kind
        public Task<System.String[]> GetV1CloudProjectServiceNameRegionRegionNameLoadbalancingLogKindAsync(string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/log/kind";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/log/kind/{name}
        public Task<_dbaas_logs.LogKind> GetV1CloudProjectServiceNameRegionRegionNameLoadbalancingLogKindNameAsync(string name, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/log/kind/{name}";
            return this.SendAsync<_dbaas_logs.LogKind>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool
        public Task<_cloud_loadbalancing.Pool[]> GetV1CloudProjectServiceNameRegionRegionNameLoadbalancingPoolAsync(string regionName, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Guid? loadbalancerId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("loadbalancerId", loadbalancerId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool{queryParameters}";
            return this.SendAsync<_cloud_loadbalancing.Pool[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool
        public Task<_cloud_loadbalancing.Pool> PostV1CloudProjectServiceNameRegionRegionNameLoadbalancingPoolAsync(_cloud_loadbalancing.PoolCreate _body, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool";
            return this.SendAsync<_cloud_loadbalancing.Pool>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}
        public Task DeleteV1CloudProjectServiceNameRegionRegionNameLoadbalancingPoolPoolIdAsync(System.Guid poolId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}
        public Task<_cloud_loadbalancing.Pool> GetV1CloudProjectServiceNameRegionRegionNameLoadbalancingPoolPoolIdAsync(System.Guid poolId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}";
            return this.SendAsync<_cloud_loadbalancing.Pool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}
        public Task<_cloud_loadbalancing.Pool> PutV1CloudProjectServiceNameRegionRegionNameLoadbalancingPoolPoolIdAsync(_cloud_loadbalancing.PoolUpdate _body, System.Guid poolId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}";
            return this.SendAsync<_cloud_loadbalancing.Pool>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}/member
        public Task<_cloud_loadbalancing_pool.Member[]> GetV1CloudProjectServiceNameRegionRegionNameLoadbalancingPoolPoolIdMemberAsync(System.Guid poolId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}/member";
            return this.SendAsync<_cloud_loadbalancing_pool.Member[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}/member
        public Task<_cloud_loadbalancing_pool.Member[]> PostV1CloudProjectServiceNameRegionRegionNameLoadbalancingPoolPoolIdMemberAsync(_cloud_loadbalancing_pool.CreateMembers _body, System.Guid poolId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}/member";
            return this.SendAsync<_cloud_loadbalancing_pool.Member[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}/member/{memberId}
        public Task DeleteV1CloudProjectServiceNameRegionRegionNameLoadbalancingPoolPoolIdMemberMemberIdAsync(System.Guid memberId, System.Guid poolId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}/member/{memberId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}/member/{memberId}
        public Task<_cloud_loadbalancing_pool.Member> GetV1CloudProjectServiceNameRegionRegionNameLoadbalancingPoolPoolIdMemberMemberIdAsync(System.Guid memberId, System.Guid poolId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}/member/{memberId}";
            return this.SendAsync<_cloud_loadbalancing_pool.Member>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}/member/{memberId}
        public Task<_cloud_loadbalancing_pool.Member> PutV1CloudProjectServiceNameRegionRegionNameLoadbalancingPoolPoolIdMemberMemberIdAsync(_cloud_loadbalancing_pool.MemberUpdate _body, System.Guid memberId, System.Guid poolId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}/member/{memberId}";
            return this.SendAsync<_cloud_loadbalancing_pool.Member>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/network
        public Task<_cloud_project.Network[]> GetV1CloudProjectServiceNameRegionRegionNameNetworkAsync(string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/network";
            return this.SendAsync<_cloud_project.Network[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/network
        public Task<_cloud.Operation> PostV1CloudProjectServiceNameRegionRegionNameNetworkAsync(_cloud_network.CreateNetwork _body, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/network";
            return this.SendAsync<_cloud.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/network/{networkId}
        public Task DeleteV1CloudProjectServiceNameRegionRegionNameNetworkNetworkIdAsync(string networkId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/network/{networkId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/network/{networkId}
        public Task<_cloud_project.Network> GetV1CloudProjectServiceNameRegionRegionNameNetworkNetworkIdAsync(string networkId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/network/{networkId}";
            return this.SendAsync<_cloud_project.Network>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/network/{networkId}/subnet
        public Task<_cloud_project.Subnet[]> GetV1CloudProjectServiceNameRegionRegionNameNetworkNetworkIdSubnetAsync(string networkId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/network/{networkId}/subnet";
            return this.SendAsync<_cloud_project.Subnet[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/network/{networkId}/subnet
        public Task<_cloud_project.Subnet> PostV1CloudProjectServiceNameRegionRegionNameNetworkNetworkIdSubnetAsync(_cloud_network.CreateSubnet _body, string networkId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/network/{networkId}/subnet";
            return this.SendAsync<_cloud_project.Subnet>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/network/{networkId}/subnet/{subnetId}
        public Task DeleteV1CloudProjectServiceNameRegionRegionNameNetworkNetworkIdSubnetSubnetIdAsync(string networkId, string regionName, string serviceName, string subnetId) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/network/{networkId}/subnet/{subnetId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/network/{networkId}/subnet/{subnetId}
        public Task<_cloud_project.Subnet> GetV1CloudProjectServiceNameRegionRegionNameNetworkNetworkIdSubnetSubnetIdAsync(string networkId, string regionName, string serviceName, string subnetId) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/network/{networkId}/subnet/{subnetId}";
            return this.SendAsync<_cloud_project.Subnet>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/network/{networkId}/subnet/{subnetId}/gateway
        public Task<_cloud.Operation> PostV1CloudProjectServiceNameRegionRegionNameNetworkNetworkIdSubnetSubnetIdGatewayAsync(_cloud_network.CreateGatewaySummary _body, string networkId, string regionName, string serviceName, string subnetId) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/network/{networkId}/subnet/{subnetId}/gateway";
            return this.SendAsync<_cloud.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/quota
        public Task<_cloud_quota.Quotas> GetV1CloudProjectServiceNameRegionRegionNameQuotaAsync(string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/quota";
            return this.SendAsync<_cloud_quota.Quotas>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/quota
        public Task<_cloud.Operation> PostV1CloudProjectServiceNameRegionRegionNameQuotaAsync(_cloud.ProjectRegionQuotaCreation _body, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/quota";
            return this.SendAsync<_cloud.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/quota/allowed
        public Task<_cloud_quota.AllowedQuota[]> GetV1CloudProjectServiceNameRegionRegionNameQuotaAllowedAsync(string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/quota/allowed";
            return this.SendAsync<_cloud_quota.AllowedQuota[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/quota/storage
        public Task DeleteV1CloudProjectServiceNameRegionRegionNameQuotaStorageAsync(string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/quota/storage";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/quota/storage
        public Task<_cloud_quota_storage.Quota> GetV1CloudProjectServiceNameRegionRegionNameQuotaStorageAsync(string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/quota/storage";
            return this.SendAsync<_cloud_quota_storage.Quota>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/quota/storage
        public Task PutV1CloudProjectServiceNameRegionRegionNameQuotaStorageAsync(_cloud_quota_storage.QuotaUpdate _body, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/quota/storage";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/storage
        public Task<_cloud.StorageContainer[]> GetV1CloudProjectServiceNameRegionRegionNameStorageAsync(string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/storage";
            return this.SendAsync<_cloud.StorageContainer[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/storage
        public Task<_cloud.StorageContainer> PostV1CloudProjectServiceNameRegionRegionNameStorageAsync(_cloud.StorageContainerCreation _body, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/storage";
            return this.SendAsync<_cloud.StorageContainer>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/storage/{name}
        public Task DeleteV1CloudProjectServiceNameRegionRegionNameStorageNameAsync(string name, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/storage/{name}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/storage/{name}
        public Task<_cloud.StorageContainer> GetV1CloudProjectServiceNameRegionRegionNameStorageNameAsync(string name, string regionName, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? limit, [System.Runtime.InteropServices.OptionalAttribute()] System.String? marker, [System.Runtime.InteropServices.OptionalAttribute()] System.String? prefix) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("limit", limit);
            queryParametersTemp.Add("marker", marker);
            queryParametersTemp.Add("prefix", prefix);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/storage/{name}{queryParameters}";
            return this.SendAsync<_cloud.StorageContainer>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/storage/{name}
        public Task<_cloud.StorageContainer> PutV1CloudProjectServiceNameRegionRegionNameStorageNameAsync(_cloud.StorageContainer _body, string name, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/storage/{name}";
            return this.SendAsync<_cloud.StorageContainer>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/storage/{name}/object
        public Task<_cloud.StorageObject[]> GetV1CloudProjectServiceNameRegionRegionNameStorageNameObjectAsync(string name, string regionName, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? keyMarker, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? limit, [System.Runtime.InteropServices.OptionalAttribute()] System.String? prefix, [System.Runtime.InteropServices.OptionalAttribute()] System.String? versionIdMarker, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? withVersions) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("keyMarker", keyMarker);
            queryParametersTemp.Add("limit", limit);
            queryParametersTemp.Add("prefix", prefix);
            queryParametersTemp.Add("versionIdMarker", versionIdMarker);
            queryParametersTemp.Add("withVersions", withVersions);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/storage/{name}/object{queryParameters}";
            return this.SendAsync<_cloud.StorageObject[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/storage/{name}/object/{key}
        public Task DeleteV1CloudProjectServiceNameRegionRegionNameStorageNameObjectKeyAsync(string key, string name, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/storage/{name}/object/{key}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/storage/{name}/object/{key}
        public Task<_cloud.StorageObject> GetV1CloudProjectServiceNameRegionRegionNameStorageNameObjectKeyAsync(string key, string name, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/storage/{name}/object/{key}";
            return this.SendAsync<_cloud.StorageObject>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/storage/{name}/object/{key}/version
        public Task<_cloud.StorageObjectVersion[]> GetV1CloudProjectServiceNameRegionRegionNameStorageNameObjectKeyVersionAsync(string key, string name, string regionName, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? limit, [System.Runtime.InteropServices.OptionalAttribute()] System.String? versionIdMarker) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("limit", limit);
            queryParametersTemp.Add("versionIdMarker", versionIdMarker);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/storage/{name}/object/{key}/version{queryParameters}";
            return this.SendAsync<_cloud.StorageObjectVersion[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/storage/{name}/object/{key}/version/{versionId}
        public Task DeleteV1CloudProjectServiceNameRegionRegionNameStorageNameObjectKeyVersionVersionIdAsync(string key, string name, string regionName, string serviceName, string versionId) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/storage/{name}/object/{key}/version/{versionId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/storage/{name}/object/{key}/version/{versionId}
        public Task<_cloud.StorageObjectVersion> GetV1CloudProjectServiceNameRegionRegionNameStorageNameObjectKeyVersionVersionIdAsync(string key, string name, string regionName, string serviceName, string versionId) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/storage/{name}/object/{key}/version/{versionId}";
            return this.SendAsync<_cloud.StorageObjectVersion>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/storage/{name}/policy/{userId}
        public Task PostV1CloudProjectServiceNameRegionRegionNameStorageNamePolicyUserIdAsync(_cloud_storage.AddContainerPolicy _body, string name, string regionName, string serviceName, string userId) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/storage/{name}/policy/{userId}";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/storage/{name}/presign
        public Task<_cloud_storage.PresignedURL> PostV1CloudProjectServiceNameRegionRegionNameStorageNamePresignAsync(_cloud_storage.PresignedURLInput _body, string name, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/storage/{name}/presign";
            return this.SendAsync<_cloud_storage.PresignedURL>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/volume
        public Task<_cloud_region.Volume[]> GetV1CloudProjectServiceNameRegionRegionNameVolumeAsync(string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/volume";
            return this.SendAsync<_cloud_region.Volume[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/volume
        public Task<_cloud_region_Volume_Create.Response> PostV1CloudProjectServiceNameRegionRegionNameVolumeAsync(_cloud_region_Volume.Create _body, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/volume";
            return this.SendAsync<_cloud_region_Volume_Create.Response>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/volume/{volumeId}
        public Task<_cloud_region.Volume> GetV1CloudProjectServiceNameRegionRegionNameVolumeVolumeIdAsync(string regionName, string serviceName, System.Guid volumeId) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/volume/{volumeId}";
            return this.SendAsync<_cloud_region.Volume>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/volumeBackup
        public Task<_cloud_volumeBackup.VolumeBackup[]> GetV1CloudProjectServiceNameRegionRegionNameVolumeBackupAsync(string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/volumeBackup";
            return this.SendAsync<_cloud_volumeBackup.VolumeBackup[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/volumeBackup
        public Task<_cloud_volumeBackup.VolumeBackup> PostV1CloudProjectServiceNameRegionRegionNameVolumeBackupAsync(_cloud_volumeBackup.VolumeBackupCreation _body, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/volumeBackup";
            return this.SendAsync<_cloud_volumeBackup.VolumeBackup>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/volumeBackup/{volumeBackupId}
        public Task DeleteV1CloudProjectServiceNameRegionRegionNameVolumeBackupVolumeBackupIdAsync(string regionName, string serviceName, System.Guid volumeBackupId) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/volumeBackup/{volumeBackupId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/volumeBackup/{volumeBackupId}
        public Task<_cloud_volumeBackup.VolumeBackup> GetV1CloudProjectServiceNameRegionRegionNameVolumeBackupVolumeBackupIdAsync(string regionName, string serviceName, System.Guid volumeBackupId) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/volumeBackup/{volumeBackupId}";
            return this.SendAsync<_cloud_volumeBackup.VolumeBackup>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/volumeBackup/{volumeBackupId}/restore
        public Task<_cloud_volumeBackup.VolumeBackup> PostV1CloudProjectServiceNameRegionRegionNameVolumeBackupVolumeBackupIdRestoreAsync(_cloud_volumeBackup.VolumeBackupRestore _body, string regionName, string serviceName, System.Guid volumeBackupId) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/volumeBackup/{volumeBackupId}/restore";
            return this.SendAsync<_cloud_volumeBackup.VolumeBackup>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/volumeBackup/{volumeBackupId}/volume
        public Task<_cloud_volume.Volume> PostV1CloudProjectServiceNameRegionRegionNameVolumeBackupVolumeBackupIdVolumeAsync(_cloud_volumeBackup.VolumeCreationFromBackup _body, string regionName, string serviceName, System.Guid volumeBackupId) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/volumeBackup/{volumeBackupId}/volume";
            return this.SendAsync<_cloud_volume.Volume>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/workflow/backup
        public Task<_cloud.Backup[]> GetV1CloudProjectServiceNameRegionRegionNameWorkflowBackupAsync(string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/workflow/backup";
            return this.SendAsync<_cloud.Backup[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/workflow/backup
        public Task<_cloud.Backup> PostV1CloudProjectServiceNameRegionRegionNameWorkflowBackupAsync(_cloud.ProjectRegionWorkflowBackupCreation _body, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/workflow/backup";
            return this.SendAsync<_cloud.Backup>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/workflow/backup/{backupWorkflowId}
        public Task DeleteV1CloudProjectServiceNameRegionRegionNameWorkflowBackupBackupWorkflowIdAsync(string backupWorkflowId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/workflow/backup/{backupWorkflowId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/region/{regionName}/workflow/backup/{backupWorkflowId}
        public Task<_cloud.Backup> GetV1CloudProjectServiceNameRegionRegionNameWorkflowBackupBackupWorkflowIdAsync(string backupWorkflowId, string regionName, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/region/{regionName}/workflow/backup/{backupWorkflowId}";
            return this.SendAsync<_cloud.Backup>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/regionAvailable
        public Task<_cloud.AvailableRegion[]> GetV1CloudProjectServiceNameRegionAvailableAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/regionAvailable";
            return this.SendAsync<_cloud.AvailableRegion[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/retain
        public Task PostV1CloudProjectServiceNameRetainAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/retain";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/role
        public Task<_cloud_role.Roles> GetV1CloudProjectServiceNameRoleAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/role";
            return this.SendAsync<_cloud_role.Roles>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1CloudProjectServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/serviceInfos
        public Task PutV1CloudProjectServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/snapshot
        public Task<_cloud_image.Image[]> GetV1CloudProjectServiceNameSnapshotAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? flavorType, [System.Runtime.InteropServices.OptionalAttribute()] System.String? region) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("flavorType", flavorType);
            queryParametersTemp.Add("region", region);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/snapshot{queryParameters}";
            return this.SendAsync<_cloud_image.Image[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/snapshot/{imageId}
        public Task<_cloud_image.Image> DeleteV1CloudProjectServiceNameSnapshotImageIdAsync(string imageId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/snapshot/{imageId}";
            return this.SendAsync<_cloud_image.Image>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/snapshot/{imageId}
        public Task<_cloud_image.Image> GetV1CloudProjectServiceNameSnapshotImageIdAsync(string imageId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/snapshot/{imageId}";
            return this.SendAsync<_cloud_image.Image>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/sshkey
        public Task<_cloud_sshkey.SshKey[]> GetV1CloudProjectServiceNameSshkeyAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? region) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("region", region);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/sshkey{queryParameters}";
            return this.SendAsync<_cloud_sshkey.SshKey[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/sshkey
        public Task<_cloud_sshkey.SshKeyDetail> PostV1CloudProjectServiceNameSshkeyAsync(_cloud.ProjectSshkeyCreation _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/sshkey";
            return this.SendAsync<_cloud_sshkey.SshKeyDetail>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/sshkey/{keyId}
        public Task DeleteV1CloudProjectServiceNameSshkeyKeyIdAsync(string keyId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/sshkey/{keyId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/sshkey/{keyId}
        public Task<_cloud_sshkey.SshKeyDetail> GetV1CloudProjectServiceNameSshkeyKeyIdAsync(string keyId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/sshkey/{keyId}";
            return this.SendAsync<_cloud_sshkey.SshKeyDetail>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/stack
        public Task<_cloud_stack.Stack[]> GetV1CloudProjectServiceNameStackAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/stack";
            return this.SendAsync<_cloud_stack.Stack[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/stack/{stackId}
        public Task<_cloud_stack.Stack> GetV1CloudProjectServiceNameStackStackIdAsync(string serviceName, string stackId) {
            string uri = $"/v1/cloud/project/{serviceName}/stack/{stackId}";
            return this.SendAsync<_cloud_stack.Stack>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/storage
        public Task<_cloud_storage.Container[]> GetV1CloudProjectServiceNameStorageAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? includeType) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("includeType", includeType);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/storage{queryParameters}";
            return this.SendAsync<_cloud_storage.Container[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/storage
        public Task<_cloud_storage.Container> PostV1CloudProjectServiceNameStorageAsync(_cloud.ProjectStorageCreation _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/storage";
            return this.SendAsync<_cloud_storage.Container>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/storage/access
        public Task<_cloud_storage.ContainerAccess> PostV1CloudProjectServiceNameStorageAccessAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/storage/access";
            return this.SendAsync<_cloud_storage.ContainerAccess>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/storage/quota
        public Task<_cloud_storage.Quota> GetV1CloudProjectServiceNameStorageQuotaAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/storage/quota";
            return this.SendAsync<_cloud_storage.Quota>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/storage/{containerId}
        public Task DeleteV1CloudProjectServiceNameStorageContainerIdAsync(string containerId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? recursive) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("recursive", recursive);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/storage/{containerId}{queryParameters}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/storage/{containerId}
        public Task<_cloud_storage.ContainerDetail> GetV1CloudProjectServiceNameStorageContainerIdAsync(string containerId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? noObjects, [System.Runtime.InteropServices.OptionalAttribute()] System.String? prefix) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("noObjects", noObjects);
            queryParametersTemp.Add("prefix", prefix);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/storage/{containerId}{queryParameters}";
            return this.SendAsync<_cloud_storage.ContainerDetail>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/storage/{containerId}
        public Task PutV1CloudProjectServiceNameStorageContainerIdAsync(_cloud.ProjectStorageUpdate _body, string containerId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/storage/{containerId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/storage/{containerId}/cors
        public Task DeleteV1CloudProjectServiceNameStorageContainerIdCorsAsync(string containerId, string origin, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("origin", origin);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/storage/{containerId}/cors{queryParameters}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/storage/{containerId}/cors
        public Task PostV1CloudProjectServiceNameStorageContainerIdCorsAsync(_cloud.ProjectStorageCorsCreation _body, string containerId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/storage/{containerId}/cors";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/storage/{containerId}/publicUrl
        public Task<_cloud_storage.ContainerObjectTempURL> PostV1CloudProjectServiceNameStorageContainerIdPublicUrlAsync(_cloud.ProjectStoragePublicUrlCreation _body, string containerId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/storage/{containerId}/publicUrl";
            return this.SendAsync<_cloud_storage.ContainerObjectTempURL>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/storage/{containerId}/static
        public Task PostV1CloudProjectServiceNameStorageContainerIdStaticAsync(string containerId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/storage/{containerId}/static";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/storage/{containerId}/user
        public Task<_cloud_user.UserDetail> PostV1CloudProjectServiceNameStorageContainerIdUserAsync(_cloud.ProjectStorageUserCreation _body, string containerId, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/storage/{containerId}/user";
            return this.SendAsync<_cloud_user.UserDetail>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/terminate
        public Task<System.String> PostV1CloudProjectServiceNameTerminateAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/unleash
        public Task PostV1CloudProjectServiceNameUnleashAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/unleash";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/usage/current
        public Task<_cloud_usage.UsageCurrent> GetV1CloudProjectServiceNameUsageCurrentAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/usage/current";
            return this.SendAsync<_cloud_usage.UsageCurrent>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/usage/forecast
        public Task<_cloud_usage.UsageForecast> GetV1CloudProjectServiceNameUsageForecastAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/usage/forecast";
            return this.SendAsync<_cloud_usage.UsageForecast>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/usage/history
        public Task<_cloud_usage.UsageHistory[]> GetV1CloudProjectServiceNameUsageHistoryAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? from, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? to) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("from", from);
            queryParametersTemp.Add("to", to);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/usage/history{queryParameters}";
            return this.SendAsync<_cloud_usage.UsageHistory[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/usage/history/{usageId}
        public Task<_cloud_usage.UsageHistoryDetail> GetV1CloudProjectServiceNameUsageHistoryUsageIdAsync(string serviceName, string usageId) {
            string uri = $"/v1/cloud/project/{serviceName}/usage/history/{usageId}";
            return this.SendAsync<_cloud_usage.UsageHistoryDetail>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/user
        public Task<_cloud_user.User[]> GetV1CloudProjectServiceNameUserAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/user";
            return this.SendAsync<_cloud_user.User[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/user
        public Task<_cloud_user.UserDetail> PostV1CloudProjectServiceNameUserAsync(_cloud.ProjectUserCreation _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/user";
            return this.SendAsync<_cloud_user.UserDetail>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/user/{userId}
        public Task DeleteV1CloudProjectServiceNameUserUserIdAsync(string serviceName, long userId) {
            string uri = $"/v1/cloud/project/{serviceName}/user/{userId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/user/{userId}
        public Task<_cloud_user.User> GetV1CloudProjectServiceNameUserUserIdAsync(string serviceName, long userId) {
            string uri = $"/v1/cloud/project/{serviceName}/user/{userId}";
            return this.SendAsync<_cloud_user.User>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/user/{userId}/configuration
        public Task<_cloud_user.Configuration> GetV1CloudProjectServiceNameUserUserIdConfigurationAsync(string serviceName, long userId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? region) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("region", region);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/user/{userId}/configuration{queryParameters}";
            return this.SendAsync<_cloud_user.Configuration>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/user/{userId}/openrc
        public Task<_cloud_user.Openrc> GetV1CloudProjectServiceNameUserUserIdOpenrcAsync(string region, string serviceName, long userId, [System.Runtime.InteropServices.OptionalAttribute()] _cloud_user.OpenrcVersionEnum? version) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("region", region);
            queryParametersTemp.Add("version", version);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/user/{userId}/openrc{queryParameters}";
            return this.SendAsync<_cloud_user.Openrc>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/user/{userId}/policy
        public Task<_cloud_storage.PolicyRaw> GetV1CloudProjectServiceNameUserUserIdPolicyAsync(string serviceName, long userId) {
            string uri = $"/v1/cloud/project/{serviceName}/user/{userId}/policy";
            return this.SendAsync<_cloud_storage.PolicyRaw>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/user/{userId}/policy
        public Task PostV1CloudProjectServiceNameUserUserIdPolicyAsync(_cloud_storage.PolicyRaw _body, string serviceName, long userId) {
            string uri = $"/v1/cloud/project/{serviceName}/user/{userId}/policy";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/user/{userId}/rclone
        public Task<_cloud_user.Rclone> GetV1CloudProjectServiceNameUserUserIdRcloneAsync(string region, string serviceName, long userId, [System.Runtime.InteropServices.OptionalAttribute()] _cloud_user.RCloneServiceEnum? service) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("region", region);
            queryParametersTemp.Add("service", service);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/user/{userId}/rclone{queryParameters}";
            return this.SendAsync<_cloud_user.Rclone>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/user/{userId}/regeneratePassword
        public Task<_cloud_user.UserDetail> PostV1CloudProjectServiceNameUserUserIdRegeneratePasswordAsync(string serviceName, long userId) {
            string uri = $"/v1/cloud/project/{serviceName}/user/{userId}/regeneratePassword";
            return this.SendAsync<_cloud_user.UserDetail>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/user/{userId}/role
        public Task<_cloud_role.Role[]> GetV1CloudProjectServiceNameUserUserIdRoleAsync(string serviceName, long userId) {
            string uri = $"/v1/cloud/project/{serviceName}/user/{userId}/role";
            return this.SendAsync<_cloud_role.Role[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/user/{userId}/role
        public Task<_cloud_user.UserDetail> PostV1CloudProjectServiceNameUserUserIdRoleAsync(_cloud.ProjectUserRoleCreation _body, string serviceName, long userId) {
            string uri = $"/v1/cloud/project/{serviceName}/user/{userId}/role";
            return this.SendAsync<_cloud_user.UserDetail>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/user/{userId}/role
        public Task<_cloud_user.UserDetail> PutV1CloudProjectServiceNameUserUserIdRoleAsync(_cloud.ProjectUserRoleUpdate _body, string serviceName, long userId) {
            string uri = $"/v1/cloud/project/{serviceName}/user/{userId}/role";
            return this.SendAsync<_cloud_user.UserDetail>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/user/{userId}/role/{roleId}
        public Task DeleteV1CloudProjectServiceNameUserUserIdRoleRoleIdAsync(string roleId, string serviceName, long userId) {
            string uri = $"/v1/cloud/project/{serviceName}/user/{userId}/role/{roleId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/user/{userId}/role/{roleId}
        public Task<_cloud_role.Role> GetV1CloudProjectServiceNameUserUserIdRoleRoleIdAsync(string roleId, string serviceName, long userId) {
            string uri = $"/v1/cloud/project/{serviceName}/user/{userId}/role/{roleId}";
            return this.SendAsync<_cloud_role.Role>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/user/{userId}/s3Credentials
        public Task<_cloud_user.S3Credentials[]> GetV1CloudProjectServiceNameUserUserIdS3CredentialsAsync(string serviceName, long userId) {
            string uri = $"/v1/cloud/project/{serviceName}/user/{userId}/s3Credentials";
            return this.SendAsync<_cloud_user.S3Credentials[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/user/{userId}/s3Credentials
        public Task<_cloud_user.S3CredentialsWithSecret> PostV1CloudProjectServiceNameUserUserIdS3CredentialsAsync(string serviceName, long userId) {
            string uri = $"/v1/cloud/project/{serviceName}/user/{userId}/s3Credentials";
            return this.SendAsync<_cloud_user.S3CredentialsWithSecret>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/user/{userId}/s3Credentials/{access}
        public Task DeleteV1CloudProjectServiceNameUserUserIdS3CredentialsAccessAsync(string access, string serviceName, long userId) {
            string uri = $"/v1/cloud/project/{serviceName}/user/{userId}/s3Credentials/{access}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/user/{userId}/s3Credentials/{access}
        public Task<_cloud_user.S3Credentials> GetV1CloudProjectServiceNameUserUserIdS3CredentialsAccessAsync(string access, string serviceName, long userId) {
            string uri = $"/v1/cloud/project/{serviceName}/user/{userId}/s3Credentials/{access}";
            return this.SendAsync<_cloud_user.S3Credentials>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/user/{userId}/s3Credentials/{access}/secret
        public Task<_cloud_user.S3CredentialsSecretOnly> PostV1CloudProjectServiceNameUserUserIdS3CredentialsAccessSecretAsync(string access, string serviceName, long userId) {
            string uri = $"/v1/cloud/project/{serviceName}/user/{userId}/s3Credentials/{access}/secret";
            return this.SendAsync<_cloud_user.S3CredentialsSecretOnly>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/user/{userId}/token
        public Task<_cloud_authentication.Token> PostV1CloudProjectServiceNameUserUserIdTokenAsync(_cloud.ProjectUserTokenCreation _body, string serviceName, long userId) {
            string uri = $"/v1/cloud/project/{serviceName}/user/{userId}/token";
            return this.SendAsync<_cloud_authentication.Token>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/volume
        public Task<_cloud_volume.Volume[]> GetV1CloudProjectServiceNameVolumeAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? region) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("region", region);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/volume{queryParameters}";
            return this.SendAsync<_cloud_volume.Volume[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/volume
        public Task<_cloud_volume.Volume> PostV1CloudProjectServiceNameVolumeAsync(_cloud.ProjectVolumeCreation _body, string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/volume";
            return this.SendAsync<_cloud_volume.Volume>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/volume/snapshot
        public Task<_cloud_volume.Snapshot[]> GetV1CloudProjectServiceNameVolumeSnapshotAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? region) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("region", region);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cloud/project/{serviceName}/volume/snapshot{queryParameters}";
            return this.SendAsync<_cloud_volume.Snapshot[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/volume/snapshot/{snapshotId}
        public Task DeleteV1CloudProjectServiceNameVolumeSnapshotSnapshotIdAsync(string serviceName, string snapshotId) {
            string uri = $"/v1/cloud/project/{serviceName}/volume/snapshot/{snapshotId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/volume/snapshot/{snapshotId}
        public Task<_cloud_volume.Snapshot> GetV1CloudProjectServiceNameVolumeSnapshotSnapshotIdAsync(string serviceName, string snapshotId) {
            string uri = $"/v1/cloud/project/{serviceName}/volume/snapshot/{snapshotId}";
            return this.SendAsync<_cloud_volume.Snapshot>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/volume/{volumeId}
        public Task DeleteV1CloudProjectServiceNameVolumeVolumeIdAsync(string serviceName, string volumeId) {
            string uri = $"/v1/cloud/project/{serviceName}/volume/{volumeId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/volume/{volumeId}
        public Task<_cloud_volume.Volume> GetV1CloudProjectServiceNameVolumeVolumeIdAsync(string serviceName, string volumeId) {
            string uri = $"/v1/cloud/project/{serviceName}/volume/{volumeId}";
            return this.SendAsync<_cloud_volume.Volume>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/volume/{volumeId}
        public Task<_cloud_volume.Volume> PutV1CloudProjectServiceNameVolumeVolumeIdAsync(_cloud.ProjectVolumeUpdate _body, string serviceName, string volumeId) {
            string uri = $"/v1/cloud/project/{serviceName}/volume/{volumeId}";
            return this.SendAsync<_cloud_volume.Volume>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/volume/{volumeId}/attach
        public Task<_cloud_volume.Volume> PostV1CloudProjectServiceNameVolumeVolumeIdAttachAsync(_cloud.ProjectVolumeAttachCreation _body, string serviceName, string volumeId) {
            string uri = $"/v1/cloud/project/{serviceName}/volume/{volumeId}/attach";
            return this.SendAsync<_cloud_volume.Volume>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/volume/{volumeId}/detach
        public Task<_cloud_volume.Volume> PostV1CloudProjectServiceNameVolumeVolumeIdDetachAsync(_cloud.ProjectVolumeDetachCreation _body, string serviceName, string volumeId) {
            string uri = $"/v1/cloud/project/{serviceName}/volume/{volumeId}/detach";
            return this.SendAsync<_cloud_volume.Volume>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/volume/{volumeId}/snapshot
        public Task<_cloud_volume.Snapshot> PostV1CloudProjectServiceNameVolumeVolumeIdSnapshotAsync(_cloud.ProjectVolumeSnapshotCreation _body, string serviceName, string volumeId) {
            string uri = $"/v1/cloud/project/{serviceName}/volume/{volumeId}/snapshot";
            return this.SendAsync<_cloud_volume.Snapshot>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/volume/{volumeId}/upsize
        public Task<_cloud_volume.Volume> PostV1CloudProjectServiceNameVolumeVolumeIdUpsizeAsync(_cloud.ProjectVolumeUpsizeCreation _body, string serviceName, string volumeId) {
            string uri = $"/v1/cloud/project/{serviceName}/volume/{volumeId}/upsize";
            return this.SendAsync<_cloud_volume.Volume>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/vrack
        public Task<_cloud.Vrack> GetV1CloudProjectServiceNameVrackAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/vrack";
            return this.SendAsync<_cloud.Vrack>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cloud/project/{serviceName}/vrack
        public Task<_cloud.Operation> PostV1CloudProjectServiceNameVrackAsync(string serviceName) {
            string uri = $"/v1/cloud/project/{serviceName}/vrack";
            return this.SendAsync<_cloud.Operation>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop
        public Task<System.String[]> GetV1ClusterHadoopAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cluster/hadoop{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/orderInformations
        public Task<_cluster_hadoop.OrderInformations> GetV1ClusterHadoopOrderInformationsAsync() {
            string uri = $"/v1/cluster/hadoop/orderInformations";
            return this.SendAsync<_cluster_hadoop.OrderInformations>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/orderableNodeProfiles
        public Task<_cluster_hadoop.NodeBillingProfile[]> GetV1ClusterHadoopOrderableNodeProfilesAsync() {
            string uri = $"/v1/cluster/hadoop/orderableNodeProfiles";
            return this.SendAsync<_cluster_hadoop.NodeBillingProfile[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}
        public Task<_cluster_hadoop.hadoopWithIAM> GetV1ClusterHadoopServiceNameAsync(string serviceName) {
            string uri = $"/v1/cluster/hadoop/{serviceName}";
            return this.SendAsync<_cluster_hadoop.hadoopWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/consumptions
        public Task<_cluster_hadoop.ClusterConsumption> GetV1ClusterHadoopServiceNameConsumptionsAsync(string serviceName) {
            string uri = $"/v1/cluster/hadoop/{serviceName}/consumptions";
            return this.SendAsync<_cluster_hadoop.ClusterConsumption>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/networkAcl
        public Task<System.String[]> GetV1ClusterHadoopServiceNameNetworkAclAsync(string serviceName) {
            string uri = $"/v1/cluster/hadoop/{serviceName}/networkAcl";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/networkAcl
        public Task<_cluster_hadoop.Task> PostV1ClusterHadoopServiceNameNetworkAclAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? block, [System.Runtime.InteropServices.OptionalAttribute()] System.String? description) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("block", block);
            _body.Add("description", description);
            string uri = $"/v1/cluster/hadoop/{serviceName}/networkAcl";
            return this.SendAsync<_cluster_hadoop.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/networkAcl/{block}
        public Task<_cluster_hadoop.Task> DeleteV1ClusterHadoopServiceNameNetworkAclBlockAsync(string block, string serviceName) {
            string uri = $"/v1/cluster/hadoop/{serviceName}/networkAcl/{block}";
            return this.SendAsync<_cluster_hadoop.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/networkAcl/{block}
        public Task<_cluster_hadoop.NetworkAcl> GetV1ClusterHadoopServiceNameNetworkAclBlockAsync(string block, string serviceName) {
            string uri = $"/v1/cluster/hadoop/{serviceName}/networkAcl/{block}";
            return this.SendAsync<_cluster_hadoop.NetworkAcl>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/networkAcl/{block}
        public Task PutV1ClusterHadoopServiceNameNetworkAclBlockAsync(_cluster_hadoop.NetworkAcl _body, string block, string serviceName) {
            string uri = $"/v1/cluster/hadoop/{serviceName}/networkAcl/{block}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/node
        public Task<System.String[]> GetV1ClusterHadoopServiceNameNodeAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _cluster_hadoop.NodeProfileEnum? softwareProfile) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("softwareProfile", softwareProfile);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cluster/hadoop/{serviceName}/node{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/node/{hostname}
        public Task<_cluster_hadoop.Task> DeleteV1ClusterHadoopServiceNameNodeHostnameAsync(string hostname, string serviceName) {
            string uri = $"/v1/cluster/hadoop/{serviceName}/node/{hostname}";
            return this.SendAsync<_cluster_hadoop.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/node/{hostname}
        public Task<_cluster_hadoop.Node> GetV1ClusterHadoopServiceNameNodeHostnameAsync(string hostname, string serviceName) {
            string uri = $"/v1/cluster/hadoop/{serviceName}/node/{hostname}";
            return this.SendAsync<_cluster_hadoop.Node>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/node/{hostname}/decommission
        public Task<_cluster_hadoop.Task> PostV1ClusterHadoopServiceNameNodeHostnameDecommissionAsync(string hostname, string serviceName) {
            string uri = $"/v1/cluster/hadoop/{serviceName}/node/{hostname}/decommission";
            return this.SendAsync<_cluster_hadoop.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/node/{hostname}/recommission
        public Task<_cluster_hadoop.Task> PostV1ClusterHadoopServiceNameNodeHostnameRecommissionAsync(string hostname, string serviceName) {
            string uri = $"/v1/cluster/hadoop/{serviceName}/node/{hostname}/recommission";
            return this.SendAsync<_cluster_hadoop.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/node/{hostname}/role
        public Task<_cluster_hadoop.RoleTypeEnum[]> GetV1ClusterHadoopServiceNameNodeHostnameRoleAsync(string hostname, string serviceName) {
            string uri = $"/v1/cluster/hadoop/{serviceName}/node/{hostname}/role";
            return this.SendAsync<_cluster_hadoop.RoleTypeEnum[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/node/{hostname}/role
        public Task<_cluster_hadoop.Task> PostV1ClusterHadoopServiceNameNodeHostnameRoleAsync(string hostname, string serviceName, _cluster_hadoop.RoleTypeEnum type) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("type", type);
            string uri = $"/v1/cluster/hadoop/{serviceName}/node/{hostname}/role";
            return this.SendAsync<_cluster_hadoop.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/node/{hostname}/role/{type}
        public Task<_cluster_hadoop.Task> DeleteV1ClusterHadoopServiceNameNodeHostnameRoleTypeAsync(string hostname, string serviceName, _cluster_hadoop.RoleTypeEnum type) {
            string uri = $"/v1/cluster/hadoop/{serviceName}/node/{hostname}/role/{type}";
            return this.SendAsync<_cluster_hadoop.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/node/{hostname}/role/{type}
        public Task<_cluster_hadoop.Role> GetV1ClusterHadoopServiceNameNodeHostnameRoleTypeAsync(string hostname, string serviceName, _cluster_hadoop.RoleTypeEnum type) {
            string uri = $"/v1/cluster/hadoop/{serviceName}/node/{hostname}/role/{type}";
            return this.SendAsync<_cluster_hadoop.Role>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/node/{hostname}/role/{type}/restart
        public Task<_cluster_hadoop.Task> PostV1ClusterHadoopServiceNameNodeHostnameRoleTypeRestartAsync(string hostname, string serviceName, _cluster_hadoop.RoleTypeEnum type) {
            string uri = $"/v1/cluster/hadoop/{serviceName}/node/{hostname}/role/{type}/restart";
            return this.SendAsync<_cluster_hadoop.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/node/{hostname}/role/{type}/start
        public Task<_cluster_hadoop.Task> PostV1ClusterHadoopServiceNameNodeHostnameRoleTypeStartAsync(string hostname, string serviceName, _cluster_hadoop.RoleTypeEnum type) {
            string uri = $"/v1/cluster/hadoop/{serviceName}/node/{hostname}/role/{type}/start";
            return this.SendAsync<_cluster_hadoop.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/node/{hostname}/role/{type}/stop
        public Task<_cluster_hadoop.Task> PostV1ClusterHadoopServiceNameNodeHostnameRoleTypeStopAsync(string hostname, string serviceName, _cluster_hadoop.RoleTypeEnum type) {
            string uri = $"/v1/cluster/hadoop/{serviceName}/node/{hostname}/role/{type}/stop";
            return this.SendAsync<_cluster_hadoop.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/nodeBillingProfiles
        public Task<_cluster_hadoop.NodeBillingProfile[]> GetV1ClusterHadoopServiceNameNodeBillingProfilesAsync(string serviceName) {
            string uri = $"/v1/cluster/hadoop/{serviceName}/nodeBillingProfiles";
            return this.SendAsync<_cluster_hadoop.NodeBillingProfile[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/nodeConsumptions
        public Task<_cluster_hadoop.NodeConsumption[]> GetV1ClusterHadoopServiceNameNodeConsumptionsAsync(string serviceName) {
            string uri = $"/v1/cluster/hadoop/{serviceName}/nodeConsumptions";
            return this.SendAsync<_cluster_hadoop.NodeConsumption[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/orderNewNodeHourly
        public Task<_cluster_hadoop.Task> PostV1ClusterHadoopServiceNameOrderNewNodeHourlyAsync(string nodeProfile, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("nodeProfile", nodeProfile);
            string uri = $"/v1/cluster/hadoop/{serviceName}/orderNewNodeHourly";
            return this.SendAsync<_cluster_hadoop.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/orderableNodeProfiles
        public Task<System.String[]> GetV1ClusterHadoopServiceNameOrderableNodeProfilesAsync(string serviceName) {
            string uri = $"/v1/cluster/hadoop/{serviceName}/orderableNodeProfiles";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/restart
        public Task<_cluster_hadoop.Task> PostV1ClusterHadoopServiceNameRestartAsync(string serviceName) {
            string uri = $"/v1/cluster/hadoop/{serviceName}/restart";
            return this.SendAsync<_cluster_hadoop.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/service/restart
        public Task<_cluster_hadoop.Task> PostV1ClusterHadoopServiceNameServiceRestartAsync(_cluster_hadoop.ClusterServiceNameEnum service, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("service", service);
            string uri = $"/v1/cluster/hadoop/{serviceName}/service/restart";
            return this.SendAsync<_cluster_hadoop.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/service/start
        public Task<_cluster_hadoop.Task> PostV1ClusterHadoopServiceNameServiceStartAsync(_cluster_hadoop.ClusterServiceNameEnum service, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("service", service);
            string uri = $"/v1/cluster/hadoop/{serviceName}/service/start";
            return this.SendAsync<_cluster_hadoop.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/service/stop
        public Task<_cluster_hadoop.Task> PostV1ClusterHadoopServiceNameServiceStopAsync(_cluster_hadoop.ClusterServiceNameEnum service, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("service", service);
            string uri = $"/v1/cluster/hadoop/{serviceName}/service/stop";
            return this.SendAsync<_cluster_hadoop.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1ClusterHadoopServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/cluster/hadoop/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/serviceInfos
        public Task PutV1ClusterHadoopServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/cluster/hadoop/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/start
        public Task<_cluster_hadoop.Task> PostV1ClusterHadoopServiceNameStartAsync(string serviceName) {
            string uri = $"/v1/cluster/hadoop/{serviceName}/start";
            return this.SendAsync<_cluster_hadoop.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/stop
        public Task<_cluster_hadoop.Task> PostV1ClusterHadoopServiceNameStopAsync(string serviceName) {
            string uri = $"/v1/cluster/hadoop/{serviceName}/stop";
            return this.SendAsync<_cluster_hadoop.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/task
        public Task<System.Int64[]> GetV1ClusterHadoopServiceNameTaskAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _cluster_hadoop.OperationStateEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/cluster/hadoop/{serviceName}/task{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/task/{taskId}
        public Task<_cluster_hadoop.Task> GetV1ClusterHadoopServiceNameTaskTaskIdAsync(string serviceName, long taskId) {
            string uri = $"/v1/cluster/hadoop/{serviceName}/task/{taskId}";
            return this.SendAsync<_cluster_hadoop.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/terminate
        public Task<_cluster_hadoop.Task> PostV1ClusterHadoopServiceNameTerminateAsync(string serviceName) {
            string uri = $"/v1/cluster/hadoop/{serviceName}/terminate";
            return this.SendAsync<_cluster_hadoop.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/user
        public Task<System.String[]> GetV1ClusterHadoopServiceNameUserAsync(string serviceName) {
            string uri = $"/v1/cluster/hadoop/{serviceName}/user";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/user
        public Task<_cluster_hadoop.Task> PostV1ClusterHadoopServiceNameUserAsync(bool clouderaManager, bool httpFrontend, bool hue, string password, string serviceName, string username) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("clouderaManager", clouderaManager);
            _body.Add("httpFrontend", httpFrontend);
            _body.Add("hue", hue);
            _body.Add("password", password);
            _body.Add("username", username);
            string uri = $"/v1/cluster/hadoop/{serviceName}/user";
            return this.SendAsync<_cluster_hadoop.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/user/{username}
        public Task<_cluster_hadoop.Task> DeleteV1ClusterHadoopServiceNameUserUsernameAsync(string serviceName, string username) {
            string uri = $"/v1/cluster/hadoop/{serviceName}/user/{username}";
            return this.SendAsync<_cluster_hadoop.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/user/{username}
        public Task<_cluster_hadoop.User> GetV1ClusterHadoopServiceNameUserUsernameAsync(string serviceName, string username) {
            string uri = $"/v1/cluster/hadoop/{serviceName}/user/{username}";
            return this.SendAsync<_cluster_hadoop.User>("GET", uri, null, null, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/user/{username}
        public Task PutV1ClusterHadoopServiceNameUserUsernameAsync(_cluster_hadoop.User _body, string serviceName, string username) {
            string uri = $"/v1/cluster/hadoop/{serviceName}/user/{username}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/cluster/hadoop/{serviceName}/user/{username}/resetPassword
        public Task<_cluster_hadoop.Task> PostV1ClusterHadoopServiceNameUserUsernameResetPasswordAsync(string password, string serviceName, string username) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("password", password);
            string uri = $"/v1/cluster/hadoop/{serviceName}/user/{username}/resetPassword";
            return this.SendAsync<_cluster_hadoop.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/connectivity/eligibility/search/buildingDetails
        public Task<_xdsl_AsyncTask_connectivity_eligibility.Building> PostV1ConnectivityEligibilitySearchBuildingDetailsAsync(_connectivity_eligibility_search_buildingDetails.post _body) {
            string uri = $"/v1/connectivity/eligibility/search/buildingDetails";
            return this.SendAsync<_xdsl_AsyncTask_connectivity_eligibility.Building>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/connectivity/eligibility/search/buildings
        public Task<_xdsl_AsyncTaskArray_connectivity_eligibility.Building> PostV1ConnectivityEligibilitySearchBuildingsAsync(_connectivity_eligibility_search_buildings.post _body) {
            string uri = $"/v1/connectivity/eligibility/search/buildings";
            return this.SendAsync<_xdsl_AsyncTaskArray_connectivity_eligibility.Building>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/connectivity/eligibility/search/buildingsByLine
        public Task<_xdsl_AsyncTaskArray_connectivity_eligibility.Building> PostV1ConnectivityEligibilitySearchBuildingsByLineAsync(_connectivity_eligibility_search_buildingsByLine.post _body) {
            string uri = $"/v1/connectivity/eligibility/search/buildingsByLine";
            return this.SendAsync<_xdsl_AsyncTaskArray_connectivity_eligibility.Building>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/connectivity/eligibility/search/cities
        public Task<_xdsl_AsyncTaskArray_connectivity_eligibility.City> PostV1ConnectivityEligibilitySearchCitiesAsync(_connectivity_eligibility_search.Cities _body) {
            string uri = $"/v1/connectivity/eligibility/search/cities";
            return this.SendAsync<_xdsl_AsyncTaskArray_connectivity_eligibility.City>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/connectivity/eligibility/search/lines
        public Task<_xdsl_AsyncTaskArray_connectivity_eligibility.Line> PostV1ConnectivityEligibilitySearchLinesAsync(_connectivity_eligibility_search_lines.post _body) {
            string uri = $"/v1/connectivity/eligibility/search/lines";
            return this.SendAsync<_xdsl_AsyncTaskArray_connectivity_eligibility.Line>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/connectivity/eligibility/search/meetings
        public Task<_xdsl_AsyncTask_connectivity_eligibility.Meetings> PostV1ConnectivityEligibilitySearchMeetingsAsync(_connectivity_eligibility_search_meetings.post _body) {
            string uri = $"/v1/connectivity/eligibility/search/meetings";
            return this.SendAsync<_xdsl_AsyncTask_connectivity_eligibility.Meetings>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/connectivity/eligibility/search/streetNumbers
        public Task<_xdsl.AsyncTaskArray_string> PostV1ConnectivityEligibilitySearchStreetNumbersAsync(_connectivity_eligibility_search_streetNumbers.post _body) {
            string uri = $"/v1/connectivity/eligibility/search/streetNumbers";
            return this.SendAsync<_xdsl.AsyncTaskArray_string>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/connectivity/eligibility/search/streetNumbers/details
        public Task<_xdsl_AsyncTaskArray_connectivity_eligibility.StreetNumberDetails> PostV1ConnectivityEligibilitySearchStreetNumbersDetailsAsync(_connectivity_eligibility_search_streetNumbers_details.post _body) {
            string uri = $"/v1/connectivity/eligibility/search/streetNumbers/details";
            return this.SendAsync<_xdsl_AsyncTaskArray_connectivity_eligibility.StreetNumberDetails>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/connectivity/eligibility/search/streets
        public Task<_xdsl_AsyncTaskArray_connectivity_eligibility.Street> PostV1ConnectivityEligibilitySearchStreetsAsync(_connectivity_eligibility_search_streets.post _body) {
            string uri = $"/v1/connectivity/eligibility/search/streets";
            return this.SendAsync<_xdsl_AsyncTaskArray_connectivity_eligibility.Street>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/connectivity/eligibility/test
        public Task<_connectivity_eligibility.EligibilityTest> GetV1ConnectivityEligibilityTestAsync(string eligibilityReference) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("eligibilityReference", eligibilityReference);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/connectivity/eligibility/test{queryParameters}";
            return this.SendAsync<_connectivity_eligibility.EligibilityTest>("GET", uri, null, null, false);
        }
        
        // Path: /v1/connectivity/eligibility/test/address
        public Task<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest> PostV1ConnectivityEligibilityTestAddressAsync(_connectivity_eligibility_test_address.post _body) {
            string uri = $"/v1/connectivity/eligibility/test/address";
            return this.SendAsync<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/connectivity/eligibility/test/address/partners
        public Task<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest> PostV1ConnectivityEligibilityTestAddressPartnersAsync(_connectivity_eligibility_test_address_partners.post _body) {
            string uri = $"/v1/connectivity/eligibility/test/address/partners";
            return this.SendAsync<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/connectivity/eligibility/test/building
        public Task<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest> PostV1ConnectivityEligibilityTestBuildingAsync(_connectivity_eligibility_test_building.post _body) {
            string uri = $"/v1/connectivity/eligibility/test/building";
            return this.SendAsync<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/connectivity/eligibility/test/line
        public Task<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest> PostV1ConnectivityEligibilityTestLineAsync(_connectivity_eligibility_test_line.post _body) {
            string uri = $"/v1/connectivity/eligibility/test/line";
            return this.SendAsync<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/connectivity/eligibility/test/line/partners
        public Task<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest> PostV1ConnectivityEligibilityTestLinePartnersAsync(_connectivity_eligibility_test_line_partners.post _body) {
            string uri = $"/v1/connectivity/eligibility/test/line/partners";
            return this.SendAsync<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/connectivity/eligibility/test/otp
        public Task<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest> PostV1ConnectivityEligibilityTestOtpAsync(_connectivity_eligibility_test_otp.post _body) {
            string uri = $"/v1/connectivity/eligibility/test/otp";
            return this.SendAsync<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/connectivity/maintenance/workPlanned/partners
        public Task<_connectivity_maintenance.WorkPlanned[]> GetV1ConnectivityMaintenanceWorkPlannedPartnersAsync() {
            string uri = $"/v1/connectivity/maintenance/workPlanned/partners";
            return this.SendAsync<_connectivity_maintenance.WorkPlanned[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/connectivity/maintenance/workPlanned/public
        public Task<_connectivity_maintenance.WorkPlanned[]> GetV1ConnectivityMaintenanceWorkPlannedPublicAsync([System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? beginDate, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? endDate) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("beginDate", beginDate);
            queryParametersTemp.Add("endDate", endDate);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/connectivity/maintenance/workPlanned/public{queryParameters}";
            return this.SendAsync<_connectivity_maintenance.WorkPlanned[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/connectivity/monitoring/genericIncident/partners
        public Task<_connectivity_monitoring.GenericIncident[]> GetV1ConnectivityMonitoringGenericIncidentPartnersAsync([System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDate, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? endDate, [System.Runtime.InteropServices.OptionalAttribute()] _connectivity_monitoring.GenericIncidentStatusEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("creationDate", creationDate);
            queryParametersTemp.Add("endDate", endDate);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/connectivity/monitoring/genericIncident/partners{queryParameters}";
            return this.SendAsync<_connectivity_monitoring.GenericIncident[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/connectivity/monitoring/genericIncident/public
        public Task<_connectivity_monitoring.GenericIncident[]> GetV1ConnectivityMonitoringGenericIncidentPublicAsync([System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDate, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? endDate, [System.Runtime.InteropServices.OptionalAttribute()] _connectivity_monitoring.GenericIncidentStatusEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("creationDate", creationDate);
            queryParametersTemp.Add("endDate", endDate);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/connectivity/monitoring/genericIncident/public{queryParameters}";
            return this.SendAsync<_connectivity_monitoring.GenericIncident[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/contact/form
        public Task<_contact.FormCharacteristic[]> GetV1ContactFormAsync() {
            string uri = $"/v1/contact/form";
            return this.SendAsync<_contact.FormCharacteristic[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/contact/form/send
        public Task PostV1ContactFormSendAsync(_complexType.SafeKeyValue<string> form, string type) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("form", form);
            _body.Add("type", type);
            string uri = $"/v1/contact/form/send";
            return this.SendAsync("POST", uri, null, _body, false);
        }
        
        // Path: /v1/dbaas/logs
        public Task<System.String[]> GetV1DbaasLogsAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dbaas/logs{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}
        public Task<_dbaas_logs.ServiceWithIAM> GetV1DbaasLogsServiceNameAsync(string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}";
            return this.SendAsync<_dbaas_logs.ServiceWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}
        public Task<_dbaas_logs.Operation> PutV1DbaasLogsServiceNameAsync(_dbaas_logs.Update _body, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}";
            return this.SendAsync<_dbaas_logs.Operation>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/changeContact
        public Task<System.Int64[]> PostV1DbaasLogsServiceNameChangeContactAsync(_services.changeContact _body, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/cluster
        public Task<System.Guid[]> GetV1DbaasLogsServiceNameClusterAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? namePattern) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("namePattern", namePattern);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dbaas/logs/{serviceName}/cluster{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/cluster/{clusterId}
        public Task<_dbaas_logs.Cluster> GetV1DbaasLogsServiceNameClusterClusterIdAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/cluster/{clusterId}";
            return this.SendAsync<_dbaas_logs.Cluster>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/cluster/{clusterId}
        public Task<_dbaas_logs.Operation> PutV1DbaasLogsServiceNameClusterClusterIdAsync(_dbaas_logs.ClusterUpdate _body, System.Guid clusterId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/cluster/{clusterId}";
            return this.SendAsync<_dbaas_logs.Operation>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/cluster/{clusterId}/retention
        public Task<System.Guid[]> GetV1DbaasLogsServiceNameClusterClusterIdRetentionAsync(System.Guid clusterId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/cluster/{clusterId}/retention";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/cluster/{clusterId}/retention/{retentionId}
        public Task<_dbaas_logs.ClusterRetention> GetV1DbaasLogsServiceNameClusterClusterIdRetentionRetentionIdAsync(System.Guid clusterId, System.Guid retentionId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/cluster/{clusterId}/retention/{retentionId}";
            return this.SendAsync<_dbaas_logs.ClusterRetention>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/encryptionKey
        public Task<System.Guid[]> GetV1DbaasLogsServiceNameEncryptionKeyAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? titlePattern) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("titlePattern", titlePattern);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dbaas/logs/{serviceName}/encryptionKey{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/encryptionKey
        public Task<_dbaas_logs.Operation> PostV1DbaasLogsServiceNameEncryptionKeyAsync(_dbaas_logs.EncryptionKey _body, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/encryptionKey";
            return this.SendAsync<_dbaas_logs.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/encryptionKey/{encryptionKeyId}
        public Task<_dbaas_logs.Operation> DeleteV1DbaasLogsServiceNameEncryptionKeyEncryptionKeyIdAsync(System.Guid encryptionKeyId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/encryptionKey/{encryptionKeyId}";
            return this.SendAsync<_dbaas_logs.Operation>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/encryptionKey/{encryptionKeyId}
        public Task<_dbaas_logs.EncryptionKey> GetV1DbaasLogsServiceNameEncryptionKeyEncryptionKeyIdAsync(System.Guid encryptionKeyId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/encryptionKey/{encryptionKeyId}";
            return this.SendAsync<_dbaas_logs.EncryptionKey>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/input
        public Task<System.Guid[]> GetV1DbaasLogsServiceNameInputAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? titlePattern) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("titlePattern", titlePattern);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dbaas/logs/{serviceName}/input{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/input
        public Task<_dbaas_logs.Operation> PostV1DbaasLogsServiceNameInputAsync(_dbaas_logs.InputCreation _body, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/input";
            return this.SendAsync<_dbaas_logs.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/input/engine
        public Task<System.Guid[]> GetV1DbaasLogsServiceNameInputEngineAsync(string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/input/engine";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/input/engine/{engineId}
        public Task<_dbaas_logs.Engine> GetV1DbaasLogsServiceNameInputEngineEngineIdAsync(System.Guid engineId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/input/engine/{engineId}";
            return this.SendAsync<_dbaas_logs.Engine>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/input/engine/{engineId}/helper
        public Task<System.Guid[]> GetV1DbaasLogsServiceNameInputEngineEngineIdHelperAsync(System.Guid engineId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/input/engine/{engineId}/helper";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/input/engine/{engineId}/helper/{helperId}
        public Task<_dbaas_logs.Helper> GetV1DbaasLogsServiceNameInputEngineEngineIdHelperHelperIdAsync(System.Guid engineId, System.Guid helperId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/input/engine/{engineId}/helper/{helperId}";
            return this.SendAsync<_dbaas_logs.Helper>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/input/{inputId}
        public Task<_dbaas_logs.Operation> DeleteV1DbaasLogsServiceNameInputInputIdAsync(System.Guid inputId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/input/{inputId}";
            return this.SendAsync<_dbaas_logs.Operation>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/input/{inputId}
        public Task<_dbaas_logs.Input> GetV1DbaasLogsServiceNameInputInputIdAsync(System.Guid inputId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/input/{inputId}";
            return this.SendAsync<_dbaas_logs.Input>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/input/{inputId}
        public Task<_dbaas_logs.Operation> PutV1DbaasLogsServiceNameInputInputIdAsync(_dbaas_logs.InputUpdate _body, System.Guid inputId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/input/{inputId}";
            return this.SendAsync<_dbaas_logs.Operation>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/input/{inputId}/action
        public Task<_dbaas_logs.InputAction[]> GetV1DbaasLogsServiceNameInputInputIdActionAsync(System.Guid inputId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/input/{inputId}/action";
            return this.SendAsync<_dbaas_logs.InputAction[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/input/{inputId}/configtest
        public Task<_dbaas_logs.Operation> PostV1DbaasLogsServiceNameInputInputIdConfigtestAsync(System.Guid inputId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/input/{inputId}/configtest";
            return this.SendAsync<_dbaas_logs.Operation>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/input/{inputId}/configtest/result
        public Task<_dbaas_logs.TestResult> GetV1DbaasLogsServiceNameInputInputIdConfigtestResultAsync(System.Guid inputId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/input/{inputId}/configtest/result";
            return this.SendAsync<_dbaas_logs.TestResult>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/input/{inputId}/configuration/flowgger
        public Task<_dbaas_logs.FlowggerConfiguration> GetV1DbaasLogsServiceNameInputInputIdConfigurationFlowggerAsync(System.Guid inputId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/input/{inputId}/configuration/flowgger";
            return this.SendAsync<_dbaas_logs.FlowggerConfiguration>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/input/{inputId}/configuration/flowgger
        public Task<_dbaas_logs.Operation> PutV1DbaasLogsServiceNameInputInputIdConfigurationFlowggerAsync(_dbaas_logs.InputConfigurationFlowggerUpdate _body, System.Guid inputId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/input/{inputId}/configuration/flowgger";
            return this.SendAsync<_dbaas_logs.Operation>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/input/{inputId}/configuration/logstash
        public Task<_dbaas_logs.LogstashConfiguration> GetV1DbaasLogsServiceNameInputInputIdConfigurationLogstashAsync(System.Guid inputId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/input/{inputId}/configuration/logstash";
            return this.SendAsync<_dbaas_logs.LogstashConfiguration>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/input/{inputId}/configuration/logstash
        public Task<_dbaas_logs.Operation> PutV1DbaasLogsServiceNameInputInputIdConfigurationLogstashAsync(_dbaas_logs.InputConfigurationLogstashUpdate _body, System.Guid inputId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/input/{inputId}/configuration/logstash";
            return this.SendAsync<_dbaas_logs.Operation>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/input/{inputId}/end
        public Task<_dbaas_logs.Operation> PostV1DbaasLogsServiceNameInputInputIdEndAsync(System.Guid inputId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/input/{inputId}/end";
            return this.SendAsync<_dbaas_logs.Operation>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/input/{inputId}/logs/url
        public Task<_dbaas_logs.TemporaryLogsLink> PostV1DbaasLogsServiceNameInputInputIdLogsUrlAsync(System.Guid inputId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/input/{inputId}/logs/url";
            return this.SendAsync<_dbaas_logs.TemporaryLogsLink>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/input/{inputId}/restart
        public Task<_dbaas_logs.Operation> PostV1DbaasLogsServiceNameInputInputIdRestartAsync(System.Guid inputId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/input/{inputId}/restart";
            return this.SendAsync<_dbaas_logs.Operation>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/input/{inputId}/start
        public Task<_dbaas_logs.Operation> PostV1DbaasLogsServiceNameInputInputIdStartAsync(System.Guid inputId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/input/{inputId}/start";
            return this.SendAsync<_dbaas_logs.Operation>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/input/{inputId}/url
        public Task<_dbaas_logs.Url[]> GetV1DbaasLogsServiceNameInputInputIdUrlAsync(System.Guid inputId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/input/{inputId}/url";
            return this.SendAsync<_dbaas_logs.Url[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/metrics
        public Task<_dbaas_logs.ServiceMetric> GetV1DbaasLogsServiceNameMetricsAsync(string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/metrics";
            return this.SendAsync<_dbaas_logs.ServiceMetric>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/operation
        public Task<System.Guid[]> GetV1DbaasLogsServiceNameOperationAsync(string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/operation";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/operation/{operationId}
        public Task<_dbaas_logs.Operation> GetV1DbaasLogsServiceNameOperationOperationIdAsync(System.Guid operationId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/operation/{operationId}";
            return this.SendAsync<_dbaas_logs.Operation>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/graylog/dashboard
        public Task<System.Guid[]> GetV1DbaasLogsServiceNameOutputGraylogDashboardAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? titlePattern) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("titlePattern", titlePattern);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dbaas/logs/{serviceName}/output/graylog/dashboard{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/graylog/dashboard
        public Task<_dbaas_logs.Operation> PostV1DbaasLogsServiceNameOutputGraylogDashboardAsync(_dbaas_logs.OutputGraylogDashboardCreation _body, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/graylog/dashboard";
            return this.SendAsync<_dbaas_logs.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/graylog/dashboard/{dashboardId}
        public Task<_dbaas_logs.Operation> DeleteV1DbaasLogsServiceNameOutputGraylogDashboardDashboardIdAsync(System.Guid dashboardId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/graylog/dashboard/{dashboardId}";
            return this.SendAsync<_dbaas_logs.Operation>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/graylog/dashboard/{dashboardId}
        public Task<_dbaas_logs.Dashboard> GetV1DbaasLogsServiceNameOutputGraylogDashboardDashboardIdAsync(System.Guid dashboardId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/graylog/dashboard/{dashboardId}";
            return this.SendAsync<_dbaas_logs.Dashboard>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/graylog/dashboard/{dashboardId}
        public Task<_dbaas_logs.Operation> PutV1DbaasLogsServiceNameOutputGraylogDashboardDashboardIdAsync(_dbaas_logs.OutputGraylogDashboardUpdate _body, System.Guid dashboardId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/graylog/dashboard/{dashboardId}";
            return this.SendAsync<_dbaas_logs.Operation>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/graylog/dashboard/{dashboardId}/duplicate
        public Task<_dbaas_logs.Operation> PostV1DbaasLogsServiceNameOutputGraylogDashboardDashboardIdDuplicateAsync(_dbaas_logs.OutputGraylogDashboardDuplicateCreation _body, System.Guid dashboardId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/graylog/dashboard/{dashboardId}/duplicate";
            return this.SendAsync<_dbaas_logs.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/graylog/dashboard/{dashboardId}/url
        public Task<_dbaas_logs.Url[]> GetV1DbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrlAsync(System.Guid dashboardId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/graylog/dashboard/{dashboardId}/url";
            return this.SendAsync<_dbaas_logs.Url[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/graylog/stream
        public Task<System.Guid[]> GetV1DbaasLogsServiceNameOutputGraylogStreamAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? titlePattern) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("titlePattern", titlePattern);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dbaas/logs/{serviceName}/output/graylog/stream{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/graylog/stream
        public Task<_dbaas_logs.Operation> PostV1DbaasLogsServiceNameOutputGraylogStreamAsync(_dbaas_logs.OutputGraylogStreamCreation _body, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/graylog/stream";
            return this.SendAsync<_dbaas_logs.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}
        public Task<_dbaas_logs.Operation> DeleteV1DbaasLogsServiceNameOutputGraylogStreamStreamIdAsync(string serviceName, System.Guid streamId) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}";
            return this.SendAsync<_dbaas_logs.Operation>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}
        public Task<_dbaas_logs.Stream> GetV1DbaasLogsServiceNameOutputGraylogStreamStreamIdAsync(string serviceName, System.Guid streamId) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}";
            return this.SendAsync<_dbaas_logs.Stream>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}
        public Task<_dbaas_logs.Operation> PutV1DbaasLogsServiceNameOutputGraylogStreamStreamIdAsync(_dbaas_logs.OutputGraylogStreamUpdate _body, string serviceName, System.Guid streamId) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}";
            return this.SendAsync<_dbaas_logs.Operation>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/alert
        public Task<System.Guid[]> GetV1DbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAsync(string serviceName, System.Guid streamId) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/alert";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/alert
        public Task<_dbaas_logs.Operation> PostV1DbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAsync(_dbaas_logs.OutputGraylogStreamAlertCreation _body, string serviceName, System.Guid streamId) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/alert";
            return this.SendAsync<_dbaas_logs.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/alert/{alertId}
        public Task<_dbaas_logs.Operation> DeleteV1DbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertIdAsync(System.Guid alertId, string serviceName, System.Guid streamId) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/alert/{alertId}";
            return this.SendAsync<_dbaas_logs.Operation>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/alert/{alertId}
        public Task<_dbaas_logs.StreamAlertCondition> GetV1DbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertIdAsync(System.Guid alertId, string serviceName, System.Guid streamId) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/alert/{alertId}";
            return this.SendAsync<_dbaas_logs.StreamAlertCondition>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/alert/{alertId}
        public Task<_dbaas_logs.Operation> PutV1DbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertIdAsync(_dbaas_logs.OutputGraylogStreamAlertUpdate _body, System.Guid alertId, string serviceName, System.Guid streamId) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/alert/{alertId}";
            return this.SendAsync<_dbaas_logs.Operation>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/archive
        public Task<System.Guid[]> GetV1DbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveAsync(string serviceName, System.Guid streamId) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/archive";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/archive/{archiveId}
        public Task<_dbaas_logs.Archive> GetV1DbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdAsync(System.Guid archiveId, string serviceName, System.Guid streamId) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/archive/{archiveId}";
            return this.SendAsync<_dbaas_logs.Archive>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/archive/{archiveId}/encryptionKey
        public Task<System.Guid[]> GetV1DbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKeyAsync(System.Guid archiveId, string serviceName, System.Guid streamId) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/archive/{archiveId}/encryptionKey";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/archive/{archiveId}/url
        public Task<_dbaas_logs.ArchiveUrl> PostV1DbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdUrlAsync(System.Guid archiveId, string serviceName, System.Guid streamId) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/archive/{archiveId}/url";
            return this.SendAsync<_dbaas_logs.ArchiveUrl>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/rule
        public Task<System.Guid[]> GetV1DbaasLogsServiceNameOutputGraylogStreamStreamIdRuleAsync(string serviceName, System.Guid streamId) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/rule";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/rule
        public Task<_dbaas_logs.Operation> PostV1DbaasLogsServiceNameOutputGraylogStreamStreamIdRuleAsync(_dbaas_logs.OutputGraylogStreamRuleCreation _body, string serviceName, System.Guid streamId) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/rule";
            return this.SendAsync<_dbaas_logs.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/rule/{ruleId}
        public Task<_dbaas_logs.Operation> DeleteV1DbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleIdAsync(System.Guid ruleId, string serviceName, System.Guid streamId) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/rule/{ruleId}";
            return this.SendAsync<_dbaas_logs.Operation>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/rule/{ruleId}
        public Task<_dbaas_logs.StreamRule> GetV1DbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleIdAsync(System.Guid ruleId, string serviceName, System.Guid streamId) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/rule/{ruleId}";
            return this.SendAsync<_dbaas_logs.StreamRule>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/subscription
        public Task<System.Guid[]> GetV1DbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionAsync(string serviceName, System.Guid streamId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? resourceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? resourceType) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("resourceName", resourceName);
            queryParametersTemp.Add("resourceType", resourceType);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/subscription{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/subscription/{subscriptionId}
        public Task<_dbaas_logs.Operation> DeleteV1DbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionIdAsync(string serviceName, System.Guid streamId, System.Guid subscriptionId) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.Operation>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetV1DbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionIdAsync(string serviceName, System.Guid streamId, System.Guid subscriptionId) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscription>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/url
        public Task<_dbaas_logs.Url[]> GetV1DbaasLogsServiceNameOutputGraylogStreamStreamIdUrlAsync(string serviceName, System.Guid streamId) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/url";
            return this.SendAsync<_dbaas_logs.Url[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/opensearch/alias
        public Task<System.Guid[]> GetV1DbaasLogsServiceNameOutputOpensearchAliasAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? namePattern) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("namePattern", namePattern);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dbaas/logs/{serviceName}/output/opensearch/alias{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/opensearch/alias
        public Task<_dbaas_logs.Operation> PostV1DbaasLogsServiceNameOutputOpensearchAliasAsync(_dbaas_logs.OutputOpenSearchAliasCreation _body, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/opensearch/alias";
            return this.SendAsync<_dbaas_logs.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}
        public Task<_dbaas_logs.Operation> DeleteV1DbaasLogsServiceNameOutputOpensearchAliasAliasIdAsync(System.Guid aliasId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}";
            return this.SendAsync<_dbaas_logs.Operation>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}
        public Task<_dbaas_logs.Alias> GetV1DbaasLogsServiceNameOutputOpensearchAliasAliasIdAsync(System.Guid aliasId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}";
            return this.SendAsync<_dbaas_logs.Alias>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}
        public Task<_dbaas_logs.Operation> PutV1DbaasLogsServiceNameOutputOpensearchAliasAliasIdAsync(_dbaas_logs.OutputOpenSearchAliasUpdate _body, System.Guid aliasId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}";
            return this.SendAsync<_dbaas_logs.Operation>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/index
        public Task<System.Guid[]> GetV1DbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexAsync(System.Guid aliasId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/index";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/index
        public Task<_dbaas_logs.Operation> PostV1DbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexAsync(_dbaas_logs.OutputOpenSearchAliasIndexCreation _body, System.Guid aliasId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/index";
            return this.SendAsync<_dbaas_logs.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/index/{indexId}
        public Task<_dbaas_logs.Operation> DeleteV1DbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexIndexIdAsync(System.Guid aliasId, System.Guid indexId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/index/{indexId}";
            return this.SendAsync<_dbaas_logs.Operation>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/stream
        public Task<System.Guid[]> GetV1DbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamAsync(System.Guid aliasId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/stream";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/stream
        public Task<_dbaas_logs.Operation> PostV1DbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamAsync(_dbaas_logs.OutputOpenSearchAliasStreamCreation _body, System.Guid aliasId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/stream";
            return this.SendAsync<_dbaas_logs.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/stream/{streamId}
        public Task<_dbaas_logs.Operation> DeleteV1DbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamStreamIdAsync(System.Guid aliasId, string serviceName, System.Guid streamId) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/stream/{streamId}";
            return this.SendAsync<_dbaas_logs.Operation>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/url
        public Task<_dbaas_logs.Url[]> GetV1DbaasLogsServiceNameOutputOpensearchAliasAliasIdUrlAsync(System.Guid aliasId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/url";
            return this.SendAsync<_dbaas_logs.Url[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/opensearch/index
        public Task<System.Guid[]> GetV1DbaasLogsServiceNameOutputOpensearchIndexAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? namePattern) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("namePattern", namePattern);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dbaas/logs/{serviceName}/output/opensearch/index{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/opensearch/index
        public Task<_dbaas_logs.Operation> PostV1DbaasLogsServiceNameOutputOpensearchIndexAsync(_dbaas_logs.OutputOpenSearchIndexCreation _body, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/opensearch/index";
            return this.SendAsync<_dbaas_logs.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/opensearch/index/{indexId}
        public Task<_dbaas_logs.Operation> DeleteV1DbaasLogsServiceNameOutputOpensearchIndexIndexIdAsync(System.Guid indexId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/opensearch/index/{indexId}";
            return this.SendAsync<_dbaas_logs.Operation>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/opensearch/index/{indexId}
        public Task<_dbaas_logs.Index> GetV1DbaasLogsServiceNameOutputOpensearchIndexIndexIdAsync(System.Guid indexId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/opensearch/index/{indexId}";
            return this.SendAsync<_dbaas_logs.Index>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/opensearch/index/{indexId}
        public Task<_dbaas_logs.Operation> PutV1DbaasLogsServiceNameOutputOpensearchIndexIndexIdAsync(_dbaas_logs.OutputOpenSearchIndexUpdate _body, System.Guid indexId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/opensearch/index/{indexId}";
            return this.SendAsync<_dbaas_logs.Operation>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/opensearch/index/{indexId}/url
        public Task<_dbaas_logs.Url[]> GetV1DbaasLogsServiceNameOutputOpensearchIndexIndexIdUrlAsync(System.Guid indexId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/opensearch/index/{indexId}/url";
            return this.SendAsync<_dbaas_logs.Url[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/opensearch/osd
        public Task<System.Guid[]> GetV1DbaasLogsServiceNameOutputOpensearchOsdAsync(string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/opensearch/osd";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/opensearch/osd
        public Task<_dbaas_logs.Operation> PostV1DbaasLogsServiceNameOutputOpensearchOsdAsync(_dbaas_logs.OsdCreation _body, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/opensearch/osd";
            return this.SendAsync<_dbaas_logs.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/opensearch/osd/{osdId}
        public Task<_dbaas_logs.Operation> DeleteV1DbaasLogsServiceNameOutputOpensearchOsdOsdIdAsync(System.Guid osdId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/opensearch/osd/{osdId}";
            return this.SendAsync<_dbaas_logs.Operation>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/opensearch/osd/{osdId}
        public Task<_dbaas_logs.Osd> GetV1DbaasLogsServiceNameOutputOpensearchOsdOsdIdAsync(System.Guid osdId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/opensearch/osd/{osdId}";
            return this.SendAsync<_dbaas_logs.Osd>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/opensearch/osd/{osdId}
        public Task<_dbaas_logs.Operation> PutV1DbaasLogsServiceNameOutputOpensearchOsdOsdIdAsync(_dbaas_logs.OsdUpdate _body, System.Guid osdId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/opensearch/osd/{osdId}";
            return this.SendAsync<_dbaas_logs.Operation>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/output/opensearch/osd/{osdId}/url
        public Task<_dbaas_logs.Url[]> GetV1DbaasLogsServiceNameOutputOpensearchOsdOsdIdUrlAsync(System.Guid osdId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/output/opensearch/osd/{osdId}/url";
            return this.SendAsync<_dbaas_logs.Url[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/role
        public Task<System.Guid[]> GetV1DbaasLogsServiceNameRoleAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? namePattern) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("namePattern", namePattern);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dbaas/logs/{serviceName}/role{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/role
        public Task<_dbaas_logs.Operation> PostV1DbaasLogsServiceNameRoleAsync(_dbaas_logs.RoleCreation _body, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/role";
            return this.SendAsync<_dbaas_logs.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/role/{roleId}
        public Task<_dbaas_logs.Operation> DeleteV1DbaasLogsServiceNameRoleRoleIdAsync(System.Guid roleId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/role/{roleId}";
            return this.SendAsync<_dbaas_logs.Operation>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/role/{roleId}
        public Task<_dbaas_logs.Role> GetV1DbaasLogsServiceNameRoleRoleIdAsync(System.Guid roleId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/role/{roleId}";
            return this.SendAsync<_dbaas_logs.Role>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/role/{roleId}
        public Task<_dbaas_logs.Operation> PutV1DbaasLogsServiceNameRoleRoleIdAsync(_dbaas_logs.RoleUpdate _body, System.Guid roleId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/role/{roleId}";
            return this.SendAsync<_dbaas_logs.Operation>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/role/{roleId}/member
        public Task<System.String[]> GetV1DbaasLogsServiceNameRoleRoleIdMemberAsync(System.Guid roleId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/role/{roleId}/member";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/role/{roleId}/member
        public Task<_dbaas_logs.Operation> PostV1DbaasLogsServiceNameRoleRoleIdMemberAsync(_dbaas_logs.RoleMemberCreation _body, System.Guid roleId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/role/{roleId}/member";
            return this.SendAsync<_dbaas_logs.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/role/{roleId}/member/{username}
        public Task<_dbaas_logs.Operation> DeleteV1DbaasLogsServiceNameRoleRoleIdMemberUsernameAsync(System.Guid roleId, string serviceName, string username) {
            string uri = $"/v1/dbaas/logs/{serviceName}/role/{roleId}/member/{username}";
            return this.SendAsync<_dbaas_logs.Operation>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/role/{roleId}/member/{username}
        public Task<_dbaas_logs.Member> GetV1DbaasLogsServiceNameRoleRoleIdMemberUsernameAsync(System.Guid roleId, string serviceName, string username) {
            string uri = $"/v1/dbaas/logs/{serviceName}/role/{roleId}/member/{username}";
            return this.SendAsync<_dbaas_logs.Member>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/role/{roleId}/member/{username}
        public Task<_dbaas_logs.Operation> PutV1DbaasLogsServiceNameRoleRoleIdMemberUsernameAsync(_dbaas_logs.RoleMemberUpdate _body, System.Guid roleId, string serviceName, string username) {
            string uri = $"/v1/dbaas/logs/{serviceName}/role/{roleId}/member/{username}";
            return this.SendAsync<_dbaas_logs.Operation>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/role/{roleId}/permission
        public Task<System.Guid[]> GetV1DbaasLogsServiceNameRoleRoleIdPermissionAsync(System.Guid roleId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/role/{roleId}/permission";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/role/{roleId}/permission/alias
        public Task<_dbaas_logs.Operation> PostV1DbaasLogsServiceNameRoleRoleIdPermissionAliasAsync(_dbaas_logs.RolePermissionAliasCreation _body, System.Guid roleId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/role/{roleId}/permission/alias";
            return this.SendAsync<_dbaas_logs.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/role/{roleId}/permission/dashboard
        public Task<_dbaas_logs.Operation> PostV1DbaasLogsServiceNameRoleRoleIdPermissionDashboardAsync(_dbaas_logs.RolePermissionDashboardCreation _body, System.Guid roleId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/role/{roleId}/permission/dashboard";
            return this.SendAsync<_dbaas_logs.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/role/{roleId}/permission/index
        public Task<_dbaas_logs.Operation> PostV1DbaasLogsServiceNameRoleRoleIdPermissionIndexAsync(_dbaas_logs.RolePermissionIndexCreation _body, System.Guid roleId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/role/{roleId}/permission/index";
            return this.SendAsync<_dbaas_logs.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/role/{roleId}/permission/osd
        public Task<_dbaas_logs.Operation> PostV1DbaasLogsServiceNameRoleRoleIdPermissionOsdAsync(_dbaas_logs.RolePermissionOsdCreation _body, System.Guid roleId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/role/{roleId}/permission/osd";
            return this.SendAsync<_dbaas_logs.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/role/{roleId}/permission/stream
        public Task<_dbaas_logs.Operation> PostV1DbaasLogsServiceNameRoleRoleIdPermissionStreamAsync(_dbaas_logs.RolePermissionStreamCreation _body, System.Guid roleId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/role/{roleId}/permission/stream";
            return this.SendAsync<_dbaas_logs.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/role/{roleId}/permission/{permissionId}
        public Task<_dbaas_logs.Operation> DeleteV1DbaasLogsServiceNameRoleRoleIdPermissionPermissionIdAsync(System.Guid permissionId, System.Guid roleId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/role/{roleId}/permission/{permissionId}";
            return this.SendAsync<_dbaas_logs.Operation>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/role/{roleId}/permission/{permissionId}
        public Task<_dbaas_logs.Permission> GetV1DbaasLogsServiceNameRoleRoleIdPermissionPermissionIdAsync(System.Guid permissionId, System.Guid roleId, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/role/{roleId}/permission/{permissionId}";
            return this.SendAsync<_dbaas_logs.Permission>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1DbaasLogsServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/serviceInfos
        public Task PutV1DbaasLogsServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/token
        public Task<System.Guid[]> GetV1DbaasLogsServiceNameTokenAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? namePattern) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("namePattern", namePattern);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dbaas/logs/{serviceName}/token{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/token
        public Task<_dbaas_logs.Operation> PostV1DbaasLogsServiceNameTokenAsync(_dbaas_logs.TokenCreation _body, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/token";
            return this.SendAsync<_dbaas_logs.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/token/{tokenId}
        public Task<_dbaas_logs.Operation> DeleteV1DbaasLogsServiceNameTokenTokenIdAsync(string serviceName, System.Guid tokenId) {
            string uri = $"/v1/dbaas/logs/{serviceName}/token/{tokenId}";
            return this.SendAsync<_dbaas_logs.Operation>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/token/{tokenId}
        public Task<_dbaas_logs.Token> GetV1DbaasLogsServiceNameTokenTokenIdAsync(string serviceName, System.Guid tokenId) {
            string uri = $"/v1/dbaas/logs/{serviceName}/token/{tokenId}";
            return this.SendAsync<_dbaas_logs.Token>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/url
        public Task<_dbaas_logs.Url[]> GetV1DbaasLogsServiceNameUrlAsync(string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/url";
            return this.SendAsync<_dbaas_logs.Url[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dbaas/logs/{serviceName}/user/changePassword
        public Task<_dbaas_logs.Operation> PostV1DbaasLogsServiceNameUserChangePasswordAsync(_dbaas_logs.UserChangePasswordCreation _body, string serviceName) {
            string uri = $"/v1/dbaas/logs/{serviceName}/user/changePassword";
            return this.SendAsync<_dbaas_logs.Operation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/ceph
        public Task<System.String[]> GetV1DedicatedCephAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/ceph{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}
        public Task<_dedicated_ceph_clusterGet.responseWithIAM> GetV1DedicatedCephServiceNameAsync(string serviceName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}";
            return this.SendAsync<_dedicated_ceph_clusterGet.responseWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}
        public Task<System.String> PutV1DedicatedCephServiceNameAsync(_dedicated_ceph.UpdateClusterDetails _body, string serviceName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}";
            return this.SendAsync<string>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}/acl
        public Task<_dedicated_ceph_aclGet.response[]> GetV1DedicatedCephServiceNameAclAsync(string serviceName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}/acl";
            return this.SendAsync<_dedicated_ceph_aclGet.response[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}/acl
        public Task<System.String> PostV1DedicatedCephServiceNameAclAsync(_dedicated_ceph_acl.Create _body, string serviceName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}/acl";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}/acl/{aclId}
        public Task<System.String> DeleteV1DedicatedCephServiceNameAclAclIdAsync(long aclId, string serviceName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}/acl/{aclId}";
            return this.SendAsync<string>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}/acl/{aclId}
        public Task<_dedicated_ceph_aclGet.response> GetV1DedicatedCephServiceNameAclAclIdAsync(long aclId, string serviceName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}/acl/{aclId}";
            return this.SendAsync<_dedicated_ceph_aclGet.response>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}/cephfs
        public Task<_dedicated_ceph_cephfsGet.response[]> GetV1DedicatedCephServiceNameCephfsAsync(string serviceName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}/cephfs";
            return this.SendAsync<_dedicated_ceph_cephfsGet.response[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}/cephfs/{fsName}
        public Task<System.String> DeleteV1DedicatedCephServiceNameCephfsFsNameAsync(string fsName, string serviceName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}/cephfs/{fsName}";
            return this.SendAsync<string>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}/cephfs/{fsName}
        public Task<_dedicated_ceph_cephfsGet.response> GetV1DedicatedCephServiceNameCephfsFsNameAsync(string fsName, string serviceName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}/cephfs/{fsName}";
            return this.SendAsync<_dedicated_ceph_cephfsGet.response>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}/cephfs/{fsName}/disable
        public Task<System.String> PostV1DedicatedCephServiceNameCephfsFsNameDisableAsync(string fsName, string serviceName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}/cephfs/{fsName}/disable";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}/cephfs/{fsName}/enable
        public Task<System.String> PostV1DedicatedCephServiceNameCephfsFsNameEnableAsync(string fsName, string serviceName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}/cephfs/{fsName}/enable";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}/changeContact
        public Task<System.Int64[]> PostV1DedicatedCephServiceNameChangeContactAsync(_services.changeContact _body, string serviceName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}/confirmTermination
        public Task<System.String> PostV1DedicatedCephServiceNameConfirmTerminationAsync(_services.confirmTermination _body, string serviceName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}/health
        public Task<_dedicated_ceph_clusterHealth.response> GetV1DedicatedCephServiceNameHealthAsync(string serviceName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}/health";
            return this.SendAsync<_dedicated_ceph_clusterHealth.response>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}/pool
        public Task<_dedicated_ceph_poolGet.response[]> GetV1DedicatedCephServiceNamePoolAsync(string serviceName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}/pool";
            return this.SendAsync<_dedicated_ceph_poolGet.response[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}/pool
        public Task<System.String> PostV1DedicatedCephServiceNamePoolAsync(_dedicated_ceph_pool.Create _body, string serviceName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}/pool";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}/pool/{poolName}
        public Task<System.String> DeleteV1DedicatedCephServiceNamePoolPoolNameAsync(string poolName, string serviceName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}/pool/{poolName}";
            return this.SendAsync<string>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}/pool/{poolName}
        public Task<_dedicated_ceph_poolGet.response> GetV1DedicatedCephServiceNamePoolPoolNameAsync(string poolName, string serviceName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}/pool/{poolName}";
            return this.SendAsync<_dedicated_ceph_poolGet.response>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}/pool/{poolName}/allowDeletion
        public Task<System.String> PutV1DedicatedCephServiceNamePoolPoolNameAllowDeletionAsync(string poolName, string serviceName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}/pool/{poolName}/allowDeletion";
            return this.SendAsync<string>("PUT", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1DedicatedCephServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}/serviceInfos
        public Task PutV1DedicatedCephServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}/task
        public Task<_dedicated_ceph_taskList.response[]> GetV1DedicatedCephServiceNameTaskAsync(string serviceName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}/task";
            return this.SendAsync<_dedicated_ceph_taskList.response[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}/task/{taskId}
        public Task<_dedicated_ceph_taskGet.response[]> GetV1DedicatedCephServiceNameTaskTaskIdAsync(string serviceName, string taskId) {
            string uri = $"/v1/dedicated/ceph/{serviceName}/task/{taskId}";
            return this.SendAsync<_dedicated_ceph_taskGet.response[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}/terminate
        public Task<System.String> PostV1DedicatedCephServiceNameTerminateAsync(string serviceName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}/user
        public Task<_dedicated_ceph_userGet.response[]> GetV1DedicatedCephServiceNameUserAsync(string serviceName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}/user";
            return this.SendAsync<_dedicated_ceph_userGet.response[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}/user
        public Task<System.String> PostV1DedicatedCephServiceNameUserAsync(_dedicated_ceph_user.Create _body, string serviceName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}/user";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}/user/{userName}
        public Task<System.String> DeleteV1DedicatedCephServiceNameUserUserNameAsync(string serviceName, string userName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}/user/{userName}";
            return this.SendAsync<string>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}/user/{userName}
        public Task<_dedicated_ceph_userGet.response> GetV1DedicatedCephServiceNameUserUserNameAsync(string serviceName, string userName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}/user/{userName}";
            return this.SendAsync<_dedicated_ceph_userGet.response>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}/user/{userName}/pool
        public Task<_dedicated_ceph_userPoolPermList.response[]> GetV1DedicatedCephServiceNameUserUserNamePoolAsync(string serviceName, string userName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}/user/{userName}/pool";
            return this.SendAsync<_dedicated_ceph_userPoolPermList.response[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}/user/{userName}/pool
        public Task<System.String> PostV1DedicatedCephServiceNameUserUserNamePoolAsync(_dedicated_ceph_user_pool.CreatePermissions _body, string serviceName, string userName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}/user/{userName}/pool";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}/user/{userName}/pool
        public Task<System.String> PutV1DedicatedCephServiceNameUserUserNamePoolAsync(_dedicated_ceph_user_pool.UpdatePermission _body, string serviceName, string userName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}/user/{userName}/pool";
            return this.SendAsync<string>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/ceph/{serviceName}/user/{userName}/pool/{poolName}
        public Task<System.String> DeleteV1DedicatedCephServiceNameUserUserNamePoolPoolNameAsync(string poolName, string serviceName, string userName) {
            string uri = $"/v1/dedicated/ceph/{serviceName}/user/{userName}/pool/{poolName}";
            return this.SendAsync<string>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/cluster
        public Task<System.Guid[]> GetV1DedicatedClusterAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/cluster{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/cluster/availabilities
        public Task<_dedicated_cluster.availability[]> GetV1DedicatedClusterAvailabilitiesAsync(long quantity, [System.Runtime.InteropServices.OptionalAttribute()] System.String? memory, [System.Runtime.InteropServices.OptionalAttribute()] System.String? planCode, [System.Runtime.InteropServices.OptionalAttribute()] System.String? server, [System.Runtime.InteropServices.OptionalAttribute()] System.String? storage, [System.Runtime.InteropServices.OptionalAttribute()] System.String? systemStorage) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("memory", memory);
            queryParametersTemp.Add("planCode", planCode);
            queryParametersTemp.Add("quantity", quantity);
            queryParametersTemp.Add("server", server);
            queryParametersTemp.Add("storage", storage);
            queryParametersTemp.Add("systemStorage", systemStorage);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/cluster/availabilities{queryParameters}";
            return this.SendAsync<_dedicated_cluster.availability[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/dedicated/cluster/availabilities/raw
        public Task<_dedicated_cluster.AvailabilitiesRaw[]> GetV1DedicatedClusterAvailabilitiesRawAsync(long quantity, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? excludeRegions, [System.Runtime.InteropServices.OptionalAttribute()] System.String? memory, [System.Runtime.InteropServices.OptionalAttribute()] System.String? planCode, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_server.AvailabilityRegionalizationEnum? regions, [System.Runtime.InteropServices.OptionalAttribute()] System.String? server, [System.Runtime.InteropServices.OptionalAttribute()] System.String? storage, [System.Runtime.InteropServices.OptionalAttribute()] System.String? systemStorage) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("excludeRegions", excludeRegions);
            queryParametersTemp.Add("memory", memory);
            queryParametersTemp.Add("planCode", planCode);
            queryParametersTemp.Add("quantity", quantity);
            queryParametersTemp.Add("regions", regions);
            queryParametersTemp.Add("server", server);
            queryParametersTemp.Add("storage", storage);
            queryParametersTemp.Add("systemStorage", systemStorage);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/cluster/availabilities/raw{queryParameters}";
            return this.SendAsync<_dedicated_cluster.AvailabilitiesRaw[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/cluster/{serviceName}
        public Task<_dedicated_cluster.ClusterWithIAM> GetV1DedicatedClusterServiceNameAsync(System.Guid serviceName) {
            string uri = $"/v1/dedicated/cluster/{serviceName}";
            return this.SendAsync<_dedicated_cluster.ClusterWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/cluster/{serviceName}/changeContact
        public Task<System.Int64[]> PostV1DedicatedClusterServiceNameChangeContactAsync(_services.changeContact _body, System.Guid serviceName) {
            string uri = $"/v1/dedicated/cluster/{serviceName}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/cluster/{serviceName}/confirmTermination
        public Task<System.String> PostV1DedicatedClusterServiceNameConfirmTerminationAsync(_services.confirmTermination _body, System.Guid serviceName) {
            string uri = $"/v1/dedicated/cluster/{serviceName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/cluster/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1DedicatedClusterServiceNameServiceInfosAsync(System.Guid serviceName) {
            string uri = $"/v1/dedicated/cluster/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/cluster/{serviceName}/serviceInfos
        public Task PutV1DedicatedClusterServiceNameServiceInfosAsync(_services.Service _body, System.Guid serviceName) {
            string uri = $"/v1/dedicated/cluster/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/cluster/{serviceName}/terminate
        public Task<System.String> PostV1DedicatedClusterServiceNameTerminateAsync(System.Guid serviceName) {
            string uri = $"/v1/dedicated/cluster/{serviceName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/housing
        public Task<System.String[]> GetV1DedicatedHousingAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/housing{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/housing/{serviceName}
        public Task<_dedicated_housing.HousingWithIAM> GetV1DedicatedHousingServiceNameAsync(string serviceName) {
            string uri = $"/v1/dedicated/housing/{serviceName}";
            return this.SendAsync<_dedicated_housing.HousingWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/housing/{serviceName}/features/backupFTP
        public Task<_dedicated_server.Task> DeleteV1DedicatedHousingServiceNameFeaturesBackupFTPAsync(string serviceName) {
            string uri = $"/v1/dedicated/housing/{serviceName}/features/backupFTP";
            return this.SendAsync<_dedicated_server.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/housing/{serviceName}/features/backupFTP
        public Task<_dedicated_server.BackupFtp> GetV1DedicatedHousingServiceNameFeaturesBackupFTPAsync(string serviceName) {
            string uri = $"/v1/dedicated/housing/{serviceName}/features/backupFTP";
            return this.SendAsync<_dedicated_server.BackupFtp>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/housing/{serviceName}/features/backupFTP
        public Task<_dedicated_server.Task> PostV1DedicatedHousingServiceNameFeaturesBackupFTPAsync(string serviceName) {
            string uri = $"/v1/dedicated/housing/{serviceName}/features/backupFTP";
            return this.SendAsync<_dedicated_server.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/housing/{serviceName}/features/backupFTP/access
        public Task<System.String[]> GetV1DedicatedHousingServiceNameFeaturesBackupFTPAccessAsync(string serviceName) {
            string uri = $"/v1/dedicated/housing/{serviceName}/features/backupFTP/access";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/housing/{serviceName}/features/backupFTP/access
        public Task<_dedicated_server.Task> PostV1DedicatedHousingServiceNameFeaturesBackupFTPAccessAsync(bool cifs, string ipBlock, bool nfs, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? ftp) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("cifs", cifs);
            _body.Add("ftp", ftp);
            _body.Add("ipBlock", ipBlock);
            _body.Add("nfs", nfs);
            string uri = $"/v1/dedicated/housing/{serviceName}/features/backupFTP/access";
            return this.SendAsync<_dedicated_server.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/housing/{serviceName}/features/backupFTP/access/{ipBlock}
        public Task<_dedicated_server.Task> DeleteV1DedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlockAsync(string ipBlock, string serviceName) {
            string uri = $"/v1/dedicated/housing/{serviceName}/features/backupFTP/access/{ipBlock}";
            return this.SendAsync<_dedicated_server.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/housing/{serviceName}/features/backupFTP/access/{ipBlock}
        public Task<_dedicated_server.BackupFtpAcl> GetV1DedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlockAsync(string ipBlock, string serviceName) {
            string uri = $"/v1/dedicated/housing/{serviceName}/features/backupFTP/access/{ipBlock}";
            return this.SendAsync<_dedicated_server.BackupFtpAcl>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/housing/{serviceName}/features/backupFTP/access/{ipBlock}
        public Task PutV1DedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlockAsync(_dedicated_server.BackupFtpAcl _body, string ipBlock, string serviceName) {
            string uri = $"/v1/dedicated/housing/{serviceName}/features/backupFTP/access/{ipBlock}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/housing/{serviceName}/features/backupFTP/authorizableBlocks
        public Task<System.String[]> GetV1DedicatedHousingServiceNameFeaturesBackupFTPAuthorizableBlocksAsync(string serviceName) {
            string uri = $"/v1/dedicated/housing/{serviceName}/features/backupFTP/authorizableBlocks";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/housing/{serviceName}/features/backupFTP/password
        public Task<_dedicated_server.Task> PostV1DedicatedHousingServiceNameFeaturesBackupFTPPasswordAsync(string serviceName) {
            string uri = $"/v1/dedicated/housing/{serviceName}/features/backupFTP/password";
            return this.SendAsync<_dedicated_server.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/housing/{serviceName}/orderable/APC
        public Task<_dedicated_housing.ApcOrderable> GetV1DedicatedHousingServiceNameOrderableAPCAsync(string serviceName) {
            string uri = $"/v1/dedicated/housing/{serviceName}/orderable/APC";
            return this.SendAsync<_dedicated_housing.ApcOrderable>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/housing/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1DedicatedHousingServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/dedicated/housing/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/housing/{serviceName}/serviceInfos
        public Task PutV1DedicatedHousingServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/dedicated/housing/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/housing/{serviceName}/task
        public Task<System.Int64[]> GetV1DedicatedHousingServiceNameTaskAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_housing.TaskFunctionEnum? function, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated.TaskStatusEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("function", function);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/housing/{serviceName}/task{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/housing/{serviceName}/task/{taskId}
        public Task<_dedicated_housing.Task> GetV1DedicatedHousingServiceNameTaskTaskIdAsync(string serviceName, long taskId) {
            string uri = $"/v1/dedicated/housing/{serviceName}/task/{taskId}";
            return this.SendAsync<_dedicated_housing.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/housing/{serviceName}/task/{taskId}/cancel
        public Task PostV1DedicatedHousingServiceNameTaskTaskIdCancelAsync(string serviceName, long taskId) {
            string uri = $"/v1/dedicated/housing/{serviceName}/task/{taskId}/cancel";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/installationTemplate
        public Task<System.String[]> GetV1DedicatedInstallationTemplateAsync() {
            string uri = $"/v1/dedicated/installationTemplate";
            return this.SendAsync<string[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/dedicated/installationTemplate/templateInfos
        public Task<_dedicated.TemplateOsInfo[]> GetV1DedicatedInstallationTemplateTemplateInfosAsync() {
            string uri = $"/v1/dedicated/installationTemplate/templateInfos";
            return this.SendAsync<_dedicated.TemplateOsInfo[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/dedicated/installationTemplate/{templateName}
        public Task<_dedicated_installationTemplate.Templates> GetV1DedicatedInstallationTemplateTemplateNameAsync(string templateName) {
            string uri = $"/v1/dedicated/installationTemplate/{templateName}";
            return this.SendAsync<_dedicated_installationTemplate.Templates>("GET", uri, null, null, false);
        }
        
        // Path: /v1/dedicated/installationTemplate/{templateName}/partitionScheme
        public Task<System.String[]> GetV1DedicatedInstallationTemplateTemplateNamePartitionSchemeAsync(string templateName) {
            string uri = $"/v1/dedicated/installationTemplate/{templateName}/partitionScheme";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/installationTemplate/{templateName}/partitionScheme/{schemeName}
        public Task<_dedicated_installationTemplate.templatePartitioningSchemes> GetV1DedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameAsync(string schemeName, string templateName) {
            string uri = $"/v1/dedicated/installationTemplate/{templateName}/partitionScheme/{schemeName}";
            return this.SendAsync<_dedicated_installationTemplate.templatePartitioningSchemes>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid
        public Task<System.String[]> GetV1DedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidAsync(string schemeName, string templateName) {
            string uri = $"/v1/dedicated/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid/{name}
        public Task<_dedicated_installationTemplate.hardwareRaid> GetV1DedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameAsync(string name, string schemeName, string templateName) {
            string uri = $"/v1/dedicated/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid/{name}";
            return this.SendAsync<_dedicated_installationTemplate.hardwareRaid>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition
        public Task<System.String[]> GetV1DedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionAsync(string schemeName, string templateName) {
            string uri = $"/v1/dedicated/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition/{mountpoint}
        public Task<_dedicated_installationTemplate.templatePartitions> GetV1DedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointAsync(string mountpoint, string schemeName, string templateName) {
            string uri = $"/v1/dedicated/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition/{mountpoint}";
            return this.SendAsync<_dedicated_installationTemplate.templatePartitions>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/nasha
        public Task<System.String[]> GetV1DedicatedNashaAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/nasha{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}
        public Task<_dedicated_nasha.StorageWithIAM> GetV1DedicatedNashaServiceNameAsync(string serviceName) {
            string uri = $"/v1/dedicated/nasha/{serviceName}";
            return this.SendAsync<_dedicated_nasha.StorageWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}
        public Task PutV1DedicatedNashaServiceNameAsync(_dedicated_nasha.Storage _body, string serviceName) {
            string uri = $"/v1/dedicated/nasha/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/changeContact
        public Task<System.Int64[]> PostV1DedicatedNashaServiceNameChangeContactAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactTech) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("contactAdmin", contactAdmin);
            _body.Add("contactBilling", contactBilling);
            _body.Add("contactTech", contactTech);
            string uri = $"/v1/dedicated/nasha/{serviceName}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/confirmTermination
        public Task<System.String> PostV1DedicatedNashaServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] System.String? commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum? futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum? reason) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("commentary", commentary);
            _body.Add("futureUse", futureUse);
            _body.Add("reason", reason);
            _body.Add("token", token);
            string uri = $"/v1/dedicated/nasha/{serviceName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/metricsToken
        public Task<_dedicated_storage.MetricsTokenResult> GetV1DedicatedNashaServiceNameMetricsTokenAsync(string serviceName) {
            string uri = $"/v1/dedicated/nasha/{serviceName}/metricsToken";
            return this.SendAsync<_dedicated_storage.MetricsTokenResult>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/partition
        public Task<System.String[]> GetV1DedicatedNashaServiceNamePartitionAsync(string serviceName) {
            string uri = $"/v1/dedicated/nasha/{serviceName}/partition";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/partition
        public Task<_dedicated_nasTask.Task> PostV1DedicatedNashaServiceNamePartitionAsync(string partitionName, _dedicated_storage.ProtocolEnum protocol, string serviceName, long size, [System.Runtime.InteropServices.OptionalAttribute()] System.String? partitionDescription) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("partitionDescription", partitionDescription);
            _body.Add("partitionName", partitionName);
            _body.Add("protocol", protocol);
            _body.Add("size", size);
            string uri = $"/v1/dedicated/nasha/{serviceName}/partition";
            return this.SendAsync<_dedicated_nasTask.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/partition/{partitionName}
        public Task<_dedicated_nasTask.Task> DeleteV1DedicatedNashaServiceNamePartitionPartitionNameAsync(string partitionName, string serviceName) {
            string uri = $"/v1/dedicated/nasha/{serviceName}/partition/{partitionName}";
            return this.SendAsync<_dedicated_nasTask.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/partition/{partitionName}
        public Task<_dedicated_nasha.Partition> GetV1DedicatedNashaServiceNamePartitionPartitionNameAsync(string partitionName, string serviceName) {
            string uri = $"/v1/dedicated/nasha/{serviceName}/partition/{partitionName}";
            return this.SendAsync<_dedicated_nasha.Partition>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/partition/{partitionName}
        public Task PutV1DedicatedNashaServiceNamePartitionPartitionNameAsync(_dedicated_nasha.Partition _body, string partitionName, string serviceName) {
            string uri = $"/v1/dedicated/nasha/{serviceName}/partition/{partitionName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/partition/{partitionName}/access
        public Task<System.String[]> GetV1DedicatedNashaServiceNamePartitionPartitionNameAccessAsync(string partitionName, string serviceName) {
            string uri = $"/v1/dedicated/nasha/{serviceName}/partition/{partitionName}/access";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/partition/{partitionName}/access
        public Task<_dedicated_nasTask.Task> PostV1DedicatedNashaServiceNamePartitionPartitionNameAccessAsync(string ip, string partitionName, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? aclDescription, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_storage.AclTypeEnum? type) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("aclDescription", aclDescription);
            _body.Add("ip", ip);
            _body.Add("type", type);
            string uri = $"/v1/dedicated/nasha/{serviceName}/partition/{partitionName}/access";
            return this.SendAsync<_dedicated_nasTask.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/partition/{partitionName}/access/{ip}
        public Task<_dedicated_nasTask.Task> DeleteV1DedicatedNashaServiceNamePartitionPartitionNameAccessIpAsync(string ip, string partitionName, string serviceName) {
            string uri = $"/v1/dedicated/nasha/{serviceName}/partition/{partitionName}/access/{ip}";
            return this.SendAsync<_dedicated_nasTask.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/partition/{partitionName}/access/{ip}
        public Task<_dedicated_nasha.Access> GetV1DedicatedNashaServiceNamePartitionPartitionNameAccessIpAsync(string ip, string partitionName, string serviceName) {
            string uri = $"/v1/dedicated/nasha/{serviceName}/partition/{partitionName}/access/{ip}";
            return this.SendAsync<_dedicated_nasha.Access>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/partition/{partitionName}/authorizableBlocks
        public Task<System.String[]> GetV1DedicatedNashaServiceNamePartitionPartitionNameAuthorizableBlocksAsync(string partitionName, string serviceName) {
            string uri = $"/v1/dedicated/nasha/{serviceName}/partition/{partitionName}/authorizableBlocks";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/partition/{partitionName}/authorizableIps
        public Task<System.String[]> GetV1DedicatedNashaServiceNamePartitionPartitionNameAuthorizableIpsAsync(string partitionName, string serviceName) {
            string uri = $"/v1/dedicated/nasha/{serviceName}/partition/{partitionName}/authorizableIps";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/partition/{partitionName}/customSnapshot
        public Task<System.String[]> GetV1DedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotAsync(string partitionName, string serviceName) {
            string uri = $"/v1/dedicated/nasha/{serviceName}/partition/{partitionName}/customSnapshot";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/partition/{partitionName}/customSnapshot
        public Task<_dedicated_nasTask.Task> PostV1DedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotAsync(string name, string partitionName, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? expiration) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("expiration", expiration);
            _body.Add("name", name);
            string uri = $"/v1/dedicated/nasha/{serviceName}/partition/{partitionName}/customSnapshot";
            return this.SendAsync<_dedicated_nasTask.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/partition/{partitionName}/customSnapshot/{name}
        public Task<_dedicated_nasTask.Task> DeleteV1DedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotNameAsync(string name, string partitionName, string serviceName) {
            string uri = $"/v1/dedicated/nasha/{serviceName}/partition/{partitionName}/customSnapshot/{name}";
            return this.SendAsync<_dedicated_nasTask.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/partition/{partitionName}/customSnapshot/{name}
        public Task<_dedicated_nasha.customSnap> GetV1DedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotNameAsync(string name, string partitionName, string serviceName) {
            string uri = $"/v1/dedicated/nasha/{serviceName}/partition/{partitionName}/customSnapshot/{name}";
            return this.SendAsync<_dedicated_nasha.customSnap>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/partition/{partitionName}/options
        public Task<_dedicated_nasha.options> GetV1DedicatedNashaServiceNamePartitionPartitionNameOptionsAsync(string partitionName, string serviceName) {
            string uri = $"/v1/dedicated/nasha/{serviceName}/partition/{partitionName}/options";
            return this.SendAsync<_dedicated_nasha.options>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/partition/{partitionName}/options
        public Task<_dedicated_nasTask.Task> PostV1DedicatedNashaServiceNamePartitionPartitionNameOptionsAsync(string partitionName, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_storage.AtimeEnum? atime, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_storage.RecordSizeEnum? recordsize, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_storage.SyncEnum? sync) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("atime", atime);
            _body.Add("recordsize", recordsize);
            _body.Add("sync", sync);
            string uri = $"/v1/dedicated/nasha/{serviceName}/partition/{partitionName}/options";
            return this.SendAsync<_dedicated_nasTask.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/partition/{partitionName}/quota
        public Task<System.Int64[]> GetV1DedicatedNashaServiceNamePartitionPartitionNameQuotaAsync(string partitionName, string serviceName) {
            string uri = $"/v1/dedicated/nasha/{serviceName}/partition/{partitionName}/quota";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/partition/{partitionName}/quota
        public Task<_dedicated_nasTask.Task> PostV1DedicatedNashaServiceNamePartitionPartitionNameQuotaAsync(string partitionName, string serviceName, long size, long uid) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("size", size);
            _body.Add("uid", uid);
            string uri = $"/v1/dedicated/nasha/{serviceName}/partition/{partitionName}/quota";
            return this.SendAsync<_dedicated_nasTask.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/partition/{partitionName}/quota/{uid}
        public Task<_dedicated_nasTask.Task> DeleteV1DedicatedNashaServiceNamePartitionPartitionNameQuotaUidAsync(string partitionName, string serviceName, long uid) {
            string uri = $"/v1/dedicated/nasha/{serviceName}/partition/{partitionName}/quota/{uid}";
            return this.SendAsync<_dedicated_nasTask.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/partition/{partitionName}/quota/{uid}
        public Task<_dedicated_nasha.Quota> GetV1DedicatedNashaServiceNamePartitionPartitionNameQuotaUidAsync(string partitionName, string serviceName, long uid) {
            string uri = $"/v1/dedicated/nasha/{serviceName}/partition/{partitionName}/quota/{uid}";
            return this.SendAsync<_dedicated_nasha.Quota>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/partition/{partitionName}/snapshot
        public Task<_dedicated_storage.SnapshotEnum[]> GetV1DedicatedNashaServiceNamePartitionPartitionNameSnapshotAsync(string partitionName, string serviceName) {
            string uri = $"/v1/dedicated/nasha/{serviceName}/partition/{partitionName}/snapshot";
            return this.SendAsync<_dedicated_storage.SnapshotEnum[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/partition/{partitionName}/snapshot
        public Task<_dedicated_nasTask.Task> PostV1DedicatedNashaServiceNamePartitionPartitionNameSnapshotAsync(string partitionName, string serviceName, _dedicated_storage.SnapshotEnum snapshotType) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("snapshotType", snapshotType);
            string uri = $"/v1/dedicated/nasha/{serviceName}/partition/{partitionName}/snapshot";
            return this.SendAsync<_dedicated_nasTask.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/partition/{partitionName}/snapshot/{snapshotType}
        public Task<_dedicated_nasTask.Task> DeleteV1DedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotTypeAsync(string partitionName, string serviceName, _dedicated_storage.SnapshotEnum snapshotType) {
            string uri = $"/v1/dedicated/nasha/{serviceName}/partition/{partitionName}/snapshot/{snapshotType}";
            return this.SendAsync<_dedicated_nasTask.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/partition/{partitionName}/snapshot/{snapshotType}
        public Task<_dedicated_nasha.Snapshot> GetV1DedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotTypeAsync(string partitionName, string serviceName, _dedicated_storage.SnapshotEnum snapshotType) {
            string uri = $"/v1/dedicated/nasha/{serviceName}/partition/{partitionName}/snapshot/{snapshotType}";
            return this.SendAsync<_dedicated_nasha.Snapshot>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/partition/{partitionName}/use
        public Task<_complexType.UnitAndValue<double>> GetV1DedicatedNashaServiceNamePartitionPartitionNameUseAsync(string partitionName, string serviceName, _dedicated_storage.PartitionUsageTypeEnum type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/nasha/{serviceName}/partition/{partitionName}/use{queryParameters}";
            return this.SendAsync<_complexType.UnitAndValue<double>>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1DedicatedNashaServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/dedicated/nasha/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/serviceInfos
        public Task PutV1DedicatedNashaServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/dedicated/nasha/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/task
        public Task<System.Int64[]> GetV1DedicatedNashaServiceNameTaskAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_storage.TaskFunctionEnum? operation, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated.TaskStatusEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("operation", operation);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/nasha/{serviceName}/task{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/task/{taskId}
        public Task<_dedicated_nasTask.Task> GetV1DedicatedNashaServiceNameTaskTaskIdAsync(string serviceName, long taskId) {
            string uri = $"/v1/dedicated/nasha/{serviceName}/task/{taskId}";
            return this.SendAsync<_dedicated_nasTask.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/terminate
        public Task<System.String> PostV1DedicatedNashaServiceNameTerminateAsync(string serviceName) {
            string uri = $"/v1/dedicated/nasha/{serviceName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/nasha/{serviceName}/use
        public Task<_complexType.UnitAndValue<double>> GetV1DedicatedNashaServiceNameUseAsync(string serviceName, _dedicated_storage.NasUsageTypeEnum type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/nasha/{serviceName}/use{queryParameters}";
            return this.SendAsync<_complexType.UnitAndValue<double>>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server
        public Task<System.String[]> GetV1DedicatedServerAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/server{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/availabilities
        public Task<_dedicated.Availabilities[]> GetV1DedicatedServerAvailabilitiesAsync(_nichandle.OvhSubsidiaryEnum country, [System.Runtime.InteropServices.OptionalAttribute()] System.String? hardware) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("country", country);
            queryParametersTemp.Add("hardware", hardware);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/server/availabilities{queryParameters}";
            return this.SendAsync<_dedicated.Availabilities[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/dedicated/server/availabilities/raw
        public Task<_dedicated.AvailabilitiesRaw[]> GetV1DedicatedServerAvailabilitiesRawAsync() {
            string uri = $"/v1/dedicated/server/availabilities/raw";
            return this.SendAsync<_dedicated.AvailabilitiesRaw[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/datacenter/availabilities
        public Task<_dedicated.DatacenterAvailability[]> GetV1DedicatedServerDatacenterAvailabilitiesAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? datacenters, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? excludeDatacenters, [System.Runtime.InteropServices.OptionalAttribute()] System.String? gpu, [System.Runtime.InteropServices.OptionalAttribute()] System.String? memory, [System.Runtime.InteropServices.OptionalAttribute()] System.String? planCode, [System.Runtime.InteropServices.OptionalAttribute()] System.String? server, [System.Runtime.InteropServices.OptionalAttribute()] System.String? storage, [System.Runtime.InteropServices.OptionalAttribute()] System.String? systemStorage) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("datacenters", datacenters);
            queryParametersTemp.Add("excludeDatacenters", excludeDatacenters);
            queryParametersTemp.Add("gpu", gpu);
            queryParametersTemp.Add("memory", memory);
            queryParametersTemp.Add("planCode", planCode);
            queryParametersTemp.Add("server", server);
            queryParametersTemp.Add("storage", storage);
            queryParametersTemp.Add("systemStorage", systemStorage);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/server/datacenter/availabilities{queryParameters}";
            return this.SendAsync<_dedicated.DatacenterAvailability[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/dedicated/server/datacenter/availabilities/raw
        public Task<_dedicated.DatacenterRawAvailability[]> GetV1DedicatedServerDatacenterAvailabilitiesRawAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? datacenters, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? excludeDatacenters, [System.Runtime.InteropServices.OptionalAttribute()] System.String? gpu, [System.Runtime.InteropServices.OptionalAttribute()] System.String? memory, [System.Runtime.InteropServices.OptionalAttribute()] System.String? planCode, [System.Runtime.InteropServices.OptionalAttribute()] System.String? server, [System.Runtime.InteropServices.OptionalAttribute()] System.String? storage, [System.Runtime.InteropServices.OptionalAttribute()] System.String? systemStorage) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("datacenters", datacenters);
            queryParametersTemp.Add("excludeDatacenters", excludeDatacenters);
            queryParametersTemp.Add("gpu", gpu);
            queryParametersTemp.Add("memory", memory);
            queryParametersTemp.Add("planCode", planCode);
            queryParametersTemp.Add("server", server);
            queryParametersTemp.Add("storage", storage);
            queryParametersTemp.Add("systemStorage", systemStorage);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/server/datacenter/availabilities/raw{queryParameters}";
            return this.SendAsync<_dedicated.DatacenterRawAvailability[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/log
        public Task<_dedicated.PublicLog> GetV1DedicatedServerLogAsync([System.Runtime.InteropServices.OptionalAttribute()] _dedicated.DatacenterEnum? datacenter, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? limit, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? page, [System.Runtime.InteropServices.OptionalAttribute()] System.String? server) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("datacenter", datacenter);
            queryParametersTemp.Add("limit", limit);
            queryParametersTemp.Add("page", page);
            queryParametersTemp.Add("server", server);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/server/log{queryParameters}";
            return this.SendAsync<_dedicated.PublicLog>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/osAvailabilities
        public Task<System.String[]> GetV1DedicatedServerOsAvailabilitiesAsync(string hardware) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("hardware", hardware);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/server/osAvailabilities{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/dedicated/server/region/availabilities
        public Task<_dedicated_server.RegionAvailability[]> GetV1DedicatedServerRegionAvailabilitiesAsync([System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? excludeRegions, [System.Runtime.InteropServices.OptionalAttribute()] System.String? gpu, [System.Runtime.InteropServices.OptionalAttribute()] System.String? memory, [System.Runtime.InteropServices.OptionalAttribute()] System.String? planCode, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_server.AvailabilityRegionalizationEnum[]? regions, [System.Runtime.InteropServices.OptionalAttribute()] System.String? server, [System.Runtime.InteropServices.OptionalAttribute()] System.String? storage, [System.Runtime.InteropServices.OptionalAttribute()] System.String? systemStorage) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("excludeRegions", excludeRegions);
            queryParametersTemp.Add("gpu", gpu);
            queryParametersTemp.Add("memory", memory);
            queryParametersTemp.Add("planCode", planCode);
            queryParametersTemp.Add("regions", regions);
            queryParametersTemp.Add("server", server);
            queryParametersTemp.Add("storage", storage);
            queryParametersTemp.Add("systemStorage", systemStorage);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/server/region/availabilities{queryParameters}";
            return this.SendAsync<_dedicated_server.RegionAvailability[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/virtualNetworkInterface/{uuid}
        public Task<_dedicated_server.VirtualNetworkInterface> GetV1DedicatedServerVirtualNetworkInterfaceUuidAsync(System.Guid uuid) {
            string uri = $"/v1/dedicated/server/virtualNetworkInterface/{uuid}";
            return this.SendAsync<_dedicated_server.VirtualNetworkInterface>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}
        public Task<_dedicated_server.DedicatedWithIAM> GetV1DedicatedServerServiceNameAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}";
            return this.SendAsync<_dedicated_server.DedicatedWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}
        public Task PutV1DedicatedServerServiceNameAsync(_dedicated_server.Dedicated _body, string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/authenticationSecret
        public Task<_dedicated_server.Access[]> PostV1DedicatedServerServiceNameAuthenticationSecretAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/authenticationSecret";
            return this.SendAsync<_dedicated_server.Access[]>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/backupCloudOfferDetails
        public Task<_dedicated_server_backup.BackupOffer> GetV1DedicatedServerServiceNameBackupCloudOfferDetailsAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/backupCloudOfferDetails";
            return this.SendAsync<_dedicated_server_backup.BackupOffer>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/biosSettings
        public Task<_dedicated_biosSettings.BiosSettings> GetV1DedicatedServerServiceNameBiosSettingsAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/biosSettings";
            return this.SendAsync<_dedicated_biosSettings.BiosSettings>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/biosSettings/sgx
        public Task<_dedicated_biosSettingsSgx.BiosSettingsSgx> GetV1DedicatedServerServiceNameBiosSettingsSgxAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/biosSettings/sgx";
            return this.SendAsync<_dedicated_biosSettingsSgx.BiosSettingsSgx>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/biosSettings/sgx/configure
        public Task<_dedicated_server.Task> PostV1DedicatedServerServiceNameBiosSettingsSgxConfigureAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_server.BiosSettingsSgxPrmrrEnum? prmrr, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_server.BiosSettingsSgxStatusEnum? status) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("prmrr", prmrr);
            _body.Add("status", status);
            string uri = $"/v1/dedicated/server/{serviceName}/biosSettings/sgx/configure";
            return this.SendAsync<_dedicated_server.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/boot
        public Task<System.Int64[]> GetV1DedicatedServerServiceNameBootAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_server.BootTypeEnum? bootType) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("bootType", bootType);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/server/{serviceName}/boot{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/boot/{bootId}
        public Task<_dedicated_server.Netboot> GetV1DedicatedServerServiceNameBootBootIdAsync(long bootId, string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/boot/{bootId}";
            return this.SendAsync<_dedicated_server.Netboot>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/boot/{bootId}/option
        public Task<_dedicated_server.BootOptionEnum[]> GetV1DedicatedServerServiceNameBootBootIdOptionAsync(long bootId, string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/boot/{bootId}/option";
            return this.SendAsync<_dedicated_server.BootOptionEnum[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/boot/{bootId}/option/{option}
        public Task<_dedicated_server.netbootOption> GetV1DedicatedServerServiceNameBootBootIdOptionOptionAsync(long bootId, _dedicated_server.BootOptionEnum option, string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/boot/{bootId}/option/{option}";
            return this.SendAsync<_dedicated_server.netbootOption>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/burst
        public Task<_dedicated_server.ServerBurst> GetV1DedicatedServerServiceNameBurstAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/burst";
            return this.SendAsync<_dedicated_server.ServerBurst>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/burst
        public Task PutV1DedicatedServerServiceNameBurstAsync(_dedicated_server.ServerBurst _body, string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/burst";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/changeContact
        public Task<System.Int64[]> PostV1DedicatedServerServiceNameChangeContactAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactTech) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("contactAdmin", contactAdmin);
            _body.Add("contactBilling", contactBilling);
            _body.Add("contactTech", contactTech);
            string uri = $"/v1/dedicated/server/{serviceName}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/confirmTermination
        public Task<System.String> PostV1DedicatedServerServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] System.String? commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum? futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum? reason) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("commentary", commentary);
            _body.Add("futureUse", futureUse);
            _body.Add("reason", reason);
            _body.Add("token", token);
            string uri = $"/v1/dedicated/server/{serviceName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/features/backupCloud
        public Task DeleteV1DedicatedServerServiceNameFeaturesBackupCloudAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/features/backupCloud";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/features/backupCloud
        public Task<_dedicated_server.BackupCloud> GetV1DedicatedServerServiceNameFeaturesBackupCloudAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/features/backupCloud";
            return this.SendAsync<_dedicated_server.BackupCloud>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/features/backupCloud
        public Task<_dedicated_server.BackupCloud> PostV1DedicatedServerServiceNameFeaturesBackupCloudAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? cloudProjectId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? projectDescription) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("cloudProjectId", cloudProjectId);
            _body.Add("projectDescription", projectDescription);
            string uri = $"/v1/dedicated/server/{serviceName}/features/backupCloud";
            return this.SendAsync<_dedicated_server.BackupCloud>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/features/backupCloud/password
        public Task<_dedicated_server_backup.BackupPassword> PostV1DedicatedServerServiceNameFeaturesBackupCloudPasswordAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/features/backupCloud/password";
            return this.SendAsync<_dedicated_server_backup.BackupPassword>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/features/backupFTP
        public Task<_dedicated_server.Task> DeleteV1DedicatedServerServiceNameFeaturesBackupFTPAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/features/backupFTP";
            return this.SendAsync<_dedicated_server.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/features/backupFTP
        public Task<_dedicated_server.BackupFtp> GetV1DedicatedServerServiceNameFeaturesBackupFTPAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/features/backupFTP";
            return this.SendAsync<_dedicated_server.BackupFtp>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/features/backupFTP
        public Task<_dedicated_server.Task> PostV1DedicatedServerServiceNameFeaturesBackupFTPAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/features/backupFTP";
            return this.SendAsync<_dedicated_server.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/features/backupFTP/access
        public Task<System.String[]> GetV1DedicatedServerServiceNameFeaturesBackupFTPAccessAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/features/backupFTP/access";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/features/backupFTP/access
        public Task<_dedicated_server.Task> PostV1DedicatedServerServiceNameFeaturesBackupFTPAccessAsync(bool cifs, string ipBlock, bool nfs, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? ftp) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("cifs", cifs);
            _body.Add("ftp", ftp);
            _body.Add("ipBlock", ipBlock);
            _body.Add("nfs", nfs);
            string uri = $"/v1/dedicated/server/{serviceName}/features/backupFTP/access";
            return this.SendAsync<_dedicated_server.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/features/backupFTP/access/{ipBlock}
        public Task<_dedicated_server.Task> DeleteV1DedicatedServerServiceNameFeaturesBackupFTPAccessIpBlockAsync(string ipBlock, string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/features/backupFTP/access/{ipBlock}";
            return this.SendAsync<_dedicated_server.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/features/backupFTP/access/{ipBlock}
        public Task<_dedicated_server.BackupFtpAcl> GetV1DedicatedServerServiceNameFeaturesBackupFTPAccessIpBlockAsync(string ipBlock, string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/features/backupFTP/access/{ipBlock}";
            return this.SendAsync<_dedicated_server.BackupFtpAcl>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/features/backupFTP/access/{ipBlock}
        public Task PutV1DedicatedServerServiceNameFeaturesBackupFTPAccessIpBlockAsync(_dedicated_server.BackupFtpAcl _body, string ipBlock, string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/features/backupFTP/access/{ipBlock}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/features/backupFTP/authorizableBlocks
        public Task<System.String[]> GetV1DedicatedServerServiceNameFeaturesBackupFTPAuthorizableBlocksAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/features/backupFTP/authorizableBlocks";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/features/backupFTP/password
        public Task<_dedicated_server.Task> PostV1DedicatedServerServiceNameFeaturesBackupFTPPasswordAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/features/backupFTP/password";
            return this.SendAsync<_dedicated_server.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/features/firewall
        public Task<_dedicated_server.Firewall> GetV1DedicatedServerServiceNameFeaturesFirewallAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/features/firewall";
            return this.SendAsync<_dedicated_server.Firewall>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/features/firewall
        public Task PutV1DedicatedServerServiceNameFeaturesFirewallAsync(_dedicated_server.Firewall _body, string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/features/firewall";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/features/ipmi
        public Task<_dedicated_server.Ipmi> GetV1DedicatedServerServiceNameFeaturesIpmiAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/features/ipmi";
            return this.SendAsync<_dedicated_server.Ipmi>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/features/ipmi/access
        public Task<_dedicated_server.IpmiAccessValue> GetV1DedicatedServerServiceNameFeaturesIpmiAccessAsync(string serviceName, _dedicated_server.IpmiAccessTypeEnum type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/server/{serviceName}/features/ipmi/access{queryParameters}";
            return this.SendAsync<_dedicated_server.IpmiAccessValue>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/features/ipmi/access
        public Task<_dedicated_server.Task> PostV1DedicatedServerServiceNameFeaturesIpmiAccessAsync(string serviceName, _dedicated_server.CacheTTLEnum ttl, _dedicated_server.IpmiAccessTypeEnum type, [System.Runtime.InteropServices.OptionalAttribute()] System.String? ipToAllow, [System.Runtime.InteropServices.OptionalAttribute()] System.String? sshKey) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("ipToAllow", ipToAllow);
            _body.Add("sshKey", sshKey);
            _body.Add("ttl", ttl);
            _body.Add("type", type);
            string uri = $"/v1/dedicated/server/{serviceName}/features/ipmi/access";
            return this.SendAsync<_dedicated_server.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/features/ipmi/resetInterface
        public Task<_dedicated_server.Task> PostV1DedicatedServerServiceNameFeaturesIpmiResetInterfaceAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/features/ipmi/resetInterface";
            return this.SendAsync<_dedicated_server.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/features/ipmi/resetSessions
        public Task<_dedicated_server.Task> PostV1DedicatedServerServiceNameFeaturesIpmiResetSessionsAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/features/ipmi/resetSessions";
            return this.SendAsync<_dedicated_server.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/features/ipmi/test
        public Task<_dedicated_server.IpmiTestResult> GetV1DedicatedServerServiceNameFeaturesIpmiTestAsync(string serviceName, _dedicated_server.IpmiTestTypeEnum type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/server/{serviceName}/features/ipmi/test{queryParameters}";
            return this.SendAsync<_dedicated_server.IpmiTestResult>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/features/ipmi/test
        public Task<_dedicated_server.Task> PostV1DedicatedServerServiceNameFeaturesIpmiTestAsync(string serviceName, _dedicated_server.CacheTTLEnum ttl, _dedicated_server.IpmiTestTypeEnum type) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("ttl", ttl);
            _body.Add("type", type);
            string uri = $"/v1/dedicated/server/{serviceName}/features/ipmi/test";
            return this.SendAsync<_dedicated_server.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/features/kvm
        public Task<_dedicated_server.kvm> GetV1DedicatedServerServiceNameFeaturesKvmAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/features/kvm";
            return this.SendAsync<_dedicated_server.kvm>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/install/compatibleTemplatePartitionSchemes
        public Task<System.String[]> GetV1DedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemesAsync(string serviceName, string templateName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("templateName", templateName);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/server/{serviceName}/install/compatibleTemplatePartitionSchemes{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/install/compatibleTemplates
        public Task<_dedicated_server.InstallTemplate> GetV1DedicatedServerServiceNameInstallCompatibleTemplatesAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/install/compatibleTemplates";
            return this.SendAsync<_dedicated_server.InstallTemplate>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/install/hardwareRaidProfile
        public Task<_dedicated_server.HardwareRaidProfile> GetV1DedicatedServerServiceNameInstallHardwareRaidProfileAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/install/hardwareRaidProfile";
            return this.SendAsync<_dedicated_server.HardwareRaidProfile>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/install/hardwareRaidSize
        public Task<_dedicated_server.HardwareRaidSize> GetV1DedicatedServerServiceNameInstallHardwareRaidSizeAsync(string partitionSchemeName, string serviceName, string templateName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("partitionSchemeName", partitionSchemeName);
            queryParametersTemp.Add("templateName", templateName);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/server/{serviceName}/install/hardwareRaidSize{queryParameters}";
            return this.SendAsync<_dedicated_server.HardwareRaidSize>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/install/start
        public Task<_dedicated_server.Task> PostV1DedicatedServerServiceNameInstallStartAsync(string serviceName, string templateName, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_server.InstallCustom? details, [System.Runtime.InteropServices.OptionalAttribute()] System.String? partitionSchemeName, [System.Runtime.InteropServices.OptionalAttribute()] _complexType.SafeKeyValue<string>? userMetadata) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("details", details);
            _body.Add("partitionSchemeName", partitionSchemeName);
            _body.Add("templateName", templateName);
            _body.Add("userMetadata", userMetadata);
            string uri = $"/v1/dedicated/server/{serviceName}/install/start";
            return this.SendAsync<_dedicated_server.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/install/status
        public Task<_dedicated_server.InstallationProgressStatus> GetV1DedicatedServerServiceNameInstallStatusAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/install/status";
            return this.SendAsync<_dedicated_server.InstallationProgressStatus>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/intervention
        public Task<System.Int64[]> GetV1DedicatedServerServiceNameInterventionAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/intervention";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/intervention/{interventionId}
        public Task<_dedicated_server.Intervention> GetV1DedicatedServerServiceNameInterventionInterventionIdAsync(long interventionId, string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/intervention/{interventionId}";
            return this.SendAsync<_dedicated_server.Intervention>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/ipBlockMerge
        public Task<_dedicated_server.Task> PostV1DedicatedServerServiceNameIpBlockMergeAsync(string block, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("block", block);
            string uri = $"/v1/dedicated/server/{serviceName}/ipBlockMerge";
            return this.SendAsync<_dedicated_server.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/ipCanBeMovedTo
        public Task GetV1DedicatedServerServiceNameIpCanBeMovedToAsync(string ip, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ip", ip);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/server/{serviceName}/ipCanBeMovedTo{queryParameters}";
            return this.SendAsync("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/ipCountryAvailable
        public Task<_dedicated_server.IpCountryEnum[]> GetV1DedicatedServerServiceNameIpCountryAvailableAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/ipCountryAvailable";
            return this.SendAsync<_dedicated_server.IpCountryEnum[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/ipMove
        public Task<_dedicated_server.Task> PostV1DedicatedServerServiceNameIpMoveAsync(string ip, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("ip", ip);
            string uri = $"/v1/dedicated/server/{serviceName}/ipMove";
            return this.SendAsync<_dedicated_server.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/ips
        public Task<System.String[]> GetV1DedicatedServerServiceNameIpsAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/ips";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/license/compliantWindows
        public Task<_license.WindowsOsVersionEnum[]> GetV1DedicatedServerServiceNameLicenseCompliantWindowsAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/license/compliantWindows";
            return this.SendAsync<_license.WindowsOsVersionEnum[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/license/compliantWindowsSqlServer
        public Task<_license.WindowsSqlVersionEnum[]> GetV1DedicatedServerServiceNameLicenseCompliantWindowsSqlServerAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/license/compliantWindowsSqlServer";
            return this.SendAsync<_license.WindowsSqlVersionEnum[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/license/windows
        public Task<_dedicated_server.Task> PostV1DedicatedServerServiceNameLicenseWindowsAsync(string licenseId, string serviceName, _license.WindowsOsVersionEnum version) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("licenseId", licenseId);
            _body.Add("version", version);
            string uri = $"/v1/dedicated/server/{serviceName}/license/windows";
            return this.SendAsync<_dedicated_server.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/mrtg
        public Task<_dedicated_server.MrtgTimestampValue[]> GetV1DedicatedServerServiceNameMrtgAsync(_dedicated_server.MrtgPeriodEnum period, string serviceName, _dedicated_server.MrtgTypeEnum type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("period", period);
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/server/{serviceName}/mrtg{queryParameters}";
            return this.SendAsync<_dedicated_server.MrtgTimestampValue[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/networkInterfaceController
        public Task<System.String[]> GetV1DedicatedServerServiceNameNetworkInterfaceControllerAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_networkInterfaceController.NetworkInterfaceControllerLinkTypeEnum? linkType) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("linkType", linkType);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/server/{serviceName}/networkInterfaceController{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/networkInterfaceController/{mac}
        public Task<_dedicated_networkInterfaceController.NetworkInterfaceController> GetV1DedicatedServerServiceNameNetworkInterfaceControllerMacAsync(string mac, string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/networkInterfaceController/{mac}";
            return this.SendAsync<_dedicated_networkInterfaceController.NetworkInterfaceController>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/networkInterfaceController/{mac}/mrtg
        public Task<_dedicated_server.MrtgTimestampValue[]> GetV1DedicatedServerServiceNameNetworkInterfaceControllerMacMrtgAsync(string mac, _dedicated_server.MrtgPeriodEnum period, string serviceName, _dedicated_server.MrtgTypeEnum type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("period", period);
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/server/{serviceName}/networkInterfaceController/{mac}/mrtg{queryParameters}";
            return this.SendAsync<_dedicated_server.MrtgTimestampValue[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/ola/aggregation
        public Task<_dedicated_server.Task> PostV1DedicatedServerServiceNameOlaAggregationAsync(string name, string serviceName, System.Guid[] virtualNetworkInterfaces) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("name", name);
            _body.Add("virtualNetworkInterfaces", virtualNetworkInterfaces);
            string uri = $"/v1/dedicated/server/{serviceName}/ola/aggregation";
            return this.SendAsync<_dedicated_server.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/ola/group
        public Task<_dedicated_server.Task> PostV1DedicatedServerServiceNameOlaGroupAsync(string name, string serviceName, System.Guid[] virtualNetworkInterfaces) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("name", name);
            _body.Add("virtualNetworkInterfaces", virtualNetworkInterfaces);
            string uri = $"/v1/dedicated/server/{serviceName}/ola/group";
            return this.SendAsync<_dedicated_server.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/ola/reset
        public Task<_dedicated_server.Task> PostV1DedicatedServerServiceNameOlaResetAsync(string serviceName, System.Guid virtualNetworkInterface) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("virtualNetworkInterface", virtualNetworkInterface);
            string uri = $"/v1/dedicated/server/{serviceName}/ola/reset";
            return this.SendAsync<_dedicated_server.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/ola/ungroup
        public Task<_dedicated_server.Task[]> PostV1DedicatedServerServiceNameOlaUngroupAsync(string serviceName, System.Guid virtualNetworkInterface) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("virtualNetworkInterface", virtualNetworkInterface);
            string uri = $"/v1/dedicated/server/{serviceName}/ola/ungroup";
            return this.SendAsync<_dedicated_server.Task[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/ongoing
        public Task<_dedicated.ExposedTask[]> GetV1DedicatedServerServiceNameOngoingAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/ongoing";
            return this.SendAsync<_dedicated.ExposedTask[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/option
        public Task<_dedicated_server.OptionEnum[]> GetV1DedicatedServerServiceNameOptionAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/option";
            return this.SendAsync<_dedicated_server.OptionEnum[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/option/{option}
        public Task DeleteV1DedicatedServerServiceNameOptionOptionAsync(_dedicated_server.OptionEnum option, string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/option/{option}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/option/{option}
        public Task<_dedicated_server.Option> GetV1DedicatedServerServiceNameOptionOptionAsync(_dedicated_server.OptionEnum option, string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/option/{option}";
            return this.SendAsync<_dedicated_server.Option>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/orderable/backupStorage
        public Task<_dedicated_server.BackupStorageOrderable> GetV1DedicatedServerServiceNameOrderableBackupStorageAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/orderable/backupStorage";
            return this.SendAsync<_dedicated_server.BackupStorageOrderable>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/orderable/bandwidth
        public Task<_dedicated_server.BandwidthOrderable> GetV1DedicatedServerServiceNameOrderableBandwidthAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/orderable/bandwidth";
            return this.SendAsync<_dedicated_server.BandwidthOrderable>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/orderable/bandwidthvRack
        public Task<_dedicated_server.BandwidthvRackOrderable> GetV1DedicatedServerServiceNameOrderableBandwidthvRackAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/orderable/bandwidthvRack";
            return this.SendAsync<_dedicated_server.BandwidthvRackOrderable>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/orderable/feature
        public Task<System.Boolean> GetV1DedicatedServerServiceNameOrderableFeatureAsync(_dedicated_server.OrderableSysFeatureEnum feature, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("feature", feature);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/server/{serviceName}/orderable/feature{queryParameters}";
            return this.SendAsync<bool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/orderable/ip
        public Task<_dedicated_server.IpOrderable> GetV1DedicatedServerServiceNameOrderableIpAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/orderable/ip";
            return this.SendAsync<_dedicated_server.IpOrderable>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/orderable/kvm
        public Task<System.Boolean> GetV1DedicatedServerServiceNameOrderableKvmAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/orderable/kvm";
            return this.SendAsync<bool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/orderable/kvmExpress
        public Task<System.Boolean> GetV1DedicatedServerServiceNameOrderableKvmExpressAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/orderable/kvmExpress";
            return this.SendAsync<bool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/orderable/professionalUse
        public Task<System.Boolean> GetV1DedicatedServerServiceNameOrderableProfessionalUseAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/orderable/professionalUse";
            return this.SendAsync<bool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/orderable/traffic
        public Task<_dedicated_server.TrafficOrderable> GetV1DedicatedServerServiceNameOrderableTrafficAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/orderable/traffic";
            return this.SendAsync<_dedicated_server.TrafficOrderable>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/orderable/usbKey
        public Task<_dedicated_server.UsbKeyOrderableDetails> GetV1DedicatedServerServiceNameOrderableUsbKeyAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/orderable/usbKey";
            return this.SendAsync<_dedicated_server.UsbKeyOrderableDetails>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/plannedIntervention
        public Task<System.Int64[]> GetV1DedicatedServerServiceNamePlannedInterventionAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/plannedIntervention";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/plannedIntervention/{interventionId}
        public Task<_dedicated_server.PlannedIntervention> GetV1DedicatedServerServiceNamePlannedInterventionInterventionIdAsync(long interventionId, string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/plannedIntervention/{interventionId}";
            return this.SendAsync<_dedicated_server.PlannedIntervention>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/reboot
        public Task<_dedicated_server.Task> PostV1DedicatedServerServiceNameRebootAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/reboot";
            return this.SendAsync<_dedicated_server.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/secondaryDnsDomains
        public Task<System.String[]> GetV1DedicatedServerServiceNameSecondaryDnsDomainsAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/secondaryDnsDomains";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/secondaryDnsDomains
        public Task PostV1DedicatedServerServiceNameSecondaryDnsDomainsAsync(string domain, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? ip) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("domain", domain);
            _body.Add("ip", ip);
            string uri = $"/v1/dedicated/server/{serviceName}/secondaryDnsDomains";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/secondaryDnsDomains/{domain}
        public Task DeleteV1DedicatedServerServiceNameSecondaryDnsDomainsDomainAsync(string domain, string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/secondaryDnsDomains/{domain}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/secondaryDnsDomains/{domain}
        public Task<_secondaryDns.SecondaryDNS> GetV1DedicatedServerServiceNameSecondaryDnsDomainsDomainAsync(string domain, string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/secondaryDnsDomains/{domain}";
            return this.SendAsync<_secondaryDns.SecondaryDNS>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/secondaryDnsDomains/{domain}
        public Task PutV1DedicatedServerServiceNameSecondaryDnsDomainsDomainAsync(_secondaryDns.SecondaryDNS _body, string domain, string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/secondaryDnsDomains/{domain}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/secondaryDnsDomains/{domain}/dnsServer
        public Task<_secondaryDns.SecondaryDNSNameServer> GetV1DedicatedServerServiceNameSecondaryDnsDomainsDomainDnsServerAsync(string domain, string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/secondaryDnsDomains/{domain}/dnsServer";
            return this.SendAsync<_secondaryDns.SecondaryDNSNameServer>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/secondaryDnsNameDomainToken
        public Task<_secondaryDns.SecondaryDNSCheckField> GetV1DedicatedServerServiceNameSecondaryDnsNameDomainTokenAsync(string domain, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("domain", domain);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/server/{serviceName}/secondaryDnsNameDomainToken{queryParameters}";
            return this.SendAsync<_secondaryDns.SecondaryDNSCheckField>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/secondaryDnsNameServerAvailable
        public Task<_secondaryDns.SecondaryDNSNameServer> GetV1DedicatedServerServiceNameSecondaryDnsNameServerAvailableAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/secondaryDnsNameServerAvailable";
            return this.SendAsync<_secondaryDns.SecondaryDNSNameServer>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1DedicatedServerServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/serviceInfos
        public Task PutV1DedicatedServerServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/specifications/hardware
        public Task<_dedicated_server.HardwareSpecifications> GetV1DedicatedServerServiceNameSpecificationsHardwareAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/specifications/hardware";
            return this.SendAsync<_dedicated_server.HardwareSpecifications>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/specifications/ip
        public Task<_dedicated_server.IpOrderable> GetV1DedicatedServerServiceNameSpecificationsIpAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/specifications/ip";
            return this.SendAsync<_dedicated_server.IpOrderable>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/specifications/network
        public Task<_dedicated_server.NetworkSpecifications> GetV1DedicatedServerServiceNameSpecificationsNetworkAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/specifications/network";
            return this.SendAsync<_dedicated_server.NetworkSpecifications>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/spla
        public Task<System.Int64[]> GetV1DedicatedServerServiceNameSplaAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_server.SplaStatusEnum? status, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_server.SplaTypeEnum? type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("status", status);
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/server/{serviceName}/spla{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/spla
        public Task<System.Int64> PostV1DedicatedServerServiceNameSplaAsync(string serialNumber, string serviceName, _dedicated_server.SplaTypeEnum type) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("serialNumber", serialNumber);
            _body.Add("type", type);
            string uri = $"/v1/dedicated/server/{serviceName}/spla";
            return this.SendAsync<long>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/spla/{id}
        public Task<_dedicated_server.spla> GetV1DedicatedServerServiceNameSplaIdAsync(long id, string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/spla/{id}";
            return this.SendAsync<_dedicated_server.spla>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/spla/{id}
        public Task PutV1DedicatedServerServiceNameSplaIdAsync(_dedicated_server.spla _body, long id, string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/spla/{id}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/spla/{id}/revoke
        public Task PostV1DedicatedServerServiceNameSplaIdRevokeAsync(long id, string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/spla/{id}/revoke";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/support/replace/cooling
        public Task<_support.NewMessageInfo> PostV1DedicatedServerServiceNameSupportReplaceCoolingAsync(string comment, string details, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("comment", comment);
            _body.Add("details", details);
            string uri = $"/v1/dedicated/server/{serviceName}/support/replace/cooling";
            return this.SendAsync<_support.NewMessageInfo>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/support/replace/hardDiskDrive
        public Task<_support.NewMessageInfo> PostV1DedicatedServerServiceNameSupportReplaceHardDiskDriveAsync(string comment, _dedicated_server.SupportReplaceHddInfo[] disks, bool inverse, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("comment", comment);
            _body.Add("disks", disks);
            _body.Add("inverse", inverse);
            string uri = $"/v1/dedicated/server/{serviceName}/support/replace/hardDiskDrive";
            return this.SendAsync<_support.NewMessageInfo>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/support/replace/memory
        public Task<_support.NewMessageInfo> PostV1DedicatedServerServiceNameSupportReplaceMemoryAsync(string comment, string details, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? slots) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("comment", comment);
            _body.Add("details", details);
            _body.Add("slots", slots);
            string uri = $"/v1/dedicated/server/{serviceName}/support/replace/memory";
            return this.SendAsync<_support.NewMessageInfo>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/task
        public Task<System.Int64[]> GetV1DedicatedServerServiceNameTaskAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated.TaskFunctionEnum? function, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated.TaskStatusEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("function", function);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/server/{serviceName}/task{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/task/{taskId}
        public Task<_dedicated_server.Task> GetV1DedicatedServerServiceNameTaskTaskIdAsync(string serviceName, long taskId) {
            string uri = $"/v1/dedicated/server/{serviceName}/task/{taskId}";
            return this.SendAsync<_dedicated_server.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/task/{taskId}/availableTimeslots
        public Task<_dedicated.PlannedInterventionTimeSlot[]> GetV1DedicatedServerServiceNameTaskTaskIdAvailableTimeslotsAsync(System.DateOnly periodEnd, System.DateOnly periodStart, string serviceName, long taskId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("periodEnd", periodEnd);
            queryParametersTemp.Add("periodStart", periodStart);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/server/{serviceName}/task/{taskId}/availableTimeslots{queryParameters}";
            return this.SendAsync<_dedicated.PlannedInterventionTimeSlot[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/task/{taskId}/cancel
        public Task PostV1DedicatedServerServiceNameTaskTaskIdCancelAsync(string serviceName, long taskId) {
            string uri = $"/v1/dedicated/server/{serviceName}/task/{taskId}/cancel";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/task/{taskId}/schedule
        public Task PostV1DedicatedServerServiceNameTaskTaskIdScheduleAsync(bool hasPerformedBackup, string serviceName, long taskId, System.DateTime wantedBeginingDate) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("hasPerformedBackup", hasPerformedBackup);
            _body.Add("wantedBeginingDate", wantedBeginingDate);
            string uri = $"/v1/dedicated/server/{serviceName}/task/{taskId}/schedule";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/terminate
        public Task<System.String> PostV1DedicatedServerServiceNameTerminateAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/virtualMac
        public Task<System.String[]> GetV1DedicatedServerServiceNameVirtualMacAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/virtualMac";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/virtualMac
        public Task<_dedicated_server.Task> PostV1DedicatedServerServiceNameVirtualMacAsync(string ipAddress, string serviceName, _dedicated_server.VmacTypeEnum type, string virtualMachineName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("ipAddress", ipAddress);
            _body.Add("type", type);
            _body.Add("virtualMachineName", virtualMachineName);
            string uri = $"/v1/dedicated/server/{serviceName}/virtualMac";
            return this.SendAsync<_dedicated_server.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/virtualMac/{macAddress}
        public Task<_dedicated_server.VirtualMac> GetV1DedicatedServerServiceNameVirtualMacMacAddressAsync(string macAddress, string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/virtualMac/{macAddress}";
            return this.SendAsync<_dedicated_server.VirtualMac>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/virtualMac/{macAddress}/virtualAddress
        public Task<System.String[]> GetV1DedicatedServerServiceNameVirtualMacMacAddressVirtualAddressAsync(string macAddress, string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/virtualMac/{macAddress}/virtualAddress";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/virtualMac/{macAddress}/virtualAddress
        public Task<_dedicated_server.Task> PostV1DedicatedServerServiceNameVirtualMacMacAddressVirtualAddressAsync(string ipAddress, string macAddress, string serviceName, string virtualMachineName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("ipAddress", ipAddress);
            _body.Add("virtualMachineName", virtualMachineName);
            string uri = $"/v1/dedicated/server/{serviceName}/virtualMac/{macAddress}/virtualAddress";
            return this.SendAsync<_dedicated_server.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/virtualMac/{macAddress}/virtualAddress/{ipAddress}
        public Task<_dedicated_server.Task> DeleteV1DedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddressAsync(string ipAddress, string macAddress, string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/virtualMac/{macAddress}/virtualAddress/{ipAddress}";
            return this.SendAsync<_dedicated_server.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/virtualMac/{macAddress}/virtualAddress/{ipAddress}
        public Task<_dedicated_server.VirtualMacManagement> GetV1DedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddressAsync(string ipAddress, string macAddress, string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/virtualMac/{macAddress}/virtualAddress/{ipAddress}";
            return this.SendAsync<_dedicated_server.VirtualMacManagement>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/virtualNetworkInterface
        public Task<System.Guid[]> GetV1DedicatedServerServiceNameVirtualNetworkInterfaceAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? enabled, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_virtualNetworkInterface.VirtualNetworkInterfaceModeEnum? mode, [System.Runtime.InteropServices.OptionalAttribute()] System.String? name, [System.Runtime.InteropServices.OptionalAttribute()] System.String? vrack) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("enabled", enabled);
            queryParametersTemp.Add("mode", mode);
            queryParametersTemp.Add("name", name);
            queryParametersTemp.Add("vrack", vrack);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/server/{serviceName}/virtualNetworkInterface{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/virtualNetworkInterface/{uuid}
        public Task<_dedicated_virtualNetworkInterface.VirtualNetworkInterface> GetV1DedicatedServerServiceNameVirtualNetworkInterfaceUuidAsync(string serviceName, System.Guid uuid) {
            string uri = $"/v1/dedicated/server/{serviceName}/virtualNetworkInterface/{uuid}";
            return this.SendAsync<_dedicated_virtualNetworkInterface.VirtualNetworkInterface>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/virtualNetworkInterface/{uuid}
        public Task PutV1DedicatedServerServiceNameVirtualNetworkInterfaceUuidAsync(_dedicated_virtualNetworkInterface.VirtualNetworkInterface _body, string serviceName, System.Guid uuid) {
            string uri = $"/v1/dedicated/server/{serviceName}/virtualNetworkInterface/{uuid}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/virtualNetworkInterface/{uuid}/disable
        public Task<_dedicated_server.Task> PostV1DedicatedServerServiceNameVirtualNetworkInterfaceUuidDisableAsync(string serviceName, System.Guid uuid) {
            string uri = $"/v1/dedicated/server/{serviceName}/virtualNetworkInterface/{uuid}/disable";
            return this.SendAsync<_dedicated_server.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/virtualNetworkInterface/{uuid}/enable
        public Task<_dedicated_server.Task> PostV1DedicatedServerServiceNameVirtualNetworkInterfaceUuidEnableAsync(string serviceName, System.Guid uuid) {
            string uri = $"/v1/dedicated/server/{serviceName}/virtualNetworkInterface/{uuid}/enable";
            return this.SendAsync<_dedicated_server.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/vrack
        public Task<System.String[]> GetV1DedicatedServerServiceNameVrackAsync(string serviceName) {
            string uri = $"/v1/dedicated/server/{serviceName}/vrack";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/vrack/{vrack}
        public Task<_vrack.Task> DeleteV1DedicatedServerServiceNameVrackVrackAsync(string serviceName, string vrack) {
            string uri = $"/v1/dedicated/server/{serviceName}/vrack/{vrack}";
            return this.SendAsync<_vrack.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/vrack/{vrack}
        public Task<_vrack.dedicatedServer> GetV1DedicatedServerServiceNameVrackVrackAsync(string serviceName, string vrack) {
            string uri = $"/v1/dedicated/server/{serviceName}/vrack/{vrack}";
            return this.SendAsync<_vrack.dedicatedServer>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicated/server/{serviceName}/vrack/{vrack}/mrtg
        public Task<_dedicated_server.MrtgTimestampValue[]> GetV1DedicatedServerServiceNameVrackVrackMrtgAsync(_dedicated_server.MrtgPeriodEnum period, string serviceName, _dedicated_server.MrtgTypeEnum type, string vrack) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("period", period);
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicated/server/{serviceName}/vrack/{vrack}/mrtg{queryParameters}";
            return this.SendAsync<_dedicated_server.MrtgTimestampValue[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud
        public Task<System.String[]> GetV1DedicatedCloudAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicatedCloud{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/commercialRange
        public Task<System.String[]> GetV1DedicatedCloudCommercialRangeAsync() {
            string uri = $"/v1/dedicatedCloud/commercialRange";
            return this.SendAsync<string[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/dedicatedCloud/commercialRange/{commercialRangeName}
        public Task<_dedicatedCloud.CommercialRange> GetV1DedicatedCloudCommercialRangeCommercialRangeNameAsync(string commercialRangeName) {
            string uri = $"/v1/dedicatedCloud/commercialRange/{commercialRangeName}";
            return this.SendAsync<_dedicatedCloud.CommercialRange>("GET", uri, null, null, false);
        }
        
        // Path: /v1/dedicatedCloud/location
        public Task<System.String[]> GetV1DedicatedCloudLocationAsync() {
            string uri = $"/v1/dedicatedCloud/location";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/location/{pccZone}
        public Task<_dedicatedCloud.PccZone> GetV1DedicatedCloudLocationPccZoneAsync(string pccZone) {
            string uri = $"/v1/dedicatedCloud/location/{pccZone}";
            return this.SendAsync<_dedicatedCloud.PccZone>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/location/{pccZone}/hostProfile
        public Task<System.Int64[]> GetV1DedicatedCloudLocationPccZoneHostProfileAsync(string pccZone) {
            string uri = $"/v1/dedicatedCloud/location/{pccZone}/hostProfile";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/location/{pccZone}/hostProfile/{id}
        public Task<_dedicatedCloud.HostProfile> GetV1DedicatedCloudLocationPccZoneHostProfileIdAsync(long id, string pccZone) {
            string uri = $"/v1/dedicatedCloud/location/{pccZone}/hostProfile/{id}";
            return this.SendAsync<_dedicatedCloud.HostProfile>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/location/{pccZone}/hypervisor
        public Task<System.String[]> GetV1DedicatedCloudLocationPccZoneHypervisorAsync(string pccZone) {
            string uri = $"/v1/dedicatedCloud/location/{pccZone}/hypervisor";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/location/{pccZone}/hypervisor/{shortName}
        public Task<_dedicatedCloud.Os> GetV1DedicatedCloudLocationPccZoneHypervisorShortNameAsync(string pccZone, string shortName) {
            string uri = $"/v1/dedicatedCloud/location/{pccZone}/hypervisor/{shortName}";
            return this.SendAsync<_dedicatedCloud.Os>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/location/{pccZone}/stock/host
        public Task<_dedicatedCloud.HostStockProfile[]> GetV1DedicatedCloudLocationPccZoneStockHostAsync(string pccZone, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? minYear) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("minYear", minYear);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicatedCloud/location/{pccZone}/stock/host{queryParameters}";
            return this.SendAsync<_dedicatedCloud.HostStockProfile[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/location/{pccZone}/stock/pcc
        public Task<_dedicatedCloud.PccStockProfile[]> GetV1DedicatedCloudLocationPccZoneStockPccAsync(string pccZone) {
            string uri = $"/v1/dedicatedCloud/location/{pccZone}/stock/pcc";
            return this.SendAsync<_dedicatedCloud.PccStockProfile[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/location/{pccZone}/stock/zpool
        public Task<_dedicatedCloud.ZpoolStockProfile[]> GetV1DedicatedCloudLocationPccZoneStockZpoolAsync(string pccZone, [System.Runtime.InteropServices.OptionalAttribute()] System.String? profileFilter) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("profileFilter", profileFilter);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicatedCloud/location/{pccZone}/stock/zpool{queryParameters}";
            return this.SendAsync<_dedicatedCloud.ZpoolStockProfile[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}
        public Task<_dedicatedCloud.dedicatedCloudWithIAM> GetV1DedicatedCloudServiceNameAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}";
            return this.SendAsync<_dedicatedCloud.dedicatedCloudWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}
        public Task<_dedicatedCloud.Task> PutV1DedicatedCloudServiceNameAsync(_dedicatedCloud.dedicatedCloud _body, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}";
            return this.SendAsync<_dedicatedCloud.Task>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/allowedNetwork
        public Task<System.Int64[]> GetV1DedicatedCloudServiceNameAllowedNetworkAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/allowedNetwork";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/allowedNetwork
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameAllowedNetworkAsync(string network, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? description) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("description", description);
            _body.Add("network", network);
            string uri = $"/v1/dedicatedCloud/{serviceName}/allowedNetwork";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}
        public Task<_dedicatedCloud.Task> DeleteV1DedicatedCloudServiceNameAllowedNetworkNetworkAccessIdAsync(long networkAccessId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}";
            return this.SendAsync<_dedicatedCloud.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}
        public Task<_dedicatedCloud.AllowedNetwork> GetV1DedicatedCloudServiceNameAllowedNetworkNetworkAccessIdAsync(long networkAccessId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}";
            return this.SendAsync<_dedicatedCloud.AllowedNetwork>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}
        public Task<_dedicatedCloud.Task> PutV1DedicatedCloudServiceNameAllowedNetworkNetworkAccessIdAsync(_dedicatedCloud.AllowedNetwork _body, long networkAccessId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}";
            return this.SendAsync<_dedicatedCloud.Task>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}/task
        public Task<System.Int64[]> GetV1DedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskAsync(long networkAccessId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? name, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud.TaskStateEnum? state) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("name", name);
            queryParametersTemp.Add("state", state);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}/task{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}/task/{taskId}
        public Task<_dedicatedCloud.Task> GetV1DedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdAsync(long networkAccessId, string serviceName, long taskId) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}/task/{taskId}";
            return this.SendAsync<_dedicatedCloud.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}/task/{taskId}/changeMaintenanceExecutionDate
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdChangeMaintenanceExecutionDateAsync(System.DateTime executionDate, long networkAccessId, string serviceName, long taskId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("executionDate", executionDate);
            string uri = $"/v1/dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}/task/{taskId}/changeMaintenanceExecutionDate";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}/task/{taskId}/resetTaskState
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdResetTaskStateAsync(long networkAccessId, string reason, string serviceName, long taskId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("reason", reason);
            string uri = $"/v1/dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}/task/{taskId}/resetTaskState";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/backupRepository
        public Task<System.Int64[]> GetV1DedicatedCloudServiceNameBackupRepositoryAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/backupRepository";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/backupRepository/{repositoryId}
        public Task<_dedicatedCloud.BackupRepository> GetV1DedicatedCloudServiceNameBackupRepositoryRepositoryIdAsync(long repositoryId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/backupRepository/{repositoryId}";
            return this.SendAsync<_dedicatedCloud.BackupRepository>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/canDeployNsxtEdgesOnGlobalDatastores
        public Task<System.Boolean> GetV1DedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastoresAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? count, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud_nsxt.NsxtEdgeSizeEnum? size) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("count", count);
            queryParametersTemp.Add("size", size);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicatedCloud/{serviceName}/canDeployNsxtEdgesOnGlobalDatastores{queryParameters}";
            return this.SendAsync<bool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/capabilities
        public Task<_dedicatedCloud.Capabilities> GetV1DedicatedCloudServiceNameCapabilitiesAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/capabilities";
            return this.SendAsync<_dedicatedCloud.Capabilities>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/changeContact
        public Task<System.Int64[]> PostV1DedicatedCloudServiceNameChangeContactAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactTech) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("contactAdmin", contactAdmin);
            _body.Add("contactBilling", contactBilling);
            _body.Add("contactTech", contactTech);
            string uri = $"/v1/dedicatedCloud/{serviceName}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/changeProperties
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameChangePropertiesAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? description, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? sslV3, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud.UserAccessPolicyEnum? userAccessPolicy, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? userLimitConcurrentSession, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud.UserLogoutPolicyEnum? userLogoutPolicy, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? userSessionTimeout) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("description", description);
            _body.Add("sslV3", sslV3);
            _body.Add("userAccessPolicy", userAccessPolicy);
            _body.Add("userLimitConcurrentSession", userLimitConcurrentSession);
            _body.Add("userLogoutPolicy", userLogoutPolicy);
            _body.Add("userSessionTimeout", userSessionTimeout);
            string uri = $"/v1/dedicatedCloud/{serviceName}/changeProperties";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/commercialRange/compliance
        public Task<_dedicatedCloud.compliantRanges[]> GetV1DedicatedCloudServiceNameCommercialRangeComplianceAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/commercialRange/compliance";
            return this.SendAsync<_dedicatedCloud.compliantRanges[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/commercialRange/orderable
        public Task<System.String[]> GetV1DedicatedCloudServiceNameCommercialRangeOrderableAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/commercialRange/orderable";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/confirmTermination
        public Task<System.String> PostV1DedicatedCloudServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] System.String? commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum? futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum? reason) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("commentary", commentary);
            _body.Add("futureUse", futureUse);
            _body.Add("reason", reason);
            _body.Add("token", token);
            string uri = $"/v1/dedicatedCloud/{serviceName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter
        public Task<System.Int64[]> GetV1DedicatedCloudServiceNameDatacenterAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterAsync(string commercialRangeName, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? vrackName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("commercialRangeName", commercialRangeName);
            _body.Add("vrackName", vrackName);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}
        public Task<_dedicatedCloud.Task> DeleteV1DedicatedCloudServiceNameDatacenterDatacenterIdAsync(long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}";
            return this.SendAsync<_dedicatedCloud.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}
        public Task<_dedicatedCloud.Datacenter> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdAsync(long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}";
            return this.SendAsync<_dedicatedCloud.Datacenter>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}
        public Task<_dedicatedCloud.Task> PutV1DedicatedCloudServiceNameDatacenterDatacenterIdAsync(_dedicatedCloud.Datacenter _body, long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}";
            return this.SendAsync<_dedicatedCloud.Task>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup
        public Task<_dedicatedCloud.Backup> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdBackupAsync(long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup";
            return this.SendAsync<_dedicatedCloud.Backup>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/batchRestore
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdBackupBatchRestoreAsync(string backupRepositoryName, long datacenterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? backupJobName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("backupJobName", backupJobName);
            _body.Add("backupRepositoryName", backupRepositoryName);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/batchRestore";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/canOptimizeProxies
        public Task<_dedicatedCloud_backup.OptimizeProxies> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdBackupCanOptimizeProxiesAsync(long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/canOptimizeProxies";
            return this.SendAsync<_dedicatedCloud_backup.OptimizeProxies>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/changeProperties
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdBackupChangePropertiesAsync(bool backupDurationInReport, _dedicatedCloud_backup.OfferTypeEnum backupOffer, bool backupSizeInReport, long datacenterId, bool diskSizeInReport, bool fullDayInReport, bool restorePointInReport, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? mailAddress, [System.Runtime.InteropServices.OptionalAttribute()] System.TimeOnly? scheduleHour) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("backupDurationInReport", backupDurationInReport);
            _body.Add("backupOffer", backupOffer);
            _body.Add("backupSizeInReport", backupSizeInReport);
            _body.Add("diskSizeInReport", diskSizeInReport);
            _body.Add("fullDayInReport", fullDayInReport);
            _body.Add("mailAddress", mailAddress);
            _body.Add("restorePointInReport", restorePointInReport);
            _body.Add("scheduleHour", scheduleHour);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/changeProperties";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/disable
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdBackupDisableAsync(long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/disable";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/enable
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdBackupEnableAsync(long datacenterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud_backup.OfferTypeEnum? backupOffer) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("backupOffer", backupOffer);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/enable";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/generateReport
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdBackupGenerateReportAsync(long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/generateReport";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/offerCapabilities
        public Task<_dedicatedCloud_backup.BackupCapabilities[]> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdBackupOfferCapabilitiesAsync(long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/offerCapabilities";
            return this.SendAsync<_dedicatedCloud_backup.BackupCapabilities[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/optimizeProxies
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdBackupOptimizeProxiesAsync(long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/optimizeProxies";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backupRepository
        public Task<System.Int64[]> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdBackupRepositoryAsync(long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backupRepository";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backupRepository/{repositoryId}
        public Task<_dedicatedCloud.BackupRepository> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdBackupRepositoryRepositoryIdAsync(long datacenterId, long repositoryId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backupRepository/{repositoryId}";
            return this.SendAsync<_dedicatedCloud.BackupRepository>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/checkBackupJobs
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdCheckBackupJobsAsync(long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/checkBackupJobs";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/cluster
        public Task<System.Int64[]> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdClusterAsync(long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/cluster";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/cluster/{clusterId}
        public Task<_dedicatedCloud.Cluster> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAsync(long clusterId, long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/cluster/{clusterId}";
            return this.SendAsync<_dedicatedCloud.Cluster>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/cluster/{clusterId}/nsxt
        public Task<_dedicatedCloud.Task> DeleteV1DedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxtAsync(long clusterId, long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/cluster/{clusterId}/nsxt";
            return this.SendAsync<_dedicatedCloud.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/cluster/{clusterId}/nsxt
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxtAsync(long clusterId, long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/cluster/{clusterId}/nsxt";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/cluster/{clusterId}/nsxt
        public Task<_dedicatedCloud.Task> PutV1DedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxtAsync(long clusterId, long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/cluster/{clusterId}/nsxt";
            return this.SendAsync<_dedicatedCloud.Task>("PUT", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/disable
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoDisableAsync(long datacenterId, long secondaryDatacenterId, string secondaryServiceName, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("secondaryDatacenterId", secondaryDatacenterId);
            _body.Add("secondaryServiceName", secondaryServiceName);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/disable";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/enable
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEnableAsync(long datacenterId, string primaryEndpointIp, long secondaryDatacenterId, string secondaryEndpointIp, string secondaryServiceName, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("primaryEndpointIp", primaryEndpointIp);
            _body.Add("secondaryDatacenterId", secondaryDatacenterId);
            _body.Add("secondaryEndpointIp", secondaryEndpointIp);
            _body.Add("secondaryServiceName", secondaryServiceName);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/enable";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/endMigration
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndMigrationAsync(long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/endMigration";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/endpointPublicIp
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndpointPublicIpAsync(long datacenterId, string newEndpointPublicIp, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("newEndpointPublicIp", newEndpointPublicIp);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/endpointPublicIp";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/remoteSites
        public Task<_dedicatedCloud.Task> DeleteV1DedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesAsync(long datacenterId, long id, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("id", id);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/remoteSites{queryParameters}";
            return this.SendAsync<_dedicatedCloud.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/remoteSites
        public Task<_dedicatedCloud_disasterRecovery.ZertoRemoteVra[]> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesAsync(long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/remoteSites";
            return this.SendAsync<_dedicatedCloud_disasterRecovery.ZertoRemoteVra[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/remoteSites
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesAsync(long datacenterId, string label, string preSharedKey, string remoteEndpointInternalIp, string remoteEndpointPublicIp, string remoteVraNetwork, string remoteZvmInternalIp, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("label", label);
            _body.Add("preSharedKey", preSharedKey);
            _body.Add("remoteEndpointInternalIp", remoteEndpointInternalIp);
            _body.Add("remoteEndpointPublicIp", remoteEndpointPublicIp);
            _body.Add("remoteVraNetwork", remoteVraNetwork);
            _body.Add("remoteZvmInternalIp", remoteZvmInternalIp);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/remoteSites";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/startMigration
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStartMigrationAsync(long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/startMigration";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/status
        public Task<_dedicatedCloud_disasterRecovery.Profile> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStatusAsync(long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/status";
            return this.SendAsync<_dedicatedCloud_disasterRecovery.Profile>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/usageReport
        public Task<_dedicatedCloud_disasterRecovery.ZertoProtectedVm[]> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReportAsync(long datacenterId, long month, string serviceName, long year) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("month", month);
            queryParametersTemp.Add("year", year);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/usageReport{queryParameters}";
            return this.SendAsync<_dedicatedCloud_disasterRecovery.ZertoProtectedVm[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/configureVpn
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleConfigureVpnAsync(long datacenterId, string preSharedKey, string remoteEndpointInternalIp, string remoteEndpointPublicIp, string remoteZvmInternalIp, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? remoteVraNetwork) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("preSharedKey", preSharedKey);
            _body.Add("remoteEndpointInternalIp", remoteEndpointInternalIp);
            _body.Add("remoteEndpointPublicIp", remoteEndpointPublicIp);
            _body.Add("remoteVraNetwork", remoteVraNetwork);
            _body.Add("remoteZvmInternalIp", remoteZvmInternalIp);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/configureVpn";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/defaultLocalVraNetwork
        public Task<System.String> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDefaultLocalVraNetworkAsync(long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/defaultLocalVraNetwork";
            return this.SendAsync<string>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/disable
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDisableAsync(long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/disable";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/enable
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleEnableAsync(long datacenterId, string localVraNetwork, string ovhEndpointIp, string remoteVraNetwork, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("localVraNetwork", localVraNetwork);
            _body.Add("ovhEndpointIp", ovhEndpointIp);
            _body.Add("remoteVraNetwork", remoteVraNetwork);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/enable";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/endpointPublicIp
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleEndpointPublicIpAsync(long datacenterId, string newEndpointPublicIp, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("newEndpointPublicIp", newEndpointPublicIp);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/endpointPublicIp";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/remoteSites
        public Task<_dedicatedCloud.Task> DeleteV1DedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesAsync(long datacenterId, long id, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("id", id);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/remoteSites{queryParameters}";
            return this.SendAsync<_dedicatedCloud.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/remoteSites
        public Task<_dedicatedCloud_disasterRecovery.ZertoRemoteVra[]> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesAsync(long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/remoteSites";
            return this.SendAsync<_dedicatedCloud_disasterRecovery.ZertoRemoteVra[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/remoteSites
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesAsync(long datacenterId, string label, string preSharedKey, string remoteEndpointInternalIp, string remoteEndpointPublicIp, string remoteVraNetwork, string remoteZvmInternalIp, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("label", label);
            _body.Add("preSharedKey", preSharedKey);
            _body.Add("remoteEndpointInternalIp", remoteEndpointInternalIp);
            _body.Add("remoteEndpointPublicIp", remoteEndpointPublicIp);
            _body.Add("remoteVraNetwork", remoteVraNetwork);
            _body.Add("remoteZvmInternalIp", remoteZvmInternalIp);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/remoteSites";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/requestPairingToken
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRequestPairingTokenAsync(long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/requestPairingToken";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer
        public Task<System.Int64[]> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdFilerAsync(long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}
        public Task<_dedicatedCloud.Filer> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdAsync(long datacenterId, long filerId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}";
            return this.SendAsync<_dedicatedCloud.Filer>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/checkGlobalCompatible
        public Task<System.Boolean> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdCheckGlobalCompatibleAsync(long datacenterId, long filerId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/checkGlobalCompatible";
            return this.SendAsync<bool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/convertToGlobal
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdConvertToGlobalAsync(long datacenterId, long filerId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/convertToGlobal";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/hourlyConsumption
        public Task<_dedicatedCloud_filer.HourlyConsumption> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdHourlyConsumptionAsync(long datacenterId, long filerId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/hourlyConsumption";
            return this.SendAsync<_dedicatedCloud_filer.HourlyConsumption>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/location
        public Task<_dedicatedCloud_filer.Location> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocationAsync(long datacenterId, long filerId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud_filer.NodeTypeEnum? node) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("node", node);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/location{queryParameters}";
            return this.SendAsync<_dedicatedCloud_filer.Location>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/remove
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdRemoveAsync(long datacenterId, long filerId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/remove";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/task
        public Task<System.Int64[]> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskAsync(long datacenterId, long filerId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? name, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud.TaskStateEnum? state) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("name", name);
            queryParametersTemp.Add("state", state);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/task{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/task/{taskId}
        public Task<_dedicatedCloud.Task> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdAsync(long datacenterId, long filerId, string serviceName, long taskId) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/task/{taskId}";
            return this.SendAsync<_dedicatedCloud.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/task/{taskId}/changeMaintenanceExecutionDate
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateAsync(long datacenterId, System.DateTime executionDate, long filerId, string serviceName, long taskId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("executionDate", executionDate);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/task/{taskId}/changeMaintenanceExecutionDate";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/task/{taskId}/resetTaskState
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdResetTaskStateAsync(long datacenterId, long filerId, string reason, string serviceName, long taskId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("reason", reason);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/task/{taskId}/resetTaskState";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host
        public Task<System.Int64[]> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdHostAsync(long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}
        public Task<_dedicatedCloud.Host> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdAsync(long datacenterId, long hostId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}";
            return this.SendAsync<_dedicatedCloud.Host>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/addHostSpare
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdAddHostSpareAsync(long datacenterId, long hostId, string reason, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("reason", reason);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/addHostSpare";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/hourlyConsumption
        public Task<_dedicatedCloud_host.HourlyConsumption> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdHourlyConsumptionAsync(long datacenterId, long hostId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/hourlyConsumption";
            return this.SendAsync<_dedicatedCloud_host.HourlyConsumption>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/location
        public Task<_dedicatedCloud_host.Location> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdLocationAsync(long datacenterId, long hostId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/location";
            return this.SendAsync<_dedicatedCloud_host.Location>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/remove
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdRemoveAsync(long datacenterId, long hostId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/remove";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/resilience
        public Task<_dedicatedCloud.HostResilience> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceAsync(long datacenterId, long hostId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/resilience";
            return this.SendAsync<_dedicatedCloud.HostResilience>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/resilience/canBeEnabled
        public Task<System.Boolean> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceCanBeEnabledAsync(long datacenterId, long hostId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/resilience/canBeEnabled";
            return this.SendAsync<bool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/resilience/disable
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceDisableAsync(long datacenterId, long hostId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/resilience/disable";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/resilience/enable
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceEnableAsync(long datacenterId, long hostId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? duration) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("duration", duration);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/resilience/enable";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/task
        public Task<System.Int64[]> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskAsync(long datacenterId, long hostId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? name, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud.TaskStateEnum? state) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("name", name);
            queryParametersTemp.Add("state", state);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/task{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/task/{taskId}
        public Task<_dedicatedCloud.Task> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdAsync(long datacenterId, long hostId, string serviceName, long taskId) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/task/{taskId}";
            return this.SendAsync<_dedicatedCloud.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/task/{taskId}/changeMaintenanceExecutionDate
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdChangeMaintenanceExecutionDateAsync(long datacenterId, System.DateTime executionDate, long hostId, string serviceName, long taskId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("executionDate", executionDate);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/task/{taskId}/changeMaintenanceExecutionDate";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/task/{taskId}/resetTaskState
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdResetTaskStateAsync(long datacenterId, long hostId, string reason, string serviceName, long taskId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("reason", reason);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/task/{taskId}/resetTaskState";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge
        public Task<System.Int64[]> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeAsync(long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeAsync(long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}
        public Task<_dedicatedCloud.Task> DeleteV1DedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdAsync(long datacenterId, long nsxtEdgeId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}";
            return this.SendAsync<_dedicatedCloud.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}
        public Task<_dedicatedCloud.NsxtEdge> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdAsync(long datacenterId, long nsxtEdgeId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}";
            return this.SendAsync<_dedicatedCloud.NsxtEdge>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}/relocateEdge
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdRelocateEdgeAsync(long datacenterId, string datastore, long nsxtEdgeId, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("datastore", datastore);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}/relocateEdge";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}/resilience
        public Task<_dedicatedCloud.NsxtEdgeResilience> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceAsync(long datacenterId, long nsxtEdgeId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}/resilience";
            return this.SendAsync<_dedicatedCloud.NsxtEdgeResilience>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}/resilience/canBeEnabled
        public Task<System.Boolean> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceCanBeEnabledAsync(long datacenterId, long nsxtEdgeId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}/resilience/canBeEnabled";
            return this.SendAsync<bool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}/resilience/disable
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceDisableAsync(long datacenterId, long nsxtEdgeId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}/resilience/disable";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}/resilience/enable
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceEnableAsync(long datacenterId, long nsxtEdgeId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? duration) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("duration", duration);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}/resilience/enable";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdgesResizingCapabilities
        public Task<_dedicatedCloud_nsxt.NsxtEdgeSizingCapability> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesResizingCapabilitiesAsync(long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdgesResizingCapabilities";
            return this.SendAsync<_dedicatedCloud_nsxt.NsxtEdgeSizingCapability>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdgesScalingCapabilities
        public Task<_dedicatedCloud_nsxt.NsxtEdgeScalingCapability> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesScalingCapabilitiesAsync(long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdgesScalingCapabilities";
            return this.SendAsync<_dedicatedCloud_nsxt.NsxtEdgeScalingCapability>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/orderNewFilerHourly
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdOrderNewFilerHourlyAsync(long datacenterId, string name, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("name", name);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/orderNewFilerHourly";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/orderNewHostHourly
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdOrderNewHostHourlyAsync(long datacenterId, string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? vmwareClusterId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("name", name);
            _body.Add("vmwareClusterId", vmwareClusterId);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/orderNewHostHourly";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/orderableFilerProfiles
        public Task<_dedicatedCloud_filer.Profile[]> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdOrderableFilerProfilesAsync(long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/orderableFilerProfiles";
            return this.SendAsync<_dedicatedCloud_filer.Profile[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/orderableHostProfiles
        public Task<_dedicatedCloud_host.Profile[]> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdOrderableHostProfilesAsync(long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/orderableHostProfiles";
            return this.SendAsync<_dedicatedCloud_host.Profile[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/privateGateway
        public Task<_dedicatedCloud.PrivateGateway> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayAsync(long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/privateGateway";
            return this.SendAsync<_dedicatedCloud.PrivateGateway>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/privateGateway/disable
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayDisableAsync(long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/privateGateway/disable";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/privateGateway/enable
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayEnableAsync(long datacenterId, string ip, string netmask, string portgroup, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("ip", ip);
            _body.Add("netmask", netmask);
            _body.Add("portgroup", portgroup);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/privateGateway/enable";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/privateGateway/reconfigure
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayReconfigureAsync(long datacenterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? ip, [System.Runtime.InteropServices.OptionalAttribute()] System.String? netmask, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? newDatacenterId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? portgroup) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("ip", ip);
            _body.Add("netmask", netmask);
            _body.Add("newDatacenterId", newDatacenterId);
            _body.Add("portgroup", portgroup);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/privateGateway/reconfigure";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/resizeNsxtEdgeCluster
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdResizeNsxtEdgeClusterAsync(long datacenterId, string serviceName, _dedicatedCloud_nsxt.NsxtEdgeSizeEnum size) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("size", size);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/resizeNsxtEdgeCluster";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/task
        public Task<System.Int64[]> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdTaskAsync(long datacenterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? name, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud.TaskStateEnum? state) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("name", name);
            queryParametersTemp.Add("state", state);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/task{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/task/{taskId}
        public Task<_dedicatedCloud.Task> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdAsync(long datacenterId, string serviceName, long taskId) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/task/{taskId}";
            return this.SendAsync<_dedicatedCloud.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/task/{taskId}/changeMaintenanceExecutionDate
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdChangeMaintenanceExecutionDateAsync(long datacenterId, System.DateTime executionDate, string serviceName, long taskId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("executionDate", executionDate);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/task/{taskId}/changeMaintenanceExecutionDate";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/task/{taskId}/resetTaskState
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdResetTaskStateAsync(long datacenterId, string reason, string serviceName, long taskId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("reason", reason);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/task/{taskId}/resetTaskState";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm
        public Task<System.Int64[]> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdVmAsync(long datacenterId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}
        public Task<_dedicatedCloud.Vm> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdAsync(long datacenterId, string serviceName, long vmId) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}";
            return this.SendAsync<_dedicatedCloud.Vm>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob
        public Task<_dedicatedCloud.BackupJob> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdBackupJobAsync(long datacenterId, string serviceName, long vmId) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob";
            return this.SendAsync<_dedicatedCloud.BackupJob>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdBackupJobAsync(_dedicatedCloud_backup.BackupDaysEnum[] backupDays, long datacenterId, string serviceName, long vmId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("backupDays", backupDays);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob/disable
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdBackupJobDisableAsync(long datacenterId, string serviceName, long vmId) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob/disable";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob/enable
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdBackupJobEnableAsync(_dedicatedCloud_backup.BackupDaysEnum[] backupDays, long datacenterId, string serviceName, long vmId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("backupDays", backupDays);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob/enable";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob/restorePoints
        public Task<System.Int64[]> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdBackupJobRestorePointsAsync(long datacenterId, string serviceName, long vmId) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob/restorePoints";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob/restorePoints/{restorePointId}
        public Task<_dedicatedCloud.RestorePoint> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdBackupJobRestorePointsRestorePointIdAsync(long datacenterId, long restorePointId, string serviceName, long vmId) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob/restorePoints/{restorePointId}";
            return this.SendAsync<_dedicatedCloud.RestorePoint>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob/restorePoints/{restorePointId}/restore
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdBackupJobRestorePointsRestorePointIdRestoreAsync(long datacenterId, long filerId, long restorePointId, string serviceName, long vmId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("filerId", filerId);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob/restorePoints/{restorePointId}/restore";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/disableBackup
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableBackupAsync(long datacenterId, string serviceName, long vmId) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/disableBackup";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/disableCarp
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableCarpAsync(long datacenterId, string macAddress, string serviceName, long vmId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("macAddress", macAddress);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/disableCarp";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/editBackup
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEditBackupAsync(_dedicatedCloud_backup.BackupDaysEnum[] backupDays, long datacenterId, string serviceName, long vmId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("backupDays", backupDays);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/editBackup";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/enableBackup
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableBackupAsync(_dedicatedCloud_backup.BackupDaysEnum[] backupDays, long datacenterId, string serviceName, long vmId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("backupDays", backupDays);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/enableBackup";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/enableCarp
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableCarpAsync(long datacenterId, string macAddress, string serviceName, long vmId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("macAddress", macAddress);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/enableCarp";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/removeLicense
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRemoveLicenseAsync(long datacenterId, string serviceName, long vmId) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/removeLicense";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/restoreBackup
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRestoreBackupAsync(long datacenterId, long filerId, long restorePointId, string serviceName, long vmId, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud_filer.FilerTypeEnum? filerType) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("filerId", filerId);
            _body.Add("filerType", filerType);
            _body.Add("restorePointId", restorePointId);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/restoreBackup";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/setLicense
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdSetLicenseAsync(bool bypassGuestOsFamilyCheck, long datacenterId, _dedicatedCloud_spla.KmsLicenseEnum kmsLicense, string serviceName, long vmId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("bypassGuestOsFamilyCheck", bypassGuestOsFamilyCheck);
            _body.Add("kmsLicense", kmsLicense);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/setLicense";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vmLicensed
        public Task<_dedicatedCloud.virtualMachineLicensingSummary[]> GetV1DedicatedCloudServiceNameDatacenterDatacenterIdVmLicensedAsync(long datacenterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud_spla.KmsLicenseIncludingLegacyEnum? kmsLicense) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("kmsLicense", kmsLicense);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vmLicensed{queryParameters}";
            return this.SendAsync<_dedicatedCloud.virtualMachineLicensingSummary[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/federation
        public Task<_dedicatedCloud.Federation> GetV1DedicatedCloudServiceNameFederationAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/federation";
            return this.SendAsync<_dedicatedCloud.Federation>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/federation/activeDirectory
        public Task<System.Int64[]> GetV1DedicatedCloudServiceNameFederationActiveDirectoryAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/federation/activeDirectory";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/federation/activeDirectory
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameFederationActiveDirectoryAsync(string baseDnForGroups, string baseDnForUsers, string domainAlias, string domainName, string ip, string password, string serviceName, string username, [System.Runtime.InteropServices.OptionalAttribute()] System.String? description, [System.Runtime.InteropServices.OptionalAttribute()] System.String? ldapHostname, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? ldapTcpPort, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? noSsl, [System.Runtime.InteropServices.OptionalAttribute()] System.String? sslThumbprint) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("baseDnForGroups", baseDnForGroups);
            _body.Add("baseDnForUsers", baseDnForUsers);
            _body.Add("description", description);
            _body.Add("domainAlias", domainAlias);
            _body.Add("domainName", domainName);
            _body.Add("ip", ip);
            _body.Add("ldapHostname", ldapHostname);
            _body.Add("ldapTcpPort", ldapTcpPort);
            _body.Add("noSsl", noSsl);
            _body.Add("password", password);
            _body.Add("sslThumbprint", sslThumbprint);
            _body.Add("username", username);
            string uri = $"/v1/dedicatedCloud/{serviceName}/federation/activeDirectory";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/federation/activeDirectory/{activeDirectoryId}
        public Task<_dedicatedCloud.Task> DeleteV1DedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdAsync(long activeDirectoryId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/federation/activeDirectory/{activeDirectoryId}";
            return this.SendAsync<_dedicatedCloud.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/federation/activeDirectory/{activeDirectoryId}
        public Task<_dedicatedCloud.FederationAccessNetwork> GetV1DedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdAsync(long activeDirectoryId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/federation/activeDirectory/{activeDirectoryId}";
            return this.SendAsync<_dedicatedCloud.FederationAccessNetwork>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/federation/activeDirectory/{activeDirectoryId}/changeProperties
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdChangePropertiesAsync(long activeDirectoryId, string password, string serviceName, string username, [System.Runtime.InteropServices.OptionalAttribute()] System.String? description, [System.Runtime.InteropServices.OptionalAttribute()] System.String? sslThumbprint) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("description", description);
            _body.Add("password", password);
            _body.Add("sslThumbprint", sslThumbprint);
            _body.Add("username", username);
            string uri = $"/v1/dedicatedCloud/{serviceName}/federation/activeDirectory/{activeDirectoryId}/changeProperties";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/federation/activeDirectory/{activeDirectoryId}/grantActiveDirectoryGroup
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryGroupAsync(long activeDirectoryId, string groupName, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("groupName", groupName);
            string uri = $"/v1/dedicatedCloud/{serviceName}/federation/activeDirectory/{activeDirectoryId}/grantActiveDirectoryGroup";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/federation/activeDirectory/{activeDirectoryId}/grantActiveDirectoryUser
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryUserAsync(long activeDirectoryId, string serviceName, string username) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("username", username);
            string uri = $"/v1/dedicatedCloud/{serviceName}/federation/activeDirectory/{activeDirectoryId}/grantActiveDirectoryUser";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/filer
        public Task<System.Int64[]> GetV1DedicatedCloudServiceNameFilerAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/filer";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/filer/{filerId}
        public Task<_dedicatedCloud.Filer> GetV1DedicatedCloudServiceNameFilerFilerIdAsync(long filerId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/filer/{filerId}";
            return this.SendAsync<_dedicatedCloud.Filer>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/filer/{filerId}/checkGlobalCompatible
        public Task<System.Boolean> GetV1DedicatedCloudServiceNameFilerFilerIdCheckGlobalCompatibleAsync(long filerId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/filer/{filerId}/checkGlobalCompatible";
            return this.SendAsync<bool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/filer/{filerId}/convertToGlobal
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameFilerFilerIdConvertToGlobalAsync(long filerId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/filer/{filerId}/convertToGlobal";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/filer/{filerId}/hourlyConsumption
        public Task<_dedicatedCloud_filer.HourlyConsumption> GetV1DedicatedCloudServiceNameFilerFilerIdHourlyConsumptionAsync(long filerId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/filer/{filerId}/hourlyConsumption";
            return this.SendAsync<_dedicatedCloud_filer.HourlyConsumption>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/filer/{filerId}/location
        public Task<_dedicatedCloud_filer.Location> GetV1DedicatedCloudServiceNameFilerFilerIdLocationAsync(long filerId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud_filer.NodeTypeEnum? node) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("node", node);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicatedCloud/{serviceName}/filer/{filerId}/location{queryParameters}";
            return this.SendAsync<_dedicatedCloud_filer.Location>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/filer/{filerId}/remove
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameFilerFilerIdRemoveAsync(long filerId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/filer/{filerId}/remove";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/filer/{filerId}/task
        public Task<System.Int64[]> GetV1DedicatedCloudServiceNameFilerFilerIdTaskAsync(long filerId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? name, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud.TaskStateEnum? state) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("name", name);
            queryParametersTemp.Add("state", state);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicatedCloud/{serviceName}/filer/{filerId}/task{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/filer/{filerId}/task/{taskId}
        public Task<_dedicatedCloud.Task> GetV1DedicatedCloudServiceNameFilerFilerIdTaskTaskIdAsync(long filerId, string serviceName, long taskId) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/filer/{filerId}/task/{taskId}";
            return this.SendAsync<_dedicatedCloud.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/filer/{filerId}/task/{taskId}/changeMaintenanceExecutionDate
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateAsync(System.DateTime executionDate, long filerId, string serviceName, long taskId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("executionDate", executionDate);
            string uri = $"/v1/dedicatedCloud/{serviceName}/filer/{filerId}/task/{taskId}/changeMaintenanceExecutionDate";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/filer/{filerId}/task/{taskId}/resetTaskState
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameFilerFilerIdTaskTaskIdResetTaskStateAsync(long filerId, string reason, string serviceName, long taskId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("reason", reason);
            string uri = $"/v1/dedicatedCloud/{serviceName}/filer/{filerId}/task/{taskId}/resetTaskState";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/generateNsxvInventory
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameGenerateNsxvInventoryAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/generateNsxvInventory";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/generateVxlanToVrackMapping
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameGenerateVxlanToVrackMappingAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/generateVxlanToVrackMapping";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/globalTasks
        public Task<System.Int64[]> GetV1DedicatedCloudServiceNameGlobalTasksAsync(
                    string serviceName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? datacenterId, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.DateOnly? endDateFrom, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.DateOnly? endDateTo, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? executionDateFrom, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? executionDateTo, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? filerId, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? hostId, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? lastModificationDateFrom, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? lastModificationDateTo, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? name, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? networkAccessId, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? orderId, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? parentTaskId, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud.TaskStateEnum[]? state, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? userId, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? vlanId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("datacenterId", datacenterId);
            queryParametersTemp.Add("endDate.from", endDateFrom);
            queryParametersTemp.Add("endDate.to", endDateTo);
            queryParametersTemp.Add("executionDate.from", executionDateFrom);
            queryParametersTemp.Add("executionDate.to", executionDateTo);
            queryParametersTemp.Add("filerId", filerId);
            queryParametersTemp.Add("hostId", hostId);
            queryParametersTemp.Add("lastModificationDate.from", lastModificationDateFrom);
            queryParametersTemp.Add("lastModificationDate.to", lastModificationDateTo);
            queryParametersTemp.Add("name", name);
            queryParametersTemp.Add("networkAccessId", networkAccessId);
            queryParametersTemp.Add("orderId", orderId);
            queryParametersTemp.Add("parentTaskId", parentTaskId);
            queryParametersTemp.Add("state", state);
            queryParametersTemp.Add("userId", userId);
            queryParametersTemp.Add("vlanId", vlanId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicatedCloud/{serviceName}/globalTasks{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/hcx
        public Task<_dedicatedCloud.Hcx> GetV1DedicatedCloudServiceNameHcxAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/hcx";
            return this.SendAsync<_dedicatedCloud.Hcx>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/hcx/canBeDisabled
        public Task<System.Boolean> GetV1DedicatedCloudServiceNameHcxCanBeDisabledAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/hcx/canBeDisabled";
            return this.SendAsync<bool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/hcx/canBeEnabled
        public Task<System.Boolean> GetV1DedicatedCloudServiceNameHcxCanBeEnabledAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/hcx/canBeEnabled";
            return this.SendAsync<bool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/hcx/disable
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameHcxDisableAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/hcx/disable";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/hcx/enable
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameHcxEnableAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/hcx/enable";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/hds
        public Task<_dedicatedCloud.Hds> GetV1DedicatedCloudServiceNameHdsAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/hds";
            return this.SendAsync<_dedicatedCloud.Hds>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/hds/canBeDisabled
        public Task<_dedicatedCloud.optionCompatibility> GetV1DedicatedCloudServiceNameHdsCanBeDisabledAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/hds/canBeDisabled";
            return this.SendAsync<_dedicatedCloud.optionCompatibility>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/hds/canBeEnabled
        public Task<_dedicatedCloud.optionCompatibility> GetV1DedicatedCloudServiceNameHdsCanBeEnabledAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/hds/canBeEnabled";
            return this.SendAsync<_dedicatedCloud.optionCompatibility>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/hds/disable
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameHdsDisableAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/hds/disable";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/hds/enable
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameHdsEnableAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/hds/enable";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/hipaa
        public Task<_dedicatedCloud.Hipaa> GetV1DedicatedCloudServiceNameHipaaAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/hipaa";
            return this.SendAsync<_dedicatedCloud.Hipaa>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/hipaa/canBeDisabled
        public Task<_dedicatedCloud.optionCompatibility> GetV1DedicatedCloudServiceNameHipaaCanBeDisabledAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/hipaa/canBeDisabled";
            return this.SendAsync<_dedicatedCloud.optionCompatibility>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/hipaa/canBeEnabled
        public Task<_dedicatedCloud.optionCompatibility> GetV1DedicatedCloudServiceNameHipaaCanBeEnabledAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/hipaa/canBeEnabled";
            return this.SendAsync<_dedicatedCloud.optionCompatibility>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/hipaa/disable
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameHipaaDisableAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/hipaa/disable";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/hipaa/enable
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameHipaaEnableAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/hipaa/enable";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/iam
        public Task<_dedicatedCloud.Iam> GetV1DedicatedCloudServiceNameIamAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/iam";
            return this.SendAsync<_dedicatedCloud.Iam>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/iam/addRole
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameIamAddRoleAsync(string name, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("name", name);
            string uri = $"/v1/dedicatedCloud/{serviceName}/iam/addRole";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/iam/canBeDisabled
        public Task<System.Boolean> GetV1DedicatedCloudServiceNameIamCanBeDisabledAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/iam/canBeDisabled";
            return this.SendAsync<bool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/iam/canBeEnabled
        public Task<System.Boolean> GetV1DedicatedCloudServiceNameIamCanBeEnabledAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/iam/canBeEnabled";
            return this.SendAsync<bool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/iam/disable
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameIamDisableAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/iam/disable";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/iam/enable
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameIamEnableAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/iam/enable";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/ip
        public Task<System.String[]> GetV1DedicatedCloudServiceNameIpAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/ip";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/ip/{network}
        public Task<_dedicatedCloud.Ip> GetV1DedicatedCloudServiceNameIpNetworkAsync(string network, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/ip/{network}";
            return this.SendAsync<_dedicatedCloud.Ip>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/ip/{network}/details
        public Task<_dedicatedCloud.IpDetails[]> GetV1DedicatedCloudServiceNameIpNetworkDetailsAsync(string network, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/ip/{network}/details";
            return this.SendAsync<_dedicatedCloud.IpDetails[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/ip/{network}/task
        public Task<System.Int64[]> GetV1DedicatedCloudServiceNameIpNetworkTaskAsync(string network, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? name, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud.TaskStateEnum? state) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("name", name);
            queryParametersTemp.Add("state", state);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicatedCloud/{serviceName}/ip/{network}/task{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/ip/{network}/task/{taskId}
        public Task<_dedicatedCloud.Task> GetV1DedicatedCloudServiceNameIpNetworkTaskTaskIdAsync(string network, string serviceName, long taskId) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/ip/{network}/task/{taskId}";
            return this.SendAsync<_dedicatedCloud.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/ip/{network}/task/{taskId}/changeMaintenanceExecutionDate
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameIpNetworkTaskTaskIdChangeMaintenanceExecutionDateAsync(System.DateTime executionDate, string network, string serviceName, long taskId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("executionDate", executionDate);
            string uri = $"/v1/dedicatedCloud/{serviceName}/ip/{network}/task/{taskId}/changeMaintenanceExecutionDate";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/ip/{network}/task/{taskId}/resetTaskState
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameIpNetworkTaskTaskIdResetTaskStateAsync(string network, string reason, string serviceName, long taskId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("reason", reason);
            string uri = $"/v1/dedicatedCloud/{serviceName}/ip/{network}/task/{taskId}/resetTaskState";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/location
        public Task<_dedicatedCloud.PccZone> GetV1DedicatedCloudServiceNameLocationAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/location";
            return this.SendAsync<_dedicatedCloud.PccZone>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/location/hostProfile
        public Task<System.Int64[]> GetV1DedicatedCloudServiceNameLocationHostProfileAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/location/hostProfile";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/location/hostProfile/{id}
        public Task<_dedicatedCloud.HostProfile> GetV1DedicatedCloudServiceNameLocationHostProfileIdAsync(long id, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/location/hostProfile/{id}";
            return this.SendAsync<_dedicatedCloud.HostProfile>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/location/hypervisor
        public Task<System.String[]> GetV1DedicatedCloudServiceNameLocationHypervisorAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/location/hypervisor";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/location/hypervisor/{shortName}
        public Task<_dedicatedCloud.Os> GetV1DedicatedCloudServiceNameLocationHypervisorShortNameAsync(string serviceName, string shortName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/location/hypervisor/{shortName}";
            return this.SendAsync<_dedicatedCloud.Os>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/log/kind
        public Task<System.String[]> GetV1DedicatedCloudServiceNameLogKindAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/log/kind";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/log/kind/{name}
        public Task<_dedicatedCloud.ldpKind> GetV1DedicatedCloudServiceNameLogKindNameAsync(string name, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/log/kind/{name}";
            return this.SendAsync<_dedicatedCloud.ldpKind>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/log/subscription
        public Task<System.Guid[]> GetV1DedicatedCloudServiceNameLogSubscriptionAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? kind) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("kind", kind);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicatedCloud/{serviceName}/log/subscription{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/log/subscription
        public Task<_dedicatedCloud.LogSubscriptionResponse> PostV1DedicatedCloudServiceNameLogSubscriptionAsync(string kind, string serviceName, System.Guid streamId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("kind", kind);
            _body.Add("streamId", streamId);
            string uri = $"/v1/dedicatedCloud/{serviceName}/log/subscription";
            return this.SendAsync<_dedicatedCloud.LogSubscriptionResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/log/subscription/{subscriptionId}
        public Task<_dedicatedCloud.LogSubscriptionResponse> DeleteV1DedicatedCloudServiceNameLogSubscriptionSubscriptionIdAsync(string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dedicatedCloud.LogSubscriptionResponse>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/log/subscription/{subscriptionId}
        public Task<_dedicatedCloud.ldpSubscription> GetV1DedicatedCloudServiceNameLogSubscriptionSubscriptionIdAsync(string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dedicatedCloud.ldpSubscription>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/newPrices
        public Task<_dedicatedCloud.resourceNewPrices> GetV1DedicatedCloudServiceNameNewPricesAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/newPrices";
            return this.SendAsync<_dedicatedCloud.resourceNewPrices>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/nsx
        public Task<_dedicatedCloud.Nsx> GetV1DedicatedCloudServiceNameNsxAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/nsx";
            return this.SendAsync<_dedicatedCloud.Nsx>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/nsx/canBeDisabled
        public Task<_dedicatedCloud.optionCompatibility> GetV1DedicatedCloudServiceNameNsxCanBeDisabledAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/nsx/canBeDisabled";
            return this.SendAsync<_dedicatedCloud.optionCompatibility>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/nsx/canBeEnabled
        public Task<_dedicatedCloud.optionCompatibility> GetV1DedicatedCloudServiceNameNsxCanBeEnabledAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/nsx/canBeEnabled";
            return this.SendAsync<_dedicatedCloud.optionCompatibility>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/nsx/disable
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameNsxDisableAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/nsx/disable";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/nsx/enable
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameNsxEnableAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/nsx/enable";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/nsxt
        public Task<_dedicatedCloud.Nsxt> GetV1DedicatedCloudServiceNameNsxtAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/nsxt";
            return this.SendAsync<_dedicatedCloud.Nsxt>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/orderNewFilerHourly
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameOrderNewFilerHourlyAsync(string name, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("name", name);
            string uri = $"/v1/dedicatedCloud/{serviceName}/orderNewFilerHourly";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/orderableIpCountries
        public Task<_dedicatedCloud.IpCountriesEnum[]> GetV1DedicatedCloudServiceNameOrderableIpCountriesAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/orderableIpCountries";
            return this.SendAsync<_dedicatedCloud.IpCountriesEnum[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/passwordPolicy
        public Task<_dedicatedCloud.passwordPolicy> GetV1DedicatedCloudServiceNamePasswordPolicyAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/passwordPolicy";
            return this.SendAsync<_dedicatedCloud.passwordPolicy>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/pcidss
        public Task<_dedicatedCloud.PciDss> GetV1DedicatedCloudServiceNamePcidssAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/pcidss";
            return this.SendAsync<_dedicatedCloud.PciDss>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/pcidss/canBeDisabled
        public Task<_dedicatedCloud.optionCompatibility> GetV1DedicatedCloudServiceNamePcidssCanBeDisabledAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/pcidss/canBeDisabled";
            return this.SendAsync<_dedicatedCloud.optionCompatibility>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/pcidss/canBeEnabled
        public Task<_dedicatedCloud.optionCompatibility> GetV1DedicatedCloudServiceNamePcidssCanBeEnabledAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/pcidss/canBeEnabled";
            return this.SendAsync<_dedicatedCloud.optionCompatibility>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/pcidss/disable
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNamePcidssDisableAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/pcidss/disable";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/pcidss/enable
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNamePcidssEnableAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/pcidss/enable";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/resetTriggeredAlarm
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameResetTriggeredAlarmAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/resetTriggeredAlarm";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/robot
        public Task<System.String[]> GetV1DedicatedCloudServiceNameRobotAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/robot";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/robot/{name}
        public Task<_dedicatedCloud.Robot> GetV1DedicatedCloudServiceNameRobotNameAsync(string name, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/robot/{name}";
            return this.SendAsync<_dedicatedCloud.Robot>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/securityOptions
        public Task<_dedicatedCloud.SecurityOption> GetV1DedicatedCloudServiceNameSecurityOptionsAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/securityOptions";
            return this.SendAsync<_dedicatedCloud.SecurityOption>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/securityOptions/compatibilityMatrix
        public Task<_dedicatedCloud_securityOption.CompatibilityMatrixEntry[]> GetV1DedicatedCloudServiceNameSecurityOptionsCompatibilityMatrixAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? showIncompatible, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? showInternal) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("showIncompatible", showIncompatible);
            queryParametersTemp.Add("showInternal", showInternal);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicatedCloud/{serviceName}/securityOptions/compatibilityMatrix{queryParameters}";
            return this.SendAsync<_dedicatedCloud_securityOption.CompatibilityMatrixEntry[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/securityOptions/dependenciesTree
        public Task<_dedicatedCloud_securityOption.DependenciesTree> GetV1DedicatedCloudServiceNameSecurityOptionsDependenciesTreeAsync(_dedicatedCloud_securityOption.SecurityOptionEnum option, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("option", option);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicatedCloud/{serviceName}/securityOptions/dependenciesTree{queryParameters}";
            return this.SendAsync<_dedicatedCloud_securityOption.DependenciesTree>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/securityOptions/pendingOptions
        public Task<_dedicatedCloud_securityOption.SecurityOptionEnum[]> GetV1DedicatedCloudServiceNameSecurityOptionsPendingOptionsAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/securityOptions/pendingOptions";
            return this.SendAsync<_dedicatedCloud_securityOption.SecurityOptionEnum[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/securityOptions/resumePendingEnabling
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameSecurityOptionsResumePendingEnablingAsync(_dedicatedCloud_securityOption.SecurityOptionEnum option, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("option", option);
            string uri = $"/v1/dedicatedCloud/{serviceName}/securityOptions/resumePendingEnabling";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1DedicatedCloudServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/serviceInfos
        public Task PutV1DedicatedCloudServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/servicePack
        public Task<_dedicatedCloud.servicePackStatus> GetV1DedicatedCloudServiceNameServicePackAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/servicePack";
            return this.SendAsync<_dedicatedCloud.servicePackStatus>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/servicePacks
        public Task<System.String[]> GetV1DedicatedCloudServiceNameServicePacksAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/servicePacks";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/servicePacks/{name}
        public Task<_dedicatedCloud.ServicePack> GetV1DedicatedCloudServiceNameServicePacksNameAsync(string name, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/servicePacks/{name}";
            return this.SendAsync<_dedicatedCloud.ServicePack>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/tag
        public Task<System.String[]> GetV1DedicatedCloudServiceNameTagAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/tag";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/tag/{name}
        public Task<_dedicatedCloud.Tag> GetV1DedicatedCloudServiceNameTagNameAsync(string name, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/tag/{name}";
            return this.SendAsync<_dedicatedCloud.Tag>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/task
        public Task<System.Int64[]> GetV1DedicatedCloudServiceNameTaskAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? name, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud.TaskStateEnum? state) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("name", name);
            queryParametersTemp.Add("state", state);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicatedCloud/{serviceName}/task{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/task/{taskId}
        public Task<_dedicatedCloud.Task> GetV1DedicatedCloudServiceNameTaskTaskIdAsync(string serviceName, long taskId) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/task/{taskId}";
            return this.SendAsync<_dedicatedCloud.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/task/{taskId}/changeMaintenanceExecutionDate
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameTaskTaskIdChangeMaintenanceExecutionDateAsync(System.DateTime executionDate, string serviceName, long taskId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("executionDate", executionDate);
            string uri = $"/v1/dedicatedCloud/{serviceName}/task/{taskId}/changeMaintenanceExecutionDate";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/task/{taskId}/resetTaskState
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameTaskTaskIdResetTaskStateAsync(string reason, string serviceName, long taskId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("reason", reason);
            string uri = $"/v1/dedicatedCloud/{serviceName}/task/{taskId}/resetTaskState";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/terminate
        public Task<System.String> PostV1DedicatedCloudServiceNameTerminateAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/twoFAWhitelist
        public Task<System.Int64[]> GetV1DedicatedCloudServiceNameTwoFAWhitelistAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/twoFAWhitelist";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/twoFAWhitelist
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameTwoFAWhitelistAsync(string description, string ip, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("description", description);
            _body.Add("ip", ip);
            string uri = $"/v1/dedicatedCloud/{serviceName}/twoFAWhitelist";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/twoFAWhitelist/{id}
        public Task<_dedicatedCloud.Task> DeleteV1DedicatedCloudServiceNameTwoFAWhitelistIdAsync(long id, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/twoFAWhitelist/{id}";
            return this.SendAsync<_dedicatedCloud.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/twoFAWhitelist/{id}
        public Task<_dedicatedCloud.twoFAWhitelist> GetV1DedicatedCloudServiceNameTwoFAWhitelistIdAsync(long id, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/twoFAWhitelist/{id}";
            return this.SendAsync<_dedicatedCloud.twoFAWhitelist>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/twoFAWhitelist/{id}/changeProperties
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameTwoFAWhitelistIdChangePropertiesAsync(long id, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? description) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("description", description);
            string uri = $"/v1/dedicatedCloud/{serviceName}/twoFAWhitelist/{id}/changeProperties";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/upgradeHypervisor
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameUpgradeHypervisorAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/upgradeHypervisor";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/upgradeVcenter
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameUpgradeVcenterAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud.releaseEnum? release) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("release", release);
            string uri = $"/v1/dedicatedCloud/{serviceName}/upgradeVcenter";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/user
        public Task<System.Int64[]> GetV1DedicatedCloudServiceNameUserAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? name) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("name", name);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicatedCloud/{serviceName}/user{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/user
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameUserAsync(
                    string name, 
                    string serviceName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? canAddRessource, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? canManageRights, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? email, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? encryptionRight, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? expirationDate, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? firstName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? lastName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud_right.NetworkRoleEnum? networkRole, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? nsxRight, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? password, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? phoneNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? receiveAlerts, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud_right.RightEnum? right, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? tokenValidator, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud_right.VmNetworkRoleEnum? vmNetworkRole) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("canAddRessource", canAddRessource);
            _body.Add("canManageRights", canManageRights);
            _body.Add("email", email);
            _body.Add("encryptionRight", encryptionRight);
            _body.Add("expirationDate", expirationDate);
            _body.Add("firstName", firstName);
            _body.Add("lastName", lastName);
            _body.Add("name", name);
            _body.Add("networkRole", networkRole);
            _body.Add("nsxRight", nsxRight);
            _body.Add("password", password);
            _body.Add("phoneNumber", phoneNumber);
            _body.Add("receiveAlerts", receiveAlerts);
            _body.Add("right", right);
            _body.Add("tokenValidator", tokenValidator);
            _body.Add("vmNetworkRole", vmNetworkRole);
            string uri = $"/v1/dedicatedCloud/{serviceName}/user";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/user/{userId}
        public Task<_dedicatedCloud.Task> DeleteV1DedicatedCloudServiceNameUserUserIdAsync(string serviceName, long userId) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/user/{userId}";
            return this.SendAsync<_dedicatedCloud.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/user/{userId}
        public Task<_dedicatedCloud.User> GetV1DedicatedCloudServiceNameUserUserIdAsync(string serviceName, long userId) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/user/{userId}";
            return this.SendAsync<_dedicatedCloud.User>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/user/{userId}/changePassword
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameUserUserIdChangePasswordAsync(string serviceName, long userId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? password) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("password", password);
            string uri = $"/v1/dedicatedCloud/{serviceName}/user/{userId}/changePassword";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/user/{userId}/changeProperties
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameUserUserIdChangePropertiesAsync(string serviceName, long userId, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? canManageIpFailOvers, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? canManageNetwork, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? canManageRights, [System.Runtime.InteropServices.OptionalAttribute()] System.String? email, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? encryptionRight, [System.Runtime.InteropServices.OptionalAttribute()] System.String? firstName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? fullAdminRo, [System.Runtime.InteropServices.OptionalAttribute()] System.String? lastName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? nsxRight, [System.Runtime.InteropServices.OptionalAttribute()] System.String? phoneNumber, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? receiveAlerts, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? tokenValidator) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("canManageIpFailOvers", canManageIpFailOvers);
            _body.Add("canManageNetwork", canManageNetwork);
            _body.Add("canManageRights", canManageRights);
            _body.Add("email", email);
            _body.Add("encryptionRight", encryptionRight);
            _body.Add("firstName", firstName);
            _body.Add("fullAdminRo", fullAdminRo);
            _body.Add("lastName", lastName);
            _body.Add("nsxRight", nsxRight);
            _body.Add("phoneNumber", phoneNumber);
            _body.Add("receiveAlerts", receiveAlerts);
            _body.Add("tokenValidator", tokenValidator);
            string uri = $"/v1/dedicatedCloud/{serviceName}/user/{userId}/changeProperties";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/user/{userId}/confirmPhoneNumber
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameUserUserIdConfirmPhoneNumberAsync(string serviceName, string token, long userId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("token", token);
            string uri = $"/v1/dedicatedCloud/{serviceName}/user/{userId}/confirmPhoneNumber";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/user/{userId}/disable
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameUserUserIdDisableAsync(string serviceName, long userId) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/user/{userId}/disable";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/user/{userId}/enable
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameUserUserIdEnableAsync(string serviceName, long userId) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/user/{userId}/enable";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/user/{userId}/objectRight
        public Task<System.Int64[]> GetV1DedicatedCloudServiceNameUserUserIdObjectRightAsync(string serviceName, long userId) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/user/{userId}/objectRight";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/user/{userId}/objectRight
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameUserUserIdObjectRightAsync(_dedicatedCloud_right.RightEnum right, string serviceName, _dedicatedCloud_right.UserObjectRightTypeEnum type, long userId, string vmwareObjectId, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? propagate) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("propagate", propagate);
            _body.Add("right", right);
            _body.Add("type", type);
            _body.Add("vmwareObjectId", vmwareObjectId);
            string uri = $"/v1/dedicatedCloud/{serviceName}/user/{userId}/objectRight";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/user/{userId}/objectRight/{objectRightId}
        public Task<_dedicatedCloud.Task> DeleteV1DedicatedCloudServiceNameUserUserIdObjectRightObjectRightIdAsync(long objectRightId, string serviceName, long userId) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/user/{userId}/objectRight/{objectRightId}";
            return this.SendAsync<_dedicatedCloud.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/user/{userId}/objectRight/{objectRightId}
        public Task<_dedicatedCloud.ObjectRight> GetV1DedicatedCloudServiceNameUserUserIdObjectRightObjectRightIdAsync(long objectRightId, string serviceName, long userId) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/user/{userId}/objectRight/{objectRightId}";
            return this.SendAsync<_dedicatedCloud.ObjectRight>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/user/{userId}/right
        public Task<System.Int64[]> GetV1DedicatedCloudServiceNameUserUserIdRightAsync(string serviceName, long userId) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/user/{userId}/right";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/user/{userId}/right/{rightId}
        public Task<_dedicatedCloud.Right> GetV1DedicatedCloudServiceNameUserUserIdRightRightIdAsync(long rightId, string serviceName, long userId) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/user/{userId}/right/{rightId}";
            return this.SendAsync<_dedicatedCloud.Right>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/user/{userId}/right/{rightId}
        public Task<_dedicatedCloud.Task> PutV1DedicatedCloudServiceNameUserUserIdRightRightIdAsync(_dedicatedCloud.Right _body, long rightId, string serviceName, long userId) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/user/{userId}/right/{rightId}";
            return this.SendAsync<_dedicatedCloud.Task>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/user/{userId}/task
        public Task<System.Int64[]> GetV1DedicatedCloudServiceNameUserUserIdTaskAsync(string serviceName, long userId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? name, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud.TaskStateEnum? state) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("name", name);
            queryParametersTemp.Add("state", state);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/dedicatedCloud/{serviceName}/user/{userId}/task{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/user/{userId}/task/{taskId}
        public Task<_dedicatedCloud.Task> GetV1DedicatedCloudServiceNameUserUserIdTaskTaskIdAsync(string serviceName, long taskId, long userId) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/user/{userId}/task/{taskId}";
            return this.SendAsync<_dedicatedCloud.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/user/{userId}/task/{taskId}/changeMaintenanceExecutionDate
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameUserUserIdTaskTaskIdChangeMaintenanceExecutionDateAsync(System.DateTime executionDate, string serviceName, long taskId, long userId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("executionDate", executionDate);
            string uri = $"/v1/dedicatedCloud/{serviceName}/user/{userId}/task/{taskId}/changeMaintenanceExecutionDate";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/user/{userId}/task/{taskId}/resetTaskState
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameUserUserIdTaskTaskIdResetTaskStateAsync(string reason, string serviceName, long taskId, long userId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("reason", reason);
            string uri = $"/v1/dedicatedCloud/{serviceName}/user/{userId}/task/{taskId}/resetTaskState";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/vcenterVersion
        public Task<_dedicatedCloud.vcenter> GetV1DedicatedCloudServiceNameVcenterVersionAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/vcenterVersion";
            return this.SendAsync<_dedicatedCloud.vcenter>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/vendor
        public Task<_dedicatedCloud.Vendor> GetV1DedicatedCloudServiceNameVendorAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/vendor";
            return this.SendAsync<_dedicatedCloud.Vendor>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/vendor/objectType
        public Task<System.String[]> PostV1DedicatedCloudServiceNameVendorObjectTypeAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/vendor/objectType";
            return this.SendAsync<string[]>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/vendor/ovhId
        public Task<_dedicatedCloud_vendor.OvhId> PostV1DedicatedCloudServiceNameVendorOvhIdAsync(_dedicatedCloud.VendorObjectTypeEnum objectType, string serviceName, string vendorId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("objectType", objectType);
            _body.Add("vendorId", vendorId);
            string uri = $"/v1/dedicatedCloud/{serviceName}/vendor/ovhId";
            return this.SendAsync<_dedicatedCloud_vendor.OvhId>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/vlan
        public Task<System.Int64[]> GetV1DedicatedCloudServiceNameVlanAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/vlan";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/vlan/{vlanId}
        public Task<_dedicatedCloud.Vlan> GetV1DedicatedCloudServiceNameVlanVlanIdAsync(string serviceName, long vlanId) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/vlan/{vlanId}";
            return this.SendAsync<_dedicatedCloud.Vlan>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/vmEncryption
        public Task<_dedicatedCloud.VMEncryption> GetV1DedicatedCloudServiceNameVmEncryptionAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/vmEncryption";
            return this.SendAsync<_dedicatedCloud.VMEncryption>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/vmEncryption/kms
        public Task<System.Int64[]> GetV1DedicatedCloudServiceNameVmEncryptionKmsAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/vmEncryption/kms";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/vmEncryption/kms
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameVmEncryptionKmsAsync(string ip, string serviceName, string sslThumbprint, [System.Runtime.InteropServices.OptionalAttribute()] System.String? description) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("description", description);
            _body.Add("ip", ip);
            _body.Add("sslThumbprint", sslThumbprint);
            string uri = $"/v1/dedicatedCloud/{serviceName}/vmEncryption/kms";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/vmEncryption/kms/{kmsId}
        public Task<_dedicatedCloud.Task> DeleteV1DedicatedCloudServiceNameVmEncryptionKmsKmsIdAsync(long kmsId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/vmEncryption/kms/{kmsId}";
            return this.SendAsync<_dedicatedCloud.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/vmEncryption/kms/{kmsId}
        public Task<_dedicatedCloud.VMEncryptionAccessNetwork> GetV1DedicatedCloudServiceNameVmEncryptionKmsKmsIdAsync(long kmsId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/vmEncryption/kms/{kmsId}";
            return this.SendAsync<_dedicatedCloud.VMEncryptionAccessNetwork>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/vmEncryption/kms/{kmsId}/changeProperties
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameVmEncryptionKmsKmsIdChangePropertiesAsync(long kmsId, string serviceName, string sslThumbprint, [System.Runtime.InteropServices.OptionalAttribute()] System.String? description) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("description", description);
            _body.Add("sslThumbprint", sslThumbprint);
            string uri = $"/v1/dedicatedCloud/{serviceName}/vmEncryption/kms/{kmsId}/changeProperties";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/vrack
        public Task<System.String[]> GetV1DedicatedCloudServiceNameVrackAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/vrack";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/vrack/{vrack}
        public Task<_vrack.Task> DeleteV1DedicatedCloudServiceNameVrackVrackAsync(string serviceName, string vrack) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/vrack/{vrack}";
            return this.SendAsync<_vrack.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/vrack/{vrack}
        public Task<_vrack.dedicatedCloud> GetV1DedicatedCloudServiceNameVrackVrackAsync(string serviceName, string vrack) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/vrack/{vrack}";
            return this.SendAsync<_vrack.dedicatedCloud>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/vrops
        public Task<_dedicatedCloud.Vrops> GetV1DedicatedCloudServiceNameVropsAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/vrops";
            return this.SendAsync<_dedicatedCloud.Vrops>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/vrops/canBeDisabled
        public Task<_dedicatedCloud.optionCompatibility> GetV1DedicatedCloudServiceNameVropsCanBeDisabledAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/vrops/canBeDisabled";
            return this.SendAsync<_dedicatedCloud.optionCompatibility>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/vrops/canBeEnabled
        public Task<_dedicatedCloud.optionCompatibility> GetV1DedicatedCloudServiceNameVropsCanBeEnabledAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/vrops/canBeEnabled";
            return this.SendAsync<_dedicatedCloud.optionCompatibility>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/vrops/disable
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameVropsDisableAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/vrops/disable";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/vrops/enable
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameVropsEnableAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/vrops/enable";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/vrops/outgoingFlow
        public Task<System.Int64[]> GetV1DedicatedCloudServiceNameVropsOutgoingFlowAsync(string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/vrops/outgoingFlow";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/vrops/outgoingFlow
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameVropsOutgoingFlowAsync(string ip, string serviceName, long servicePort, [System.Runtime.InteropServices.OptionalAttribute()] System.String? description) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("description", description);
            _body.Add("ip", ip);
            _body.Add("servicePort", servicePort);
            string uri = $"/v1/dedicatedCloud/{serviceName}/vrops/outgoingFlow";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/vrops/outgoingFlow/{outgoingFlowId}
        public Task<_dedicatedCloud.Task> DeleteV1DedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdAsync(long outgoingFlowId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/vrops/outgoingFlow/{outgoingFlowId}";
            return this.SendAsync<_dedicatedCloud.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/vrops/outgoingFlow/{outgoingFlowId}
        public Task<_dedicatedCloud.VropsOutgoingFlow> GetV1DedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdAsync(long outgoingFlowId, string serviceName) {
            string uri = $"/v1/dedicatedCloud/{serviceName}/vrops/outgoingFlow/{outgoingFlowId}";
            return this.SendAsync<_dedicatedCloud.VropsOutgoingFlow>("GET", uri, null, null, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/vrops/outgoingFlow/{outgoingFlowId}/changeProperties
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdChangePropertiesAsync(long outgoingFlowId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? description) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("description", description);
            string uri = $"/v1/dedicatedCloud/{serviceName}/vrops/outgoingFlow/{outgoingFlowId}/changeProperties";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/dedicatedCloud/{serviceName}/vrops/upgrade
        public Task<_dedicatedCloud.Task> PostV1DedicatedCloudServiceNameVropsUpgradeAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? version) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("version", version);
            string uri = $"/v1/dedicatedCloud/{serviceName}/vrops/upgrade";
            return this.SendAsync<_dedicatedCloud.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/domain
        public Task<System.String[]> GetV1DomainAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags, [System.Runtime.InteropServices.OptionalAttribute()] System.String? whoisOwner) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            queryParametersTemp.Add("whoisOwner", whoisOwner);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/domain{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/configurationRule
        public Task<_domain_configuration_rules.Rule> GetV1DomainConfigurationRuleAsync(_domain.ActionEnum action, string domain) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("action", action);
            queryParametersTemp.Add("domain", domain);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/domain/configurationRule{queryParameters}";
            return this.SendAsync<_domain_configuration_rules.Rule>("GET", uri, null, null, false);
        }
        
        // Path: /v1/domain/configurationRule/check
        public Task PostV1DomainConfigurationRuleCheckAsync(_domain_configuration_rules.RuleData _body, _domain.ActionEnum action, string domain) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("action", action);
            queryParametersTemp.Add("domain", domain);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/domain/configurationRule/check{queryParameters}";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/domain/contact
        public Task<_domain.Contact[]> GetV1DomainContactAsync() {
            string uri = $"/v1/domain/contact";
            return this.SendAsync<_domain.Contact[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/contact
        public Task<_domain.Contact> PostV1DomainContactAsync(_domain.Contact _body) {
            string uri = $"/v1/domain/contact";
            return this.SendAsync<_domain.Contact>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/domain/contact/{contactId}
        public Task<_domain.Contact> GetV1DomainContactContactIdAsync(long contactId) {
            string uri = $"/v1/domain/contact/{contactId}";
            return this.SendAsync<_domain.Contact>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/contact/{contactId}
        public Task<_domain.Contact> PutV1DomainContactContactIdAsync(_domain.Contact _body, long contactId) {
            string uri = $"/v1/domain/contact/{contactId}";
            return this.SendAsync<_domain.Contact>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/domain/data/claimNotice
        public Task<_domain_data_claimNotice.ClaimNotice> GetV1DomainDataClaimNoticeAsync(string domain) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("domain", domain);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/domain/data/claimNotice{queryParameters}";
            return this.SendAsync<_domain_data_claimNotice.ClaimNotice>("GET", uri, null, null, false);
        }
        
        // Path: /v1/domain/data/extension
        public Task<System.String[]> GetV1DomainDataExtensionAsync([System.Runtime.InteropServices.OptionalAttribute()] _nichandle.OvhSubsidiaryEnum? country) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("country", country);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/domain/data/extension{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/domain/data/smd
        public Task<_domain_data_smd.Smd[]> GetV1DomainDataSmdAsync() {
            string uri = $"/v1/domain/data/smd";
            return this.SendAsync<_domain_data_smd.Smd[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/data/smd
        public Task<_domain_data_smd.Smd> PostV1DomainDataSmdAsync(_domain_data_smd.SmdBody _body) {
            string uri = $"/v1/domain/data/smd";
            return this.SendAsync<_domain_data_smd.Smd>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/domain/data/smd/{smdId}
        public Task DeleteV1DomainDataSmdSmdIdAsync(System.Guid smdId) {
            string uri = $"/v1/domain/data/smd/{smdId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/domain/data/smd/{smdId}
        public Task<_domain_data_smd.Smd> GetV1DomainDataSmdSmdIdAsync(System.Guid smdId) {
            string uri = $"/v1/domain/data/smd/{smdId}";
            return this.SendAsync<_domain_data_smd.Smd>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/data/smd/{smdId}
        public Task<_domain_data_smd.Smd> PutV1DomainDataSmdSmdIdAsync(_domain_data_smd.SmdBody _body, System.Guid smdId) {
            string uri = $"/v1/domain/data/smd/{smdId}";
            return this.SendAsync<_domain_data_smd.Smd>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/domain/extensions
        public Task<System.String[]> GetV1DomainExtensionsAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? geolocalizations, [System.Runtime.InteropServices.OptionalAttribute()] _domain_extensions.OrderByTypeEnum? orderBy, [System.Runtime.InteropServices.OptionalAttribute()] _nichandle.OvhSubsidiaryEnum? ovhSubsidiary, [System.Runtime.InteropServices.OptionalAttribute()] System.String? thematics) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("geolocalizations", geolocalizations);
            queryParametersTemp.Add("orderBy", orderBy);
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            queryParametersTemp.Add("thematics", thematics);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/domain/extensions{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/extensions/byCategory
        public Task<_domain_extensions.ExtensionsByCategory> GetV1DomainExtensionsByCategoryAsync([System.Runtime.InteropServices.OptionalAttribute()] _domain_extensions.CategoryTypeEnum[]? categoryType) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("categoryType", categoryType);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/domain/extensions/byCategory{queryParameters}";
            return this.SendAsync<_domain_extensions.ExtensionsByCategory>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/extensions/highlighted
        public Task<System.String[]> GetV1DomainExtensionsHighlightedAsync([System.Runtime.InteropServices.OptionalAttribute()] _nichandle.OvhSubsidiaryEnum? ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/domain/extensions/highlighted{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/extensions/pricingAttributes
        public Task<_domain_extensions.ExtensionsPricingAttributes[]> GetV1DomainExtensionsPricingAttributesAsync([System.Runtime.InteropServices.OptionalAttribute()] _nichandle.OvhSubsidiaryEnum? ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/domain/extensions/pricingAttributes{queryParameters}";
            return this.SendAsync<_domain_extensions.ExtensionsPricingAttributes[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/extensions/{name}
        public Task<_domain_extensions.Extension> GetV1DomainExtensionsNameAsync(string name) {
            string uri = $"/v1/domain/extensions/{name}";
            return this.SendAsync<_domain_extensions.Extension>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/extensions/{name}/registryConfigurations
        public Task<_domain_extensions_registryConfigurations.RegistryConfigurations> GetV1DomainExtensionsNameRegistryConfigurationsAsync(string name) {
            string uri = $"/v1/domain/extensions/{name}/registryConfigurations";
            return this.SendAsync<_domain_extensions_registryConfigurations.RegistryConfigurations>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone
        public Task<System.String[]> GetV1DomainZoneAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/domain/zone{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}
        public Task<_domain.ZoneWithIAM> GetV1DomainZoneZoneNameAsync(string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}";
            return this.SendAsync<_domain.ZoneWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/capabilities
        public Task<_domain_zone.Capabilities> GetV1DomainZoneZoneNameCapabilitiesAsync(string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/capabilities";
            return this.SendAsync<_domain_zone.Capabilities>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/changeContact
        public Task<System.Int64[]> PostV1DomainZoneZoneNameChangeContactAsync(_services.changeContact _body, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/confirmTermination
        public Task<System.String> PostV1DomainZoneZoneNameConfirmTerminationAsync(_services.confirmTermination _body, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/dnssec
        public Task DeleteV1DomainZoneZoneNameDnssecAsync(string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/dnssec";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/dnssec
        public Task<_domain_zone.Dnssec> GetV1DomainZoneZoneNameDnssecAsync(string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/dnssec";
            return this.SendAsync<_domain_zone.Dnssec>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/dnssec
        public Task PostV1DomainZoneZoneNameDnssecAsync(string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/dnssec";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/dynHost/login
        public Task<System.String[]> GetV1DomainZoneZoneNameDynHostLoginAsync(string zoneName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? login, [System.Runtime.InteropServices.OptionalAttribute()] System.String? subDomain) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("login", login);
            queryParametersTemp.Add("subDomain", subDomain);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/domain/zone/{zoneName}/dynHost/login{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/dynHost/login
        public Task<_domain_zone_dynHost.Login> PostV1DomainZoneZoneNameDynHostLoginAsync(_domain_zone_dynHost.LoginCreate _body, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/dynHost/login";
            return this.SendAsync<_domain_zone_dynHost.Login>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/dynHost/login/{login}
        public Task DeleteV1DomainZoneZoneNameDynHostLoginLoginAsync(string login, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/dynHost/login/{login}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/dynHost/login/{login}
        public Task<_domain_zone_dynHost.Login> GetV1DomainZoneZoneNameDynHostLoginLoginAsync(string login, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/dynHost/login/{login}";
            return this.SendAsync<_domain_zone_dynHost.Login>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/dynHost/login/{login}
        public Task PutV1DomainZoneZoneNameDynHostLoginLoginAsync(_domain_zone_dynHost.Login _body, string login, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/dynHost/login/{login}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/dynHost/login/{login}/changePassword
        public Task PostV1DomainZoneZoneNameDynHostLoginLoginChangePasswordAsync(_domain_zone_dynHost.LoginChangePassword _body, string login, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/dynHost/login/{login}/changePassword";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/dynHost/record
        public Task<System.Int64[]> GetV1DomainZoneZoneNameDynHostRecordAsync(string zoneName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? subDomain) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("subDomain", subDomain);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/domain/zone/{zoneName}/dynHost/record{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/dynHost/record
        public Task<_domain_zone_dynHost.Record> PostV1DomainZoneZoneNameDynHostRecordAsync(_domain_zone_dynHost.Record _body, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/dynHost/record";
            return this.SendAsync<_domain_zone_dynHost.Record>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/dynHost/record/{id}
        public Task DeleteV1DomainZoneZoneNameDynHostRecordIdAsync(long id, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/dynHost/record/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/dynHost/record/{id}
        public Task<_domain_zone_dynHost.Record> GetV1DomainZoneZoneNameDynHostRecordIdAsync(long id, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/dynHost/record/{id}";
            return this.SendAsync<_domain_zone_dynHost.Record>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/dynHost/record/{id}
        public Task PutV1DomainZoneZoneNameDynHostRecordIdAsync(_domain_zone_dynHost.Record _body, long id, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/dynHost/record/{id}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/export
        public Task<System.String> GetV1DomainZoneZoneNameExportAsync(string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/export";
            return this.SendAsync<string>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/history
        public Task<System.DateTime[]> GetV1DomainZoneZoneNameHistoryAsync(string zoneName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDateTo) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("creationDate.from", creationDateFrom);
            queryParametersTemp.Add("creationDate.to", creationDateTo);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/domain/zone/{zoneName}/history{queryParameters}";
            return this.SendAsync<System.DateTime[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/history/{creationDate}
        public Task<_domain_zone.ZoneRestorePoint> GetV1DomainZoneZoneNameHistoryCreationDateAsync(System.DateTime creationDate, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/history/{creationDate}";
            return this.SendAsync<_domain_zone.ZoneRestorePoint>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/history/{creationDate}/restore
        public Task<_domain_zone.Task> PostV1DomainZoneZoneNameHistoryCreationDateRestoreAsync(System.DateTime creationDate, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/history/{creationDate}/restore";
            return this.SendAsync<_domain_zone.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/import
        public Task<_domain_zone.Task> PostV1DomainZoneZoneNameImportAsync(_domain_zone.Import _body, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/import";
            return this.SendAsync<_domain_zone.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/option
        public Task<System.String[]> GetV1DomainZoneZoneNameOptionAsync(string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/option";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/option/{name}
        public Task<_domain_zone.Option> GetV1DomainZoneZoneNameOptionNameAsync(string name, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/option/{name}";
            return this.SendAsync<_domain_zone.Option>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/option/{name}/serviceInfos
        public Task<_services.Service> GetV1DomainZoneZoneNameOptionNameServiceInfosAsync(string name, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/option/{name}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/option/{name}/serviceInfos
        public Task PutV1DomainZoneZoneNameOptionNameServiceInfosAsync(string name, _service.RenewType renew, string zoneName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("renew", renew);
            string uri = $"/v1/domain/zone/{zoneName}/option/{name}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/record
        public Task<System.Int64[]> GetV1DomainZoneZoneNameRecordAsync(string zoneName, [System.Runtime.InteropServices.OptionalAttribute()] _domain_zone.RecordTypeEnum? fieldType, [System.Runtime.InteropServices.OptionalAttribute()] System.String? subDomain) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("fieldType", fieldType);
            queryParametersTemp.Add("subDomain", subDomain);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/domain/zone/{zoneName}/record{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/record
        public Task<_domain_zone.Record> PostV1DomainZoneZoneNameRecordAsync(_domain_zone.RecordCreate _body, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/record";
            return this.SendAsync<_domain_zone.Record>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/record/{id}
        public Task DeleteV1DomainZoneZoneNameRecordIdAsync(long id, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/record/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/record/{id}
        public Task<_domain_zone.Record> GetV1DomainZoneZoneNameRecordIdAsync(long id, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/record/{id}";
            return this.SendAsync<_domain_zone.Record>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/record/{id}
        public Task PutV1DomainZoneZoneNameRecordIdAsync(_domain_zone.RecordUpdate _body, long id, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/record/{id}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/redirection
        public Task<System.Int64[]> GetV1DomainZoneZoneNameRedirectionAsync(string zoneName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? subDomain) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("subDomain", subDomain);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/domain/zone/{zoneName}/redirection{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/redirection
        public Task<_domain_zone.Redirection> PostV1DomainZoneZoneNameRedirectionAsync(_domain_zone.RedirectionCreate _body, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/redirection";
            return this.SendAsync<_domain_zone.Redirection>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/redirection/{id}
        public Task DeleteV1DomainZoneZoneNameRedirectionIdAsync(long id, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/redirection/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/redirection/{id}
        public Task<_domain_zone.Redirection> GetV1DomainZoneZoneNameRedirectionIdAsync(long id, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/redirection/{id}";
            return this.SendAsync<_domain_zone.Redirection>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/redirection/{id}
        public Task PutV1DomainZoneZoneNameRedirectionIdAsync(_domain_zone.RedirectionUpdate _body, long id, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/redirection/{id}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/refresh
        public Task PostV1DomainZoneZoneNameRefreshAsync(string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/refresh";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/reset
        public Task PostV1DomainZoneZoneNameResetAsync(_domain_zone.Reset _body, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/reset";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/serviceInfos
        public Task<_services.Service> GetV1DomainZoneZoneNameServiceInfosAsync(string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/serviceInfos
        public Task PutV1DomainZoneZoneNameServiceInfosAsync(_services.Service _body, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/soa
        public Task<_domain_zone.Soa> GetV1DomainZoneZoneNameSoaAsync(string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/soa";
            return this.SendAsync<_domain_zone.Soa>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/soa
        public Task PutV1DomainZoneZoneNameSoaAsync(_domain_zone.Soa _body, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/soa";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/status
        public Task<_domain_zone.Status> GetV1DomainZoneZoneNameStatusAsync(string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/status";
            return this.SendAsync<_domain_zone.Status>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/task
        public Task<System.Int64[]> GetV1DomainZoneZoneNameTaskAsync(string zoneName, [System.Runtime.InteropServices.OptionalAttribute()] _domain.TaskFunctionEnum? function, [System.Runtime.InteropServices.OptionalAttribute()] _domain.TaskStatusEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("function", function);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/domain/zone/{zoneName}/task{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/task/{id}
        public Task<_domain_zone.Task> GetV1DomainZoneZoneNameTaskIdAsync(long id, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/task/{id}";
            return this.SendAsync<_domain_zone.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/task/{id}/accelerate
        public Task PostV1DomainZoneZoneNameTaskIdAccelerateAsync(long id, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/task/{id}/accelerate";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/task/{id}/cancel
        public Task PostV1DomainZoneZoneNameTaskIdCancelAsync(long id, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/task/{id}/cancel";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/task/{id}/relaunch
        public Task PostV1DomainZoneZoneNameTaskIdRelaunchAsync(long id, string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/task/{id}/relaunch";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/domain/zone/{zoneName}/terminate
        public Task<System.String> PostV1DomainZoneZoneNameTerminateAsync(string zoneName) {
            string uri = $"/v1/domain/zone/{zoneName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/domain/{serviceName}
        public Task<_domain.DomainServiceWithIAM> GetV1DomainServiceNameAsync(string serviceName) {
            string uri = $"/v1/domain/{serviceName}";
            return this.SendAsync<_domain.DomainServiceWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/{serviceName}
        public Task<_domain.DomainService> PutV1DomainServiceNameAsync(_domain.DomainService _body, string serviceName) {
            string uri = $"/v1/domain/{serviceName}";
            return this.SendAsync<_domain.DomainService>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/domain/{serviceName}/authInfo
        public Task<System.String> GetV1DomainServiceNameAuthInfoAsync(string serviceName) {
            string uri = $"/v1/domain/{serviceName}/authInfo";
            return this.SendAsync<string>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/{serviceName}/changeContact
        public Task<System.Int64[]> PostV1DomainServiceNameChangeContactAsync(_services.changeContact _body, string serviceName) {
            string uri = $"/v1/domain/{serviceName}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/domain/{serviceName}/configurations/obfuscatedEmails
        public Task<_domain_configurations.ObfuscatedEmail[]> GetV1DomainServiceNameConfigurationsObfuscatedEmailsAsync(string serviceName) {
            string uri = $"/v1/domain/{serviceName}/configurations/obfuscatedEmails";
            return this.SendAsync<_domain_configurations.ObfuscatedEmail[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/{serviceName}/configurations/obfuscatedEmails
        public Task<_domain_configurations.ObfuscatedEmail[]> PutV1DomainServiceNameConfigurationsObfuscatedEmailsAsync(_domain_configurations.ObfuscatedEmailUpdatePayload _body, string serviceName) {
            string uri = $"/v1/domain/{serviceName}/configurations/obfuscatedEmails";
            return this.SendAsync<_domain_configurations.ObfuscatedEmail[]>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/domain/{serviceName}/configurations/obfuscatedEmails/refresh
        public Task PostV1DomainServiceNameConfigurationsObfuscatedEmailsRefreshAsync(_domain_configurations.ObfuscatedEmailRefreshPayload _body, string serviceName) {
            string uri = $"/v1/domain/{serviceName}/configurations/obfuscatedEmails/refresh";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/domain/{serviceName}/configurations/optin
        public Task<_domain_configurations.Optin[]> GetV1DomainServiceNameConfigurationsOptinAsync(string serviceName) {
            string uri = $"/v1/domain/{serviceName}/configurations/optin";
            return this.SendAsync<_domain_configurations.Optin[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/{serviceName}/configurations/optin
        public Task<_domain_configurations.Optin[]> PutV1DomainServiceNameConfigurationsOptinAsync(_domain_configurations.OptinUpdatePayload _body, string serviceName) {
            string uri = $"/v1/domain/{serviceName}/configurations/optin";
            return this.SendAsync<_domain_configurations.Optin[]>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/domain/{serviceName}/dsRecord
        public Task<System.Int64[]> GetV1DomainServiceNameDsRecordAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _dnssec.KeyFlagEnum? flags, [System.Runtime.InteropServices.OptionalAttribute()] _dnssec.KeyStatusEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("flags", flags);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/domain/{serviceName}/dsRecord{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/{serviceName}/dsRecord
        public Task<_domain.Task> PostV1DomainServiceNameDsRecordAsync(_dnssec.UpdatePayload _body, string serviceName) {
            string uri = $"/v1/domain/{serviceName}/dsRecord";
            return this.SendAsync<_domain.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/domain/{serviceName}/dsRecord/{id}
        public Task<_dnssec.Key> GetV1DomainServiceNameDsRecordIdAsync(long id, string serviceName) {
            string uri = $"/v1/domain/{serviceName}/dsRecord/{id}";
            return this.SendAsync<_dnssec.Key>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/{serviceName}/glueRecord
        public Task<System.String[]> GetV1DomainServiceNameGlueRecordAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? host) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("host", host);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/domain/{serviceName}/glueRecord{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/{serviceName}/glueRecord
        public Task<_domain.Task> PostV1DomainServiceNameGlueRecordAsync(_domain_glueRecord.CreatePayload _body, string serviceName) {
            string uri = $"/v1/domain/{serviceName}/glueRecord";
            return this.SendAsync<_domain.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/domain/{serviceName}/glueRecord/{host}
        public Task<_domain.Task> DeleteV1DomainServiceNameGlueRecordHostAsync(string host, string serviceName) {
            string uri = $"/v1/domain/{serviceName}/glueRecord/{host}";
            return this.SendAsync<_domain.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/domain/{serviceName}/glueRecord/{host}
        public Task<_domain_glueRecord.GlueRecord> GetV1DomainServiceNameGlueRecordHostAsync(string host, string serviceName) {
            string uri = $"/v1/domain/{serviceName}/glueRecord/{host}";
            return this.SendAsync<_domain_glueRecord.GlueRecord>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/{serviceName}/glueRecord/{host}/update
        public Task<_domain.Task> PostV1DomainServiceNameGlueRecordHostUpdateAsync(_domain_glueRecord.GlueRecord _body, string host, string serviceName) {
            string uri = $"/v1/domain/{serviceName}/glueRecord/{host}/update";
            return this.SendAsync<_domain.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/domain/{serviceName}/nameServer
        public Task<System.Int64[]> GetV1DomainServiceNameNameServerAsync(string serviceName) {
            string uri = $"/v1/domain/{serviceName}/nameServer";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/{serviceName}/nameServer
        public Task<_domain.Task> PostV1DomainServiceNameNameServerAsync(_domain_nameServer.CreatePayload _body, string serviceName) {
            string uri = $"/v1/domain/{serviceName}/nameServer";
            return this.SendAsync<_domain.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/domain/{serviceName}/nameServer/{id}
        public Task<_domain.Task> DeleteV1DomainServiceNameNameServerIdAsync(long id, string serviceName) {
            string uri = $"/v1/domain/{serviceName}/nameServer/{id}";
            return this.SendAsync<_domain.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/domain/{serviceName}/nameServer/{id}
        public Task<_domain_nameServer.FullNameServer> GetV1DomainServiceNameNameServerIdAsync(long id, string serviceName) {
            string uri = $"/v1/domain/{serviceName}/nameServer/{id}";
            return this.SendAsync<_domain_nameServer.FullNameServer>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/{serviceName}/nameServer/{id}/status
        public Task<_domain_nameServer.NameServerStatus> GetV1DomainServiceNameNameServerIdStatusAsync(long id, string serviceName) {
            string uri = $"/v1/domain/{serviceName}/nameServer/{id}/status";
            return this.SendAsync<_domain_nameServer.NameServerStatus>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/{serviceName}/nameServers/update
        public Task<_domain.Task> PostV1DomainServiceNameNameServersUpdateAsync(_domain_nameServer.UpdatePayload _body, string serviceName) {
            string uri = $"/v1/domain/{serviceName}/nameServers/update";
            return this.SendAsync<_domain.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/domain/{serviceName}/option
        public Task<_domain.DomainOptionEnum[]> GetV1DomainServiceNameOptionAsync(string serviceName) {
            string uri = $"/v1/domain/{serviceName}/option";
            return this.SendAsync<_domain.DomainOptionEnum[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/{serviceName}/option/{option}
        public Task DeleteV1DomainServiceNameOptionOptionAsync(_domain.DomainOptionEnum option, string serviceName) {
            string uri = $"/v1/domain/{serviceName}/option/{option}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/domain/{serviceName}/option/{option}
        public Task<_domain.Option> GetV1DomainServiceNameOptionOptionAsync(_domain.DomainOptionEnum option, string serviceName) {
            string uri = $"/v1/domain/{serviceName}/option/{option}";
            return this.SendAsync<_domain.Option>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/{serviceName}/options
        public Task<_domain.ServiceOptions> GetV1DomainServiceNameOptionsAsync(string serviceName) {
            string uri = $"/v1/domain/{serviceName}/options";
            return this.SendAsync<_domain.ServiceOptions>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/{serviceName}/outgoingTransfer/approve
        public Task PostV1DomainServiceNameOutgoingTransferApproveAsync(_domain_outgoingTransfer.Approve _body, string serviceName) {
            string uri = $"/v1/domain/{serviceName}/outgoingTransfer/approve";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/domain/{serviceName}/rules/emailsObfuscation
        public Task<_domain_configurations.ContactTypeEnum[]> GetV1DomainServiceNameRulesEmailsObfuscationAsync(string serviceName) {
            string uri = $"/v1/domain/{serviceName}/rules/emailsObfuscation";
            return this.SendAsync<_domain_configurations.ContactTypeEnum[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/{serviceName}/rules/optin
        public Task<_domain_rules.Optin[]> GetV1DomainServiceNameRulesOptinAsync(string serviceName) {
            string uri = $"/v1/domain/{serviceName}/rules/optin";
            return this.SendAsync<_domain_rules.Optin[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1DomainServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/domain/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/{serviceName}/serviceInfos
        public Task PutV1DomainServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/domain/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/domain/{serviceName}/task
        public Task<System.Int64[]> GetV1DomainServiceNameTaskAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? function, [System.Runtime.InteropServices.OptionalAttribute()] _domain.OperationStatusEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("function", function);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/domain/{serviceName}/task{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/{serviceName}/task/{id}
        public Task<_domain.Task> GetV1DomainServiceNameTaskIdAsync(long id, string serviceName) {
            string uri = $"/v1/domain/{serviceName}/task/{id}";
            return this.SendAsync<_domain.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/domain/{serviceName}/task/{id}/accelerate
        public Task PostV1DomainServiceNameTaskIdAccelerateAsync(long id, string serviceName) {
            string uri = $"/v1/domain/{serviceName}/task/{id}/accelerate";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/domain/{serviceName}/task/{id}/cancel
        public Task PostV1DomainServiceNameTaskIdCancelAsync(long id, string serviceName) {
            string uri = $"/v1/domain/{serviceName}/task/{id}/cancel";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/domain/{serviceName}/task/{id}/relaunch
        public Task PostV1DomainServiceNameTaskIdRelaunchAsync(long id, string serviceName) {
            string uri = $"/v1/domain/{serviceName}/task/{id}/relaunch";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/domain/{serviceName}/ukOutgoingTransfer
        public Task<_domain.Task> PostV1DomainServiceNameUkOutgoingTransferAsync(_domain.UkRegistrar _body, string serviceName) {
            string uri = $"/v1/domain/{serviceName}/ukOutgoingTransfer";
            return this.SendAsync<_domain.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/domain/{serviceName}/ukRegistrars
        public Task<_domain.UkRegistrar[]> GetV1DomainServiceNameUkRegistrarsAsync(string serviceName) {
            string uri = $"/v1/domain/{serviceName}/ukRegistrars";
            return this.SendAsync<_domain.UkRegistrar[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain
        public Task<System.String[]> GetV1EmailDomainAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/domain{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/delegatedAccount
        public Task<System.String[]> GetV1EmailDomainDelegatedAccountAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? accountName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? domain) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("accountName", accountName);
            queryParametersTemp.Add("domain", domain);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/domain/delegatedAccount{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/delegatedAccount/{email}
        public Task<_email_domain.AccountDelegated> GetV1EmailDomainDelegatedAccountEmailAsync(string email) {
            string uri = $"/v1/email/domain/delegatedAccount/{email}";
            return this.SendAsync<_email_domain.AccountDelegated>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/delegatedAccount/{email}
        public Task PutV1EmailDomainDelegatedAccountEmailAsync(_email_domain.AccountDelegated _body, string email) {
            string uri = $"/v1/email/domain/delegatedAccount/{email}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/delegatedAccount/{email}/changePassword
        public Task<_email_domain.TaskPop> PostV1EmailDomainDelegatedAccountEmailChangePasswordAsync(string email, string password) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("password", password);
            string uri = $"/v1/email/domain/delegatedAccount/{email}/changePassword";
            return this.SendAsync<_email_domain.TaskPop>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/delegatedAccount/{email}/filter
        public Task<System.String[]> GetV1EmailDomainDelegatedAccountEmailFilterAsync(string email) {
            string uri = $"/v1/email/domain/delegatedAccount/{email}/filter";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/delegatedAccount/{email}/filter
        public Task<_email_domain.TaskFilter> PostV1EmailDomainDelegatedAccountEmailFilterAsync(_domain.DomainFilterActionEnum action, bool active, string email, string header, string name, _domain.DomainFilterOperandEnum operand, long priority, string value, [System.Runtime.InteropServices.OptionalAttribute()] System.String? actionParam) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("action", action);
            _body.Add("actionParam", actionParam);
            _body.Add("active", active);
            _body.Add("header", header);
            _body.Add("name", name);
            _body.Add("operand", operand);
            _body.Add("priority", priority);
            _body.Add("value", value);
            string uri = $"/v1/email/domain/delegatedAccount/{email}/filter";
            return this.SendAsync<_email_domain.TaskFilter>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/delegatedAccount/{email}/filter/{name}
        public Task<_email_domain.TaskFilter[]> DeleteV1EmailDomainDelegatedAccountEmailFilterNameAsync(string email, string name) {
            string uri = $"/v1/email/domain/delegatedAccount/{email}/filter/{name}";
            return this.SendAsync<_email_domain.TaskFilter[]>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/delegatedAccount/{email}/filter/{name}
        public Task<_email_domain.Filter> GetV1EmailDomainDelegatedAccountEmailFilterNameAsync(string email, string name) {
            string uri = $"/v1/email/domain/delegatedAccount/{email}/filter/{name}";
            return this.SendAsync<_email_domain.Filter>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/delegatedAccount/{email}/filter/{name}/changeActivity
        public Task<_email_domain.TaskFilter> PostV1EmailDomainDelegatedAccountEmailFilterNameChangeActivityAsync(bool activity, string email, string name) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("activity", activity);
            string uri = $"/v1/email/domain/delegatedAccount/{email}/filter/{name}/changeActivity";
            return this.SendAsync<_email_domain.TaskFilter>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/delegatedAccount/{email}/filter/{name}/changePriority
        public Task<_email_domain.TaskFilter> PostV1EmailDomainDelegatedAccountEmailFilterNameChangePriorityAsync(string email, string name, long priority) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("priority", priority);
            string uri = $"/v1/email/domain/delegatedAccount/{email}/filter/{name}/changePriority";
            return this.SendAsync<_email_domain.TaskFilter>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/delegatedAccount/{email}/filter/{name}/rule
        public Task<System.Int64[]> GetV1EmailDomainDelegatedAccountEmailFilterNameRuleAsync(string email, string name) {
            string uri = $"/v1/email/domain/delegatedAccount/{email}/filter/{name}/rule";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/delegatedAccount/{email}/filter/{name}/rule
        public Task<_email_domain.TaskFilter> PostV1EmailDomainDelegatedAccountEmailFilterNameRuleAsync(string email, string header, string name, _domain.DomainFilterOperandEnum operand, string value) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("header", header);
            _body.Add("operand", operand);
            _body.Add("value", value);
            string uri = $"/v1/email/domain/delegatedAccount/{email}/filter/{name}/rule";
            return this.SendAsync<_email_domain.TaskFilter>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/delegatedAccount/{email}/filter/{name}/rule/{id}
        public Task<_email_domain.TaskFilter[]> DeleteV1EmailDomainDelegatedAccountEmailFilterNameRuleIdAsync(string email, long id, string name) {
            string uri = $"/v1/email/domain/delegatedAccount/{email}/filter/{name}/rule/{id}";
            return this.SendAsync<_email_domain.TaskFilter[]>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/delegatedAccount/{email}/filter/{name}/rule/{id}
        public Task<_email_domain.Rule> GetV1EmailDomainDelegatedAccountEmailFilterNameRuleIdAsync(string email, long id, string name) {
            string uri = $"/v1/email/domain/delegatedAccount/{email}/filter/{name}/rule/{id}";
            return this.SendAsync<_email_domain.Rule>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/delegatedAccount/{email}/responder
        public Task<_email_domain.TaskSpecialAccount> DeleteV1EmailDomainDelegatedAccountEmailResponderAsync(string email) {
            string uri = $"/v1/email/domain/delegatedAccount/{email}/responder";
            return this.SendAsync<_email_domain.TaskSpecialAccount>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/delegatedAccount/{email}/responder
        public Task<_email_domain.ResponderAccount> GetV1EmailDomainDelegatedAccountEmailResponderAsync(string email) {
            string uri = $"/v1/email/domain/delegatedAccount/{email}/responder";
            return this.SendAsync<_email_domain.ResponderAccount>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/delegatedAccount/{email}/responder
        public Task<_email_domain.TaskSpecialAccount> PostV1EmailDomainDelegatedAccountEmailResponderAsync(string content, bool copy, string email, [System.Runtime.InteropServices.OptionalAttribute()] System.String? copyTo, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? from, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? to) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("content", content);
            _body.Add("copy", copy);
            _body.Add("copyTo", copyTo);
            _body.Add("from", from);
            _body.Add("to", to);
            string uri = $"/v1/email/domain/delegatedAccount/{email}/responder";
            return this.SendAsync<_email_domain.TaskSpecialAccount>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/delegatedAccount/{email}/responder
        public Task PutV1EmailDomainDelegatedAccountEmailResponderAsync(_email_domain.ResponderAccount _body, string email) {
            string uri = $"/v1/email/domain/delegatedAccount/{email}/responder";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/delegatedAccount/{email}/updateUsage
        public Task PostV1EmailDomainDelegatedAccountEmailUpdateUsageAsync(string email) {
            string uri = $"/v1/email/domain/delegatedAccount/{email}/updateUsage";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/delegatedAccount/{email}/usage
        public Task<_domain.DomainUsageAccountStruct> PostV1EmailDomainDelegatedAccountEmailUsageAsync(string email) {
            string uri = $"/v1/email/domain/delegatedAccount/{email}/usage";
            return this.SendAsync<_domain.DomainUsageAccountStruct>("POST", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/mailingListLimits
        public Task<_domain.DomainMlLimits> GetV1EmailDomainMailingListLimitsAsync(bool moderatorMessage) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("moderatorMessage", moderatorMessage);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/domain/mailingListLimits{queryParameters}";
            return this.SendAsync<_domain.DomainMlLimits>("GET", uri, null, null, false);
        }
        
        // Path: /v1/email/domain/{domain}
        public Task<_email_domain.DomainServiceWithIAM> GetV1EmailDomainDomainAsync(string domain) {
            string uri = $"/v1/email/domain/{domain}";
            return this.SendAsync<_email_domain.DomainServiceWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/account
        public Task<System.String[]> GetV1EmailDomainDomainAccountAsync(string domain, [System.Runtime.InteropServices.OptionalAttribute()] System.String? accountName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? description) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("accountName", accountName);
            queryParametersTemp.Add("description", description);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/domain/{domain}/account{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/account
        public Task<_email_domain.TaskPop> PostV1EmailDomainDomainAccountAsync(string accountName, string domain, string password, [System.Runtime.InteropServices.OptionalAttribute()] System.String? description, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? size) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("accountName", accountName);
            _body.Add("description", description);
            _body.Add("password", password);
            _body.Add("size", size);
            string uri = $"/v1/email/domain/{domain}/account";
            return this.SendAsync<_email_domain.TaskPop>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/{domain}/account/{accountName}
        public Task<_email_domain.TaskPop> DeleteV1EmailDomainDomainAccountAccountNameAsync(string accountName, string domain) {
            string uri = $"/v1/email/domain/{domain}/account/{accountName}";
            return this.SendAsync<_email_domain.TaskPop>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/account/{accountName}
        public Task<_email_domain.Account> GetV1EmailDomainDomainAccountAccountNameAsync(string accountName, string domain) {
            string uri = $"/v1/email/domain/{domain}/account/{accountName}";
            return this.SendAsync<_email_domain.Account>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/account/{accountName}
        public Task PutV1EmailDomainDomainAccountAccountNameAsync(_email_domain.Account _body, string accountName, string domain) {
            string uri = $"/v1/email/domain/{domain}/account/{accountName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/{domain}/account/{accountName}/changePassword
        public Task<_email_domain.TaskPop> PostV1EmailDomainDomainAccountAccountNameChangePasswordAsync(string accountName, string domain, string password) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("password", password);
            string uri = $"/v1/email/domain/{domain}/account/{accountName}/changePassword";
            return this.SendAsync<_email_domain.TaskPop>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/{domain}/account/{accountName}/delegation
        public Task<System.String[]> GetV1EmailDomainDomainAccountAccountNameDelegationAsync(string accountName, string domain) {
            string uri = $"/v1/email/domain/{domain}/account/{accountName}/delegation";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/account/{accountName}/delegation
        public Task<System.String> PostV1EmailDomainDomainAccountAccountNameDelegationAsync(string accountId, string accountName, string domain) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("accountId", accountId);
            string uri = $"/v1/email/domain/{domain}/account/{accountName}/delegation";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/{domain}/account/{accountName}/delegation/{accountId}
        public Task<System.String> DeleteV1EmailDomainDomainAccountAccountNameDelegationAccountIdAsync(string accountId, string accountName, string domain) {
            string uri = $"/v1/email/domain/{domain}/account/{accountName}/delegation/{accountId}";
            return this.SendAsync<string>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/account/{accountName}/delegation/{accountId}
        public Task<_email_domain.Delegation> GetV1EmailDomainDomainAccountAccountNameDelegationAccountIdAsync(string accountId, string accountName, string domain) {
            string uri = $"/v1/email/domain/{domain}/account/{accountName}/delegation/{accountId}";
            return this.SendAsync<_email_domain.Delegation>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/account/{accountName}/filter
        public Task<System.String[]> GetV1EmailDomainDomainAccountAccountNameFilterAsync(string accountName, string domain) {
            string uri = $"/v1/email/domain/{domain}/account/{accountName}/filter";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/account/{accountName}/filter
        public Task<_email_domain.TaskFilter> PostV1EmailDomainDomainAccountAccountNameFilterAsync(string accountName, _domain.DomainFilterActionEnum action, bool active, string domain, string header, string name, _domain.DomainFilterOperandEnum operand, long priority, string value, [System.Runtime.InteropServices.OptionalAttribute()] System.String? actionParam) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("action", action);
            _body.Add("actionParam", actionParam);
            _body.Add("active", active);
            _body.Add("header", header);
            _body.Add("name", name);
            _body.Add("operand", operand);
            _body.Add("priority", priority);
            _body.Add("value", value);
            string uri = $"/v1/email/domain/{domain}/account/{accountName}/filter";
            return this.SendAsync<_email_domain.TaskFilter>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/{domain}/account/{accountName}/filter/{name}
        public Task<_email_domain.TaskFilter[]> DeleteV1EmailDomainDomainAccountAccountNameFilterNameAsync(string accountName, string domain, string name) {
            string uri = $"/v1/email/domain/{domain}/account/{accountName}/filter/{name}";
            return this.SendAsync<_email_domain.TaskFilter[]>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/account/{accountName}/filter/{name}
        public Task<_email_domain.Filter> GetV1EmailDomainDomainAccountAccountNameFilterNameAsync(string accountName, string domain, string name) {
            string uri = $"/v1/email/domain/{domain}/account/{accountName}/filter/{name}";
            return this.SendAsync<_email_domain.Filter>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/account/{accountName}/filter/{name}/changeActivity
        public Task<_email_domain.TaskFilter> PostV1EmailDomainDomainAccountAccountNameFilterNameChangeActivityAsync(string accountName, bool activity, string domain, string name) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("activity", activity);
            string uri = $"/v1/email/domain/{domain}/account/{accountName}/filter/{name}/changeActivity";
            return this.SendAsync<_email_domain.TaskFilter>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/{domain}/account/{accountName}/filter/{name}/changePriority
        public Task<_email_domain.TaskFilter> PostV1EmailDomainDomainAccountAccountNameFilterNameChangePriorityAsync(string accountName, string domain, string name, long priority) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("priority", priority);
            string uri = $"/v1/email/domain/{domain}/account/{accountName}/filter/{name}/changePriority";
            return this.SendAsync<_email_domain.TaskFilter>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/{domain}/account/{accountName}/filter/{name}/rule
        public Task<System.Int64[]> GetV1EmailDomainDomainAccountAccountNameFilterNameRuleAsync(string accountName, string domain, string name) {
            string uri = $"/v1/email/domain/{domain}/account/{accountName}/filter/{name}/rule";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/account/{accountName}/filter/{name}/rule
        public Task<_email_domain.TaskFilter> PostV1EmailDomainDomainAccountAccountNameFilterNameRuleAsync(string accountName, string domain, string header, string name, _domain.DomainFilterOperandEnum operand, string value) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("header", header);
            _body.Add("operand", operand);
            _body.Add("value", value);
            string uri = $"/v1/email/domain/{domain}/account/{accountName}/filter/{name}/rule";
            return this.SendAsync<_email_domain.TaskFilter>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/{domain}/account/{accountName}/filter/{name}/rule/{id}
        public Task<_email_domain.TaskFilter[]> DeleteV1EmailDomainDomainAccountAccountNameFilterNameRuleIdAsync(string accountName, string domain, long id, string name) {
            string uri = $"/v1/email/domain/{domain}/account/{accountName}/filter/{name}/rule/{id}";
            return this.SendAsync<_email_domain.TaskFilter[]>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/account/{accountName}/filter/{name}/rule/{id}
        public Task<_email_domain.Rule> GetV1EmailDomainDomainAccountAccountNameFilterNameRuleIdAsync(string accountName, string domain, long id, string name) {
            string uri = $"/v1/email/domain/{domain}/account/{accountName}/filter/{name}/rule/{id}";
            return this.SendAsync<_email_domain.Rule>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/account/{accountName}/migrate
        public Task<System.String[]> GetV1EmailDomainDomainAccountAccountNameMigrateAsync(string accountName, string domain, [System.Runtime.InteropServices.OptionalAttribute()] _email_domain.MigrationServiceType? type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/domain/{domain}/account/{accountName}/migrate{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/account/{accountName}/migrate/{destinationServiceName}
        public Task<_email_domain.MigrationService> GetV1EmailDomainDomainAccountAccountNameMigrateDestinationServiceNameAsync(string accountName, string destinationServiceName, string domain) {
            string uri = $"/v1/email/domain/{domain}/account/{accountName}/migrate/{destinationServiceName}";
            return this.SendAsync<_email_domain.MigrationService>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/account/{accountName}/migrate/{destinationServiceName}/destinationEmailAddress
        public Task<System.String[]> GetV1EmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressAsync(string accountName, string destinationServiceName, string domain, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? quota) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("quota", quota);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/domain/{domain}/account/{accountName}/migrate/{destinationServiceName}/destinationEmailAddress{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/account/{accountName}/migrate/{destinationServiceName}/destinationEmailAddress/{destinationEmailAddress}
        public Task<_email_domain.MigrationAccount> GetV1EmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressAsync(string accountName, string destinationEmailAddress, string destinationServiceName, string domain) {
            string uri = $"/v1/email/domain/{domain}/account/{accountName}/migrate/{destinationServiceName}/destinationEmailAddress/{destinationEmailAddress}";
            return this.SendAsync<_email_domain.MigrationAccount>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/account/{accountName}/migrate/{destinationServiceName}/destinationEmailAddress/{destinationEmailAddress}/checkMigrate
        public Task<_email_domain.MigrationCheckStruct> GetV1EmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressCheckMigrateAsync(string accountName, string destinationEmailAddress, string destinationServiceName, string domain) {
            string uri = $"/v1/email/domain/{domain}/account/{accountName}/migrate/{destinationServiceName}/destinationEmailAddress/{destinationEmailAddress}/checkMigrate";
            return this.SendAsync<_email_domain.MigrationCheckStruct>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/account/{accountName}/migrate/{destinationServiceName}/destinationEmailAddress/{destinationEmailAddress}/migrate
        public Task<_email_domain.TaskPop> PostV1EmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressMigrateAsync(string accountName, string destinationEmailAddress, string destinationServiceName, string domain, string password) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("password", password);
            string uri = $"/v1/email/domain/{domain}/account/{accountName}/migrate/{destinationServiceName}/destinationEmailAddress/{destinationEmailAddress}/migrate";
            return this.SendAsync<_email_domain.TaskPop>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/{domain}/account/{accountName}/updateUsage
        public Task PostV1EmailDomainDomainAccountAccountNameUpdateUsageAsync(string accountName, string domain) {
            string uri = $"/v1/email/domain/{domain}/account/{accountName}/updateUsage";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/account/{accountName}/usage
        public Task<_domain.DomainUsageAccountStruct> GetV1EmailDomainDomainAccountAccountNameUsageAsync(string accountName, string domain) {
            string uri = $"/v1/email/domain/{domain}/account/{accountName}/usage";
            return this.SendAsync<_domain.DomainUsageAccountStruct>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/acl
        public Task<System.String[]> GetV1EmailDomainDomainAclAsync(string domain) {
            string uri = $"/v1/email/domain/{domain}/acl";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/acl
        public Task<_email_domain.Acl> PostV1EmailDomainDomainAclAsync(string accountId, string domain) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("accountId", accountId);
            string uri = $"/v1/email/domain/{domain}/acl";
            return this.SendAsync<_email_domain.Acl>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/{domain}/acl/{accountId}
        public Task DeleteV1EmailDomainDomainAclAccountIdAsync(string accountId, string domain) {
            string uri = $"/v1/email/domain/{domain}/acl/{accountId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/acl/{accountId}
        public Task<_email_domain.Acl> GetV1EmailDomainDomainAclAccountIdAsync(string accountId, string domain) {
            string uri = $"/v1/email/domain/{domain}/acl/{accountId}";
            return this.SendAsync<_email_domain.Acl>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/changeContact
        public Task<System.Int64[]> PostV1EmailDomainDomainChangeContactAsync(string domain, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactTech) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("contactAdmin", contactAdmin);
            _body.Add("contactBilling", contactBilling);
            _body.Add("contactTech", contactTech);
            string uri = $"/v1/email/domain/{domain}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/{domain}/changeDnsMXFilter
        public Task PostV1EmailDomainDomainChangeDnsMXFilterAsync(string domain, _domain.DomainMXFilterEnum mxFilter, [System.Runtime.InteropServices.OptionalAttribute()] System.String? customTarget, [System.Runtime.InteropServices.OptionalAttribute()] System.String? subDomain) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("customTarget", customTarget);
            _body.Add("mxFilter", mxFilter);
            _body.Add("subDomain", subDomain);
            string uri = $"/v1/email/domain/{domain}/changeDnsMXFilter";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/{domain}/confirmTermination
        public Task<System.String> PostV1EmailDomainDomainConfirmTerminationAsync(string domain, string token, [System.Runtime.InteropServices.OptionalAttribute()] System.String? commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum? reason) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("commentary", commentary);
            _body.Add("reason", reason);
            _body.Add("token", token);
            string uri = $"/v1/email/domain/{domain}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/{domain}/dkim
        public Task<_email_domain.dkim_simplified> GetV1EmailDomainDomainDkimAsync(string domain) {
            string uri = $"/v1/email/domain/{domain}/dkim";
            return this.SendAsync<_email_domain.dkim_simplified>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/dkim/disable
        public Task<_email_domain.task> PutV1EmailDomainDomainDkimDisableAsync(string domain) {
            string uri = $"/v1/email/domain/{domain}/dkim/disable";
            return this.SendAsync<_email_domain.task>("PUT", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/dkim/enable
        public Task<_email_domain.task> PutV1EmailDomainDomainDkimEnableAsync(string domain) {
            string uri = $"/v1/email/domain/{domain}/dkim/enable";
            return this.SendAsync<_email_domain.task>("PUT", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/dnsMXFilter
        public Task<_domain.DomainMXFilterEnum> GetV1EmailDomainDomainDnsMXFilterAsync(string domain, [System.Runtime.InteropServices.OptionalAttribute()] System.String? subDomain) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("subDomain", subDomain);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/domain/{domain}/dnsMXFilter{queryParameters}";
            return this.SendAsync<_domain.DomainMXFilterEnum>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/dnsMXRecords
        public Task<System.String[]> GetV1EmailDomainDomainDnsMXRecordsAsync(string domain, [System.Runtime.InteropServices.OptionalAttribute()] System.String? subDomain) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("subDomain", subDomain);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/domain/{domain}/dnsMXRecords{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/mailingList
        public Task<System.String[]> GetV1EmailDomainDomainMailingListAsync(string domain, [System.Runtime.InteropServices.OptionalAttribute()] System.String? name) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("name", name);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/domain/{domain}/mailingList{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/mailingList
        public Task<_email_domain.TaskMl> PostV1EmailDomainDomainMailingListAsync(string domain, _domain.DomainMlLanguageEnum language, string name, _domain.DomainMlOptionsStruct options, string ownerEmail, [System.Runtime.InteropServices.OptionalAttribute()] System.String? replyTo) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("language", language);
            _body.Add("name", name);
            _body.Add("options", options);
            _body.Add("ownerEmail", ownerEmail);
            _body.Add("replyTo", replyTo);
            string uri = $"/v1/email/domain/{domain}/mailingList";
            return this.SendAsync<_email_domain.TaskMl>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/{domain}/mailingList/{name}
        public Task<_email_domain.TaskMl> DeleteV1EmailDomainDomainMailingListNameAsync(string domain, string name) {
            string uri = $"/v1/email/domain/{domain}/mailingList/{name}";
            return this.SendAsync<_email_domain.TaskMl>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/mailingList/{name}
        public Task<_email_domain.MailingList> GetV1EmailDomainDomainMailingListNameAsync(string domain, string name) {
            string uri = $"/v1/email/domain/{domain}/mailingList/{name}";
            return this.SendAsync<_email_domain.MailingList>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/mailingList/{name}
        public Task PutV1EmailDomainDomainMailingListNameAsync(_email_domain.MailingList _body, string domain, string name) {
            string uri = $"/v1/email/domain/{domain}/mailingList/{name}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/{domain}/mailingList/{name}/changeOptions
        public Task<_email_domain.TaskMl> PostV1EmailDomainDomainMailingListNameChangeOptionsAsync(string domain, string name, _domain.DomainMlOptionsStruct options) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("options", options);
            string uri = $"/v1/email/domain/{domain}/mailingList/{name}/changeOptions";
            return this.SendAsync<_email_domain.TaskMl>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/{domain}/mailingList/{name}/moderator
        public Task<System.String[]> GetV1EmailDomainDomainMailingListNameModeratorAsync(string domain, string name, [System.Runtime.InteropServices.OptionalAttribute()] System.String? email) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("email", email);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/domain/{domain}/mailingList/{name}/moderator{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/mailingList/{name}/moderator
        public Task<_email_domain.TaskMl> PostV1EmailDomainDomainMailingListNameModeratorAsync(string domain, string email, string name) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("email", email);
            string uri = $"/v1/email/domain/{domain}/mailingList/{name}/moderator";
            return this.SendAsync<_email_domain.TaskMl>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/{domain}/mailingList/{name}/moderator/{email}
        public Task<_email_domain.TaskMl> DeleteV1EmailDomainDomainMailingListNameModeratorEmailAsync(string domain, string email, string name) {
            string uri = $"/v1/email/domain/{domain}/mailingList/{name}/moderator/{email}";
            return this.SendAsync<_email_domain.TaskMl>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/mailingList/{name}/moderator/{email}
        public Task<_email_domain.Moderator> GetV1EmailDomainDomainMailingListNameModeratorEmailAsync(string domain, string email, string name) {
            string uri = $"/v1/email/domain/{domain}/mailingList/{name}/moderator/{email}";
            return this.SendAsync<_email_domain.Moderator>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/mailingList/{name}/sendListByEmail
        public Task<_email_domain.TaskMl> PostV1EmailDomainDomainMailingListNameSendListByEmailAsync(string domain, string email, string name) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("email", email);
            string uri = $"/v1/email/domain/{domain}/mailingList/{name}/sendListByEmail";
            return this.SendAsync<_email_domain.TaskMl>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/{domain}/mailingList/{name}/subscriber
        public Task<System.String[]> GetV1EmailDomainDomainMailingListNameSubscriberAsync(string domain, string name, [System.Runtime.InteropServices.OptionalAttribute()] System.String? email) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("email", email);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/domain/{domain}/mailingList/{name}/subscriber{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/mailingList/{name}/subscriber
        public Task<_email_domain.TaskMl> PostV1EmailDomainDomainMailingListNameSubscriberAsync(string domain, string email, string name) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("email", email);
            string uri = $"/v1/email/domain/{domain}/mailingList/{name}/subscriber";
            return this.SendAsync<_email_domain.TaskMl>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/{domain}/mailingList/{name}/subscriber/{email}
        public Task<_email_domain.TaskMl> DeleteV1EmailDomainDomainMailingListNameSubscriberEmailAsync(string domain, string email, string name) {
            string uri = $"/v1/email/domain/{domain}/mailingList/{name}/subscriber/{email}";
            return this.SendAsync<_email_domain.TaskMl>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/mailingList/{name}/subscriber/{email}
        public Task<_email_domain.Subscriber> GetV1EmailDomainDomainMailingListNameSubscriberEmailAsync(string domain, string email, string name) {
            string uri = $"/v1/email/domain/{domain}/mailingList/{name}/subscriber/{email}";
            return this.SendAsync<_email_domain.Subscriber>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/migrateDelegationV3toV6
        public Task PostV1EmailDomainDomainMigrateDelegationV3toV6Async(string domain) {
            string uri = $"/v1/email/domain/{domain}/migrateDelegationV3toV6";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/quota
        public Task<_domain.DomainQuota> GetV1EmailDomainDomainQuotaAsync(string domain) {
            string uri = $"/v1/email/domain/{domain}/quota";
            return this.SendAsync<_domain.DomainQuota>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/recommendedDNSRecords
        public Task<_domain_zone.Record[]> GetV1EmailDomainDomainRecommendedDNSRecordsAsync(string domain) {
            string uri = $"/v1/email/domain/{domain}/recommendedDNSRecords";
            return this.SendAsync<_domain_zone.Record[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/redirection
        public Task<System.String[]> GetV1EmailDomainDomainRedirectionAsync(string domain, [System.Runtime.InteropServices.OptionalAttribute()] System.String? from, [System.Runtime.InteropServices.OptionalAttribute()] System.String? to) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("from", from);
            queryParametersTemp.Add("to", to);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/domain/{domain}/redirection{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/redirection
        public Task<_email_domain.TaskSpecialAccount> PostV1EmailDomainDomainRedirectionAsync(string domain, _email_domain.RedirectionCreation _body) {
            string uri = $"/v1/email/domain/{domain}/redirection";
            return this.SendAsync<_email_domain.TaskSpecialAccount>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/{domain}/redirection/{id}
        public Task<_email_domain.TaskSpecialAccount> DeleteV1EmailDomainDomainRedirectionIdAsync(string domain, string id) {
            string uri = $"/v1/email/domain/{domain}/redirection/{id}";
            return this.SendAsync<_email_domain.TaskSpecialAccount>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/redirection/{id}
        public Task<_email_domain.RedirectionGlobal> GetV1EmailDomainDomainRedirectionIdAsync(string domain, string id) {
            string uri = $"/v1/email/domain/{domain}/redirection/{id}";
            return this.SendAsync<_email_domain.RedirectionGlobal>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/redirection/{id}/changeRedirection
        public Task<_email_domain.TaskSpecialAccount> PostV1EmailDomainDomainRedirectionIdChangeRedirectionAsync(string domain, _email_domain.RedirectionChangeRedirectionCreation _body, string id) {
            string uri = $"/v1/email/domain/{domain}/redirection/{id}/changeRedirection";
            return this.SendAsync<_email_domain.TaskSpecialAccount>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/{domain}/responder
        public Task<System.String[]> GetV1EmailDomainDomainResponderAsync(string domain, [System.Runtime.InteropServices.OptionalAttribute()] System.String? account) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("account", account);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/domain/{domain}/responder{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/responder
        public Task<_email_domain.TaskSpecialAccount> PostV1EmailDomainDomainResponderAsync(string account, string content, bool copy, string domain, [System.Runtime.InteropServices.OptionalAttribute()] System.String? copyTo, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? from, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? to) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("account", account);
            _body.Add("content", content);
            _body.Add("copy", copy);
            _body.Add("copyTo", copyTo);
            _body.Add("from", from);
            _body.Add("to", to);
            string uri = $"/v1/email/domain/{domain}/responder";
            return this.SendAsync<_email_domain.TaskSpecialAccount>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/{domain}/responder/{account}
        public Task<_email_domain.TaskSpecialAccount> DeleteV1EmailDomainDomainResponderAccountAsync(string account, string domain) {
            string uri = $"/v1/email/domain/{domain}/responder/{account}";
            return this.SendAsync<_email_domain.TaskSpecialAccount>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/responder/{account}
        public Task<_email_domain.Responder> GetV1EmailDomainDomainResponderAccountAsync(string account, string domain) {
            string uri = $"/v1/email/domain/{domain}/responder/{account}";
            return this.SendAsync<_email_domain.Responder>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/responder/{account}
        public Task PutV1EmailDomainDomainResponderAccountAsync(_email_domain.Responder _body, string account, string domain) {
            string uri = $"/v1/email/domain/{domain}/responder/{account}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/{domain}/serviceInfos
        public Task<_services.Service> GetV1EmailDomainDomainServiceInfosAsync(string domain) {
            string uri = $"/v1/email/domain/{domain}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/serviceInfos
        public Task PutV1EmailDomainDomainServiceInfosAsync(_services.Service _body, string domain) {
            string uri = $"/v1/email/domain/{domain}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/domain/{domain}/summary
        public Task<_domain.DomainSummary> GetV1EmailDomainDomainSummaryAsync(string domain) {
            string uri = $"/v1/email/domain/{domain}/summary";
            return this.SendAsync<_domain.DomainSummary>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/task/account
        public Task<System.Int64[]> GetV1EmailDomainDomainTaskAccountAsync(string domain, [System.Runtime.InteropServices.OptionalAttribute()] System.String? name) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("name", name);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/domain/{domain}/task/account{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/task/account/{id}
        public Task<_email_domain.TaskPop> GetV1EmailDomainDomainTaskAccountIdAsync(string domain, long id) {
            string uri = $"/v1/email/domain/{domain}/task/account/{id}";
            return this.SendAsync<_email_domain.TaskPop>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/task/all
        public Task<System.Int64[]> GetV1EmailDomainDomainTaskAllAsync(string domain) {
            string uri = $"/v1/email/domain/{domain}/task/all";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/task/all/{id}
        public Task<_email_domain.task> GetV1EmailDomainDomainTaskAllIdAsync(string domain, long id) {
            string uri = $"/v1/email/domain/{domain}/task/all/{id}";
            return this.SendAsync<_email_domain.task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/task/filter
        public Task<System.Int64[]> GetV1EmailDomainDomainTaskFilterAsync(string domain, [System.Runtime.InteropServices.OptionalAttribute()] System.String? account) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("account", account);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/domain/{domain}/task/filter{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/task/filter/{id}
        public Task<_email_domain.TaskFilter> GetV1EmailDomainDomainTaskFilterIdAsync(string domain, long id) {
            string uri = $"/v1/email/domain/{domain}/task/filter/{id}";
            return this.SendAsync<_email_domain.TaskFilter>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/task/mailinglist
        public Task<System.Int64[]> GetV1EmailDomainDomainTaskMailinglistAsync(string domain, [System.Runtime.InteropServices.OptionalAttribute()] System.String? account) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("account", account);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/domain/{domain}/task/mailinglist{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/task/mailinglist/{id}
        public Task<_email_domain.TaskMl> GetV1EmailDomainDomainTaskMailinglistIdAsync(string domain, long id) {
            string uri = $"/v1/email/domain/{domain}/task/mailinglist/{id}";
            return this.SendAsync<_email_domain.TaskMl>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/task/redirection
        public Task<System.String[]> GetV1EmailDomainDomainTaskRedirectionAsync(string domain, [System.Runtime.InteropServices.OptionalAttribute()] System.String? account) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("account", account);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/domain/{domain}/task/redirection{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/task/redirection/{id}
        public Task<_email_domain.TaskSpecialAccount> GetV1EmailDomainDomainTaskRedirectionIdAsync(string domain, string id) {
            string uri = $"/v1/email/domain/{domain}/task/redirection/{id}";
            return this.SendAsync<_email_domain.TaskSpecialAccount>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/task/responder
        public Task<System.Int64[]> GetV1EmailDomainDomainTaskResponderAsync(string domain, [System.Runtime.InteropServices.OptionalAttribute()] System.String? account) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("account", account);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/domain/{domain}/task/responder{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/task/responder/{id}
        public Task<_email_domain.TaskSpecialAccount> GetV1EmailDomainDomainTaskResponderIdAsync(string domain, long id) {
            string uri = $"/v1/email/domain/{domain}/task/responder/{id}";
            return this.SendAsync<_email_domain.TaskSpecialAccount>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/domain/{domain}/terminate
        public Task<System.String> PostV1EmailDomainDomainTerminateAsync(string domain) {
            string uri = $"/v1/email/domain/{domain}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange
        public Task<System.String[]> GetV1EmailExchangeAsync() {
            string uri = $"/v1/email/exchange";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service
        public Task<System.String[]> GetV1EmailExchangeOrganizationNameServiceAsync(string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/exchange/{organizationName}/service{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}
        public Task<_email_exchange.ExchangeServiceWithIAM> GetV1EmailExchangeOrganizationNameServiceExchangeServiceAsync(string exchangeService, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}";
            return this.SendAsync<_email_exchange.ExchangeServiceWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}
        public Task PutV1EmailExchangeOrganizationNameServiceExchangeServiceAsync(_email_exchange.ExchangeService _body, string exchangeService, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account
        public Task<System.String[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceAccountAsync(string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.OvhLicenceEnum? accountLicense, [System.Runtime.InteropServices.OptionalAttribute()] System.String? company, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? id, [System.Runtime.InteropServices.OptionalAttribute()] System.String? primaryEmailAddress) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("accountLicense", accountLicense);
            queryParametersTemp.Add("company", company);
            queryParametersTemp.Add("id", id);
            queryParametersTemp.Add("primaryEmailAddress", primaryEmailAddress);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceAccountAsync(
                    string domain, 
                    string exchangeService, 
                    _email_exchange.OvhLicenceEnum license, 
                    string login, 
                    string organizationName, 
                    string password, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? SAMAccountName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? authenticationPolicyId, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? city, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? company, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.CountryCodeEnum? countryCode, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? description, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? displayName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? fax, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? firstName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? forwardingEmail, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? hiddenFromGAL, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? initials, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? jobDepartment, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? jobTitle, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? lastName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? litigation, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? litigationPeriod, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? mailSenderDisplay, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.MailingFilterEnum[]? mailingFilter, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? mobile, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? office, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? outlookLicense, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? phone, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? postalCode, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? quota, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? region, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? sbrDestination, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? sendConnectorId, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.spamAndVirusConfiguration? spamAndVirusConfiguration, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? storeCopyOfEmail, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? streetAddress) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("SAMAccountName", SAMAccountName);
            _body.Add("authenticationPolicyId", authenticationPolicyId);
            _body.Add("city", city);
            _body.Add("company", company);
            _body.Add("countryCode", countryCode);
            _body.Add("description", description);
            _body.Add("displayName", displayName);
            _body.Add("domain", domain);
            _body.Add("fax", fax);
            _body.Add("firstName", firstName);
            _body.Add("forwardingEmail", forwardingEmail);
            _body.Add("hiddenFromGAL", hiddenFromGAL);
            _body.Add("initials", initials);
            _body.Add("jobDepartment", jobDepartment);
            _body.Add("jobTitle", jobTitle);
            _body.Add("lastName", lastName);
            _body.Add("license", license);
            _body.Add("litigation", litigation);
            _body.Add("litigationPeriod", litigationPeriod);
            _body.Add("login", login);
            _body.Add("mailSenderDisplay", mailSenderDisplay);
            _body.Add("mailingFilter", mailingFilter);
            _body.Add("mobile", mobile);
            _body.Add("office", office);
            _body.Add("outlookLicense", outlookLicense);
            _body.Add("password", password);
            _body.Add("phone", phone);
            _body.Add("postalCode", postalCode);
            _body.Add("quota", quota);
            _body.Add("region", region);
            _body.Add("sbrDestination", sbrDestination);
            _body.Add("sendConnectorId", sendConnectorId);
            _body.Add("spamAndVirusConfiguration", spamAndVirusConfiguration);
            _body.Add("storeCopyOfEmail", storeCopyOfEmail);
            _body.Add("streetAddress", streetAddress);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}
        public Task<_email_exchange.Account> GetV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}";
            return this.SendAsync<_email_exchange.Account>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}
        public Task PutV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAsync(_email_exchange.Account _body, string exchangeService, string organizationName, string primaryEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/alias
        public Task<System.String[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/alias";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/alias
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAsync(string alias, string exchangeService, string organizationName, string primaryEmailAddress) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("alias", alias);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/alias";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/alias/{alias}
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAliasAsync(string alias, string exchangeService, string organizationName, string primaryEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/alias/{alias}";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/alias/{alias}
        public Task<_email_exchange.exchangeAccountAlias> GetV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAliasAsync(string alias, string exchangeService, string organizationName, string primaryEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/alias/{alias}";
            return this.SendAsync<_email_exchange.exchangeAccountAlias>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/archive
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/archive";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/archive
        public Task<_email_exchange.exchangeAccountArchive> GetV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/archive";
            return this.SendAsync<_email_exchange.exchangeAccountArchive>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/archive
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveAsync(string exchangeService, string organizationName, string primaryEmailAddress, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? quota) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("quota", quota);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/archive";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/archive
        public Task PutV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveAsync(_email_exchange.exchangeAccountArchive _body, string exchangeService, string organizationName, string primaryEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/archive";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/changePassword
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressChangePasswordAsync(string exchangeService, string organizationName, string password, string primaryEmailAddress) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("password", password);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/changePassword";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/diagnostics
        public Task<_email_exchange.exchangeAccountDiagnosis> GetV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnosticsAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/diagnostics";
            return this.SendAsync<_email_exchange.exchangeAccountDiagnosis>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/diagnostics
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnosticsAsync(string exchangeService, string organizationName, string password, string primaryEmailAddress) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("password", password);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/diagnostics";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/export
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/export";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/export
        public Task<_email_exchange.Export> GetV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/export";
            return this.SendAsync<_email_exchange.Export>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/export
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/export";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/exportURL
        public Task<_email_exchange.ExportUrl> GetV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURLAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/exportURL";
            return this.SendAsync<_email_exchange.ExportUrl>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/exportURL
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURLAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/exportURL";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/fullAccess
        public Task<System.Int64[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/fullAccess";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/fullAccess
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAsync(long allowedAccountId, string exchangeService, string organizationName, string primaryEmailAddress) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("allowedAccountId", allowedAccountId);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/fullAccess";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/fullAccess/{allowedAccountId}
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string primaryEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/fullAccess/{allowedAccountId}";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/fullAccess/{allowedAccountId}
        public Task<_email_exchange.exchangeAccountFullAccess> GetV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string primaryEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/fullAccess/{allowedAccountId}";
            return this.SendAsync<_email_exchange.exchangeAccountFullAccess>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/outlookURL
        public Task<_email_exchange.OutlookUrl> GetV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURLAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/outlookURL";
            return this.SendAsync<_email_exchange.OutlookUrl>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/outlookURL
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURLAsync(string exchangeService, _email_exchange.LanguageEnum language, string organizationName, string primaryEmailAddress, _email_exchange.OutlookVersionEnum version) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("language", language);
            _body.Add("version", version);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/outlookURL";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/protocol
        public Task<_email_exchange.exchangeAccountProtocol> GetV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocolAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/protocol";
            return this.SendAsync<_email_exchange.exchangeAccountProtocol>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/protocol
        public Task PutV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocolAsync(_email_exchange.exchangeAccountProtocol _body, string exchangeService, string organizationName, string primaryEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/protocol";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendAs
        public Task<System.Int64[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendAs";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendAs
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAsync(long allowAccountId, string exchangeService, string organizationName, string primaryEmailAddress) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("allowAccountId", allowAccountId);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendAs";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendAs/{allowedAccountId}
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string primaryEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendAs/{allowedAccountId}";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendAs/{allowedAccountId}
        public Task<_email_exchange.exchangeAccountSendAs> GetV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string primaryEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendAs/{allowedAccountId}";
            return this.SendAsync<_email_exchange.exchangeAccountSendAs>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendOnBehalfTo
        public Task<System.Int64[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendOnBehalfTo";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendOnBehalfTo
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAsync(long allowAccountId, string exchangeService, string organizationName, string primaryEmailAddress) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("allowAccountId", allowAccountId);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendOnBehalfTo";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendOnBehalfTo/{allowedAccountId}
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string primaryEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendOnBehalfTo/{allowedAccountId}";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendOnBehalfTo/{allowedAccountId}
        public Task<_email_exchange.exchangeAccountSendOnBehalfTo> GetV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string primaryEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendOnBehalfTo/{allowedAccountId}";
            return this.SendAsync<_email_exchange.exchangeAccountSendOnBehalfTo>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/tasks
        public Task<System.Int64[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/tasks";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/tasks/{id}
        public Task<_email_exchange.Task> GetV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksIdAsync(string exchangeService, long id, string organizationName, string primaryEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/tasks/{id}";
            return this.SendAsync<_email_exchange.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/terminate
        public Task<System.String> PostV1EmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTerminateAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/activateSharepoint
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceActivateSharepointAsync(string exchangeService, string organizationName, string primaryEmailAddress, string subDomain) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("primaryEmailAddress", primaryEmailAddress);
            _body.Add("subDomain", subDomain);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/activateSharepoint";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/authenticationPolicy
        public Task<System.Int64[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyAsync(
                    string exchangeService, 
                    string organizationName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? blockLegacyAuthActiveSync, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? blockLegacyAuthAutodiscover, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? blockLegacyAuthImap, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? blockLegacyAuthMapi, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? blockLegacyAuthOfflineAddressBook, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? blockLegacyAuthPop, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? blockLegacyAuthWebServices, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? blockModernAuthActiveSync, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? blockModernAuthAutodiscover, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? blockModernAuthImap, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? blockModernAuthMapi, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? blockModernAuthOfflineAddressBook, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? blockModernAuthPop, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? blockModernAuthWebServices) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("blockLegacyAuthActiveSync", blockLegacyAuthActiveSync);
            queryParametersTemp.Add("blockLegacyAuthAutodiscover", blockLegacyAuthAutodiscover);
            queryParametersTemp.Add("blockLegacyAuthImap", blockLegacyAuthImap);
            queryParametersTemp.Add("blockLegacyAuthMapi", blockLegacyAuthMapi);
            queryParametersTemp.Add("blockLegacyAuthOfflineAddressBook", blockLegacyAuthOfflineAddressBook);
            queryParametersTemp.Add("blockLegacyAuthPop", blockLegacyAuthPop);
            queryParametersTemp.Add("blockLegacyAuthWebServices", blockLegacyAuthWebServices);
            queryParametersTemp.Add("blockModernAuthActiveSync", blockModernAuthActiveSync);
            queryParametersTemp.Add("blockModernAuthAutodiscover", blockModernAuthAutodiscover);
            queryParametersTemp.Add("blockModernAuthImap", blockModernAuthImap);
            queryParametersTemp.Add("blockModernAuthMapi", blockModernAuthMapi);
            queryParametersTemp.Add("blockModernAuthOfflineAddressBook", blockModernAuthOfflineAddressBook);
            queryParametersTemp.Add("blockModernAuthPop", blockModernAuthPop);
            queryParametersTemp.Add("blockModernAuthWebServices", blockModernAuthWebServices);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/authenticationPolicy{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/authenticationPolicy/{id}
        public Task<_email_exchange.exchangeServiceAuthenticationPolicy> GetV1EmailExchangeOrganizationNameServiceExchangeServiceAuthenticationPolicyIdAsync(string exchangeService, long id, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/authenticationPolicy/{id}";
            return this.SendAsync<_email_exchange.exchangeServiceAuthenticationPolicy>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/authorizedIp
        public Task<System.String[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpAsync(string exchangeService, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/authorizedIp";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/authorizedIp
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpAsync(string IP, string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? HTTPS, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? IMAP, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? IMAPS, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? POP, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? POPS, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? SMTP, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? SMTPS, [System.Runtime.InteropServices.OptionalAttribute()] System.String? displayName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("HTTPS", HTTPS);
            _body.Add("IMAP", IMAP);
            _body.Add("IMAPS", IMAPS);
            _body.Add("IP", IP);
            _body.Add("POP", POP);
            _body.Add("POPS", POPS);
            _body.Add("SMTP", SMTP);
            _body.Add("SMTPS", SMTPS);
            _body.Add("displayName", displayName);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/authorizedIp";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/authorizedIp/{ip}
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIpAsync(string exchangeService, string ip, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/authorizedIp/{ip}";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/authorizedIp/{ip}
        public Task<_email_exchange.exchangeServiceAuthorizedIp> GetV1EmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIpAsync(string exchangeService, string ip, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/authorizedIp/{ip}";
            return this.SendAsync<_email_exchange.exchangeServiceAuthorizedIp>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/authorizedIp/{ip}
        public Task PutV1EmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIpAsync(_email_exchange.exchangeServiceAuthorizedIp _body, string exchangeService, string ip, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/authorizedIp/{ip}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/changeHostname
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceChangeHostnameAsync(string exchangeService, string hostname, string organizationName, bool useDnsAssist, [System.Runtime.InteropServices.OptionalAttribute()] System.String? dcvEmail, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? useCname) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("dcvEmail", dcvEmail);
            _body.Add("hostname", hostname);
            _body.Add("useCname", useCname);
            _body.Add("useDnsAssist", useDnsAssist);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/changeHostname";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/customIsolation
        public Task<System.String[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationAsync(string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.OvhCustomIsolationFieldEnum? isolationField, [System.Runtime.InteropServices.OptionalAttribute()] System.String? isolationValue, [System.Runtime.InteropServices.OptionalAttribute()] System.String? name) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("isolationField", isolationField);
            queryParametersTemp.Add("isolationValue", isolationValue);
            queryParametersTemp.Add("name", name);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/customIsolation{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/customIsolation
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationAsync(string exchangeService, _email_exchange.OvhCustomIsolationFieldEnum isolationField, string isolationValue, string name, string organizationName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("isolationField", isolationField);
            _body.Add("isolationValue", isolationValue);
            _body.Add("name", name);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/customIsolation";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/customIsolation/{name}
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationNameAsync(string exchangeService, string name, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/customIsolation/{name}";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/customIsolation/{name}
        public Task<_email_exchange.exchangeCustomIsolation> GetV1EmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationNameAsync(string exchangeService, string name, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/customIsolation/{name}";
            return this.SendAsync<_email_exchange.exchangeCustomIsolation>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/dcvEmails
        public Task<System.String[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceDcvEmailsAsync(string exchangeService, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/dcvEmails";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/device
        public Task<System.String[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceDeviceAsync(string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? IMEI, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.DeviceActiveSyncStateEnum? deviceState, [System.Runtime.InteropServices.OptionalAttribute()] System.String? identity) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("IMEI", IMEI);
            queryParametersTemp.Add("deviceState", deviceState);
            queryParametersTemp.Add("identity", identity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/device{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/device/{identity}
        public Task<_email_exchange.exchangeServiceDevice> GetV1EmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityAsync(string exchangeService, string identity, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/device/{identity}";
            return this.SendAsync<_email_exchange.exchangeServiceDevice>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/device/{identity}
        public Task PutV1EmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityAsync(_email_exchange.exchangeServiceDevice _body, string exchangeService, string identity, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/device/{identity}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/device/{identity}/clearDevice
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityClearDeviceAsync(string exchangeService, string identity, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/device/{identity}/clearDevice";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/domain
        public Task<System.String[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceDomainAsync(string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? main, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.ObjectStateEnum? state) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("main", main);
            queryParametersTemp.Add("state", state);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/domain{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/domain
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceDomainAsync(string exchangeService, string name, string organizationName, _email_exchange.DomainTypeEnum type, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? autoEnableDKIM, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? configureAutodiscover, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? configureDKIM, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? configureMx, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? configureSPF, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? main, [System.Runtime.InteropServices.OptionalAttribute()] System.String? mxRelay, [System.Runtime.InteropServices.OptionalAttribute()] System.String? organization2010, [System.Runtime.InteropServices.OptionalAttribute()] System.String? sbrDefault, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? sendConnectorIdDefault) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("autoEnableDKIM", autoEnableDKIM);
            _body.Add("configureAutodiscover", configureAutodiscover);
            _body.Add("configureDKIM", configureDKIM);
            _body.Add("configureMx", configureMx);
            _body.Add("configureSPF", configureSPF);
            _body.Add("main", main);
            _body.Add("mxRelay", mxRelay);
            _body.Add("name", name);
            _body.Add("organization2010", organization2010);
            _body.Add("sbrDefault", sbrDefault);
            _body.Add("sendConnectorIdDefault", sendConnectorIdDefault);
            _body.Add("type", type);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/domain";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameAsync(string domainName, string exchangeService, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}
        public Task<_email_exchange.Domain> GetV1EmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameAsync(string domainName, string exchangeService, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}";
            return this.SendAsync<_email_exchange.Domain>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}
        public Task PutV1EmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameAsync(_email_exchange.Domain _body, string domainName, string exchangeService, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/changeDefaultSBR
        public Task PutV1EmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameChangeDefaultSBRAsync(string domainName, string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? sbrDefault, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? sendConnectorIdDefault) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("sbrDefault", sbrDefault);
            _body.Add("sendConnectorIdDefault", sendConnectorIdDefault);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/changeDefaultSBR";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/disclaimer
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAsync(string domainName, string exchangeService, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/disclaimer";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/disclaimer
        public Task<_email_exchange.disclaimer> GetV1EmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAsync(string domainName, string exchangeService, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/disclaimer";
            return this.SendAsync<_email_exchange.disclaimer>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/disclaimer
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAsync(string content, string domainName, string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? outsideOnly) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("content", content);
            _body.Add("outsideOnly", outsideOnly);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/disclaimer";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/disclaimer
        public Task PutV1EmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAsync(_email_exchange.disclaimer _body, string domainName, string exchangeService, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/disclaimer";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/disclaimerAttribute
        public Task<_email_exchange.DisclaimerAttributeEnum[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAttributeAsync(string domainName, string exchangeService, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/disclaimerAttribute";
            return this.SendAsync<_email_exchange.DisclaimerAttributeEnum[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/dkim
        public Task<System.String[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimAsync(string domainName, string exchangeService, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/dkim";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/dkim
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimAsync(string domainName, string exchangeService, string organizationName, string selectorName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? autoEnableDKIM, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? configureDkim) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("autoEnableDKIM", autoEnableDKIM);
            _body.Add("configureDkim", configureDkim);
            _body.Add("selectorName", selectorName);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/dkim";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/dkim/{selectorName}
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameAsync(string domainName, string exchangeService, string organizationName, string selectorName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/dkim/{selectorName}";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/dkim/{selectorName}
        public Task<_email_exchange.dkim> GetV1EmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameAsync(string domainName, string exchangeService, string organizationName, string selectorName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/dkim/{selectorName}";
            return this.SendAsync<_email_exchange.dkim>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/dkim/{selectorName}/disable
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameDisableAsync(string domainName, string exchangeService, string organizationName, string selectorName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/dkim/{selectorName}/disable";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/dkim/{selectorName}/enable
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameEnableAsync(string domainName, string exchangeService, string organizationName, string selectorName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/dkim/{selectorName}/enable";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/dkimSelector
        public Task<System.String[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorAsync(string domainName, string exchangeService, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/dkimSelector";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/externalContact
        public Task<System.String[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceExternalContactAsync(string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? displayName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? externalEmailAddress, [System.Runtime.InteropServices.OptionalAttribute()] System.String? firstName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? id, [System.Runtime.InteropServices.OptionalAttribute()] System.String? lastName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("displayName", displayName);
            queryParametersTemp.Add("externalEmailAddress", externalEmailAddress);
            queryParametersTemp.Add("firstName", firstName);
            queryParametersTemp.Add("id", id);
            queryParametersTemp.Add("lastName", lastName);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/externalContact{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/externalContact
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceExternalContactAsync(string exchangeService, string externalEmailAddress, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? displayName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? firstName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? hiddenFromGAL, [System.Runtime.InteropServices.OptionalAttribute()] System.String? initials, [System.Runtime.InteropServices.OptionalAttribute()] System.String? lastName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? organization2010) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("displayName", displayName);
            _body.Add("externalEmailAddress", externalEmailAddress);
            _body.Add("firstName", firstName);
            _body.Add("hiddenFromGAL", hiddenFromGAL);
            _body.Add("initials", initials);
            _body.Add("lastName", lastName);
            _body.Add("organization2010", organization2010);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/externalContact";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/externalContact/{externalEmailAddress}
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddressAsync(string exchangeService, string externalEmailAddress, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/externalContact/{externalEmailAddress}";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/externalContact/{externalEmailAddress}
        public Task<_email_exchange.exchangeExternalContact> GetV1EmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddressAsync(string exchangeService, string externalEmailAddress, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/externalContact/{externalEmailAddress}";
            return this.SendAsync<_email_exchange.exchangeExternalContact>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/externalContact/{externalEmailAddress}
        public Task PutV1EmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddressAsync(_email_exchange.exchangeExternalContact _body, string exchangeService, string externalEmailAddress, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/externalContact/{externalEmailAddress}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/impersonatedUser
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserAsync(string exchangeService, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/impersonatedUser";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/impersonatedUser
        public Task<_email_exchange.exchangeAccountImpersonation> GetV1EmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserAsync(string exchangeService, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/impersonatedUser";
            return this.SendAsync<_email_exchange.exchangeAccountImpersonation>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/impersonatedUser
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserAsync(string exchangeService, string organizationName, string password) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("password", password);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/impersonatedUser";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/impersonatedUser/changePassword
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserChangePasswordAsync(string exchangeService, string organizationName, string password) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("password", password);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/impersonatedUser/changePassword";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/impersonationPasswordPolicy
        public Task<_email_exchange.passwordPolicy> GetV1EmailExchangeOrganizationNameServiceExchangeServiceImpersonationPasswordPolicyAsync(string exchangeService, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/impersonationPasswordPolicy";
            return this.SendAsync<_email_exchange.passwordPolicy>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/license
        public Task<_email_exchange.DailyLicense[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceLicenseAsync(string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateOnly? fromDate, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.OvhLicenceEnum? license, [System.Runtime.InteropServices.OptionalAttribute()] System.DateOnly? toDate) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("fromDate", fromDate);
            queryParametersTemp.Add("license", license);
            queryParametersTemp.Add("toDate", toDate);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/license{queryParameters}";
            return this.SendAsync<_email_exchange.DailyLicense[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/log/kind
        public Task<System.String[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceLogKindAsync(string exchangeService, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/log/kind";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/log/kind/{name}
        public Task<_dbaas_logs.LogKind> GetV1EmailExchangeOrganizationNameServiceExchangeServiceLogKindNameAsync(string exchangeService, string organizationName, string name) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/log/kind/{name}";
            return this.SendAsync<_dbaas_logs.LogKind>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/log/subscription
        public Task<System.Guid[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionAsync(string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? kind) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("kind", kind);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/log/subscription{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostV1EmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionAsync(string exchangeService, string organizationName, _dbaas_logs.LogSubscriptionCreation _body) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/log/subscription";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionIdAsync(string exchangeService, string organizationName, System.Guid subscriptionId) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetV1EmailExchangeOrganizationNameServiceExchangeServiceLogSubscriptionSubscriptionIdAsync(string exchangeService, string organizationName, System.Guid subscriptionId) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscription>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/log/url
        public Task<_dbaas_logs.TemporaryLogsLink> PostV1EmailExchangeOrganizationNameServiceExchangeServiceLogUrlAsync(string exchangeService, string organizationName, _dbaas_logs.LogUrlCreation _body) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/log/url";
            return this.SendAsync<_dbaas_logs.TemporaryLogsLink>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList
        public Task<System.String[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceMailingListAsync(string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? company, [System.Runtime.InteropServices.OptionalAttribute()] System.String? mailingListAddress) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("company", company);
            queryParametersTemp.Add("mailingListAddress", mailingListAddress);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceMailingListAsync(_email_exchange.MailingListDepartRestrictionEnum departRestriction, string exchangeService, _email_exchange.MailingListJoinRestrictionEnum joinRestriction, string mailingListAddress, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? company, [System.Runtime.InteropServices.OptionalAttribute()] System.String? displayName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? hiddenFromGAL, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? maxReceiveSize, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? maxSendSize, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? senderAuthentification) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("company", company);
            _body.Add("departRestriction", departRestriction);
            _body.Add("displayName", displayName);
            _body.Add("hiddenFromGAL", hiddenFromGAL);
            _body.Add("joinRestriction", joinRestriction);
            _body.Add("mailingListAddress", mailingListAddress);
            _body.Add("maxReceiveSize", maxReceiveSize);
            _body.Add("maxSendSize", maxSendSize);
            _body.Add("senderAuthentification", senderAuthentification);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAsync(string exchangeService, string mailingListAddress, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}
        public Task<_email_exchange.mailingList> GetV1EmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAsync(string exchangeService, string mailingListAddress, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}";
            return this.SendAsync<_email_exchange.mailingList>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}
        public Task PutV1EmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAsync(_email_exchange.mailingList _body, string exchangeService, string mailingListAddress, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/alias
        public Task<System.String[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAsync(string exchangeService, string mailingListAddress, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/alias";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/alias
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAsync(string alias, string exchangeService, string mailingListAddress, string organizationName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("alias", alias);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/alias";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/alias/{alias}
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAliasAsync(string alias, string exchangeService, string mailingListAddress, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/alias/{alias}";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/alias/{alias}
        public Task<_email_exchange.exchangeMailingListAlias> GetV1EmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAliasAsync(string alias, string exchangeService, string mailingListAddress, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/alias/{alias}";
            return this.SendAsync<_email_exchange.exchangeMailingListAlias>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/manager/account
        public Task<System.Int64[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountAsync(string exchangeService, string mailingListAddress, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/manager/account";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/manager/account
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountAsync(string exchangeService, string mailingListAddress, long managerAccountId, string organizationName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("managerAccountId", managerAccountId);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/manager/account";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/manager/account/{managerAccountId}
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountIdAsync(string exchangeService, string mailingListAddress, long managerAccountId, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/manager/account/{managerAccountId}";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/manager/account/{managerAccountId}
        public Task<_email_exchange.exchangeDistributionGroupManager> GetV1EmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountIdAsync(string exchangeService, string mailingListAddress, long managerAccountId, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/manager/account/{managerAccountId}";
            return this.SendAsync<_email_exchange.exchangeDistributionGroupManager>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/account
        public Task<System.Int64[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountAsync(string exchangeService, string mailingListAddress, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/account";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/account
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountAsync(string exchangeService, string mailingListAddress, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? memberAccountId, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? memberContactId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("memberAccountId", memberAccountId);
            _body.Add("memberContactId", memberContactId);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/account";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/account/{memberAccountId}
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountIdAsync(string exchangeService, string mailingListAddress, long memberAccountId, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/account/{memberAccountId}";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/account/{memberAccountId}
        public Task<_email_exchange.exchangeDistributionGroupMember> GetV1EmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountIdAsync(string exchangeService, string mailingListAddress, long memberAccountId, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/account/{memberAccountId}";
            return this.SendAsync<_email_exchange.exchangeDistributionGroupMember>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/contact
        public Task<System.Int64[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactAsync(string exchangeService, string mailingListAddress, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/contact";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/contact
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactAsync(string exchangeService, string mailingListAddress, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? memberAccountId, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? memberContactId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("memberAccountId", memberAccountId);
            _body.Add("memberContactId", memberContactId);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/contact";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/contact/{memberContactId}
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactIdAsync(string exchangeService, string mailingListAddress, long memberContactId, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/contact/{memberContactId}";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/contact/{memberContactId}
        public Task<_email_exchange.exchangeDistributionGroupMember> GetV1EmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactIdAsync(string exchangeService, string mailingListAddress, long memberContactId, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/contact/{memberContactId}";
            return this.SendAsync<_email_exchange.exchangeDistributionGroupMember>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendAs
        public Task<System.Int64[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAsync(string exchangeService, string mailingListAddress, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendAs";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendAs
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAsync(long allowAccountId, string exchangeService, string mailingListAddress, string organizationName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("allowAccountId", allowAccountId);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendAs";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendAs/{allowedAccountId}
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string mailingListAddress, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendAs/{allowedAccountId}";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendAs/{allowedAccountId}
        public Task<_email_exchange.exchangeDistributionGroupSendAs> GetV1EmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string mailingListAddress, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendAs/{allowedAccountId}";
            return this.SendAsync<_email_exchange.exchangeDistributionGroupSendAs>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendOnBehalfTo
        public Task<System.Int64[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAsync(string exchangeService, string mailingListAddress, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendOnBehalfTo";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendOnBehalfTo
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAsync(long allowAccountId, string exchangeService, string mailingListAddress, string organizationName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("allowAccountId", allowAccountId);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendOnBehalfTo";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendOnBehalfTo/{allowedAccountId}
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string mailingListAddress, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendOnBehalfTo/{allowedAccountId}";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendOnBehalfTo/{allowedAccountId}
        public Task<_email_exchange.exchangeDistributionGroupSendOnBehalfTo> GetV1EmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string mailingListAddress, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendOnBehalfTo/{allowedAccountId}";
            return this.SendAsync<_email_exchange.exchangeDistributionGroupSendOnBehalfTo>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/outlookAvailability
        public Task<_email_exchange.OutlookVersions[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailabilityAsync(string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.LanguageEnum? outlookLanguage, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.OutlookVersionEnum? outlookVersion) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("outlookLanguage", outlookLanguage);
            queryParametersTemp.Add("outlookVersion", outlookVersion);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/outlookAvailability{queryParameters}";
            return this.SendAsync<_email_exchange.OutlookVersions[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/protocol
        public Task<_email_exchange.exchangeServiceProtocol> GetV1EmailExchangeOrganizationNameServiceExchangeServiceProtocolAsync(string exchangeService, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/protocol";
            return this.SendAsync<_email_exchange.exchangeServiceProtocol>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/protocol
        public Task PutV1EmailExchangeOrganizationNameServiceExchangeServiceProtocolAsync(_email_exchange.exchangeServiceProtocol _body, string exchangeService, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/protocol";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/protocol/activeSyncMailNotification
        public Task<System.Int64[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationAsync(string exchangeService, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/protocol/activeSyncMailNotification";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/protocol/activeSyncMailNotification
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationAsync(string exchangeService, long notifiedAccountId, string organizationName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("notifiedAccountId", notifiedAccountId);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/protocol/activeSyncMailNotification";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/protocol/activeSyncMailNotification/{notifiedAccountId}
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountIdAsync(string exchangeService, long notifiedAccountId, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/protocol/activeSyncMailNotification/{notifiedAccountId}";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/protocol/activeSyncMailNotification/{notifiedAccountId}
        public Task<_email_exchange.exchangeServiceActiveSyncNotification> GetV1EmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountIdAsync(string exchangeService, long notifiedAccountId, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/protocol/activeSyncMailNotification/{notifiedAccountId}";
            return this.SendAsync<_email_exchange.exchangeServiceActiveSyncNotification>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/publicFolder
        public Task<System.String[]> GetV1EmailExchangeOrganizationNameServiceExchangeServicePublicFolderAsync(string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? path) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("path", path);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/publicFolder{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/publicFolder
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServicePublicFolderAsync(string exchangeService, string organizationName, string path, long quota, _email_exchange.PublicFolderTypeEnum type, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.PublicFolderRightTypeEnum? anonymousPermission, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.PublicFolderRightTypeEnum? defaultPermission) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("anonymousPermission", anonymousPermission);
            _body.Add("defaultPermission", defaultPermission);
            _body.Add("path", path);
            _body.Add("quota", quota);
            _body.Add("type", type);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/publicFolder";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathAsync(string exchangeService, string organizationName, string path) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}
        public Task<_email_exchange.publicFolder> GetV1EmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathAsync(string exchangeService, string organizationName, string path) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}";
            return this.SendAsync<_email_exchange.publicFolder>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}
        public Task PutV1EmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathAsync(_email_exchange.publicFolder _body, string exchangeService, string organizationName, string path) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}/permission
        public Task<System.Int64[]> GetV1EmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAsync(string exchangeService, string organizationName, string path) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}/permission";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}/permission
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAsync(_email_exchange.PublicFolderRightTypeEnum accessRights, long allowedAccountId, string exchangeService, string organizationName, string path) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("accessRights", accessRights);
            _body.Add("allowedAccountId", allowedAccountId);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}/permission";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}/permission/{allowedAccountId}
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string path) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}/permission/{allowedAccountId}";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}/permission/{allowedAccountId}
        public Task<_email_exchange.exchangePublicFolderPermission> GetV1EmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string path) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}/permission/{allowedAccountId}";
            return this.SendAsync<_email_exchange.exchangePublicFolderPermission>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}/permission/{allowedAccountId}
        public Task PutV1EmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountIdAsync(_email_exchange.exchangePublicFolderPermission _body, long allowedAccountId, string exchangeService, string organizationName, string path) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}/permission/{allowedAccountId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/publicFolderQuota
        public Task<_email_exchange.PublicFolderQuota> GetV1EmailExchangeOrganizationNameServiceExchangeServicePublicFolderQuotaAsync(string exchangeService, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/publicFolderQuota";
            return this.SendAsync<_email_exchange.PublicFolderQuota>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/renewSSL
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceRenewSSLAsync(string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? dcv, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? useCname, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? useDnsAssist) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("dcv", dcv);
            _body.Add("useCname", useCname);
            _body.Add("useDnsAssist", useDnsAssist);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/renewSSL";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount
        public Task<System.String[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceResourceAccountAsync(string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? company, [System.Runtime.InteropServices.OptionalAttribute()] System.String? resourceEmailAddress) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("company", company);
            queryParametersTemp.Add("resourceEmailAddress", resourceEmailAddress);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceResourceAccountAsync(long capacity, string exchangeService, string organizationName, string resourceEmailAddress, _email_exchange.ResourceTypeEnum type, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? addOrganizerToSubject, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? allowConflict, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? bookingWindow, [System.Runtime.InteropServices.OptionalAttribute()] System.String? company, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? deleteComments, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? deleteSubject, [System.Runtime.InteropServices.OptionalAttribute()] System.String? displayName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? location, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? maximumDuration, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.ShowMeetingDetailsEnum? showMeetingDetails) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("addOrganizerToSubject", addOrganizerToSubject);
            _body.Add("allowConflict", allowConflict);
            _body.Add("bookingWindow", bookingWindow);
            _body.Add("capacity", capacity);
            _body.Add("company", company);
            _body.Add("deleteComments", deleteComments);
            _body.Add("deleteSubject", deleteSubject);
            _body.Add("displayName", displayName);
            _body.Add("location", location);
            _body.Add("maximumDuration", maximumDuration);
            _body.Add("resourceEmailAddress", resourceEmailAddress);
            _body.Add("showMeetingDetails", showMeetingDetails);
            _body.Add("type", type);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressAsync(string exchangeService, string organizationName, string resourceEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}
        public Task<_email_exchange.resourceAccount> GetV1EmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressAsync(string exchangeService, string organizationName, string resourceEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}";
            return this.SendAsync<_email_exchange.resourceAccount>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}
        public Task PutV1EmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressAsync(_email_exchange.resourceAccount _body, string exchangeService, string organizationName, string resourceEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}/delegate
        public Task<System.Int64[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAsync(string exchangeService, string organizationName, string resourceEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}/delegate";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}/delegate
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAsync(long allowedAccountId, string exchangeService, string organizationName, string resourceEmailAddress) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("allowedAccountId", allowedAccountId);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}/delegate";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}/delegate/{allowedAccountId}
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string resourceEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}/delegate/{allowedAccountId}";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}/delegate/{allowedAccountId}
        public Task<_email_exchange.exchangeResourceAccountDelegate> GetV1EmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string resourceEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}/delegate/{allowedAccountId}";
            return this.SendAsync<_email_exchange.exchangeResourceAccountDelegate>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/sendConnector
        public Task<System.Int64[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceSendConnectorAsync(string exchangeService, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/sendConnector";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/sendConnector
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceSendConnectorAsync(string displayName, string exchangeService, string organizationName, string smartHost, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? maxSendSize, [System.Runtime.InteropServices.OptionalAttribute()] System.String? password, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? port, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? requireTLS, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.smartHostAuthMechanismEnum? smartHostAuthMechanism, [System.Runtime.InteropServices.OptionalAttribute()] System.String? user) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("displayName", displayName);
            _body.Add("maxSendSize", maxSendSize);
            _body.Add("password", password);
            _body.Add("port", port);
            _body.Add("requireTLS", requireTLS);
            _body.Add("smartHost", smartHost);
            _body.Add("smartHostAuthMechanism", smartHostAuthMechanism);
            _body.Add("user", user);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/sendConnector";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/sendConnector/{id}
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdAsync(string exchangeService, long id, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/sendConnector/{id}";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/sendConnector/{id}
        public Task<_email_exchange.sendConnector> GetV1EmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdAsync(string exchangeService, long id, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/sendConnector/{id}";
            return this.SendAsync<_email_exchange.sendConnector>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/sendConnector/{id}
        public Task PutV1EmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdAsync(_email_exchange.sendConnector _body, string exchangeService, long id, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/sendConnector/{id}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/sendConnector/{id}/changeAuthentication
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdChangeAuthenticationAsync(string exchangeService, long id, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? password, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.smartHostAuthMechanismEnum? smartHostAuthMechanism, [System.Runtime.InteropServices.OptionalAttribute()] System.String? user) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("password", password);
            _body.Add("smartHostAuthMechanism", smartHostAuthMechanism);
            _body.Add("user", user);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/sendConnector/{id}/changeAuthentication";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/server
        public Task<_email_exchange.Server> GetV1EmailExchangeOrganizationNameServiceExchangeServiceServerAsync(string exchangeService, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/server";
            return this.SendAsync<_email_exchange.Server>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/server
        public Task PutV1EmailExchangeOrganizationNameServiceExchangeServiceServerAsync(_email_exchange.Server _body, string exchangeService, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/server";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/serviceInfos
        public Task<_services.Service> GetV1EmailExchangeOrganizationNameServiceExchangeServiceServiceInfosAsync(string exchangeService, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/serviceInfos
        public Task PutV1EmailExchangeOrganizationNameServiceExchangeServiceServiceInfosAsync(_services.Service _body, string exchangeService, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount
        public Task<System.String[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceSharedAccountAsync(string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? sharedEmailAddress) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("sharedEmailAddress", sharedEmailAddress);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceSharedAccountAsync(string exchangeService, string organizationName, long quota, string sharedEmailAddress, [System.Runtime.InteropServices.OptionalAttribute()] System.String? displayName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? firstName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? hiddenFromGAL, [System.Runtime.InteropServices.OptionalAttribute()] System.String? initials, [System.Runtime.InteropServices.OptionalAttribute()] System.String? lastName, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.MailingFilterEnum[]? mailingFilter) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("displayName", displayName);
            _body.Add("firstName", firstName);
            _body.Add("hiddenFromGAL", hiddenFromGAL);
            _body.Add("initials", initials);
            _body.Add("lastName", lastName);
            _body.Add("mailingFilter", mailingFilter);
            _body.Add("quota", quota);
            _body.Add("sharedEmailAddress", sharedEmailAddress);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAsync(string exchangeService, string organizationName, string sharedEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}
        public Task<_email_exchange.sharedAccount> GetV1EmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAsync(string exchangeService, string organizationName, string sharedEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}";
            return this.SendAsync<_email_exchange.sharedAccount>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}
        public Task PutV1EmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAsync(_email_exchange.sharedAccount _body, string exchangeService, string organizationName, string sharedEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/alias
        public Task<System.String[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAsync(string exchangeService, string organizationName, string sharedEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/alias";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/alias
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAsync(string alias, string exchangeService, string organizationName, string sharedEmailAddress) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("alias", alias);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/alias";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/alias/{alias}
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAliasAsync(string alias, string exchangeService, string organizationName, string sharedEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/alias/{alias}";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/alias/{alias}
        public Task<_email_exchange.exchangeSharedAccountAlias> GetV1EmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAliasAsync(string alias, string exchangeService, string organizationName, string sharedEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/alias/{alias}";
            return this.SendAsync<_email_exchange.exchangeSharedAccountAlias>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/fullAccess
        public Task<System.Int64[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAsync(string exchangeService, string organizationName, string sharedEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/fullAccess";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/fullAccess
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAsync(long allowedAccountId, string exchangeService, string organizationName, string sharedEmailAddress) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("allowedAccountId", allowedAccountId);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/fullAccess";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/fullAccess/{allowedAccountId}
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string sharedEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/fullAccess/{allowedAccountId}";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/fullAccess/{allowedAccountId}
        public Task<_email_exchange.exchangeSharedAccountFullAccess> GetV1EmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string sharedEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/fullAccess/{allowedAccountId}";
            return this.SendAsync<_email_exchange.exchangeSharedAccountFullAccess>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendAs
        public Task<System.Int64[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAsync(string exchangeService, string organizationName, string sharedEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendAs";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendAs
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAsync(long allowAccountId, string exchangeService, string organizationName, string sharedEmailAddress) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("allowAccountId", allowAccountId);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendAs";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendAs/{allowedAccountId}
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string sharedEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendAs/{allowedAccountId}";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendAs/{allowedAccountId}
        public Task<_email_exchange.exchangeSharedAccountSendAs> GetV1EmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string sharedEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendAs/{allowedAccountId}";
            return this.SendAsync<_email_exchange.exchangeSharedAccountSendAs>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendOnBehalfTo
        public Task<System.Int64[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAsync(string exchangeService, string organizationName, string sharedEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendOnBehalfTo";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendOnBehalfTo
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAsync(long allowAccountId, string exchangeService, string organizationName, string sharedEmailAddress) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("allowAccountId", allowAccountId);
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendOnBehalfTo";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendOnBehalfTo/{allowedAccountId}
        public Task<_email_exchange.Task> DeleteV1EmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string sharedEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendOnBehalfTo/{allowedAccountId}";
            return this.SendAsync<_email_exchange.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendOnBehalfTo/{allowedAccountId}
        public Task<_email_exchange.exchangeSharedAccountSendOnBehalfTo> GetV1EmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string sharedEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendOnBehalfTo/{allowedAccountId}";
            return this.SendAsync<_email_exchange.exchangeSharedAccountSendOnBehalfTo>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/tasks
        public Task<System.Int64[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksAsync(string exchangeService, string organizationName, string sharedEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/tasks";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/tasks/{id}
        public Task<_email_exchange.Task> GetV1EmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksIdAsync(string exchangeService, long id, string organizationName, string sharedEmailAddress) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/tasks/{id}";
            return this.SendAsync<_email_exchange.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccountQuota
        public Task<_email_exchange.SharedAccountQuota> GetV1EmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQuotaAsync(string exchangeService, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/sharedAccountQuota";
            return this.SendAsync<_email_exchange.SharedAccountQuota>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/task
        public Task<System.Int64[]> GetV1EmailExchangeOrganizationNameServiceExchangeServiceTaskAsync(string exchangeService, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/task";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/task/{id}
        public Task<_email_exchange.Task> GetV1EmailExchangeOrganizationNameServiceExchangeServiceTaskIdAsync(string exchangeService, long id, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/task/{id}";
            return this.SendAsync<_email_exchange.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/updateDeviceList
        public Task<_email_exchange.Task> PostV1EmailExchangeOrganizationNameServiceExchangeServiceUpdateDeviceListAsync(string exchangeService, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/updateDeviceList";
            return this.SendAsync<_email_exchange.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/email/exchange/{organizationName}/service/{exchangeService}/updateFlagsOnAllAccounts
        public Task PostV1EmailExchangeOrganizationNameServiceExchangeServiceUpdateFlagsOnAllAccountsAsync(string exchangeService, string organizationName) {
            string uri = $"/v1/email/exchange/{organizationName}/service/{exchangeService}/updateFlagsOnAllAccounts";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan
        public Task<System.String[]> GetV1EmailMxplanAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/mxplan{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}
        public Task<_email_mxplan.ServiceWithIAM> GetV1EmailMxplanServiceAsync(string service) {
            string uri = $"/v1/email/mxplan/{service}";
            return this.SendAsync<_email_mxplan.ServiceWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}
        public Task PutV1EmailMxplanServiceAsync(_email_mxplan.Service _body, string service) {
            string uri = $"/v1/email/mxplan/{service}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/mxplan/{service}/account
        public Task<System.String[]> GetV1EmailMxplanServiceAccountAsync(string service, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? id, [System.Runtime.InteropServices.OptionalAttribute()] System.String? primaryEmailAddress) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("id", id);
            queryParametersTemp.Add("primaryEmailAddress", primaryEmailAddress);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/mxplan/{service}/account{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}/account/{email}
        public Task<_email_pro.Task> DeleteV1EmailMxplanServiceAccountEmailAsync(string email, string service) {
            string uri = $"/v1/email/mxplan/{service}/account/{email}";
            return this.SendAsync<_email_pro.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}/account/{email}
        public Task<_email_mxplan.Account> GetV1EmailMxplanServiceAccountEmailAsync(string email, string service) {
            string uri = $"/v1/email/mxplan/{service}/account/{email}";
            return this.SendAsync<_email_mxplan.Account>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}/account/{email}
        public Task PutV1EmailMxplanServiceAccountEmailAsync(_email_mxplan.Account _body, string email, string service) {
            string uri = $"/v1/email/mxplan/{service}/account/{email}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/mxplan/{service}/account/{email}/alias
        public Task<System.String[]> GetV1EmailMxplanServiceAccountEmailAliasAsync(string email, string service) {
            string uri = $"/v1/email/mxplan/{service}/account/{email}/alias";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}/account/{email}/alias
        public Task<_email_pro.Task> PostV1EmailMxplanServiceAccountEmailAliasAsync(string alias, string email, string service) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("alias", alias);
            string uri = $"/v1/email/mxplan/{service}/account/{email}/alias";
            return this.SendAsync<_email_pro.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/mxplan/{service}/account/{email}/alias/{alias}
        public Task<_email_pro.Task> DeleteV1EmailMxplanServiceAccountEmailAliasAliasAsync(string alias, string email, string service) {
            string uri = $"/v1/email/mxplan/{service}/account/{email}/alias/{alias}";
            return this.SendAsync<_email_pro.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}/account/{email}/alias/{alias}
        public Task<_email_mxplan.AccountAlias> GetV1EmailMxplanServiceAccountEmailAliasAliasAsync(string alias, string email, string service) {
            string uri = $"/v1/email/mxplan/{service}/account/{email}/alias/{alias}";
            return this.SendAsync<_email_mxplan.AccountAlias>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}/account/{email}/capabilities
        public Task<_email_mxplan.accountCapabilities> GetV1EmailMxplanServiceAccountEmailCapabilitiesAsync(string email, string service) {
            string uri = $"/v1/email/mxplan/{service}/account/{email}/capabilities";
            return this.SendAsync<_email_mxplan.accountCapabilities>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}/account/{email}/changePassword
        public Task<_email_pro.Task> PostV1EmailMxplanServiceAccountEmailChangePasswordAsync(string email, string password, string service) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("password", password);
            string uri = $"/v1/email/mxplan/{service}/account/{email}/changePassword";
            return this.SendAsync<_email_pro.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/mxplan/{service}/account/{email}/diagnostic
        public Task<_email_mxplan.AccountDiagnosis> GetV1EmailMxplanServiceAccountEmailDiagnosticAsync(string email, string service) {
            string uri = $"/v1/email/mxplan/{service}/account/{email}/diagnostic";
            return this.SendAsync<_email_mxplan.AccountDiagnosis>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}/account/{email}/diagnostic
        public Task<_email_pro.Task> PostV1EmailMxplanServiceAccountEmailDiagnosticAsync(string email, string password, string service) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("password", password);
            string uri = $"/v1/email/mxplan/{service}/account/{email}/diagnostic";
            return this.SendAsync<_email_pro.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/mxplan/{service}/account/{email}/fullAccess
        public Task<System.Int64[]> GetV1EmailMxplanServiceAccountEmailFullAccessAsync(string email, string service) {
            string uri = $"/v1/email/mxplan/{service}/account/{email}/fullAccess";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}/account/{email}/fullAccess
        public Task<_email_pro.Task> PostV1EmailMxplanServiceAccountEmailFullAccessAsync(long allowedAccountId, string email, string service) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("allowedAccountId", allowedAccountId);
            string uri = $"/v1/email/mxplan/{service}/account/{email}/fullAccess";
            return this.SendAsync<_email_pro.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/mxplan/{service}/account/{email}/fullAccess/{allowedAccountId}
        public Task<_email_pro.Task> DeleteV1EmailMxplanServiceAccountEmailFullAccessAllowedAccountIdAsync(long allowedAccountId, string email, string service) {
            string uri = $"/v1/email/mxplan/{service}/account/{email}/fullAccess/{allowedAccountId}";
            return this.SendAsync<_email_pro.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}/account/{email}/fullAccess/{allowedAccountId}
        public Task<_email_mxplan.AccountFullAccess> GetV1EmailMxplanServiceAccountEmailFullAccessAllowedAccountIdAsync(long allowedAccountId, string email, string service) {
            string uri = $"/v1/email/mxplan/{service}/account/{email}/fullAccess/{allowedAccountId}";
            return this.SendAsync<_email_mxplan.AccountFullAccess>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}/account/{email}/sendAs
        public Task<System.Int64[]> GetV1EmailMxplanServiceAccountEmailSendAsAsync(string email, string service) {
            string uri = $"/v1/email/mxplan/{service}/account/{email}/sendAs";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}/account/{email}/sendAs
        public Task<_email_pro.Task> PostV1EmailMxplanServiceAccountEmailSendAsAsync(long allowAccountId, string email, string service) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("allowAccountId", allowAccountId);
            string uri = $"/v1/email/mxplan/{service}/account/{email}/sendAs";
            return this.SendAsync<_email_pro.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/mxplan/{service}/account/{email}/sendAs/{allowedAccountId}
        public Task<_email_pro.Task> DeleteV1EmailMxplanServiceAccountEmailSendAsAllowedAccountIdAsync(long allowedAccountId, string email, string service) {
            string uri = $"/v1/email/mxplan/{service}/account/{email}/sendAs/{allowedAccountId}";
            return this.SendAsync<_email_pro.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}/account/{email}/sendAs/{allowedAccountId}
        public Task<_email_mxplan.AccountSendAs> GetV1EmailMxplanServiceAccountEmailSendAsAllowedAccountIdAsync(long allowedAccountId, string email, string service) {
            string uri = $"/v1/email/mxplan/{service}/account/{email}/sendAs/{allowedAccountId}";
            return this.SendAsync<_email_mxplan.AccountSendAs>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}/account/{email}/sendOnBehalfTo
        public Task<System.Int64[]> GetV1EmailMxplanServiceAccountEmailSendOnBehalfToAsync(string email, string service) {
            string uri = $"/v1/email/mxplan/{service}/account/{email}/sendOnBehalfTo";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}/account/{email}/sendOnBehalfTo
        public Task<_email_pro.Task> PostV1EmailMxplanServiceAccountEmailSendOnBehalfToAsync(long allowAccountId, string email, string service) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("allowAccountId", allowAccountId);
            string uri = $"/v1/email/mxplan/{service}/account/{email}/sendOnBehalfTo";
            return this.SendAsync<_email_pro.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/mxplan/{service}/account/{email}/sendOnBehalfTo/{allowedAccountId}
        public Task<_email_pro.Task> DeleteV1EmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountIdAsync(long allowedAccountId, string email, string service) {
            string uri = $"/v1/email/mxplan/{service}/account/{email}/sendOnBehalfTo/{allowedAccountId}";
            return this.SendAsync<_email_pro.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}/account/{email}/sendOnBehalfTo/{allowedAccountId}
        public Task<_email_mxplan.AccountSendOnBehalfTo> GetV1EmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountIdAsync(long allowedAccountId, string email, string service) {
            string uri = $"/v1/email/mxplan/{service}/account/{email}/sendOnBehalfTo/{allowedAccountId}";
            return this.SendAsync<_email_mxplan.AccountSendOnBehalfTo>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}/account/{email}/task
        public Task<System.Int64[]> GetV1EmailMxplanServiceAccountEmailTaskAsync(string email, string service) {
            string uri = $"/v1/email/mxplan/{service}/account/{email}/task";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}/account/{email}/task/{id}
        public Task<_email_pro.Task> GetV1EmailMxplanServiceAccountEmailTaskIdAsync(string email, long id, string service) {
            string uri = $"/v1/email/mxplan/{service}/account/{email}/task/{id}";
            return this.SendAsync<_email_pro.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}/domain
        public Task<System.String[]> GetV1EmailMxplanServiceDomainAsync(string service, [System.Runtime.InteropServices.OptionalAttribute()] _email_pro.ObjectStateEnum? state) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("state", state);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/mxplan/{service}/domain{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}/domain/{domainName}
        public Task<_email_mxplan.Domain> GetV1EmailMxplanServiceDomainDomainNameAsync(string domainName, string service) {
            string uri = $"/v1/email/mxplan/{service}/domain/{domainName}";
            return this.SendAsync<_email_mxplan.Domain>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}/domain/{domainName}
        public Task PutV1EmailMxplanServiceDomainDomainNameAsync(_email_mxplan.Domain _body, string domainName, string service) {
            string uri = $"/v1/email/mxplan/{service}/domain/{domainName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/mxplan/{service}/domain/{domainName}/disclaimer
        public Task<_email_pro.Task> DeleteV1EmailMxplanServiceDomainDomainNameDisclaimerAsync(string domainName, string service) {
            string uri = $"/v1/email/mxplan/{service}/domain/{domainName}/disclaimer";
            return this.SendAsync<_email_pro.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}/domain/{domainName}/disclaimer
        public Task<_email_pro.disclaimer> GetV1EmailMxplanServiceDomainDomainNameDisclaimerAsync(string domainName, string service) {
            string uri = $"/v1/email/mxplan/{service}/domain/{domainName}/disclaimer";
            return this.SendAsync<_email_pro.disclaimer>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}/domain/{domainName}/disclaimer
        public Task<_email_pro.Task> PostV1EmailMxplanServiceDomainDomainNameDisclaimerAsync(string content, string domainName, string service, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? outsideOnly) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("content", content);
            _body.Add("outsideOnly", outsideOnly);
            string uri = $"/v1/email/mxplan/{service}/domain/{domainName}/disclaimer";
            return this.SendAsync<_email_pro.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/mxplan/{service}/domain/{domainName}/disclaimer
        public Task PutV1EmailMxplanServiceDomainDomainNameDisclaimerAsync(_email_pro.disclaimer _body, string domainName, string service) {
            string uri = $"/v1/email/mxplan/{service}/domain/{domainName}/disclaimer";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/mxplan/{service}/domain/{domainName}/disclaimerAttribute
        public Task<_email_pro.DisclaimerAttributeEnum[]> GetV1EmailMxplanServiceDomainDomainNameDisclaimerAttributeAsync(string domainName, string service) {
            string uri = $"/v1/email/mxplan/{service}/domain/{domainName}/disclaimerAttribute";
            return this.SendAsync<_email_pro.DisclaimerAttributeEnum[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}/externalContact
        public Task<System.String[]> GetV1EmailMxplanServiceExternalContactAsync(string service, [System.Runtime.InteropServices.OptionalAttribute()] System.String? displayName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? externalEmailAddress, [System.Runtime.InteropServices.OptionalAttribute()] System.String? firstName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? id, [System.Runtime.InteropServices.OptionalAttribute()] System.String? lastName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("displayName", displayName);
            queryParametersTemp.Add("externalEmailAddress", externalEmailAddress);
            queryParametersTemp.Add("firstName", firstName);
            queryParametersTemp.Add("id", id);
            queryParametersTemp.Add("lastName", lastName);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/mxplan/{service}/externalContact{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}/externalContact
        public Task<_email_pro.Task> PostV1EmailMxplanServiceExternalContactAsync(string externalEmailAddress, string service, [System.Runtime.InteropServices.OptionalAttribute()] System.String? displayName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? firstName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? hiddenFromGAL, [System.Runtime.InteropServices.OptionalAttribute()] System.String? initials, [System.Runtime.InteropServices.OptionalAttribute()] System.String? lastName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("displayName", displayName);
            _body.Add("externalEmailAddress", externalEmailAddress);
            _body.Add("firstName", firstName);
            _body.Add("hiddenFromGAL", hiddenFromGAL);
            _body.Add("initials", initials);
            _body.Add("lastName", lastName);
            string uri = $"/v1/email/mxplan/{service}/externalContact";
            return this.SendAsync<_email_pro.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/mxplan/{service}/externalContact/{externalEmailAddress}
        public Task<_email_pro.Task> DeleteV1EmailMxplanServiceExternalContactExternalEmailAddressAsync(string externalEmailAddress, string service) {
            string uri = $"/v1/email/mxplan/{service}/externalContact/{externalEmailAddress}";
            return this.SendAsync<_email_pro.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}/externalContact/{externalEmailAddress}
        public Task<_email_mxplan.ExternalContact> GetV1EmailMxplanServiceExternalContactExternalEmailAddressAsync(string externalEmailAddress, string service) {
            string uri = $"/v1/email/mxplan/{service}/externalContact/{externalEmailAddress}";
            return this.SendAsync<_email_mxplan.ExternalContact>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}/externalContact/{externalEmailAddress}
        public Task PutV1EmailMxplanServiceExternalContactExternalEmailAddressAsync(_email_mxplan.ExternalContact _body, string externalEmailAddress, string service) {
            string uri = $"/v1/email/mxplan/{service}/externalContact/{externalEmailAddress}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/mxplan/{service}/server
        public Task<_email_mxplan.Server> GetV1EmailMxplanServiceServerAsync(string service) {
            string uri = $"/v1/email/mxplan/{service}/server";
            return this.SendAsync<_email_mxplan.Server>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}/task
        public Task<System.Int64[]> GetV1EmailMxplanServiceTaskAsync(string service) {
            string uri = $"/v1/email/mxplan/{service}/task";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}/task/{id}
        public Task<_email_pro.Task> GetV1EmailMxplanServiceTaskIdAsync(long id, string service) {
            string uri = $"/v1/email/mxplan/{service}/task/{id}";
            return this.SendAsync<_email_pro.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/mxplan/{service}/updateFlagsOnAllAccounts
        public Task PostV1EmailMxplanServiceUpdateFlagsOnAllAccountsAsync(string service) {
            string uri = $"/v1/email/mxplan/{service}/updateFlagsOnAllAccounts";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/email/pro
        public Task<System.String[]> GetV1EmailProAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/pro{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}
        public Task<_email_pro.ServiceNativeWithIAM> GetV1EmailProServiceAsync(string service) {
            string uri = $"/v1/email/pro/{service}";
            return this.SendAsync<_email_pro.ServiceNativeWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}
        public Task PutV1EmailProServiceAsync(_email_pro.Service _body, string service) {
            string uri = $"/v1/email/pro/{service}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/pro/{service}/account
        public Task<System.String[]> GetV1EmailProServiceAccountAsync(string service, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? id, [System.Runtime.InteropServices.OptionalAttribute()] System.String? primaryEmailAddress) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("id", id);
            queryParametersTemp.Add("primaryEmailAddress", primaryEmailAddress);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/pro/{service}/account{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/account/{email}
        public Task<_email_pro.AccountNative> GetV1EmailProServiceAccountEmailAsync(string service, string email) {
            string uri = $"/v1/email/pro/{service}/account/{email}";
            return this.SendAsync<_email_pro.AccountNative>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/account/{email}
        public Task<_email_pro.Task> DeleteV1EmailProServiceAccountEmailAsync(string email, string service) {
            string uri = $"/v1/email/pro/{service}/account/{email}";
            return this.SendAsync<_email_pro.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/account/{email}
        public Task PutV1EmailProServiceAccountEmailAsync(_email_pro.Account _body, string email, string service) {
            string uri = $"/v1/email/pro/{service}/account/{email}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/pro/{service}/account/{email}/alias
        public Task<System.String[]> GetV1EmailProServiceAccountEmailAliasAsync(string service, string email) {
            string uri = $"/v1/email/pro/{service}/account/{email}/alias";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/account/{email}/alias
        public Task<_email_pro.Task> PostV1EmailProServiceAccountEmailAliasAsync(string alias, string email, string service) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("alias", alias);
            string uri = $"/v1/email/pro/{service}/account/{email}/alias";
            return this.SendAsync<_email_pro.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/pro/{service}/account/{email}/alias/{alias}
        public Task<_email_pro.AccountAlias> GetV1EmailProServiceAccountEmailAliasAliasAsync(string service, string alias, string email) {
            string uri = $"/v1/email/pro/{service}/account/{email}/alias/{alias}";
            return this.SendAsync<_email_pro.AccountAlias>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/account/{email}/alias/{alias}
        public Task<_email_pro.Task> DeleteV1EmailProServiceAccountEmailAliasAliasAsync(string alias, string email, string service) {
            string uri = $"/v1/email/pro/{service}/account/{email}/alias/{alias}";
            return this.SendAsync<_email_pro.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/account/{email}/changePassword
        public Task<_email_pro.Task> PostV1EmailProServiceAccountEmailChangePasswordAsync(string email, string password, string service) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("password", password);
            string uri = $"/v1/email/pro/{service}/account/{email}/changePassword";
            return this.SendAsync<_email_pro.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/pro/{service}/account/{email}/diagnostics
        public Task<_email_pro.AccountDiagnosis> GetV1EmailProServiceAccountEmailDiagnosticsAsync(string service, string email) {
            string uri = $"/v1/email/pro/{service}/account/{email}/diagnostics";
            return this.SendAsync<_email_pro.AccountDiagnosis>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/account/{email}/diagnostics
        public Task<_email_pro.Task> PostV1EmailProServiceAccountEmailDiagnosticsAsync(string email, string password, string service) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("password", password);
            string uri = $"/v1/email/pro/{service}/account/{email}/diagnostics";
            return this.SendAsync<_email_pro.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/pro/{service}/account/{email}/fullAccess
        public Task<System.Int64[]> GetV1EmailProServiceAccountEmailFullAccessAsync(string service, string email) {
            string uri = $"/v1/email/pro/{service}/account/{email}/fullAccess";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/account/{email}/fullAccess
        public Task<_email_pro.Task> PostV1EmailProServiceAccountEmailFullAccessAsync(long allowedAccountId, string email, string service) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("allowedAccountId", allowedAccountId);
            string uri = $"/v1/email/pro/{service}/account/{email}/fullAccess";
            return this.SendAsync<_email_pro.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/pro/{service}/account/{email}/fullAccess/{allowedAccountId}
        public Task<_email_pro.AccountFullAccess> GetV1EmailProServiceAccountEmailFullAccessAllowedAccountIdAsync(string service, long allowedAccountId, string email) {
            string uri = $"/v1/email/pro/{service}/account/{email}/fullAccess/{allowedAccountId}";
            return this.SendAsync<_email_pro.AccountFullAccess>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/account/{email}/fullAccess/{allowedAccountId}
        public Task<_email_pro.Task> DeleteV1EmailProServiceAccountEmailFullAccessAllowedAccountIdAsync(long allowedAccountId, string email, string service) {
            string uri = $"/v1/email/pro/{service}/account/{email}/fullAccess/{allowedAccountId}";
            return this.SendAsync<_email_pro.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/account/{email}/sendAs
        public Task<System.Int64[]> GetV1EmailProServiceAccountEmailSendAsAsync(string service, string email) {
            string uri = $"/v1/email/pro/{service}/account/{email}/sendAs";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/account/{email}/sendAs
        public Task<_email_pro.Task> PostV1EmailProServiceAccountEmailSendAsAsync(long allowAccountId, string email, string service) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("allowAccountId", allowAccountId);
            string uri = $"/v1/email/pro/{service}/account/{email}/sendAs";
            return this.SendAsync<_email_pro.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/pro/{service}/account/{email}/sendAs/{allowedAccountId}
        public Task<_email_pro.AccountSendAs> GetV1EmailProServiceAccountEmailSendAsAllowedAccountIdAsync(string service, long allowedAccountId, string email) {
            string uri = $"/v1/email/pro/{service}/account/{email}/sendAs/{allowedAccountId}";
            return this.SendAsync<_email_pro.AccountSendAs>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/account/{email}/sendAs/{allowedAccountId}
        public Task<_email_pro.Task> DeleteV1EmailProServiceAccountEmailSendAsAllowedAccountIdAsync(long allowedAccountId, string email, string service) {
            string uri = $"/v1/email/pro/{service}/account/{email}/sendAs/{allowedAccountId}";
            return this.SendAsync<_email_pro.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/account/{email}/sendOnBehalfTo
        public Task<System.Int64[]> GetV1EmailProServiceAccountEmailSendOnBehalfToAsync(string service, string email) {
            string uri = $"/v1/email/pro/{service}/account/{email}/sendOnBehalfTo";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/account/{email}/sendOnBehalfTo
        public Task<_email_pro.Task> PostV1EmailProServiceAccountEmailSendOnBehalfToAsync(long allowAccountId, string email, string service) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("allowAccountId", allowAccountId);
            string uri = $"/v1/email/pro/{service}/account/{email}/sendOnBehalfTo";
            return this.SendAsync<_email_pro.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/pro/{service}/account/{email}/sendOnBehalfTo/{allowedAccountId}
        public Task<_email_pro.AccountSendOnBehalfTo> GetV1EmailProServiceAccountEmailSendOnBehalfToAllowedAccountIdAsync(string service, long allowedAccountId, string email) {
            string uri = $"/v1/email/pro/{service}/account/{email}/sendOnBehalfTo/{allowedAccountId}";
            return this.SendAsync<_email_pro.AccountSendOnBehalfTo>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/account/{email}/sendOnBehalfTo/{allowedAccountId}
        public Task<_email_pro.Task> DeleteV1EmailProServiceAccountEmailSendOnBehalfToAllowedAccountIdAsync(long allowedAccountId, string email, string service) {
            string uri = $"/v1/email/pro/{service}/account/{email}/sendOnBehalfTo/{allowedAccountId}";
            return this.SendAsync<_email_pro.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/account/{email}/tasks
        public Task<System.Int64[]> GetV1EmailProServiceAccountEmailTasksAsync(string service, string email) {
            string uri = $"/v1/email/pro/{service}/account/{email}/tasks";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/account/{email}/tasks/{id}
        public Task<_email_pro.Task> GetV1EmailProServiceAccountEmailTasksIdAsync(string service, string email, long id) {
            string uri = $"/v1/email/pro/{service}/account/{email}/tasks/{id}";
            return this.SendAsync<_email_pro.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/account/{email}/terminate
        public Task<System.String> PostV1EmailProServiceAccountEmailTerminateAsync(string email, string service) {
            string uri = $"/v1/email/pro/{service}/account/{email}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/billingMigrated
        public Task<System.Boolean> GetV1EmailProServiceBillingMigratedAsync(string service) {
            string uri = $"/v1/email/pro/{service}/billingMigrated";
            return this.SendAsync<bool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/billingPlan
        public Task<System.String> GetV1EmailProServiceBillingPlanAsync(string service) {
            string uri = $"/v1/email/pro/{service}/billingPlan";
            return this.SendAsync<string>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/changeContact
        public Task<System.Int64[]> PostV1EmailProServiceChangeContactAsync(string service, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactTech) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("contactAdmin", contactAdmin);
            _body.Add("contactBilling", contactBilling);
            _body.Add("contactTech", contactTech);
            string uri = $"/v1/email/pro/{service}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/pro/{service}/domain
        public Task<System.String[]> GetV1EmailProServiceDomainAsync(string service, [System.Runtime.InteropServices.OptionalAttribute()] _email_pro.ObjectStateEnum? state) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("state", state);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/pro/{service}/domain{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/domain
        public Task<_email_pro.Task> PostV1EmailProServiceDomainAsync(string name, string service, _email_pro.DomainTypeEnum type, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? autoEnableDKIM, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? configureAutodiscover, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? configureDKIM, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? configureMx, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? configureSPF, [System.Runtime.InteropServices.OptionalAttribute()] System.String? mxRelay) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("autoEnableDKIM", autoEnableDKIM);
            _body.Add("configureAutodiscover", configureAutodiscover);
            _body.Add("configureDKIM", configureDKIM);
            _body.Add("configureMx", configureMx);
            _body.Add("configureSPF", configureSPF);
            _body.Add("mxRelay", mxRelay);
            _body.Add("name", name);
            _body.Add("type", type);
            string uri = $"/v1/email/pro/{service}/domain";
            return this.SendAsync<_email_pro.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/pro/{service}/domain/{domainName}
        public Task<_email_pro.DomainNative> GetV1EmailProServiceDomainDomainNameAsync(string service, string domainName) {
            string uri = $"/v1/email/pro/{service}/domain/{domainName}";
            return this.SendAsync<_email_pro.DomainNative>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/domain/{domainName}
        public Task<_email_pro.Task> DeleteV1EmailProServiceDomainDomainNameAsync(string domainName, string service) {
            string uri = $"/v1/email/pro/{service}/domain/{domainName}";
            return this.SendAsync<_email_pro.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/domain/{domainName}
        public Task PutV1EmailProServiceDomainDomainNameAsync(_email_pro.Domain _body, string domainName, string service) {
            string uri = $"/v1/email/pro/{service}/domain/{domainName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/pro/{service}/domain/{domainName}/disclaimer
        public Task<_email_pro.disclaimerNative> GetV1EmailProServiceDomainDomainNameDisclaimerAsync(string service, string domainName) {
            string uri = $"/v1/email/pro/{service}/domain/{domainName}/disclaimer";
            return this.SendAsync<_email_pro.disclaimerNative>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/domain/{domainName}/disclaimer
        public Task<_email_pro.Task> DeleteV1EmailProServiceDomainDomainNameDisclaimerAsync(string domainName, string service) {
            string uri = $"/v1/email/pro/{service}/domain/{domainName}/disclaimer";
            return this.SendAsync<_email_pro.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/domain/{domainName}/disclaimer
        public Task<_email_pro.Task> PostV1EmailProServiceDomainDomainNameDisclaimerAsync(string content, string domainName, string service, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? outsideOnly) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("content", content);
            _body.Add("outsideOnly", outsideOnly);
            string uri = $"/v1/email/pro/{service}/domain/{domainName}/disclaimer";
            return this.SendAsync<_email_pro.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/pro/{service}/domain/{domainName}/disclaimer
        public Task PutV1EmailProServiceDomainDomainNameDisclaimerAsync(_email_pro.disclaimer _body, string domainName, string service) {
            string uri = $"/v1/email/pro/{service}/domain/{domainName}/disclaimer";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/pro/{service}/domain/{domainName}/disclaimerAttribute
        public Task<_email_pro.DisclaimerAttributeEnum[]> GetV1EmailProServiceDomainDomainNameDisclaimerAttributeAsync(string service, string domainName) {
            string uri = $"/v1/email/pro/{service}/domain/{domainName}/disclaimerAttribute";
            return this.SendAsync<_email_pro.DisclaimerAttributeEnum[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/domain/{domainName}/dkim
        public Task<System.String[]> GetV1EmailProServiceDomainDomainNameDkimAsync(string service, string domainName) {
            string uri = $"/v1/email/pro/{service}/domain/{domainName}/dkim";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/domain/{domainName}/dkim
        public Task<_email_pro.Task> PostV1EmailProServiceDomainDomainNameDkimAsync(string domainName, string selectorName, string service, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? autoEnableDKIM, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? configureDkim) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("autoEnableDKIM", autoEnableDKIM);
            _body.Add("configureDkim", configureDkim);
            _body.Add("selectorName", selectorName);
            string uri = $"/v1/email/pro/{service}/domain/{domainName}/dkim";
            return this.SendAsync<_email_pro.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/pro/{service}/domain/{domainName}/dkim/{selectorName}
        public Task<_email_pro.Dkim> GetV1EmailProServiceDomainDomainNameDkimSelectorNameAsync(string service, string domainName, string selectorName) {
            string uri = $"/v1/email/pro/{service}/domain/{domainName}/dkim/{selectorName}";
            return this.SendAsync<_email_pro.Dkim>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/domain/{domainName}/dkim/{selectorName}
        public Task<_email_pro.Task> DeleteV1EmailProServiceDomainDomainNameDkimSelectorNameAsync(string domainName, string selectorName, string service) {
            string uri = $"/v1/email/pro/{service}/domain/{domainName}/dkim/{selectorName}";
            return this.SendAsync<_email_pro.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/domain/{domainName}/dkim/{selectorName}/disable
        public Task<_email_pro.Task> PostV1EmailProServiceDomainDomainNameDkimSelectorNameDisableAsync(string domainName, string selectorName, string service) {
            string uri = $"/v1/email/pro/{service}/domain/{domainName}/dkim/{selectorName}/disable";
            return this.SendAsync<_email_pro.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/domain/{domainName}/dkim/{selectorName}/enable
        public Task<_email_pro.Task> PostV1EmailProServiceDomainDomainNameDkimSelectorNameEnableAsync(string domainName, string selectorName, string service) {
            string uri = $"/v1/email/pro/{service}/domain/{domainName}/dkim/{selectorName}/enable";
            return this.SendAsync<_email_pro.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/domain/{domainName}/dkimSelector
        public Task<System.String[]> GetV1EmailProServiceDomainDomainNameDkimSelectorAsync(string domainName, string service) {
            string uri = $"/v1/email/pro/{service}/domain/{domainName}/dkimSelector";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/externalContact
        public Task<System.String[]> GetV1EmailProServiceExternalContactAsync(string service, [System.Runtime.InteropServices.OptionalAttribute()] System.String? displayName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? externalEmailAddress, [System.Runtime.InteropServices.OptionalAttribute()] System.String? firstName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? id, [System.Runtime.InteropServices.OptionalAttribute()] System.String? lastName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("displayName", displayName);
            queryParametersTemp.Add("externalEmailAddress", externalEmailAddress);
            queryParametersTemp.Add("firstName", firstName);
            queryParametersTemp.Add("id", id);
            queryParametersTemp.Add("lastName", lastName);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/email/pro/{service}/externalContact{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/externalContact
        public Task<_email_pro.Task> PostV1EmailProServiceExternalContactAsync(string externalEmailAddress, string service, [System.Runtime.InteropServices.OptionalAttribute()] System.String? displayName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? firstName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? hiddenFromGAL, [System.Runtime.InteropServices.OptionalAttribute()] System.String? initials, [System.Runtime.InteropServices.OptionalAttribute()] System.String? lastName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("displayName", displayName);
            _body.Add("externalEmailAddress", externalEmailAddress);
            _body.Add("firstName", firstName);
            _body.Add("hiddenFromGAL", hiddenFromGAL);
            _body.Add("initials", initials);
            _body.Add("lastName", lastName);
            string uri = $"/v1/email/pro/{service}/externalContact";
            return this.SendAsync<_email_pro.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/email/pro/{service}/externalContact/{externalEmailAddress}
        public Task<_email_pro.ExternalContactNative> GetV1EmailProServiceExternalContactExternalEmailAddressAsync(string service, string externalEmailAddress) {
            string uri = $"/v1/email/pro/{service}/externalContact/{externalEmailAddress}";
            return this.SendAsync<_email_pro.ExternalContactNative>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/externalContact/{externalEmailAddress}
        public Task<_email_pro.Task> DeleteV1EmailProServiceExternalContactExternalEmailAddressAsync(string externalEmailAddress, string service) {
            string uri = $"/v1/email/pro/{service}/externalContact/{externalEmailAddress}";
            return this.SendAsync<_email_pro.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/externalContact/{externalEmailAddress}
        public Task PutV1EmailProServiceExternalContactExternalEmailAddressAsync(_email_pro.ExternalContact _body, string externalEmailAddress, string service) {
            string uri = $"/v1/email/pro/{service}/externalContact/{externalEmailAddress}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/pro/{service}/server
        public Task<_email_pro.Server> GetV1EmailProServiceServerAsync(string service) {
            string uri = $"/v1/email/pro/{service}/server";
            return this.SendAsync<_email_pro.Server>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/serviceInfos
        public Task<_services.Service> GetV1EmailProServiceServiceInfosAsync(string service) {
            string uri = $"/v1/email/pro/{service}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/serviceInfos
        public Task PutV1EmailProServiceServiceInfosAsync(_services.Service _body, string service) {
            string uri = $"/v1/email/pro/{service}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/email/pro/{service}/task
        public Task<System.Int64[]> GetV1EmailProServiceTaskAsync(string service) {
            string uri = $"/v1/email/pro/{service}/task";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/task/{id}
        public Task<_email_pro.Task> GetV1EmailProServiceTaskIdAsync(string service, long id) {
            string uri = $"/v1/email/pro/{service}/task/{id}";
            return this.SendAsync<_email_pro.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/email/pro/{service}/updateFlagsOnAllAccounts
        public Task PostV1EmailProServiceUpdateFlagsOnAllAccountsAsync(string service) {
            string uri = $"/v1/email/pro/{service}/updateFlagsOnAllAccounts";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/freefax
        public Task<System.String[]> GetV1FreefaxAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/freefax{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/freefax/credits
        public Task<_freefax.BalanceInformations> GetV1FreefaxCreditsAsync() {
            string uri = $"/v1/freefax/credits";
            return this.SendAsync<_freefax.BalanceInformations>("GET", uri, null, null, true);
        }
        
        // Path: /v1/freefax/{serviceName}
        public Task<_freefax.FreefaxPropertiesWithIAM> GetV1FreefaxServiceNameAsync(string serviceName) {
            string uri = $"/v1/freefax/{serviceName}";
            return this.SendAsync<_freefax.FreefaxPropertiesWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/freefax/{serviceName}
        public Task PutV1FreefaxServiceNameAsync(_freefax.FreefaxProperties _body, string serviceName) {
            string uri = $"/v1/freefax/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/freefax/{serviceName}/changePassword
        public Task<System.String> PostV1FreefaxServiceNameChangePasswordAsync(string serviceName) {
            string uri = $"/v1/freefax/{serviceName}/changePassword";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/freefax/{serviceName}/directory
        public Task<_telephony.DirectoryInfo> GetV1FreefaxServiceNameDirectoryAsync(string serviceName) {
            string uri = $"/v1/freefax/{serviceName}/directory";
            return this.SendAsync<_telephony.DirectoryInfo>("GET", uri, null, null, true);
        }
        
        // Path: /v1/freefax/{serviceName}/directory
        public Task PutV1FreefaxServiceNameDirectoryAsync(_telephony.DirectoryInfo _body, string serviceName) {
            string uri = $"/v1/freefax/{serviceName}/directory";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/freefax/{serviceName}/directory/fetchEntrepriseInformations
        public Task<_telephony.EntrepriseNumberInformationsTask> PostV1FreefaxServiceNameDirectoryFetchEntrepriseInformationsAsync(_telephony.EntrepriseNumber _body, string serviceName) {
            string uri = $"/v1/freefax/{serviceName}/directory/fetchEntrepriseInformations";
            return this.SendAsync<_telephony.EntrepriseNumberInformationsTask>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/freefax/{serviceName}/directory/getDirectoryServiceCode
        public Task<_telephony.DirectoryHeadingPJ[]> GetV1FreefaxServiceNameDirectoryGetDirectoryServiceCodeAsync(string apeCode, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("apeCode", apeCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/freefax/{serviceName}/directory/getDirectoryServiceCode{queryParameters}";
            return this.SendAsync<_telephony.DirectoryHeadingPJ[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/freefax/{serviceName}/directory/getWayTypes
        public Task<_telephony.DirectoryWayType[]> GetV1FreefaxServiceNameDirectoryGetWayTypesAsync(string serviceName) {
            string uri = $"/v1/freefax/{serviceName}/directory/getWayTypes";
            return this.SendAsync<_telephony.DirectoryWayType[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/freefax/{serviceName}/mainService
        public Task<System.String> GetV1FreefaxServiceNameMainServiceAsync(string serviceName) {
            string uri = $"/v1/freefax/{serviceName}/mainService";
            return this.SendAsync<string>("GET", uri, null, null, true);
        }
        
        // Path: /v1/freefax/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1FreefaxServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/freefax/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/freefax/{serviceName}/serviceInfos
        public Task PutV1FreefaxServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/freefax/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/freefax/{serviceName}/voicemail
        public Task<_telephony.VoicemailProperties> GetV1FreefaxServiceNameVoicemailAsync(string serviceName) {
            string uri = $"/v1/freefax/{serviceName}/voicemail";
            return this.SendAsync<_telephony.VoicemailProperties>("GET", uri, null, null, true);
        }
        
        // Path: /v1/freefax/{serviceName}/voicemail
        public Task PutV1FreefaxServiceNameVoicemailAsync(_telephony.VoicemailProperties _body, string serviceName) {
            string uri = $"/v1/freefax/{serviceName}/voicemail";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/freefax/{serviceName}/voicemail/changePassword
        public Task PostV1FreefaxServiceNameVoicemailChangePasswordAsync(_telephony_voicemail.ChangePassword _body, string serviceName) {
            string uri = $"/v1/freefax/{serviceName}/voicemail/changePassword";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/freefax/{serviceName}/voicemail/changeRouting
        public Task PostV1FreefaxServiceNameVoicemailChangeRoutingAsync(_telephony_voicemail.ChangeRouting _body, string serviceName) {
            string uri = $"/v1/freefax/{serviceName}/voicemail/changeRouting";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/freefax/{serviceName}/voicemail/routing
        public Task<_telephony.VoicefaxRoutingEnum> GetV1FreefaxServiceNameVoicemailRoutingAsync(string serviceName) {
            string uri = $"/v1/freefax/{serviceName}/voicemail/routing";
            return this.SendAsync<_telephony.VoicefaxRoutingEnum>("GET", uri, null, null, true);
        }
        
        // Path: /v1/freefax/{serviceName}/voicemail/voicemailNumbers
        public Task<_telephony.VoicemailNumbers> GetV1FreefaxServiceNameVoicemailVoicemailNumbersAsync(string serviceName) {
            string uri = $"/v1/freefax/{serviceName}/voicemail/voicemailNumbers";
            return this.SendAsync<_telephony.VoicemailNumbers>("GET", uri, null, null, true);
        }
        
        // Path: /v1/horizonView
        public Task<System.String[]> GetV1HorizonViewAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/horizonView{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/horizonView/{serviceName}
        public Task<_horizonView.DatacenterWithIAM> GetV1HorizonViewServiceNameAsync(string serviceName) {
            string uri = $"/v1/horizonView/{serviceName}";
            return this.SendAsync<_horizonView.DatacenterWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/accessPoint
        public Task<System.Int64[]> GetV1HorizonViewServiceNameAccessPointAsync(string serviceName) {
            string uri = $"/v1/horizonView/{serviceName}/accessPoint";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/accessPoint
        public Task<_horizonView.Task[]> PostV1HorizonViewServiceNameAccessPointAsync(_horizonView.PoolType poolType, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? privateBlock, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? privateVlan, [System.Runtime.InteropServices.OptionalAttribute()] System.String? vrouterPoolPublicIp) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("poolType", poolType);
            _body.Add("privateBlock", privateBlock);
            _body.Add("privateVlan", privateVlan);
            _body.Add("vrouterPoolPublicIp", vrouterPoolPublicIp);
            string uri = $"/v1/horizonView/{serviceName}/accessPoint";
            return this.SendAsync<_horizonView.Task[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/accessPoint/{accessPointId}
        public Task<_horizonView.Task[]> DeleteV1HorizonViewServiceNameAccessPointAccessPointIdAsync(long accessPointId, string serviceName) {
            string uri = $"/v1/horizonView/{serviceName}/accessPoint/{accessPointId}";
            return this.SendAsync<_horizonView.Task[]>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/accessPoint/{accessPointId}
        public Task<_horizonView.Pool> GetV1HorizonViewServiceNameAccessPointAccessPointIdAsync(long accessPointId, string serviceName) {
            string uri = $"/v1/horizonView/{serviceName}/accessPoint/{accessPointId}";
            return this.SendAsync<_horizonView.Pool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/accessPoint/{accessPointId}/changeSessionTimeout
        public Task<_horizonView.Task> PostV1HorizonViewServiceNameAccessPointAccessPointIdChangeSessionTimeoutAsync(long accessPointId, long expiration, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _horizonView.AccessPointTypeEnum? onSingleAP) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("expiration", expiration);
            _body.Add("onSingleAP", onSingleAP);
            string uri = $"/v1/horizonView/{serviceName}/accessPoint/{accessPointId}/changeSessionTimeout";
            return this.SendAsync<_horizonView.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/accessPoint/{accessPointId}/customerNetwork
        public Task<System.Int64[]> GetV1HorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkAsync(long accessPointId, string serviceName) {
            string uri = $"/v1/horizonView/{serviceName}/accessPoint/{accessPointId}/customerNetwork";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/accessPoint/{accessPointId}/customerNetwork
        public Task<_horizonView.Task[]> PostV1HorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkAsync(long accessPointId, string network, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("network", network);
            string uri = $"/v1/horizonView/{serviceName}/accessPoint/{accessPointId}/customerNetwork";
            return this.SendAsync<_horizonView.Task[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/accessPoint/{accessPointId}/customerNetwork/{customerNetworkId}
        public Task<_horizonView.Task[]> DeleteV1HorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkIdAsync(long accessPointId, long customerNetworkId, string serviceName) {
            string uri = $"/v1/horizonView/{serviceName}/accessPoint/{accessPointId}/customerNetwork/{customerNetworkId}";
            return this.SendAsync<_horizonView.Task[]>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/accessPoint/{accessPointId}/customerNetwork/{customerNetworkId}
        public Task<_horizonView.CustomerNetworkPool> GetV1HorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkIdAsync(long accessPointId, long customerNetworkId, string serviceName) {
            string uri = $"/v1/horizonView/{serviceName}/accessPoint/{accessPointId}/customerNetwork/{customerNetworkId}";
            return this.SendAsync<_horizonView.CustomerNetworkPool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/accessPoint/{accessPointId}/disableTwoFA
        public Task<_horizonView.Task> PostV1HorizonViewServiceNameAccessPointAccessPointIdDisableTwoFAAsync(long accessPointId, string serviceName) {
            string uri = $"/v1/horizonView/{serviceName}/accessPoint/{accessPointId}/disableTwoFA";
            return this.SendAsync<_horizonView.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/accessPoint/{accessPointId}/disableWindowsUsernameOption
        public Task<_horizonView.Task> PostV1HorizonViewServiceNameAccessPointAccessPointIdDisableWindowsUsernameOptionAsync(long accessPointId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _horizonView.AccessPointTypeEnum? onSingleAP) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("onSingleAP", onSingleAP);
            string uri = $"/v1/horizonView/{serviceName}/accessPoint/{accessPointId}/disableWindowsUsernameOption";
            return this.SendAsync<_horizonView.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/accessPoint/{accessPointId}/enableTwoFA
        public Task<_horizonView.Task> PostV1HorizonViewServiceNameAccessPointAccessPointIdEnableTwoFAAsync(long accessPointId, string radiusIp, string secret, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _horizonView.AccessPointTypeEnum? onSingleAP) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("onSingleAP", onSingleAP);
            _body.Add("radiusIp", radiusIp);
            _body.Add("secret", secret);
            string uri = $"/v1/horizonView/{serviceName}/accessPoint/{accessPointId}/enableTwoFA";
            return this.SendAsync<_horizonView.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/accessPoint/{accessPointId}/enableWindowsUsernameOption
        public Task<_horizonView.Task> PostV1HorizonViewServiceNameAccessPointAccessPointIdEnableWindowsUsernameOptionAsync(long accessPointId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _horizonView.AccessPointTypeEnum? onSingleAP) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("onSingleAP", onSingleAP);
            string uri = $"/v1/horizonView/{serviceName}/accessPoint/{accessPointId}/enableWindowsUsernameOption";
            return this.SendAsync<_horizonView.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/confirmTermination
        public Task<System.String> PostV1HorizonViewServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] System.String? commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum? futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum? reason) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("commentary", commentary);
            _body.Add("futureUse", futureUse);
            _body.Add("reason", reason);
            _body.Add("token", token);
            string uri = $"/v1/horizonView/{serviceName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/customerNetwork
        public Task<System.Int64[]> GetV1HorizonViewServiceNameCustomerNetworkAsync(string serviceName) {
            string uri = $"/v1/horizonView/{serviceName}/customerNetwork";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/customerNetwork
        public Task<_horizonView.Task[]> PostV1HorizonViewServiceNameCustomerNetworkAsync(string name, string network, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("name", name);
            _body.Add("network", network);
            string uri = $"/v1/horizonView/{serviceName}/customerNetwork";
            return this.SendAsync<_horizonView.Task[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/customerNetwork/{customerNetworkId}
        public Task<_horizonView.Task[]> DeleteV1HorizonViewServiceNameCustomerNetworkCustomerNetworkIdAsync(long customerNetworkId, string serviceName) {
            string uri = $"/v1/horizonView/{serviceName}/customerNetwork/{customerNetworkId}";
            return this.SendAsync<_horizonView.Task[]>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/customerNetwork/{customerNetworkId}
        public Task<_horizonView.CustomerNetwork> GetV1HorizonViewServiceNameCustomerNetworkCustomerNetworkIdAsync(long customerNetworkId, string serviceName) {
            string uri = $"/v1/horizonView/{serviceName}/customerNetwork/{customerNetworkId}";
            return this.SendAsync<_horizonView.CustomerNetwork>("GET", uri, null, null, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/dedicatedHorizon
        public Task<_horizonView.DedicatedHorizon> GetV1HorizonViewServiceNameDedicatedHorizonAsync(string serviceName) {
            string uri = $"/v1/horizonView/{serviceName}/dedicatedHorizon";
            return this.SendAsync<_horizonView.DedicatedHorizon>("GET", uri, null, null, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/dedicatedHorizon/customerUser
        public Task<System.String[]> GetV1HorizonViewServiceNameDedicatedHorizonCustomerUserAsync(string serviceName) {
            string uri = $"/v1/horizonView/{serviceName}/dedicatedHorizon/customerUser";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/dedicatedHorizon/customerUser
        public Task<_horizonView.Task[]> PostV1HorizonViewServiceNameDedicatedHorizonCustomerUserAsync(string serviceName, string username, [System.Runtime.InteropServices.OptionalAttribute()] System.String? email, [System.Runtime.InteropServices.OptionalAttribute()] System.String? password) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("email", email);
            _body.Add("password", password);
            _body.Add("username", username);
            string uri = $"/v1/horizonView/{serviceName}/dedicatedHorizon/customerUser";
            return this.SendAsync<_horizonView.Task[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/dedicatedHorizon/customerUser/{username}
        public Task<_horizonView.Task[]> DeleteV1HorizonViewServiceNameDedicatedHorizonCustomerUserUsernameAsync(string serviceName, string username) {
            string uri = $"/v1/horizonView/{serviceName}/dedicatedHorizon/customerUser/{username}";
            return this.SendAsync<_horizonView.Task[]>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/dedicatedHorizon/customerUser/{username}
        public Task<_horizonView.CustomerUser> GetV1HorizonViewServiceNameDedicatedHorizonCustomerUserUsernameAsync(string serviceName, string username) {
            string uri = $"/v1/horizonView/{serviceName}/dedicatedHorizon/customerUser/{username}";
            return this.SendAsync<_horizonView.CustomerUser>("GET", uri, null, null, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/dedicatedHorizon/customerUser/{username}/changePassword
        public Task<_horizonView.Task> PostV1HorizonViewServiceNameDedicatedHorizonCustomerUserUsernameChangePasswordAsync(string serviceName, string username, [System.Runtime.InteropServices.OptionalAttribute()] System.String? password) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("password", password);
            string uri = $"/v1/horizonView/{serviceName}/dedicatedHorizon/customerUser/{username}/changePassword";
            return this.SendAsync<_horizonView.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/dedicatedHorizon/disableStorageAccelerator
        public Task<_horizonView.Task> PostV1HorizonViewServiceNameDedicatedHorizonDisableStorageAcceleratorAsync(string serviceName) {
            string uri = $"/v1/horizonView/{serviceName}/dedicatedHorizon/disableStorageAccelerator";
            return this.SendAsync<_horizonView.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/dedicatedHorizon/enableStorageAccelerator
        public Task<_horizonView.Task> PostV1HorizonViewServiceNameDedicatedHorizonEnableStorageAcceleratorAsync(string serviceName) {
            string uri = $"/v1/horizonView/{serviceName}/dedicatedHorizon/enableStorageAccelerator";
            return this.SendAsync<_horizonView.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/dedicatedHorizon/task
        public Task<System.Int64[]> GetV1HorizonViewServiceNameDedicatedHorizonTaskAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _horizonView.TaskStateEnum? state) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("state", state);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/horizonView/{serviceName}/dedicatedHorizon/task{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/dedicatedHorizon/task/{taskId}
        public Task<_horizonView.Task> GetV1HorizonViewServiceNameDedicatedHorizonTaskTaskIdAsync(string serviceName, long taskId) {
            string uri = $"/v1/horizonView/{serviceName}/dedicatedHorizon/task/{taskId}";
            return this.SendAsync<_horizonView.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/dedicatedHorizon/user
        public Task<_horizonView.User> GetV1HorizonViewServiceNameDedicatedHorizonUserAsync(string serviceName) {
            string uri = $"/v1/horizonView/{serviceName}/dedicatedHorizon/user";
            return this.SendAsync<_horizonView.User>("GET", uri, null, null, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/dedicatedHorizon/user/changePassword
        public Task<_horizonView.Task> PostV1HorizonViewServiceNameDedicatedHorizonUserChangePasswordAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? password) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("password", password);
            string uri = $"/v1/horizonView/{serviceName}/dedicatedHorizon/user/changePassword";
            return this.SendAsync<_horizonView.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/dedicatedHorizon/user/changeProperties
        public Task<_horizonView.Task> PostV1HorizonViewServiceNameDedicatedHorizonUserChangePropertiesAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? email) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("email", email);
            string uri = $"/v1/horizonView/{serviceName}/dedicatedHorizon/user/changeProperties";
            return this.SendAsync<_horizonView.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/domainTrust
        public Task<System.Int64[]> GetV1HorizonViewServiceNameDomainTrustAsync(string serviceName) {
            string uri = $"/v1/horizonView/{serviceName}/domainTrust";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/domainTrust
        public Task<_horizonView.Task[]> PostV1HorizonViewServiceNameDomainTrustAsync(string activeDirectoryIP, string domain, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? dns1, [System.Runtime.InteropServices.OptionalAttribute()] System.String? dns2) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("activeDirectoryIP", activeDirectoryIP);
            _body.Add("dns1", dns1);
            _body.Add("dns2", dns2);
            _body.Add("domain", domain);
            string uri = $"/v1/horizonView/{serviceName}/domainTrust";
            return this.SendAsync<_horizonView.Task[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/domainTrust/{domainTrustId}
        public Task<_horizonView.DomainTrust> GetV1HorizonViewServiceNameDomainTrustDomainTrustIdAsync(long domainTrustId, string serviceName) {
            string uri = $"/v1/horizonView/{serviceName}/domainTrust/{domainTrustId}";
            return this.SendAsync<_horizonView.DomainTrust>("GET", uri, null, null, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/domainTrust/{domainTrustId}/addChildDomain
        public Task<_horizonView.Task> PostV1HorizonViewServiceNameDomainTrustDomainTrustIdAddChildDomainAsync(string activeDirectoryIP, string domain, long domainTrustId, string passphrase, string serviceAccountPassword, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("activeDirectoryIP", activeDirectoryIP);
            _body.Add("domain", domain);
            _body.Add("passphrase", passphrase);
            _body.Add("serviceAccountPassword", serviceAccountPassword);
            string uri = $"/v1/horizonView/{serviceName}/domainTrust/{domainTrustId}/addChildDomain";
            return this.SendAsync<_horizonView.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/domainTrust/{domainTrustId}/addDomainController
        public Task<_horizonView.Task> PostV1HorizonViewServiceNameDomainTrustDomainTrustIdAddDomainControllerAsync(string domain, string domainControllerIp, long domainTrustId, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("domain", domain);
            _body.Add("domainControllerIp", domainControllerIp);
            string uri = $"/v1/horizonView/{serviceName}/domainTrust/{domainTrustId}/addDomainController";
            return this.SendAsync<_horizonView.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/domainTrust/{domainTrustId}/addDomainUserOnComposer
        public Task<_horizonView.Task> PostV1HorizonViewServiceNameDomainTrustDomainTrustIdAddDomainUserOnComposerAsync(string domain, long domainTrustId, string password, string serviceName, string username) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("domain", domain);
            _body.Add("password", password);
            _body.Add("username", username);
            string uri = $"/v1/horizonView/{serviceName}/domainTrust/{domainTrustId}/addDomainUserOnComposer";
            return this.SendAsync<_horizonView.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/domainTrust/{domainTrustId}/createTrust
        public Task<_horizonView.Task> PostV1HorizonViewServiceNameDomainTrustDomainTrustIdCreateTrustAsync(long domainTrustId, string passphrase, string serviceAccountPassword, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("passphrase", passphrase);
            _body.Add("serviceAccountPassword", serviceAccountPassword);
            string uri = $"/v1/horizonView/{serviceName}/domainTrust/{domainTrustId}/createTrust";
            return this.SendAsync<_horizonView.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1HorizonViewServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/horizonView/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/serviceInfos
        public Task PutV1HorizonViewServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/horizonView/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/horizonView/{serviceName}/terminate
        public Task<System.String> PostV1HorizonViewServiceNameTerminateAsync(string serviceName) {
            string uri = $"/v1/horizonView/{serviceName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase
        public Task<System.String[]> GetV1HostingPrivateDatabaseAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/privateDatabase{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/availableOrderCapacities
        public Task<_hosting_privateDatabase.availableOrderCapacities> GetV1HostingPrivateDatabaseAvailableOrderCapacitiesAsync(_hosting_privateDatabase.OfferEnum offer) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("offer", offer);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/privateDatabase/availableOrderCapacities{queryParameters}";
            return this.SendAsync<_hosting_privateDatabase.availableOrderCapacities>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}
        public Task<_hosting_privateDatabase.ServiceWithIAM> GetV1HostingPrivateDatabaseServiceNameAsync(string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}";
            return this.SendAsync<_hosting_privateDatabase.ServiceWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}
        public Task PutV1HostingPrivateDatabaseServiceNameAsync(_hosting_privateDatabase.Service _body, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/availableVersions
        public Task<_hosting_privateDatabase.AvailableVersionEnum[]> GetV1HostingPrivateDatabaseServiceNameAvailableVersionsAsync(string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/availableVersions";
            return this.SendAsync<_hosting_privateDatabase.AvailableVersionEnum[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/changeContact
        public Task<System.Int64[]> PostV1HostingPrivateDatabaseServiceNameChangeContactAsync(_services.changeContact _body, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/changeFtpPassword
        public Task<_hosting_privateDatabase.Task> PostV1HostingPrivateDatabaseServiceNameChangeFtpPasswordAsync(_hosting_privateDatabase.ChangeFtpPasswordPayload _body, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/changeFtpPassword";
            return this.SendAsync<_hosting_privateDatabase.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/changeVersion
        public Task<_hosting_privateDatabase.Task> PostV1HostingPrivateDatabaseServiceNameChangeVersionAsync(_hosting_privateDatabase.ChangeVersionPayload _body, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/changeVersion";
            return this.SendAsync<_hosting_privateDatabase.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/config
        public Task<_hosting_privateDatabase.Configs> GetV1HostingPrivateDatabaseServiceNameConfigAsync(string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/config";
            return this.SendAsync<_hosting_privateDatabase.Configs>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/config/update
        public Task<_hosting_privateDatabase.Configs> PostV1HostingPrivateDatabaseServiceNameConfigUpdateAsync(_hosting_privateDatabase.ConfigUpdatePayload _body, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/config/update";
            return this.SendAsync<_hosting_privateDatabase.Configs>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/confirmTermination
        public Task<System.String> PostV1HostingPrivateDatabaseServiceNameConfirmTerminationAsync(_services.confirmTermination _body, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/cpuThrottle
        public Task<_hosting_privateDatabase.CpuThrottle[]> GetV1HostingPrivateDatabaseServiceNameCpuThrottleAsync(string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/cpuThrottle";
            return this.SendAsync<_hosting_privateDatabase.CpuThrottle[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/database
        public Task<System.String[]> GetV1HostingPrivateDatabaseServiceNameDatabaseAsync(string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/database";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/database
        public Task<_hosting_privateDatabase.Task> PostV1HostingPrivateDatabaseServiceNameDatabaseAsync(_hosting_privateDatabase_Database.CreatePayload _body, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/database";
            return this.SendAsync<_hosting_privateDatabase.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/database/{databaseName}
        public Task<_hosting_privateDatabase.Task> DeleteV1HostingPrivateDatabaseServiceNameDatabaseDatabaseNameAsync(string databaseName, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/database/{databaseName}";
            return this.SendAsync<_hosting_privateDatabase.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/database/{databaseName}
        public Task<_hosting_privateDatabase.Database> GetV1HostingPrivateDatabaseServiceNameDatabaseDatabaseNameAsync(string databaseName, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/database/{databaseName}";
            return this.SendAsync<_hosting_privateDatabase.Database>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/database/{databaseName}/copy
        public Task<System.Guid[]> GetV1HostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyAsync(string databaseName, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/database/{databaseName}/copy";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/database/{databaseName}/copy
        public Task<_hosting_privateDatabase_Database.Copy> PostV1HostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyAsync(string databaseName, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/database/{databaseName}/copy";
            return this.SendAsync<_hosting_privateDatabase_Database.Copy>("POST", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/database/{databaseName}/copy/{id}
        public Task DeleteV1HostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyIdAsync(string databaseName, System.Guid id, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/database/{databaseName}/copy/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/database/{databaseName}/copy/{id}
        public Task<_hosting_privateDatabase_Database.Copy> GetV1HostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyIdAsync(string databaseName, System.Guid id, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/database/{databaseName}/copy/{id}";
            return this.SendAsync<_hosting_privateDatabase_Database.Copy>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/database/{databaseName}/copyRestore
        public Task<_hosting_privateDatabase.Task> PostV1HostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyRestoreAsync(_hosting_privateDatabase_Database.CopyRestorePayload _body, string databaseName, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/database/{databaseName}/copyRestore";
            return this.SendAsync<_hosting_privateDatabase.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/database/{databaseName}/dump
        public Task<System.Int64[]> GetV1HostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpAsync(string databaseName, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/database/{databaseName}/dump";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/database/{databaseName}/dump
        public Task<_hosting_privateDatabase.Task> PostV1HostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpAsync(_hosting_privateDatabase_Database.CreateDump _body, string databaseName, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/database/{databaseName}/dump";
            return this.SendAsync<_hosting_privateDatabase.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/database/{databaseName}/dump/{id}
        public Task<_hosting_privateDatabase.Task> DeleteV1HostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdAsync(string databaseName, long id, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/database/{databaseName}/dump/{id}";
            return this.SendAsync<_hosting_privateDatabase.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/database/{databaseName}/dump/{id}
        public Task<_hosting_privateDatabase_Database.Dump> GetV1HostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdAsync(string databaseName, long id, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/database/{databaseName}/dump/{id}";
            return this.SendAsync<_hosting_privateDatabase_Database.Dump>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/database/{databaseName}/dump/{id}/restore
        public Task<_hosting_privateDatabase.Task> PostV1HostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdRestoreAsync(string databaseName, long id, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/database/{databaseName}/dump/{id}/restore";
            return this.SendAsync<_hosting_privateDatabase.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/database/{databaseName}/extension
        public Task<System.String[]> GetV1HostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionAsync(string databaseName, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? extensionName, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_privateDatabase_extension.StatusEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("extensionName", extensionName);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/database/{databaseName}/extension{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/database/{databaseName}/extension/{extensionName}
        public Task<_hosting_privateDatabase.Extension> GetV1HostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameAsync(string databaseName, string extensionName, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/database/{databaseName}/extension/{extensionName}";
            return this.SendAsync<_hosting_privateDatabase.Extension>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/database/{databaseName}/extension/{extensionName}/disable
        public Task<_hosting_privateDatabase.Task> PostV1HostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameDisableAsync(string databaseName, string extensionName, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/database/{databaseName}/extension/{extensionName}/disable";
            return this.SendAsync<_hosting_privateDatabase.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/database/{databaseName}/extension/{extensionName}/enable
        public Task<_hosting_privateDatabase.Task> PostV1HostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameEnableAsync(string databaseName, string extensionName, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/database/{databaseName}/extension/{extensionName}/enable";
            return this.SendAsync<_hosting_privateDatabase.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/database/{databaseName}/import
        public Task<_hosting_privateDatabase.Task> PostV1HostingPrivateDatabaseServiceNameDatabaseDatabaseNameImportAsync(_hosting_privateDatabase_Database.ImportPayload _body, string databaseName, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/database/{databaseName}/import";
            return this.SendAsync<_hosting_privateDatabase.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/databaseWizard
        public Task<_hosting_privateDatabase.Task> PostV1HostingPrivateDatabaseServiceNameDatabaseWizardAsync(_hosting_privateDatabase.DatabaseWizardPayload _body, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/databaseWizard";
            return this.SendAsync<_hosting_privateDatabase.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/dump
        public Task<System.Int64[]> GetV1HostingPrivateDatabaseServiceNameDumpAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? databaseName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? orphan) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("databaseName", databaseName);
            queryParametersTemp.Add("orphan", orphan);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/dump{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/dump/{dumpId}
        public Task<_hosting_privateDatabase.Task> DeleteV1HostingPrivateDatabaseServiceNameDumpDumpIdAsync(long dumpId, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/dump/{dumpId}";
            return this.SendAsync<_hosting_privateDatabase.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/dump/{dumpId}
        public Task<_hosting_privateDatabase.Dump> GetV1HostingPrivateDatabaseServiceNameDumpDumpIdAsync(long dumpId, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/dump/{dumpId}";
            return this.SendAsync<_hosting_privateDatabase.Dump>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/dump/{dumpId}/restore
        public Task<_hosting_privateDatabase.Task> PostV1HostingPrivateDatabaseServiceNameDumpDumpIdRestoreAsync(_hosting_privateDatabase_Dump.Restore _body, long dumpId, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/dump/{dumpId}/restore";
            return this.SendAsync<_hosting_privateDatabase.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/generateTemporaryLogsLink
        public Task<_hosting_privateDatabase.TemporaryUrlInformations> PostV1HostingPrivateDatabaseServiceNameGenerateTemporaryLogsLinkAsync(string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/generateTemporaryLogsLink";
            return this.SendAsync<_hosting_privateDatabase.TemporaryUrlInformations>("POST", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/log/kind
        public Task<System.String[]> GetV1HostingPrivateDatabaseServiceNameLogKindAsync(string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/log/kind";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/log/kind/{name}
        public Task<_dbaas_logs.LogKind> GetV1HostingPrivateDatabaseServiceNameLogKindNameAsync(string name, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/log/kind/{name}";
            return this.SendAsync<_dbaas_logs.LogKind>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/log/subscription
        public Task<System.Guid[]> GetV1HostingPrivateDatabaseServiceNameLogSubscriptionAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? kind) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("kind", kind);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/log/subscription{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostV1HostingPrivateDatabaseServiceNameLogSubscriptionAsync(_dbaas_logs.LogSubscriptionCreation _body, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/log/subscription";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteV1HostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionIdAsync(string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetV1HostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionIdAsync(string serviceName, System.Guid subscriptionId) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscription>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/log/url
        public Task<_dbaas_logs.TemporaryLogsLink> PostV1HostingPrivateDatabaseServiceNameLogUrlAsync(_dbaas_logs.LogUrlCreation _body, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/log/url";
            return this.SendAsync<_dbaas_logs.TemporaryLogsLink>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/metricsToken
        public Task<_hosting_privateDatabase.MetricsToken> GetV1HostingPrivateDatabaseServiceNameMetricsTokenAsync(string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/metricsToken";
            return this.SendAsync<_hosting_privateDatabase.MetricsToken>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/oom
        public Task<_hosting_privateDatabase.Oom[]> GetV1HostingPrivateDatabaseServiceNameOomAsync(string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/oom";
            return this.SendAsync<_hosting_privateDatabase.Oom[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/quotaRefresh
        public Task<_hosting_privateDatabase.Task> PostV1HostingPrivateDatabaseServiceNameQuotaRefreshAsync(string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/quotaRefresh";
            return this.SendAsync<_hosting_privateDatabase.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/restart
        public Task<_hosting_privateDatabase.Task> PostV1HostingPrivateDatabaseServiceNameRestartAsync(string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/restart";
            return this.SendAsync<_hosting_privateDatabase.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1HostingPrivateDatabaseServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/serviceInfos
        public Task PutV1HostingPrivateDatabaseServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/tasks
        public Task<System.Int64[]> GetV1HostingPrivateDatabaseServiceNameTasksAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_privateDatabase_task.FunctionEnum? function, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_privateDatabase_task.StatusEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("function", function);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/tasks{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/tasks/{id}
        public Task<_hosting_privateDatabase.Task> GetV1HostingPrivateDatabaseServiceNameTasksIdAsync(long id, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/tasks/{id}";
            return this.SendAsync<_hosting_privateDatabase.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/terminate
        public Task<System.String> PostV1HostingPrivateDatabaseServiceNameTerminateAsync(string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/user
        public Task<System.String[]> GetV1HostingPrivateDatabaseServiceNameUserAsync(string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/user";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/user
        public Task<_hosting_privateDatabase.Task> PostV1HostingPrivateDatabaseServiceNameUserAsync(_hosting_privateDatabase_User.CreatePayload _body, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/user";
            return this.SendAsync<_hosting_privateDatabase.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/user/{userName}
        public Task<_hosting_privateDatabase.Task> DeleteV1HostingPrivateDatabaseServiceNameUserUserNameAsync(string serviceName, string userName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/user/{userName}";
            return this.SendAsync<_hosting_privateDatabase.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/user/{userName}
        public Task<_hosting_privateDatabase.User> GetV1HostingPrivateDatabaseServiceNameUserUserNameAsync(string serviceName, string userName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/user/{userName}";
            return this.SendAsync<_hosting_privateDatabase.User>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/user/{userName}/changePassword
        public Task<_hosting_privateDatabase.Task> PostV1HostingPrivateDatabaseServiceNameUserUserNameChangePasswordAsync(_hosting_privateDatabase_User.ChangePasswordPayload _body, string serviceName, string userName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/user/{userName}/changePassword";
            return this.SendAsync<_hosting_privateDatabase.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/user/{userName}/grant
        public Task<System.String[]> GetV1HostingPrivateDatabaseServiceNameUserUserNameGrantAsync(string serviceName, string userName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/user/{userName}/grant";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/user/{userName}/grant
        public Task<_hosting_privateDatabase.Task> PostV1HostingPrivateDatabaseServiceNameUserUserNameGrantAsync(_hosting_privateDatabase_User_Grant.Create _body, string serviceName, string userName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/user/{userName}/grant";
            return this.SendAsync<_hosting_privateDatabase.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/user/{userName}/grant/{databaseName}
        public Task<_hosting_privateDatabase.Task> DeleteV1HostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameAsync(string databaseName, string serviceName, string userName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/user/{userName}/grant/{databaseName}";
            return this.SendAsync<_hosting_privateDatabase.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/user/{userName}/grant/{databaseName}
        public Task<_hosting_privateDatabase_User.Grant> GetV1HostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameAsync(string databaseName, string serviceName, string userName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/user/{userName}/grant/{databaseName}";
            return this.SendAsync<_hosting_privateDatabase_User.Grant>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/user/{userName}/grant/{databaseName}/update
        public Task<_hosting_privateDatabase.Task> PostV1HostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameUpdateAsync(_hosting_privateDatabase_User_Grant.Update _body, string databaseName, string serviceName, string userName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/user/{userName}/grant/{databaseName}/update";
            return this.SendAsync<_hosting_privateDatabase.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/webhostingNetwork
        public Task<_hosting_privateDatabase.Task> DeleteV1HostingPrivateDatabaseServiceNameWebhostingNetworkAsync(string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/webhostingNetwork";
            return this.SendAsync<_hosting_privateDatabase.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/webhostingNetwork
        public Task<_hosting_privateDatabase.webhostingNetwork> GetV1HostingPrivateDatabaseServiceNameWebhostingNetworkAsync(string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/webhostingNetwork";
            return this.SendAsync<_hosting_privateDatabase.webhostingNetwork>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/webhostingNetwork
        public Task<_hosting_privateDatabase.Task> PostV1HostingPrivateDatabaseServiceNameWebhostingNetworkAsync(string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/webhostingNetwork";
            return this.SendAsync<_hosting_privateDatabase.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/webs
        public Task<System.String[]> GetV1HostingPrivateDatabaseServiceNameWebsAsync(string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/webs";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/whitelist
        public Task<System.String[]> GetV1HostingPrivateDatabaseServiceNameWhitelistAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? ip, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? service, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? sftp) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ip", ip);
            queryParametersTemp.Add("service", service);
            queryParametersTemp.Add("sftp", sftp);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/whitelist{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/whitelist
        public Task<_hosting_privateDatabase.Task> PostV1HostingPrivateDatabaseServiceNameWhitelistAsync(_hosting_privateDatabase_Whitelist.CreatePayload _body, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/whitelist";
            return this.SendAsync<_hosting_privateDatabase.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/whitelist/{ip}
        public Task<_hosting_privateDatabase.Task> DeleteV1HostingPrivateDatabaseServiceNameWhitelistIpAsync(string ip, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/whitelist/{ip}";
            return this.SendAsync<_hosting_privateDatabase.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/whitelist/{ip}
        public Task<_hosting_privateDatabase.Whitelist> GetV1HostingPrivateDatabaseServiceNameWhitelistIpAsync(string ip, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/whitelist/{ip}";
            return this.SendAsync<_hosting_privateDatabase.Whitelist>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/privateDatabase/{serviceName}/whitelist/{ip}
        public Task PutV1HostingPrivateDatabaseServiceNameWhitelistIpAsync(_hosting_privateDatabase.Whitelist _body, string ip, string serviceName) {
            string uri = $"/v1/hosting/privateDatabase/{serviceName}/whitelist/{ip}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web
        public Task<System.String[]> GetV1HostingWebAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/attachedDomain
        public Task<System.String[]> GetV1HostingWebAttachedDomainAsync(string domain) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("domain", domain);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/attachedDomain{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/availableOffer
        public Task<_hosting_web.OfferEnum[]> GetV1HostingWebAvailableOfferAsync(string domain) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("domain", domain);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/availableOffer{queryParameters}";
            return this.SendAsync<_hosting_web.OfferEnum[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/incident
        public Task<System.String[]> GetV1HostingWebIncidentAsync() {
            string uri = $"/v1/hosting/web/incident";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/localSeo/directoriesList
        public Task<_hosting_web_localSeo.DirectoriesList> GetV1HostingWebLocalSeoDirectoriesListAsync(_hosting_web_localSeo_location.CountryEnum country, _hosting_web_localSeo_location.OfferEnum offer) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("country", country);
            queryParametersTemp.Add("offer", offer);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/localSeo/directoriesList{queryParameters}";
            return this.SendAsync<_hosting_web_localSeo.DirectoriesList>("GET", uri, null, null, false);
        }
        
        // Path: /v1/hosting/web/localSeo/emailAvailability
        public Task<_hosting_web_localSeo.EmailAvailability> GetV1HostingWebLocalSeoEmailAvailabilityAsync(string email) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("email", email);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/localSeo/emailAvailability{queryParameters}";
            return this.SendAsync<_hosting_web_localSeo.EmailAvailability>("GET", uri, null, null, false);
        }
        
        // Path: /v1/hosting/web/localSeo/visibilityCheck
        public Task<_hosting_web_localSeo.VisibilityCheckResponse> PostV1HostingWebLocalSeoVisibilityCheckAsync(_hosting_web_localSeo_location.CountryEnum country, string name, string street, string zip) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("country", country);
            _body.Add("name", name);
            _body.Add("street", street);
            _body.Add("zip", zip);
            string uri = $"/v1/hosting/web/localSeo/visibilityCheck";
            return this.SendAsync<_hosting_web_localSeo.VisibilityCheckResponse>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/hosting/web/localSeo/visibilityCheckResult
        public Task<_hosting_web_localSeo.VisibilityCheckResultResponse[]> GetV1HostingWebLocalSeoVisibilityCheckResultAsync(string directory, long id, string token) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("directory", directory);
            queryParametersTemp.Add("id", id);
            queryParametersTemp.Add("token", token);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/localSeo/visibilityCheckResult{queryParameters}";
            return this.SendAsync<_hosting_web_localSeo.VisibilityCheckResultResponse[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/hosting/web/moduleList
        public Task<System.Int64[]> GetV1HostingWebModuleListAsync([System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? active, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_module.BranchEnum? branch, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? latest) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("active", active);
            queryParametersTemp.Add("branch", branch);
            queryParametersTemp.Add("latest", latest);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/moduleList{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/hosting/web/moduleList/{id}
        public Task<_hosting_web.ModuleList> GetV1HostingWebModuleListIdAsync(long id) {
            string uri = $"/v1/hosting/web/moduleList/{id}";
            return this.SendAsync<_hosting_web.ModuleList>("GET", uri, null, null, false);
        }
        
        // Path: /v1/hosting/web/offerCapabilities
        public Task<_hosting_web.Capabilities> GetV1HostingWebOfferCapabilitiesAsync(_hosting_web.OfferCapabilitiesEnum offer) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("offer", offer);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/offerCapabilities{queryParameters}";
            return this.SendAsync<_hosting_web.Capabilities>("GET", uri, null, null, false);
        }
        
        // Path: /v1/hosting/web/vcs/supported
        public Task<_hosting_web.SupportedVcsEnum[]> GetV1HostingWebVcsSupportedAsync() {
            string uri = $"/v1/hosting/web/vcs/supported";
            return this.SendAsync<_hosting_web.SupportedVcsEnum[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}
        public Task<_hosting_web.ServiceWithIAM> GetV1HostingWebServiceNameAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}";
            return this.SendAsync<_hosting_web.ServiceWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}
        public Task PutV1HostingWebServiceNameAsync(_hosting_web.Service _body, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/attachedDomain
        public Task<System.String[]> GetV1HostingWebServiceNameAttachedDomainAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? domain, [System.Runtime.InteropServices.OptionalAttribute()] System.String? path) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("domain", domain);
            queryParametersTemp.Add("path", path);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/attachedDomain{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/attachedDomain
        public Task<_hosting_web.PublicTask> PostV1HostingWebServiceNameAttachedDomainAsync(_hosting_web.AttachedDomain _body, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/attachedDomain";
            return this.SendAsync<_hosting_web.PublicTask>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/attachedDomain/{domain}
        public Task<_hosting_web.PublicTask> DeleteV1HostingWebServiceNameAttachedDomainDomainAsync(string domain, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? bypassDNSConfiguration) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("bypassDNSConfiguration", bypassDNSConfiguration);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/attachedDomain/{domain}{queryParameters}";
            return this.SendAsync<_hosting_web.PublicTask>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/attachedDomain/{domain}
        public Task<_hosting_web_attachedDomain.PublicAttachedDomain> GetV1HostingWebServiceNameAttachedDomainDomainAsync(string domain, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/attachedDomain/{domain}";
            return this.SendAsync<_hosting_web_attachedDomain.PublicAttachedDomain>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/attachedDomain/{domain}
        public Task PutV1HostingWebServiceNameAttachedDomainDomainAsync(_hosting_web.AttachedDomain _body, string domain, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/attachedDomain/{domain}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/attachedDomain/{domain}/digStatus
        public Task<_hosting_web_attachedDomain.DigStatus> GetV1HostingWebServiceNameAttachedDomainDomainDigStatusAsync(string domain, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/attachedDomain/{domain}/digStatus";
            return this.SendAsync<_hosting_web_attachedDomain.DigStatus>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/attachedDomain/{domain}/purgeCache
        public Task<_hosting_web.task> PostV1HostingWebServiceNameAttachedDomainDomainPurgeCacheAsync(string domain, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/attachedDomain/{domain}/purgeCache";
            return this.SendAsync<_hosting_web.task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/attachedDomain/{domain}/restart
        public Task<_hosting_web.task> PostV1HostingWebServiceNameAttachedDomainDomainRestartAsync(string domain, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/attachedDomain/{domain}/restart";
            return this.SendAsync<_hosting_web.task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/availableConfigurations
        public Task<_hosting_web_configuration.VersionEnum[]> GetV1HostingWebServiceNameAvailableConfigurationsAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_configuration.LanguageEnum? language) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("language", language);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/availableConfigurations{queryParameters}";
            return this.SendAsync<_hosting_web_configuration.VersionEnum[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/boostHistory
        public Task<System.DateTime[]> GetV1HostingWebServiceNameBoostHistoryAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? date) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("date", date);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/boostHistory{queryParameters}";
            return this.SendAsync<System.DateTime[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/boostHistory/{date}
        public Task<_hosting_web.BoostHistory> GetV1HostingWebServiceNameBoostHistoryDateAsync(System.DateTime date, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/boostHistory/{date}";
            return this.SendAsync<_hosting_web.BoostHistory>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/cdn
        public Task<_hosting_web.CDN> GetV1HostingWebServiceNameCdnAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/cdn";
            return this.SendAsync<_hosting_web.CDN>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/cdn/availableOptions
        public Task<_cdn.availableOptions[]> GetV1HostingWebServiceNameCdnAvailableOptionsAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/cdn/availableOptions";
            return this.SendAsync<_cdn.availableOptions[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/cdn/domain
        public Task<_cdn.domain[]> GetV1HostingWebServiceNameCdnDomainAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/cdn/domain";
            return this.SendAsync<_cdn.domain[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/cdn/domain/{domainName}
        public Task<_cdn.domain> GetV1HostingWebServiceNameCdnDomainDomainNameAsync(string serviceName, string domainName) {
            string uri = $"/v1/hosting/web/{serviceName}/cdn/domain/{domainName}";
            return this.SendAsync<_cdn.domain>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/cdn/domain/{domainName}/logs
        public Task<_cdn.logs> GetV1HostingWebServiceNameCdnDomainDomainNameLogsAsync(string serviceName, string domainName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateOnly? date) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("date", date);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/cdn/domain/{domainName}/logs{queryParameters}";
            return this.SendAsync<_cdn.logs>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/cdn/domain/{domainName}/option
        public Task<_cdn_domain.option[]> GetV1HostingWebServiceNameCdnDomainDomainNameOptionAsync(string serviceName, string domainName) {
            string uri = $"/v1/hosting/web/{serviceName}/cdn/domain/{domainName}/option";
            return this.SendAsync<_cdn_domain.option[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/cdn/domain/{domainName}/option
        public Task<_cdn_domain.option> PostV1HostingWebServiceNameCdnDomainDomainNameOptionAsync(string serviceName, _cdn_domain_add.option _body, string domainName) {
            string uri = $"/v1/hosting/web/{serviceName}/cdn/domain/{domainName}/option";
            return this.SendAsync<_cdn_domain.option>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/cdn/domain/{domainName}/option/{optionName}
        public Task DeleteV1HostingWebServiceNameCdnDomainDomainNameOptionOptionNameAsync(string serviceName, string domainName, string optionName) {
            string uri = $"/v1/hosting/web/{serviceName}/cdn/domain/{domainName}/option/{optionName}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/cdn/domain/{domainName}/option/{optionName}
        public Task<_cdn_domain.option> GetV1HostingWebServiceNameCdnDomainDomainNameOptionOptionNameAsync(string serviceName, string domainName, string optionName) {
            string uri = $"/v1/hosting/web/{serviceName}/cdn/domain/{domainName}/option/{optionName}";
            return this.SendAsync<_cdn_domain.option>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/cdn/domain/{domainName}/option/{optionName}
        public Task<_cdn_domain.option> PutV1HostingWebServiceNameCdnDomainDomainNameOptionOptionNameAsync(string serviceName, _cdn_domain.option _body, string domainName, string optionName) {
            string uri = $"/v1/hosting/web/{serviceName}/cdn/domain/{domainName}/option/{optionName}";
            return this.SendAsync<_cdn_domain.option>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/cdn/domain/{domainName}/purge
        public Task<_cdn.operation> PostV1HostingWebServiceNameCdnDomainDomainNamePurgeAsync(string serviceName, string domainName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? pattern, [System.Runtime.InteropServices.OptionalAttribute()] _cdn.PurgeTypeEnum? patternType) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("pattern", pattern);
            queryParametersTemp.Add("patternType", patternType);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/cdn/domain/{domainName}/purge{queryParameters}";
            return this.SendAsync<_cdn.operation>("POST", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/cdn/domain/{domainName}/refresh
        public Task<_cdn.operation> PostV1HostingWebServiceNameCdnDomainDomainNameRefreshAsync(string serviceName, string domainName) {
            string uri = $"/v1/hosting/web/{serviceName}/cdn/domain/{domainName}/refresh";
            return this.SendAsync<_cdn.operation>("POST", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/cdn/domain/{domainName}/statistics
        public Task<_cdn_domain.statistics[]> GetV1HostingWebServiceNameCdnDomainDomainNameStatisticsAsync(string serviceName, string domainName, [System.Runtime.InteropServices.OptionalAttribute()] _cdn.DomainStatisticsPeriodEnum? period) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("period", period);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/cdn/domain/{domainName}/statistics{queryParameters}";
            return this.SendAsync<_cdn_domain.statistics[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/cdn/operation
        public Task<_cdn.operation[]> GetV1HostingWebServiceNameCdnOperationAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/cdn/operation";
            return this.SendAsync<_cdn.operation[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/cdn/operation/{id}
        public Task<_cdn.operation> GetV1HostingWebServiceNameCdnOperationIdAsync(string serviceName, long id) {
            string uri = $"/v1/hosting/web/{serviceName}/cdn/operation/{id}";
            return this.SendAsync<_cdn.operation>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/cdn/serviceInfos
        public Task<_services.Service> GetV1HostingWebServiceNameCdnServiceInfosAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/cdn/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/cdn/serviceInfosUpdate
        public Task PostV1HostingWebServiceNameCdnServiceInfosUpdateAsync(_service.RenewType renew, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("renew", renew);
            string uri = $"/v1/hosting/web/{serviceName}/cdn/serviceInfosUpdate";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/cdn/terminate
        public Task<System.String> PostV1HostingWebServiceNameCdnTerminateAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/cdn/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/changeContact
        public Task<System.Int64[]> PostV1HostingWebServiceNameChangeContactAsync(_services.changeContact _body, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/configuration
        public Task<_hosting_web.configuration> GetV1HostingWebServiceNameConfigurationAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/configuration";
            return this.SendAsync<_hosting_web.configuration>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/configuration
        public Task PutV1HostingWebServiceNameConfigurationAsync(_hosting_web.configuration _body, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/configuration";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/confirmTermination
        public Task<System.String> PostV1HostingWebServiceNameConfirmTerminationAsync(_services.confirmTermination _body, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/cron
        public Task<System.Int64[]> GetV1HostingWebServiceNameCronAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? command, [System.Runtime.InteropServices.OptionalAttribute()] System.String? description, [System.Runtime.InteropServices.OptionalAttribute()] System.String? email, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web.LanguagesEnum? language) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("command", command);
            queryParametersTemp.Add("description", description);
            queryParametersTemp.Add("email", email);
            queryParametersTemp.Add("language", language);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/cron{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/cron
        public Task<_hosting_web.PublicTask> PostV1HostingWebServiceNameCronAsync(_hosting_web.Cron _body, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/cron";
            return this.SendAsync<_hosting_web.PublicTask>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/cron/{id}
        public Task<_hosting_web.PublicTask> DeleteV1HostingWebServiceNameCronIdAsync(long id, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/cron/{id}";
            return this.SendAsync<_hosting_web.PublicTask>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/cron/{id}
        public Task<_hosting_web.Cron> GetV1HostingWebServiceNameCronIdAsync(long id, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/cron/{id}";
            return this.SendAsync<_hosting_web.Cron>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/cron/{id}
        public Task<System.String> PutV1HostingWebServiceNameCronIdAsync(_hosting_web.Cron _body, long id, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/cron/{id}";
            return this.SendAsync<string>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/cronAvailableLanguage
        public Task<_hosting_web.LanguagesEnum[]> GetV1HostingWebServiceNameCronAvailableLanguageAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/cronAvailableLanguage";
            return this.SendAsync<_hosting_web.LanguagesEnum[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/database
        public Task<System.String[]> GetV1HostingWebServiceNameDatabaseAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_database.ModeEnum? mode, [System.Runtime.InteropServices.OptionalAttribute()] System.String? name, [System.Runtime.InteropServices.OptionalAttribute()] System.String? server, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_database.DatabaseTypeEnum? type, [System.Runtime.InteropServices.OptionalAttribute()] System.String? user) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("mode", mode);
            queryParametersTemp.Add("name", name);
            queryParametersTemp.Add("server", server);
            queryParametersTemp.Add("type", type);
            queryParametersTemp.Add("user", user);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/database{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/database
        public Task<_hosting_web.task> PostV1HostingWebServiceNameDatabaseAsync(_hosting_web_database.DatabaseCapabilitiesTypeEnum capabilitie, string serviceName, _hosting_web_database.DatabaseCreationTypeEnum type, string user, [System.Runtime.InteropServices.OptionalAttribute()] System.String? password, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_database.ExtraSqlQuotaEnum? quota, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_database.VersionEnum? version) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("capabilitie", capabilitie);
            _body.Add("password", password);
            _body.Add("quota", quota);
            _body.Add("type", type);
            _body.Add("user", user);
            _body.Add("version", version);
            string uri = $"/v1/hosting/web/{serviceName}/database";
            return this.SendAsync<_hosting_web.task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/database/{name}
        public Task<_hosting_web.task> DeleteV1HostingWebServiceNameDatabaseNameAsync(string name, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/database/{name}";
            return this.SendAsync<_hosting_web.task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/database/{name}
        public Task<_hosting_web.database> GetV1HostingWebServiceNameDatabaseNameAsync(string name, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/database/{name}";
            return this.SendAsync<_hosting_web.database>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/database/{name}/capabilities
        public Task<_hosting_web_database.DatabaseCapabilities> GetV1HostingWebServiceNameDatabaseNameCapabilitiesAsync(string name, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/database/{name}/capabilities";
            return this.SendAsync<_hosting_web_database.DatabaseCapabilities>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/database/{name}/changePassword
        public Task<_hosting_web.task> PostV1HostingWebServiceNameDatabaseNameChangePasswordAsync(string name, string password, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("password", password);
            string uri = $"/v1/hosting/web/{serviceName}/database/{name}/changePassword";
            return this.SendAsync<_hosting_web.task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/database/{name}/copy
        public Task<System.Guid[]> GetV1HostingWebServiceNameDatabaseNameCopyAsync(string name, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/database/{name}/copy";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/database/{name}/copy
        public Task<_hosting_web.database_copy> PostV1HostingWebServiceNameDatabaseNameCopyAsync(string name, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/database/{name}/copy";
            return this.SendAsync<_hosting_web.database_copy>("POST", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/database/{name}/copy/{id}
        public Task DeleteV1HostingWebServiceNameDatabaseNameCopyIdAsync(System.Guid id, string name, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/database/{name}/copy/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/database/{name}/copy/{id}
        public Task<_hosting_web.database_copy> GetV1HostingWebServiceNameDatabaseNameCopyIdAsync(System.Guid id, string name, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/database/{name}/copy/{id}";
            return this.SendAsync<_hosting_web.database_copy>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/database/{name}/copyRestore
        public Task<_hosting_web.task> PostV1HostingWebServiceNameDatabaseNameCopyRestoreAsync(System.Guid copyId, string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? flushDatabase) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("copyId", copyId);
            _body.Add("flushDatabase", flushDatabase);
            string uri = $"/v1/hosting/web/{serviceName}/database/{name}/copyRestore";
            return this.SendAsync<_hosting_web.task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/database/{name}/dump
        public Task<System.Int64[]> GetV1HostingWebServiceNameDatabaseNameDumpAsync(string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDateTo, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? deletionDateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? deletionDateTo, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_database_dump.DateEnum? type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("creationDate.from", creationDateFrom);
            queryParametersTemp.Add("creationDate.to", creationDateTo);
            queryParametersTemp.Add("deletionDate.from", deletionDateFrom);
            queryParametersTemp.Add("deletionDate.to", deletionDateTo);
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/database/{name}/dump{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/database/{name}/dump
        public Task<_hosting_web.task> PostV1HostingWebServiceNameDatabaseNameDumpAsync(_hosting_web_database_dump.DateEnum date, string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? sendEmail) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("date", date);
            _body.Add("sendEmail", sendEmail);
            string uri = $"/v1/hosting/web/{serviceName}/database/{name}/dump";
            return this.SendAsync<_hosting_web.task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/database/{name}/dump/{id}
        public Task<_hosting_web.task> DeleteV1HostingWebServiceNameDatabaseNameDumpIdAsync(long id, string name, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/database/{name}/dump/{id}";
            return this.SendAsync<_hosting_web.task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/database/{name}/dump/{id}
        public Task<_hosting_web.database_dump> GetV1HostingWebServiceNameDatabaseNameDumpIdAsync(long id, string name, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/database/{name}/dump/{id}";
            return this.SendAsync<_hosting_web.database_dump>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/database/{name}/dump/{id}/restore
        public Task<_hosting_web.task> PostV1HostingWebServiceNameDatabaseNameDumpIdRestoreAsync(long id, string name, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/database/{name}/dump/{id}/restore";
            return this.SendAsync<_hosting_web.task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/database/{name}/import
        public Task<_hosting_web.task> PostV1HostingWebServiceNameDatabaseNameImportAsync(string documentId, string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? flushDatabase, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? sendEmail) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("documentId", documentId);
            _body.Add("flushDatabase", flushDatabase);
            _body.Add("sendEmail", sendEmail);
            string uri = $"/v1/hosting/web/{serviceName}/database/{name}/import";
            return this.SendAsync<_hosting_web.task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/database/{name}/request
        public Task<_hosting_web.task> PostV1HostingWebServiceNameDatabaseNameRequestAsync(_hosting_web_database.RequestActionEnum action, string name, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("action", action);
            string uri = $"/v1/hosting/web/{serviceName}/database/{name}/request";
            return this.SendAsync<_hosting_web.task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/database/{name}/restore
        public Task<_hosting_web.task> PostV1HostingWebServiceNameDatabaseNameRestoreAsync(_hosting_web_database_dump.DateEnum date, string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? sendEmail) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("date", date);
            _body.Add("sendEmail", sendEmail);
            string uri = $"/v1/hosting/web/{serviceName}/database/{name}/restore";
            return this.SendAsync<_hosting_web.task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/database/{name}/statistics
        public Task<_complexType.ChartSerie<_complexType.ChartTimestampValue>> GetV1HostingWebServiceNameDatabaseNameStatisticsAsync(string name, _hosting_web.StatisticsPeriodEnum period, string serviceName, _hosting_web_database.StatisticsTypeEnum type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("period", period);
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/database/{name}/statistics{queryParameters}";
            return this.SendAsync<_complexType.ChartSerie<_complexType.ChartTimestampValue>>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/databaseAvailableType
        public Task<_hosting_web_database.DatabaseTypeEnum[]> GetV1HostingWebServiceNameDatabaseAvailableTypeAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/databaseAvailableType";
            return this.SendAsync<_hosting_web_database.DatabaseTypeEnum[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/databaseAvailableVersion
        public Task<_hosting_web_database.AvailableVersionStruct> GetV1HostingWebServiceNameDatabaseAvailableVersionAsync(string serviceName, _hosting_web_database.DatabaseTypeEnum type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/databaseAvailableVersion{queryParameters}";
            return this.SendAsync<_hosting_web_database.AvailableVersionStruct>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/databaseCreationCapabilities
        public Task<_hosting_web_database.CreationDatabaseCapabilities[]> GetV1HostingWebServiceNameDatabaseCreationCapabilitiesAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/databaseCreationCapabilities";
            return this.SendAsync<_hosting_web_database.CreationDatabaseCapabilities[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/dump
        public Task<System.Int64[]> GetV1HostingWebServiceNameDumpAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDateTo, [System.Runtime.InteropServices.OptionalAttribute()] System.String? databaseName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? deletionDateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? deletionDateTo, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? orphan) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("creationDate.from", creationDateFrom);
            queryParametersTemp.Add("creationDate.to", creationDateTo);
            queryParametersTemp.Add("databaseName", databaseName);
            queryParametersTemp.Add("deletionDate.from", deletionDateFrom);
            queryParametersTemp.Add("deletionDate.to", deletionDateTo);
            queryParametersTemp.Add("orphan", orphan);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/dump{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/dump/{id}
        public Task<_hosting_web.task> DeleteV1HostingWebServiceNameDumpIdAsync(long id, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/dump/{id}";
            return this.SendAsync<_hosting_web.task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/dump/{id}
        public Task<_hosting_web.dump> GetV1HostingWebServiceNameDumpIdAsync(long id, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/dump/{id}";
            return this.SendAsync<_hosting_web.dump>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/email
        public Task<_hosting_web.email> GetV1HostingWebServiceNameEmailAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/email";
            return this.SendAsync<_hosting_web.email>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/email
        public Task PutV1HostingWebServiceNameEmailAsync(_hosting_web.email _body, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/email";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/email/bounces
        public Task<_hosting_web_mail.Bounce[]> GetV1HostingWebServiceNameEmailBouncesAsync(long limit, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("limit", limit);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/email/bounces{queryParameters}";
            return this.SendAsync<_hosting_web_mail.Bounce[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/email/request
        public Task<System.String> PostV1HostingWebServiceNameEmailRequestAsync(_hosting_web_mail.ActionEnum action, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("action", action);
            string uri = $"/v1/hosting/web/{serviceName}/email/request";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/email/volumes
        public Task<_hosting_web_mail.VolumeHistory[]> GetV1HostingWebServiceNameEmailVolumesAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/email/volumes";
            return this.SendAsync<_hosting_web_mail.VolumeHistory[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/emailOption
        public Task<System.Int64[]> GetV1HostingWebServiceNameEmailOptionAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/emailOption";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/emailOption/{id}
        public Task<_hosting_web.emailoption> GetV1HostingWebServiceNameEmailOptionIdAsync(long id, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/emailOption/{id}";
            return this.SendAsync<_hosting_web.emailoption>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/emailOption/{id}/serviceInfos
        public Task<_services.Service> GetV1HostingWebServiceNameEmailOptionIdServiceInfosAsync(long id, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/emailOption/{id}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/emailOption/{id}/terminate
        public Task<System.String> PostV1HostingWebServiceNameEmailOptionIdTerminateAsync(long id, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/emailOption/{id}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/envVar
        public Task<System.String[]> GetV1HostingWebServiceNameEnvVarAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_envVar.TypeEnum? type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/envVar{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/envVar
        public Task<_hosting_web.PublicTask> PostV1HostingWebServiceNameEnvVarAsync(_hosting_web.EnvVarInput _body, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/envVar";
            return this.SendAsync<_hosting_web.PublicTask>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/envVar/{key}
        public Task<_hosting_web.PublicTask> DeleteV1HostingWebServiceNameEnvVarKeyAsync(string key, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/envVar/{key}";
            return this.SendAsync<_hosting_web.PublicTask>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/envVar/{key}
        public Task<_hosting_web.EnvVar> GetV1HostingWebServiceNameEnvVarKeyAsync(string key, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/envVar/{key}";
            return this.SendAsync<_hosting_web.EnvVar>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/envVar/{key}
        public Task<_hosting_web.PublicTask> PutV1HostingWebServiceNameEnvVarKeyAsync(_hosting_web.EnvVar _body, string key, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/envVar/{key}";
            return this.SendAsync<_hosting_web.PublicTask>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/extraSqlPerso
        public Task<System.String[]> GetV1HostingWebServiceNameExtraSqlPersoAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/extraSqlPerso";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/extraSqlPerso/{name}
        public Task<_hosting_web.extrasqlperso> GetV1HostingWebServiceNameExtraSqlPersoNameAsync(string name, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/extraSqlPerso/{name}";
            return this.SendAsync<_hosting_web.extrasqlperso>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/extraSqlPerso/{name}/databases
        public Task<System.String[]> GetV1HostingWebServiceNameExtraSqlPersoNameDatabasesAsync(string name, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/extraSqlPerso/{name}/databases";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/extraSqlPerso/{name}/serviceInfos
        public Task<_services.Service> GetV1HostingWebServiceNameExtraSqlPersoNameServiceInfosAsync(string name, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/extraSqlPerso/{name}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/extraSqlPerso/{name}/serviceInfosUpdate
        public Task PostV1HostingWebServiceNameExtraSqlPersoNameServiceInfosUpdateAsync(string name, _service.RenewType renew, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("renew", renew);
            string uri = $"/v1/hosting/web/{serviceName}/extraSqlPerso/{name}/serviceInfosUpdate";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/extraSqlPerso/{name}/terminate
        public Task<System.String> PostV1HostingWebServiceNameExtraSqlPersoNameTerminateAsync(string name, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/extraSqlPerso/{name}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/freedom
        public Task<System.String[]> GetV1HostingWebServiceNameFreedomAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_freedom.StatusEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/freedom{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/freedom/{domain}
        public Task DeleteV1HostingWebServiceNameFreedomDomainAsync(string domain, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/freedom/{domain}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/freedom/{domain}
        public Task<_hosting_web.freedom> GetV1HostingWebServiceNameFreedomDomainAsync(string domain, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/freedom/{domain}";
            return this.SendAsync<_hosting_web.freedom>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/indy
        public Task<System.String[]> GetV1HostingWebServiceNameIndyAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? login) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("login", login);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/indy{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/indy/{login}
        public Task<_hosting_web.indy> GetV1HostingWebServiceNameIndyLoginAsync(string login, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/indy/{login}";
            return this.SendAsync<_hosting_web.indy>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/key/ssh
        public Task<_hosting_web.Key> GetV1HostingWebServiceNameKeySshAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/key/ssh";
            return this.SendAsync<_hosting_web.Key>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/key/ssh
        public Task<_hosting_web.Key> PostV1HostingWebServiceNameKeySshAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/key/ssh";
            return this.SendAsync<_hosting_web.Key>("POST", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/localSeo/account
        public Task<System.Int64[]> GetV1HostingWebServiceNameLocalSeoAccountAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? email) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("email", email);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/localSeo/account{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/localSeo/account/{id}
        public Task<_hosting_web.localSeo_account> GetV1HostingWebServiceNameLocalSeoAccountIdAsync(long id, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/localSeo/account/{id}";
            return this.SendAsync<_hosting_web.localSeo_account>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/localSeo/account/{id}/login
        public Task<System.String> PostV1HostingWebServiceNameLocalSeoAccountIdLoginAsync(long id, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/localSeo/account/{id}/login";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/localSeo/emailAvailability
        public Task<_hosting_web_localSeo.EmailAvailability> GetV1HostingWebServiceNameLocalSeoEmailAvailabilityAsync(string email, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("email", email);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/localSeo/emailAvailability{queryParameters}";
            return this.SendAsync<_hosting_web_localSeo.EmailAvailability>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/localSeo/location
        public Task<System.Int64[]> GetV1HostingWebServiceNameLocalSeoLocationAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/localSeo/location";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/localSeo/location/{id}
        public Task<_hosting_web.localSeo_location> GetV1HostingWebServiceNameLocalSeoLocationIdAsync(long id, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/localSeo/location/{id}";
            return this.SendAsync<_hosting_web.localSeo_location>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/localSeo/location/{id}/serviceInfos
        public Task<_services.Service> GetV1HostingWebServiceNameLocalSeoLocationIdServiceInfosAsync(long id, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/localSeo/location/{id}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/localSeo/location/{id}/serviceInfosUpdate
        public Task PostV1HostingWebServiceNameLocalSeoLocationIdServiceInfosUpdateAsync(long id, _service.RenewType renew, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("renew", renew);
            string uri = $"/v1/hosting/web/{serviceName}/localSeo/location/{id}/serviceInfosUpdate";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/localSeo/location/{id}/terminate
        public Task<System.String> PostV1HostingWebServiceNameLocalSeoLocationIdTerminateAsync(long id, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/localSeo/location/{id}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/metricsToken
        public Task<_hosting_web.MetricsToken> GetV1HostingWebServiceNameMetricsTokenAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/metricsToken";
            return this.SendAsync<_hosting_web.MetricsToken>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/module
        public Task<System.Int64[]> GetV1HostingWebServiceNameModuleAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/module";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/module
        public Task<_hosting_web.task> PostV1HostingWebServiceNameModuleAsync(long moduleId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? adminName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? adminPassword, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_module.DependencyType[]? dependencies, [System.Runtime.InteropServices.OptionalAttribute()] System.String? domain, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_module.LanguageEnum? language, [System.Runtime.InteropServices.OptionalAttribute()] System.String? path) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("adminName", adminName);
            _body.Add("adminPassword", adminPassword);
            _body.Add("dependencies", dependencies);
            _body.Add("domain", domain);
            _body.Add("language", language);
            _body.Add("moduleId", moduleId);
            _body.Add("path", path);
            string uri = $"/v1/hosting/web/{serviceName}/module";
            return this.SendAsync<_hosting_web.task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/module/{id}
        public Task<_hosting_web.task> DeleteV1HostingWebServiceNameModuleIdAsync(long id, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? purgeData) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("purgeData", purgeData);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/module/{id}{queryParameters}";
            return this.SendAsync<_hosting_web.task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/module/{id}
        public Task<_hosting_web.module> GetV1HostingWebServiceNameModuleIdAsync(long id, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/module/{id}";
            return this.SendAsync<_hosting_web.module>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/module/{id}/changePassword
        public Task<_hosting_web.task> PostV1HostingWebServiceNameModuleIdChangePasswordAsync(long id, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/module/{id}/changePassword";
            return this.SendAsync<_hosting_web.task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/ovhConfig
        public Task<System.Int64[]> GetV1HostingWebServiceNameOvhConfigAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? historical, [System.Runtime.InteropServices.OptionalAttribute()] System.String? path) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("historical", historical);
            queryParametersTemp.Add("path", path);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/ovhConfig{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/ovhConfig/{id}
        public Task<_hosting_web.ovhConfig> GetV1HostingWebServiceNameOvhConfigIdAsync(long id, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/ovhConfig/{id}";
            return this.SendAsync<_hosting_web.ovhConfig>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/ovhConfig/{id}/changeConfiguration
        public Task<_hosting_web.task> PostV1HostingWebServiceNameOvhConfigIdChangeConfigurationAsync(long id, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_ovhconfig.ContainerEnum? container, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_ovhConfig.EngineNameEnum? engineName, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_ovhConfig.AvailableEngineVersionEnum? engineVersion, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_ovhConfig.EnvironmentEnum? environment, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_ovhConfig.HttpFirewallEnum? httpFirewall) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("container", container);
            _body.Add("engineName", engineName);
            _body.Add("engineVersion", engineVersion);
            _body.Add("environment", environment);
            _body.Add("httpFirewall", httpFirewall);
            string uri = $"/v1/hosting/web/{serviceName}/ovhConfig/{id}/changeConfiguration";
            return this.SendAsync<_hosting_web.task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/ovhConfig/{id}/rollback
        public Task<_hosting_web.task> PostV1HostingWebServiceNameOvhConfigIdRollbackAsync(long id, long rollbackId, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("rollbackId", rollbackId);
            string uri = $"/v1/hosting/web/{serviceName}/ovhConfig/{id}/rollback";
            return this.SendAsync<_hosting_web.task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/ovhConfigCapabilities
        public Task<_hosting_web.OvhConfigCapabilities[]> GetV1HostingWebServiceNameOvhConfigCapabilitiesAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/ovhConfigCapabilities";
            return this.SendAsync<_hosting_web.OvhConfigCapabilities[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/ovhConfigRecommendedValues
        public Task<_hosting_web.OvhConfigRecommendedValues> GetV1HostingWebServiceNameOvhConfigRecommendedValuesAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/ovhConfigRecommendedValues";
            return this.SendAsync<_hosting_web.OvhConfigRecommendedValues>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/ovhConfigRefresh
        public Task<_hosting_web.task> PostV1HostingWebServiceNameOvhConfigRefreshAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/ovhConfigRefresh";
            return this.SendAsync<_hosting_web.task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/ownLogs
        public Task<System.Int64[]> GetV1HostingWebServiceNameOwnLogsAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? fqdn) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("fqdn", fqdn);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/ownLogs{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/ownLogs/{id}
        public Task<_hosting_web.ownLogs> GetV1HostingWebServiceNameOwnLogsIdAsync(long id, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/ownLogs/{id}";
            return this.SendAsync<_hosting_web.ownLogs>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/ownLogs/{id}/userLogs
        public Task<System.String[]> GetV1HostingWebServiceNameOwnLogsIdUserLogsAsync(long id, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? login) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("login", login);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/ownLogs/{id}/userLogs{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/ownLogs/{id}/userLogs
        public Task<System.String> PostV1HostingWebServiceNameOwnLogsIdUserLogsAsync(string description, long id, string login, string password, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? ownLogsId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("description", description);
            _body.Add("login", login);
            _body.Add("ownLogsId", ownLogsId);
            _body.Add("password", password);
            string uri = $"/v1/hosting/web/{serviceName}/ownLogs/{id}/userLogs";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/ownLogs/{id}/userLogs/{login}
        public Task<System.String> DeleteV1HostingWebServiceNameOwnLogsIdUserLogsLoginAsync(long id, string login, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/ownLogs/{id}/userLogs/{login}";
            return this.SendAsync<string>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/ownLogs/{id}/userLogs/{login}
        public Task<_hosting_web.userLogs> GetV1HostingWebServiceNameOwnLogsIdUserLogsLoginAsync(long id, string login, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/ownLogs/{id}/userLogs/{login}";
            return this.SendAsync<_hosting_web.userLogs>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/ownLogs/{id}/userLogs/{login}
        public Task PutV1HostingWebServiceNameOwnLogsIdUserLogsLoginAsync(_hosting_web.userLogs _body, long id, string login, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/ownLogs/{id}/userLogs/{login}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/ownLogs/{id}/userLogs/{login}/changePassword
        public Task<System.String> PostV1HostingWebServiceNameOwnLogsIdUserLogsLoginChangePasswordAsync(long id, string login, string password, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("password", password);
            string uri = $"/v1/hosting/web/{serviceName}/ownLogs/{id}/userLogs/{login}/changePassword";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/privateDatabaseCreationCapabilities
        public Task<_hosting_web_database.CreationDatabaseCapabilities[]> GetV1HostingWebServiceNamePrivateDatabaseCreationCapabilitiesAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/privateDatabaseCreationCapabilities";
            return this.SendAsync<_hosting_web_database.CreationDatabaseCapabilities[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/privateDatabases
        public Task<System.String[]> GetV1HostingWebServiceNamePrivateDatabasesAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/privateDatabases";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/request
        public Task<_hosting_web.task> PostV1HostingWebServiceNameRequestAsync(_hosting_web.RequestActionEnum action, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("action", action);
            string uri = $"/v1/hosting/web/{serviceName}/request";
            return this.SendAsync<_hosting_web.task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/requestBoost
        public Task<_hosting_web.PublicTask> PostV1HostingWebServiceNameRequestBoostAsync(_hosting_web.RequestBoostInput _body, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/requestBoost";
            return this.SendAsync<_hosting_web.PublicTask>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/restoreSnapshot
        public Task<_hosting_web.task> PostV1HostingWebServiceNameRestoreSnapshotAsync(_hosting_web_backup.TypeEnum backup, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("backup", backup);
            string uri = $"/v1/hosting/web/{serviceName}/restoreSnapshot";
            return this.SendAsync<_hosting_web.task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/runtime
        public Task<System.Int64[]> GetV1HostingWebServiceNameRuntimeAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? name, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_runtime.TypeEnum? type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("name", name);
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/runtime{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/runtime
        public Task<_hosting_web.task> PostV1HostingWebServiceNameRuntimeAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? appBootstrap, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_runtime.EnvEnum? appEnv, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? attachedDomains, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? isDefault, [System.Runtime.InteropServices.OptionalAttribute()] System.String? name, [System.Runtime.InteropServices.OptionalAttribute()] System.String? publicDir, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_runtime.TypeEnum? type) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("appBootstrap", appBootstrap);
            _body.Add("appEnv", appEnv);
            _body.Add("attachedDomains", attachedDomains);
            _body.Add("isDefault", isDefault);
            _body.Add("name", name);
            _body.Add("publicDir", publicDir);
            _body.Add("type", type);
            string uri = $"/v1/hosting/web/{serviceName}/runtime";
            return this.SendAsync<_hosting_web.task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/runtime/{id}
        public Task<_hosting_web.task> DeleteV1HostingWebServiceNameRuntimeIdAsync(long id, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/runtime/{id}";
            return this.SendAsync<_hosting_web.task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/runtime/{id}
        public Task<_hosting_web.runtime> GetV1HostingWebServiceNameRuntimeIdAsync(long id, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/runtime/{id}";
            return this.SendAsync<_hosting_web.runtime>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/runtime/{id}
        public Task PutV1HostingWebServiceNameRuntimeIdAsync(_hosting_web.runtime _body, long id, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/runtime/{id}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/runtime/{id}/attachedDomains
        public Task<System.String[]> GetV1HostingWebServiceNameRuntimeIdAttachedDomainsAsync(long id, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/runtime/{id}/attachedDomains";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/runtimeAvailableTypes
        public Task<_hosting_web_runtime.TypeEnum[]> GetV1HostingWebServiceNameRuntimeAvailableTypesAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? language) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("language", language);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/runtimeAvailableTypes{queryParameters}";
            return this.SendAsync<_hosting_web_runtime.TypeEnum[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1HostingWebServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/serviceInfos
        public Task PutV1HostingWebServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/ssl
        public Task<_hosting_web.SSL> DeleteV1HostingWebServiceNameSslAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/ssl";
            return this.SendAsync<_hosting_web.SSL>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/ssl
        public Task<_hosting_web.SSL> GetV1HostingWebServiceNameSslAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/ssl";
            return this.SendAsync<_hosting_web.SSL>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/ssl
        public Task<_hosting_web.SSL> PostV1HostingWebServiceNameSslAsync(_hosting_web.SSLInput _body, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/ssl";
            return this.SendAsync<_hosting_web.SSL>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/ssl/domains
        public Task<System.String[]> GetV1HostingWebServiceNameSslDomainsAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/ssl/domains";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/ssl/regenerate
        public Task<_hosting_web.SSL> PostV1HostingWebServiceNameSslRegenerateAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/ssl/regenerate";
            return this.SendAsync<_hosting_web.SSL>("POST", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/ssl/report
        public Task<_hosting_web_ssl.Report> GetV1HostingWebServiceNameSslReportAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/ssl/report";
            return this.SendAsync<_hosting_web_ssl.Report>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/statistics
        public Task<_complexType.ChartSerie<_complexType.ChartTimestampValue>> GetV1HostingWebServiceNameStatisticsAsync(_hosting_web.StatisticsPeriodEnum period, string serviceName, _hosting_web.StatisticsTypeEnum type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("period", period);
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/statistics{queryParameters}";
            return this.SendAsync<_complexType.ChartSerie<_complexType.ChartTimestampValue>>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/tasks
        public Task<System.Int64[]> GetV1HostingWebServiceNameTasksAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? function, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_task.StatusEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("function", function);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/tasks{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/tasks/{id}
        public Task<_hosting_web.PublicTask> GetV1HostingWebServiceNameTasksIdAsync(long id, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/tasks/{id}";
            return this.SendAsync<_hosting_web.PublicTask>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/terminate
        public Task<System.String> PostV1HostingWebServiceNameTerminateAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/token
        public Task<System.String> GetV1HostingWebServiceNameTokenAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/token";
            return this.SendAsync<string>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/user
        public Task<System.String[]> GetV1HostingWebServiceNameUserAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? home, [System.Runtime.InteropServices.OptionalAttribute()] System.String? login) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("home", home);
            queryParametersTemp.Add("login", login);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/user{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/user
        public Task<_hosting_web.task> PostV1HostingWebServiceNameUserAsync(string home, string login, string password, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_user.SshStateEnum? sshState) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("home", home);
            _body.Add("login", login);
            _body.Add("password", password);
            _body.Add("sshState", sshState);
            string uri = $"/v1/hosting/web/{serviceName}/user";
            return this.SendAsync<_hosting_web.task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/user/{login}
        public Task<_hosting_web.task> DeleteV1HostingWebServiceNameUserLoginAsync(string login, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/user/{login}";
            return this.SendAsync<_hosting_web.task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/user/{login}
        public Task<_hosting_web.user> GetV1HostingWebServiceNameUserLoginAsync(string login, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/user/{login}";
            return this.SendAsync<_hosting_web.user>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/user/{login}
        public Task PutV1HostingWebServiceNameUserLoginAsync(_hosting_web.user _body, string login, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/user/{login}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/user/{login}/changePassword
        public Task<_hosting_web.task> PostV1HostingWebServiceNameUserLoginChangePasswordAsync(string login, string password, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("password", password);
            string uri = $"/v1/hosting/web/{serviceName}/user/{login}/changePassword";
            return this.SendAsync<_hosting_web.task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/userLogs
        public Task<System.String[]> GetV1HostingWebServiceNameUserLogsAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? login) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("login", login);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/userLogs{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/userLogs
        public Task<System.String> PostV1HostingWebServiceNameUserLogsAsync(string description, string login, string password, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? ownLogsId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("description", description);
            _body.Add("login", login);
            _body.Add("ownLogsId", ownLogsId);
            _body.Add("password", password);
            string uri = $"/v1/hosting/web/{serviceName}/userLogs";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/userLogs/{login}
        public Task<System.String> DeleteV1HostingWebServiceNameUserLogsLoginAsync(string login, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/userLogs/{login}";
            return this.SendAsync<string>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/userLogs/{login}
        public Task<_hosting_web.userLogs> GetV1HostingWebServiceNameUserLogsLoginAsync(string login, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/userLogs/{login}";
            return this.SendAsync<_hosting_web.userLogs>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/userLogs/{login}
        public Task PutV1HostingWebServiceNameUserLogsLoginAsync(_hosting_web.userLogs _body, string login, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/userLogs/{login}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/userLogs/{login}/changePassword
        public Task<System.String> PostV1HostingWebServiceNameUserLogsLoginChangePasswordAsync(string login, string password, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("password", password);
            string uri = $"/v1/hosting/web/{serviceName}/userLogs/{login}/changePassword";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/userLogsToken
        public Task<System.String> GetV1HostingWebServiceNameUserLogsTokenAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? attachedDomain, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? remoteCheck, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? ttl) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("attachedDomain", attachedDomain);
            queryParametersTemp.Add("remoteCheck", remoteCheck);
            queryParametersTemp.Add("ttl", ttl);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/userLogsToken{queryParameters}";
            return this.SendAsync<string>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/vcs/webhooks
        public Task<_hosting_web.VcsWebhooks> GetV1HostingWebServiceNameVcsWebhooksAsync(string path, string serviceName, _hosting_web.SupportedVcsEnum vcs) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("path", path);
            queryParametersTemp.Add("vcs", vcs);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/vcs/webhooks{queryParameters}";
            return this.SendAsync<_hosting_web.VcsWebhooks>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/website
        public Task<System.Int64[]> GetV1HostingWebServiceNameWebsiteAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? path) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("path", path);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/website{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/website
        public Task<_hosting_web.PublicTask> PostV1HostingWebServiceNameWebsiteAsync(_hosting_web_website.CreationRequest _body, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/website";
            return this.SendAsync<_hosting_web.PublicTask>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/website/{id}
        public Task<_hosting_web.PublicTask> DeleteV1HostingWebServiceNameWebsiteIdAsync(bool deleteFiles, long id, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("deleteFiles", deleteFiles);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/hosting/web/{serviceName}/website/{id}{queryParameters}";
            return this.SendAsync<_hosting_web.PublicTask>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/website/{id}
        public Task<_hosting_web.Website> GetV1HostingWebServiceNameWebsiteIdAsync(long id, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/website/{id}";
            return this.SendAsync<_hosting_web.Website>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/website/{id}
        public Task<_hosting_web.Website> PutV1HostingWebServiceNameWebsiteIdAsync(_hosting_web_website.Update _body, long id, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/website/{id}";
            return this.SendAsync<_hosting_web.Website>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/website/{id}/deploy
        public Task<_hosting_web.PublicTask> PostV1HostingWebServiceNameWebsiteIdDeployAsync(_hosting_web_website.DeploymentRequest _body, long id, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/website/{id}/deploy";
            return this.SendAsync<_hosting_web.PublicTask>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/website/{id}/deployment
        public Task<System.Int64[]> GetV1HostingWebServiceNameWebsiteIdDeploymentAsync(long id, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/website/{id}/deployment";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/website/{id}/deployment/{deploymentId}
        public Task<_hosting_web_website.Deployment> GetV1HostingWebServiceNameWebsiteIdDeploymentDeploymentIdAsync(long deploymentId, long id, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/website/{id}/deployment/{deploymentId}";
            return this.SendAsync<_hosting_web_website.Deployment>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/website/{id}/deployment/{deploymentId}/logs
        public Task<_hosting_web_website_deployment.LogsMessage[]> GetV1HostingWebServiceNameWebsiteIdDeploymentDeploymentIdLogsAsync(long deploymentId, long id, string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/website/{id}/deployment/{deploymentId}/logs";
            return this.SendAsync<_hosting_web_website_deployment.LogsMessage[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/hosting/web/{serviceName}/websiteCreationCapabilities
        public Task<_hosting_web.WebsiteCreationCapabilities> GetV1HostingWebServiceNameWebsiteCreationCapabilitiesAsync(string serviceName) {
            string uri = $"/v1/hosting/web/{serviceName}/websiteCreationCapabilities";
            return this.SendAsync<_hosting_web.WebsiteCreationCapabilities>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip
        public Task<System.String[]> GetV1IpAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? campus, [System.Runtime.InteropServices.OptionalAttribute()] System.String? description, [System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags, [System.Runtime.InteropServices.OptionalAttribute()] System.String? ip, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? isAdditionalIp, [System.Runtime.InteropServices.OptionalAttribute()] System.String? routedToServiceName, [System.Runtime.InteropServices.OptionalAttribute()] _ip.IpTypeEnum? type, [System.Runtime.InteropServices.OptionalAttribute()] _ip.IpVersionEnum? version) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("campus", campus);
            queryParametersTemp.Add("description", description);
            queryParametersTemp.Add("iamTags", iamTags);
            queryParametersTemp.Add("ip", ip);
            queryParametersTemp.Add("isAdditionalIp", isAdditionalIp);
            queryParametersTemp.Add("routedTo.serviceName", routedToServiceName);
            queryParametersTemp.Add("type", type);
            queryParametersTemp.Add("version", version);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ip{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/campus
        public Task<_ip.Campus[]> GetV1IpCampusAsync() {
            string uri = $"/v1/ip/campus";
            return this.SendAsync<_ip.Campus[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/ip/service
        public Task<System.String[]> GetV1IpServiceAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ip/service{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/service/{serviceName}
        public Task<_ip.ServiceIpWithIAM> GetV1IpServiceServiceNameAsync(string serviceName) {
            string uri = $"/v1/ip/service/{serviceName}";
            return this.SendAsync<_ip.ServiceIpWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/service/{serviceName}
        public Task PutV1IpServiceServiceNameAsync(_ip.ServiceIp _body, string serviceName) {
            string uri = $"/v1/ip/service/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/ip/service/{serviceName}/changeContact
        public Task<System.Int64[]> PostV1IpServiceServiceNameChangeContactAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactTech) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("contactAdmin", contactAdmin);
            _body.Add("contactBilling", contactBilling);
            _body.Add("contactTech", contactTech);
            string uri = $"/v1/ip/service/{serviceName}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ip/service/{serviceName}/confirmTermination
        public Task<System.String> PostV1IpServiceServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] System.String? commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum? futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum? reason) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("commentary", commentary);
            _body.Add("futureUse", futureUse);
            _body.Add("reason", reason);
            _body.Add("token", token);
            string uri = $"/v1/ip/service/{serviceName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ip/service/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1IpServiceServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/ip/service/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/service/{serviceName}/serviceInfos
        public Task PutV1IpServiceServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/ip/service/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/ip/service/{serviceName}/terminate
        public Task<System.String> PostV1IpServiceServiceNameTerminateAsync(string serviceName) {
            string uri = $"/v1/ip/service/{serviceName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}
        public Task<_ip.IpWithIAM> GetV1IpIpAsync(string ip) {
            string uri = $"/v1/ip/{ip}";
            return this.SendAsync<_ip.IpWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}
        public Task PutV1IpIpAsync(_ip.Ip _body, string ip) {
            string uri = $"/v1/ip/{ip}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/ip/{ip}/antihack
        public Task<System.String[]> GetV1IpIpAntihackAsync(string ip, [System.Runtime.InteropServices.OptionalAttribute()] _ip.BlockedIpStateEnum? state) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("state", state);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ip/{ip}/antihack{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/antihack/{ipBlocked}
        public Task<_ip.BlockedIp> GetV1IpIpAntihackIpBlockedAsync(string ip, string ipBlocked) {
            string uri = $"/v1/ip/{ip}/antihack/{ipBlocked}";
            return this.SendAsync<_ip.BlockedIp>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/antihack/{ipBlocked}/unblock
        public Task PostV1IpIpAntihackIpBlockedUnblockAsync(string ip, string ipBlocked) {
            string uri = $"/v1/ip/{ip}/antihack/{ipBlocked}/unblock";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/arp
        public Task<System.String[]> GetV1IpIpArpAsync(string ip, [System.Runtime.InteropServices.OptionalAttribute()] _ip.ArpStateEnum? state) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("state", state);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ip/{ip}/arp{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/arp/{ipBlocked}
        public Task<_ip.ArpBlockedIp> GetV1IpIpArpIpBlockedAsync(string ip, string ipBlocked) {
            string uri = $"/v1/ip/{ip}/arp/{ipBlocked}";
            return this.SendAsync<_ip.ArpBlockedIp>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/arp/{ipBlocked}/unblock
        public Task PostV1IpIpArpIpBlockedUnblockAsync(string ip, string ipBlocked) {
            string uri = $"/v1/ip/{ip}/arp/{ipBlocked}/unblock";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/bringYourOwnIp/aggregate
        public Task<_ip.ByoipAggregationPreview[]> GetV1IpIpBringYourOwnIpAggregateAsync(string ip) {
            string uri = $"/v1/ip/{ip}/bringYourOwnIp/aggregate";
            return this.SendAsync<_ip.ByoipAggregationPreview[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/bringYourOwnIp/aggregate
        public Task<_ip.IpTask> PostV1IpIpBringYourOwnIpAggregateAsync(string aggregationIp, string ip) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("aggregationIp", aggregationIp);
            string uri = $"/v1/ip/{ip}/bringYourOwnIp/aggregate";
            return this.SendAsync<_ip.IpTask>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ip/{ip}/bringYourOwnIp/slice
        public Task<_ip.ByoipSlicingPreview[]> GetV1IpIpBringYourOwnIpSliceAsync(string ip) {
            string uri = $"/v1/ip/{ip}/bringYourOwnIp/slice";
            return this.SendAsync<_ip.ByoipSlicingPreview[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/bringYourOwnIp/slice
        public Task<_ip.IpTask> PostV1IpIpBringYourOwnIpSliceAsync(string ip, long slicingSize) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("slicingSize", slicingSize);
            string uri = $"/v1/ip/{ip}/bringYourOwnIp/slice";
            return this.SendAsync<_ip.IpTask>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ip/{ip}/changeOrg
        public Task<_ip.IpTask> PostV1IpIpChangeOrgAsync(string ip, string organisation) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("organisation", organisation);
            string uri = $"/v1/ip/{ip}/changeOrg";
            return this.SendAsync<_ip.IpTask>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ip/{ip}/delegation
        public Task<System.String[]> GetV1IpIpDelegationAsync(string ip) {
            string uri = $"/v1/ip/{ip}/delegation";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/delegation
        public Task<_ip.ReverseDelegation> PostV1IpIpDelegationAsync(string ip, string target) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("target", target);
            string uri = $"/v1/ip/{ip}/delegation";
            return this.SendAsync<_ip.ReverseDelegation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ip/{ip}/delegation/{target}
        public Task DeleteV1IpIpDelegationTargetAsync(string ip, string target) {
            string uri = $"/v1/ip/{ip}/delegation/{target}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/delegation/{target}
        public Task<_ip.ReverseDelegation> GetV1IpIpDelegationTargetAsync(string ip, string target) {
            string uri = $"/v1/ip/{ip}/delegation/{target}";
            return this.SendAsync<_ip.ReverseDelegation>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/firewall
        public Task<System.String[]> GetV1IpIpFirewallAsync(string ip, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? enabled, [System.Runtime.InteropServices.OptionalAttribute()] _ip.FirewallStateEnum? state) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("enabled", enabled);
            queryParametersTemp.Add("state", state);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ip/{ip}/firewall{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/firewall
        public Task<_ip.FirewallIp> PostV1IpIpFirewallAsync(string ip, string ipOnFirewall) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("ipOnFirewall", ipOnFirewall);
            string uri = $"/v1/ip/{ip}/firewall";
            return this.SendAsync<_ip.FirewallIp>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ip/{ip}/firewall/{ipOnFirewall}
        public Task<System.String> DeleteV1IpIpFirewallIpOnFirewallAsync(string ip, string ipOnFirewall) {
            string uri = $"/v1/ip/{ip}/firewall/{ipOnFirewall}";
            return this.SendAsync<string>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/firewall/{ipOnFirewall}
        public Task<_ip.FirewallIp> GetV1IpIpFirewallIpOnFirewallAsync(string ip, string ipOnFirewall) {
            string uri = $"/v1/ip/{ip}/firewall/{ipOnFirewall}";
            return this.SendAsync<_ip.FirewallIp>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/firewall/{ipOnFirewall}
        public Task PutV1IpIpFirewallIpOnFirewallAsync(_ip.FirewallIp _body, string ip, string ipOnFirewall) {
            string uri = $"/v1/ip/{ip}/firewall/{ipOnFirewall}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/ip/{ip}/firewall/{ipOnFirewall}/rule
        public Task<System.Int64[]> GetV1IpIpFirewallIpOnFirewallRuleAsync(string ip, string ipOnFirewall, [System.Runtime.InteropServices.OptionalAttribute()] _ip.FirewallRuleStateEnum? state) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("state", state);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ip/{ip}/firewall/{ipOnFirewall}/rule{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/firewall/{ipOnFirewall}/rule
        public Task<_ip.FirewallNetworkRule> PostV1IpIpFirewallIpOnFirewallRuleAsync(_ip.FirewallActionEnum action, string ip, string ipOnFirewall, _ip.FirewallProtocolEnum protocol, _ip.FirewallSequenceRangeEnum sequence, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? destinationPort, [System.Runtime.InteropServices.OptionalAttribute()] System.String? source, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? sourcePort, [System.Runtime.InteropServices.OptionalAttribute()] _ip.FirewallOptionTCP? tcpOption) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("action", action);
            _body.Add("destinationPort", destinationPort);
            _body.Add("protocol", protocol);
            _body.Add("sequence", sequence);
            _body.Add("source", source);
            _body.Add("sourcePort", sourcePort);
            _body.Add("tcpOption", tcpOption);
            string uri = $"/v1/ip/{ip}/firewall/{ipOnFirewall}/rule";
            return this.SendAsync<_ip.FirewallNetworkRule>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ip/{ip}/firewall/{ipOnFirewall}/rule/{sequence}
        public Task<_ip.FirewallNetworkRule> DeleteV1IpIpFirewallIpOnFirewallRuleSequenceAsync(string ip, string ipOnFirewall, long sequence) {
            string uri = $"/v1/ip/{ip}/firewall/{ipOnFirewall}/rule/{sequence}";
            return this.SendAsync<_ip.FirewallNetworkRule>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/firewall/{ipOnFirewall}/rule/{sequence}
        public Task<_ip.FirewallNetworkRule> GetV1IpIpFirewallIpOnFirewallRuleSequenceAsync(string ip, string ipOnFirewall, long sequence) {
            string uri = $"/v1/ip/{ip}/firewall/{ipOnFirewall}/rule/{sequence}";
            return this.SendAsync<_ip.FirewallNetworkRule>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/game
        public Task<System.String[]> GetV1IpIpGameAsync(string ip) {
            string uri = $"/v1/ip/{ip}/game";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/game/{ipOnGame}
        public Task<_ip.GameMitigation> GetV1IpIpGameIpOnGameAsync(string ip, string ipOnGame) {
            string uri = $"/v1/ip/{ip}/game/{ipOnGame}";
            return this.SendAsync<_ip.GameMitigation>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/game/{ipOnGame}
        public Task PutV1IpIpGameIpOnGameAsync(_ip.GameMitigation _body, string ip, string ipOnGame) {
            string uri = $"/v1/ip/{ip}/game/{ipOnGame}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/ip/{ip}/game/{ipOnGame}/rule
        public Task<System.Int64[]> GetV1IpIpGameIpOnGameRuleAsync(string ip, string ipOnGame) {
            string uri = $"/v1/ip/{ip}/game/{ipOnGame}/rule";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/game/{ipOnGame}/rule
        public Task<_ip.GameMitigationRule> PostV1IpIpGameIpOnGameRuleAsync(string ip, string ipOnGame, _complexType.Range<long> ports, _ip.GameMitigationRuleProtocolEnum protocol) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("ports", ports);
            _body.Add("protocol", protocol);
            string uri = $"/v1/ip/{ip}/game/{ipOnGame}/rule";
            return this.SendAsync<_ip.GameMitigationRule>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ip/{ip}/game/{ipOnGame}/rule/{id}
        public Task<_ip.GameMitigationRule> DeleteV1IpIpGameIpOnGameRuleIdAsync(long id, string ip, string ipOnGame) {
            string uri = $"/v1/ip/{ip}/game/{ipOnGame}/rule/{id}";
            return this.SendAsync<_ip.GameMitigationRule>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/game/{ipOnGame}/rule/{id}
        public Task<_ip.GameMitigationRule> GetV1IpIpGameIpOnGameRuleIdAsync(long id, string ip, string ipOnGame) {
            string uri = $"/v1/ip/{ip}/game/{ipOnGame}/rule/{id}";
            return this.SendAsync<_ip.GameMitigationRule>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/license/cloudLinux
        public Task<System.String[]> GetV1IpIpLicenseCloudLinuxAsync(string ip, [System.Runtime.InteropServices.OptionalAttribute()] System.String? ipAddress) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ipAddress", ipAddress);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ip/{ip}/license/cloudLinux{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/license/cpanel
        public Task<System.String[]> GetV1IpIpLicenseCpanelAsync(string ip, [System.Runtime.InteropServices.OptionalAttribute()] System.String? ipAddress) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ipAddress", ipAddress);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ip/{ip}/license/cpanel{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/license/directadmin
        public Task<System.String[]> GetV1IpIpLicenseDirectadminAsync(string ip, [System.Runtime.InteropServices.OptionalAttribute()] System.String? ipAddress) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ipAddress", ipAddress);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ip/{ip}/license/directadmin{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/license/plesk
        public Task<System.String[]> GetV1IpIpLicensePleskAsync(string ip, [System.Runtime.InteropServices.OptionalAttribute()] System.String? ipAddress) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ipAddress", ipAddress);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ip/{ip}/license/plesk{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/license/sqlserver
        public Task<System.String[]> GetV1IpIpLicenseSqlserverAsync(string ip, [System.Runtime.InteropServices.OptionalAttribute()] System.String? ipAddress) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ipAddress", ipAddress);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ip/{ip}/license/sqlserver{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/license/virtuozzo
        public Task<System.String[]> GetV1IpIpLicenseVirtuozzoAsync(string ip, [System.Runtime.InteropServices.OptionalAttribute()] System.String? ipAddress) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ipAddress", ipAddress);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ip/{ip}/license/virtuozzo{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/license/windows
        public Task<System.String[]> GetV1IpIpLicenseWindowsAsync(string ip, [System.Runtime.InteropServices.OptionalAttribute()] System.String? ipAddress) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ipAddress", ipAddress);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ip/{ip}/license/windows{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/license/worklight
        public Task<System.String[]> GetV1IpIpLicenseWorklightAsync(string ip, [System.Runtime.InteropServices.OptionalAttribute()] System.String? ipAddress) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ipAddress", ipAddress);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ip/{ip}/license/worklight{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/migrationToken
        public Task<_ip.IpMigrationToken> GetV1IpIpMigrationTokenAsync(string ip) {
            string uri = $"/v1/ip/{ip}/migrationToken";
            return this.SendAsync<_ip.IpMigrationToken>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/migrationToken
        public Task<_ip.IpMigrationToken> PostV1IpIpMigrationTokenAsync(string customerId, string ip) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("customerId", customerId);
            string uri = $"/v1/ip/{ip}/migrationToken";
            return this.SendAsync<_ip.IpMigrationToken>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ip/{ip}/mitigation
        public Task<System.String[]> GetV1IpIpMitigationAsync(string ip, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? auto, [System.Runtime.InteropServices.OptionalAttribute()] _ip.MitigationStateEnum? state) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("auto", auto);
            queryParametersTemp.Add("state", state);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ip/{ip}/mitigation{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/mitigation
        public Task<_ip.MitigationIp> PostV1IpIpMitigationAsync(string ip, string ipOnMitigation) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("ipOnMitigation", ipOnMitigation);
            string uri = $"/v1/ip/{ip}/mitigation";
            return this.SendAsync<_ip.MitigationIp>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ip/{ip}/mitigation/{ipOnMitigation}
        public Task<_ip.MitigationIp> DeleteV1IpIpMitigationIpOnMitigationAsync(string ip, string ipOnMitigation) {
            string uri = $"/v1/ip/{ip}/mitigation/{ipOnMitigation}";
            return this.SendAsync<_ip.MitigationIp>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/mitigation/{ipOnMitigation}
        public Task<_ip.MitigationIp> GetV1IpIpMitigationIpOnMitigationAsync(string ip, string ipOnMitigation) {
            string uri = $"/v1/ip/{ip}/mitigation/{ipOnMitigation}";
            return this.SendAsync<_ip.MitigationIp>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/mitigation/{ipOnMitigation}
        public Task PutV1IpIpMitigationIpOnMitigationAsync(_ip.MitigationIp _body, string ip, string ipOnMitigation) {
            string uri = $"/v1/ip/{ip}/mitigation/{ipOnMitigation}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/ip/{ip}/mitigationProfiles
        public Task<System.String[]> GetV1IpIpMitigationProfilesAsync(string ip) {
            string uri = $"/v1/ip/{ip}/mitigationProfiles";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/mitigationProfiles
        public Task<_ip.MitigationProfile> PostV1IpIpMitigationProfilesAsync(_ip.MitigationProfileAutoMitigationTimeOutEnum autoMitigationTimeOut, string ip, string ipMitigationProfile) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("autoMitigationTimeOut", autoMitigationTimeOut);
            _body.Add("ipMitigationProfile", ipMitigationProfile);
            string uri = $"/v1/ip/{ip}/mitigationProfiles";
            return this.SendAsync<_ip.MitigationProfile>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ip/{ip}/mitigationProfiles/{ipMitigationProfile}
        public Task DeleteV1IpIpMitigationProfilesIpMitigationProfileAsync(string ip, string ipMitigationProfile) {
            string uri = $"/v1/ip/{ip}/mitigationProfiles/{ipMitigationProfile}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/mitigationProfiles/{ipMitigationProfile}
        public Task<_ip.MitigationProfile> GetV1IpIpMitigationProfilesIpMitigationProfileAsync(string ip, string ipMitigationProfile) {
            string uri = $"/v1/ip/{ip}/mitigationProfiles/{ipMitigationProfile}";
            return this.SendAsync<_ip.MitigationProfile>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/mitigationProfiles/{ipMitigationProfile}
        public Task PutV1IpIpMitigationProfilesIpMitigationProfileAsync(_ip.MitigationProfile _body, string ip, string ipMitigationProfile) {
            string uri = $"/v1/ip/{ip}/mitigationProfiles/{ipMitigationProfile}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/ip/{ip}/move
        public Task<_ip.Destinations> GetV1IpIpMoveAsync(string ip) {
            string uri = $"/v1/ip/{ip}/move";
            return this.SendAsync<_ip.Destinations>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/move
        public Task<_ip.IpTask> PostV1IpIpMoveAsync(string ip, string to, [System.Runtime.InteropServices.OptionalAttribute()] System.String? nexthop) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("nexthop", nexthop);
            _body.Add("to", to);
            string uri = $"/v1/ip/{ip}/move";
            return this.SendAsync<_ip.IpTask>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ip/{ip}/park
        public Task<_ip.IpTask> PostV1IpIpParkAsync(string ip) {
            string uri = $"/v1/ip/{ip}/park";
            return this.SendAsync<_ip.IpTask>("POST", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/phishing
        public Task<System.Int64[]> GetV1IpIpPhishingAsync(string ip, [System.Runtime.InteropServices.OptionalAttribute()] System.String? ipOnAntiphishing, [System.Runtime.InteropServices.OptionalAttribute()] _ip.AntiphishingStateEnum? state) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ipOnAntiphishing", ipOnAntiphishing);
            queryParametersTemp.Add("state", state);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ip/{ip}/phishing{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/phishing/{id}
        public Task<_ip.Antiphishing> GetV1IpIpPhishingIdAsync(long id, string ip) {
            string uri = $"/v1/ip/{ip}/phishing/{id}";
            return this.SendAsync<_ip.Antiphishing>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/reverse
        public Task<System.String[]> GetV1IpIpReverseAsync(string ip) {
            string uri = $"/v1/ip/{ip}/reverse";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/reverse
        public Task<_ip.ReverseIp> PostV1IpIpReverseAsync(string ip, string ipReverse, string reverse) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("ipReverse", ipReverse);
            _body.Add("reverse", reverse);
            string uri = $"/v1/ip/{ip}/reverse";
            return this.SendAsync<_ip.ReverseIp>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ip/{ip}/reverse/{ipReverse}
        public Task DeleteV1IpIpReverseIpReverseAsync(string ip, string ipReverse) {
            string uri = $"/v1/ip/{ip}/reverse/{ipReverse}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/reverse/{ipReverse}
        public Task<_ip.ReverseIp> GetV1IpIpReverseIpReverseAsync(string ip, string ipReverse) {
            string uri = $"/v1/ip/{ip}/reverse/{ipReverse}";
            return this.SendAsync<_ip.ReverseIp>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/ripe
        public Task<_ip.RipeInfos> GetV1IpIpRipeAsync(string ip) {
            string uri = $"/v1/ip/{ip}/ripe";
            return this.SendAsync<_ip.RipeInfos>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/ripe
        public Task PutV1IpIpRipeAsync(_ip.RipeInfos _body, string ip) {
            string uri = $"/v1/ip/{ip}/ripe";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/ip/{ip}/spam
        public Task<System.String[]> GetV1IpIpSpamAsync(string ip, [System.Runtime.InteropServices.OptionalAttribute()] _ip.SpamStateEnum? state) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("state", state);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ip/{ip}/spam{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/spam/{ipSpamming}
        public Task<_ip.SpamIp> GetV1IpIpSpamIpSpammingAsync(string ip, string ipSpamming) {
            string uri = $"/v1/ip/{ip}/spam/{ipSpamming}";
            return this.SendAsync<_ip.SpamIp>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/spam/{ipSpamming}/stats
        public Task<_ip.SpamStats[]> GetV1IpIpSpamIpSpammingStatsAsync(System.DateTime from, string ip, string ipSpamming, System.DateTime to) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("from", from);
            queryParametersTemp.Add("to", to);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ip/{ip}/spam/{ipSpamming}/stats{queryParameters}";
            return this.SendAsync<_ip.SpamStats[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/spam/{ipSpamming}/unblock
        public Task<_ip.SpamIp> PostV1IpIpSpamIpSpammingUnblockAsync(string ip, string ipSpamming) {
            string uri = $"/v1/ip/{ip}/spam/{ipSpamming}/unblock";
            return this.SendAsync<_ip.SpamIp>("POST", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/task
        public Task<System.Int64[]> GetV1IpIpTaskAsync(string ip, [System.Runtime.InteropServices.OptionalAttribute()] _ip.TaskFunctionEnum? function, [System.Runtime.InteropServices.OptionalAttribute()] _ip.TaskStatusEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("function", function);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ip/{ip}/task{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/task/{taskId}
        public Task<_ip.IpTask> GetV1IpIpTaskTaskIdAsync(string ip, long taskId) {
            string uri = $"/v1/ip/{ip}/task/{taskId}";
            return this.SendAsync<_ip.IpTask>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ip/{ip}/terminate
        public Task<_ip.IpTask> PostV1IpIpTerminateAsync(string ip) {
            string uri = $"/v1/ip/{ip}/terminate";
            return this.SendAsync<_ip.IpTask>("POST", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing
        public Task<System.String[]> GetV1IpLoadbalancingAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ipLoadbalancing{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/availableZones
        public Task<System.String[]> GetV1IpLoadbalancingAvailableZonesAsync() {
            string uri = $"/v1/ipLoadbalancing/availableZones";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}
        public Task<_ipLoadbalancing.IpWithIAM> GetV1IpLoadbalancingServiceNameAsync(string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}";
            return this.SendAsync<_ipLoadbalancing.IpWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}
        public Task PutV1IpLoadbalancingServiceNameAsync(_ipLoadbalancing.Ip _body, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/availableFarmProbes
        public Task<_ipLoadbalancing.FarmAvailableProbe[]> GetV1IpLoadbalancingServiceNameAvailableFarmProbesAsync(string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/availableFarmProbes";
            return this.SendAsync<_ipLoadbalancing.FarmAvailableProbe[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/availableFarmType
        public Task<System.String[]> GetV1IpLoadbalancingServiceNameAvailableFarmTypeAsync(string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/availableFarmType";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/availableFrontendType
        public Task<System.String[]> GetV1IpLoadbalancingServiceNameAvailableFrontendTypeAsync(string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/availableFrontendType";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/availableRouteActions
        public Task<_ipLoadbalancing.RouteAvailableAction[]> GetV1IpLoadbalancingServiceNameAvailableRouteActionsAsync(string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/availableRouteActions";
            return this.SendAsync<_ipLoadbalancing.RouteAvailableAction[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/availableRouteRules
        public Task<_ipLoadbalancing.RouteAvailableRule[]> GetV1IpLoadbalancingServiceNameAvailableRouteRulesAsync(string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/availableRouteRules";
            return this.SendAsync<_ipLoadbalancing.RouteAvailableRule[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/changeContact
        public Task<System.Int64[]> PostV1IpLoadbalancingServiceNameChangeContactAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactTech) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("contactAdmin", contactAdmin);
            _body.Add("contactBilling", contactBilling);
            _body.Add("contactTech", contactTech);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/confirmTermination
        public Task<System.String> PostV1IpLoadbalancingServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] System.String? commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum? futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum? reason) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("commentary", commentary);
            _body.Add("futureUse", futureUse);
            _body.Add("reason", reason);
            _body.Add("token", token);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/definedFarms
        public Task<_ipLoadbalancing.DefinedFarm[]> GetV1IpLoadbalancingServiceNameDefinedFarmsAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? vrackNetworkId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("vrackNetworkId", vrackNetworkId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/definedFarms{queryParameters}";
            return this.SendAsync<_ipLoadbalancing.DefinedFarm[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/definedFrontends
        public Task<_ipLoadbalancing.DefinedFrontend[]> GetV1IpLoadbalancingServiceNameDefinedFrontendsAsync(string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/definedFrontends";
            return this.SendAsync<_ipLoadbalancing.DefinedFrontend[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/definedRoutes
        public Task<_ipLoadbalancing.DefinedRoute[]> GetV1IpLoadbalancingServiceNameDefinedRoutesAsync(string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/definedRoutes";
            return this.SendAsync<_ipLoadbalancing.DefinedRoute[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/failover
        public Task<System.String[]> GetV1IpLoadbalancingServiceNameFailoverAsync(string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/failover";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/freeCertificate
        public Task<_ipLoadbalancing_Task.Task> PostV1IpLoadbalancingServiceNameFreeCertificateAsync(string[] fqdn, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("fqdn", fqdn);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/freeCertificate";
            return this.SendAsync<_ipLoadbalancing_Task.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/http/farm
        public Task<System.Int64[]> GetV1IpLoadbalancingServiceNameHttpFarmAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? vrackNetworkId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? zone) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("vrackNetworkId", vrackNetworkId);
            queryParametersTemp.Add("zone", zone);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/http/farm{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/http/farm
        public Task<_ipLoadbalancing_backendHttp.BackendHttp> PostV1IpLoadbalancingServiceNameHttpFarmAsync(string serviceName, string zone, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.BalanceHTTPEnum? balance, [System.Runtime.InteropServices.OptionalAttribute()] System.String? displayName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? port, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.BackendProbe? probe, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.StickinessHTTPEnum? stickiness, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? vrackNetworkId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("balance", balance);
            _body.Add("displayName", displayName);
            _body.Add("port", port);
            _body.Add("probe", probe);
            _body.Add("stickiness", stickiness);
            _body.Add("vrackNetworkId", vrackNetworkId);
            _body.Add("zone", zone);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/http/farm";
            return this.SendAsync<_ipLoadbalancing_backendHttp.BackendHttp>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/http/farm/{farmId}
        public Task DeleteV1IpLoadbalancingServiceNameHttpFarmFarmIdAsync(long farmId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/http/farm/{farmId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/http/farm/{farmId}
        public Task<_ipLoadbalancing_backendHttp.BackendHttp> GetV1IpLoadbalancingServiceNameHttpFarmFarmIdAsync(long farmId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/http/farm/{farmId}";
            return this.SendAsync<_ipLoadbalancing_backendHttp.BackendHttp>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/http/farm/{farmId}
        public Task PutV1IpLoadbalancingServiceNameHttpFarmFarmIdAsync(_ipLoadbalancing_backendHttp.BackendHttp _body, long farmId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/http/farm/{farmId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/http/farm/{farmId}/server
        public Task<System.Int64[]> GetV1IpLoadbalancingServiceNameHttpFarmFarmIdServerAsync(long farmId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? address, [System.Runtime.InteropServices.OptionalAttribute()] System.String? cookie, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.BackendCustomerServerStatusEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("address", address);
            queryParametersTemp.Add("cookie", cookie);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/http/farm/{farmId}/server{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/http/farm/{farmId}/server
        public Task<_ipLoadbalancing_backendHttpCustomerServer.BackendHTTPServer> PostV1IpLoadbalancingServiceNameHttpFarmFarmIdServerAsync(string address, long farmId, string serviceName, _ipLoadbalancing.BackendCustomerServerStatusEnum status, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? backup, [System.Runtime.InteropServices.OptionalAttribute()] System.String? chain, [System.Runtime.InteropServices.OptionalAttribute()] System.String? cookie, [System.Runtime.InteropServices.OptionalAttribute()] System.String? displayName, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.OnMarkedDownEnum? onMarkedDown, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? port, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? probe, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.ProxyProtocolVersionEnum? proxyProtocolVersion, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? ssl, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? weight) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("address", address);
            _body.Add("backup", backup);
            _body.Add("chain", chain);
            _body.Add("cookie", cookie);
            _body.Add("displayName", displayName);
            _body.Add("onMarkedDown", onMarkedDown);
            _body.Add("port", port);
            _body.Add("probe", probe);
            _body.Add("proxyProtocolVersion", proxyProtocolVersion);
            _body.Add("ssl", ssl);
            _body.Add("status", status);
            _body.Add("weight", weight);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/http/farm/{farmId}/server";
            return this.SendAsync<_ipLoadbalancing_backendHttpCustomerServer.BackendHTTPServer>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/http/farm/{farmId}/server/{serverId}
        public Task DeleteV1IpLoadbalancingServiceNameHttpFarmFarmIdServerServerIdAsync(long farmId, long serverId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/http/farm/{farmId}/server/{serverId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/http/farm/{farmId}/server/{serverId}
        public Task<_ipLoadbalancing_backendHttpCustomerServer.BackendHTTPServer> GetV1IpLoadbalancingServiceNameHttpFarmFarmIdServerServerIdAsync(long farmId, long serverId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/http/farm/{farmId}/server/{serverId}";
            return this.SendAsync<_ipLoadbalancing_backendHttpCustomerServer.BackendHTTPServer>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/http/farm/{farmId}/server/{serverId}
        public Task PutV1IpLoadbalancingServiceNameHttpFarmFarmIdServerServerIdAsync(_ipLoadbalancing_backendHttpCustomerServer.BackendHTTPServer _body, long farmId, long serverId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/http/farm/{farmId}/server/{serverId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/http/frontend
        public Task<System.Int64[]> GetV1IpLoadbalancingServiceNameHttpFrontendAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? defaultFarmId, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? defaultSslId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? port, [System.Runtime.InteropServices.OptionalAttribute()] System.String? zone) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("defaultFarmId", defaultFarmId);
            queryParametersTemp.Add("defaultSslId", defaultSslId);
            queryParametersTemp.Add("port", port);
            queryParametersTemp.Add("zone", zone);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/http/frontend{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/http/frontend
        public Task<_ipLoadbalancing_frontendHttp.FrontendHttp> PostV1IpLoadbalancingServiceNameHttpFrontendAsync(string port, string serviceName, string zone, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? allowedSource, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? dedicatedIpfo, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? defaultFarmId, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? defaultSslId, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? deniedSource, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? disabled, [System.Runtime.InteropServices.OptionalAttribute()] System.String? displayName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? hsts, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? httpHeader, [System.Runtime.InteropServices.OptionalAttribute()] System.String? redirectLocation, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? ssl) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("allowedSource", allowedSource);
            _body.Add("dedicatedIpfo", dedicatedIpfo);
            _body.Add("defaultFarmId", defaultFarmId);
            _body.Add("defaultSslId", defaultSslId);
            _body.Add("deniedSource", deniedSource);
            _body.Add("disabled", disabled);
            _body.Add("displayName", displayName);
            _body.Add("hsts", hsts);
            _body.Add("httpHeader", httpHeader);
            _body.Add("port", port);
            _body.Add("redirectLocation", redirectLocation);
            _body.Add("ssl", ssl);
            _body.Add("zone", zone);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/http/frontend";
            return this.SendAsync<_ipLoadbalancing_frontendHttp.FrontendHttp>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/http/frontend/{frontendId}
        public Task DeleteV1IpLoadbalancingServiceNameHttpFrontendFrontendIdAsync(long frontendId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/http/frontend/{frontendId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/http/frontend/{frontendId}
        public Task<_ipLoadbalancing_frontendHttp.FrontendHttp> GetV1IpLoadbalancingServiceNameHttpFrontendFrontendIdAsync(long frontendId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/http/frontend/{frontendId}";
            return this.SendAsync<_ipLoadbalancing_frontendHttp.FrontendHttp>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/http/frontend/{frontendId}
        public Task PutV1IpLoadbalancingServiceNameHttpFrontendFrontendIdAsync(_ipLoadbalancing_frontendHttp.FrontendHttp _body, long frontendId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/http/frontend/{frontendId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/http/route
        public Task<System.Int64[]> GetV1IpLoadbalancingServiceNameHttpRouteAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? frontendId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("frontendId", frontendId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/http/route{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/http/route
        public Task<_ipLoadbalancing_RouteHttp.RouteHttp> PostV1IpLoadbalancingServiceNameHttpRouteAsync(_ipLoadbalancing.RouteHttpAction action, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? displayName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? frontendId, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? weight) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("action", action);
            _body.Add("displayName", displayName);
            _body.Add("frontendId", frontendId);
            _body.Add("weight", weight);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/http/route";
            return this.SendAsync<_ipLoadbalancing_RouteHttp.RouteHttp>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/http/route/{routeId}
        public Task DeleteV1IpLoadbalancingServiceNameHttpRouteRouteIdAsync(long routeId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/http/route/{routeId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/http/route/{routeId}
        public Task<_ipLoadbalancing_RouteHttp.RouteHttp> GetV1IpLoadbalancingServiceNameHttpRouteRouteIdAsync(long routeId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/http/route/{routeId}";
            return this.SendAsync<_ipLoadbalancing_RouteHttp.RouteHttp>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/http/route/{routeId}
        public Task PutV1IpLoadbalancingServiceNameHttpRouteRouteIdAsync(_ipLoadbalancing_RouteHttp.RouteHttp _body, long routeId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/http/route/{routeId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/http/route/{routeId}/rule
        public Task<System.Int64[]> GetV1IpLoadbalancingServiceNameHttpRouteRouteIdRuleAsync(long routeId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/http/route/{routeId}/rule";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/http/route/{routeId}/rule
        public Task<_ipLoadbalancing_RouteRule.RouteRule> PostV1IpLoadbalancingServiceNameHttpRouteRouteIdRuleAsync(string field, _ipLoadbalancing.RouteRuleMatchesEnum match, long routeId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? displayName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? negate, [System.Runtime.InteropServices.OptionalAttribute()] System.String? pattern, [System.Runtime.InteropServices.OptionalAttribute()] System.String? subField) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("displayName", displayName);
            _body.Add("field", field);
            _body.Add("match", match);
            _body.Add("negate", negate);
            _body.Add("pattern", pattern);
            _body.Add("subField", subField);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/http/route/{routeId}/rule";
            return this.SendAsync<_ipLoadbalancing_RouteRule.RouteRule>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/http/route/{routeId}/rule/{ruleId}
        public Task DeleteV1IpLoadbalancingServiceNameHttpRouteRouteIdRuleRuleIdAsync(long routeId, long ruleId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/http/route/{routeId}/rule/{ruleId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/http/route/{routeId}/rule/{ruleId}
        public Task<_ipLoadbalancing_RouteRule.RouteRule> GetV1IpLoadbalancingServiceNameHttpRouteRouteIdRuleRuleIdAsync(long routeId, long ruleId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/http/route/{routeId}/rule/{ruleId}";
            return this.SendAsync<_ipLoadbalancing_RouteRule.RouteRule>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/http/route/{routeId}/rule/{ruleId}
        public Task PutV1IpLoadbalancingServiceNameHttpRouteRouteIdRuleRuleIdAsync(_ipLoadbalancing_RouteRule.RouteRule _body, long routeId, long ruleId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/http/route/{routeId}/rule/{ruleId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/instancesState
        public Task<_ipLoadbalancing.InstancesState[]> GetV1IpLoadbalancingServiceNameInstancesStateAsync(string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/instancesState";
            return this.SendAsync<_ipLoadbalancing.InstancesState[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/metricsToken
        public Task<_ipLoadbalancing.MetricsToken> GetV1IpLoadbalancingServiceNameMetricsTokenAsync(string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/metricsToken";
            return this.SendAsync<_ipLoadbalancing.MetricsToken>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/natIp
        public Task<_ipLoadbalancing.NatIps[]> GetV1IpLoadbalancingServiceNameNatIpAsync(string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/natIp";
            return this.SendAsync<_ipLoadbalancing.NatIps[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/pendingChanges
        public Task<_ipLoadbalancing.PendingChanges[]> GetV1IpLoadbalancingServiceNamePendingChangesAsync(string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/pendingChanges";
            return this.SendAsync<_ipLoadbalancing.PendingChanges[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/quota
        public Task<System.String[]> GetV1IpLoadbalancingServiceNameQuotaAsync(string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/quota";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/quota/{zone}
        public Task<_ipLoadbalancing_Quota.Quota> GetV1IpLoadbalancingServiceNameQuotaZoneAsync(string serviceName, string zone) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/quota/{zone}";
            return this.SendAsync<_ipLoadbalancing_Quota.Quota>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/quota/{zone}
        public Task PutV1IpLoadbalancingServiceNameQuotaZoneAsync(_ipLoadbalancing_Quota.Quota _body, string serviceName, string zone) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/quota/{zone}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/quotaHistory
        public Task<System.Int64[]> GetV1IpLoadbalancingServiceNameQuotaHistoryAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateOnly? historizedDateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateOnly? historizedDateTo, [System.Runtime.InteropServices.OptionalAttribute()] System.String? zone) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("historizedDate.from", historizedDateFrom);
            queryParametersTemp.Add("historizedDate.to", historizedDateTo);
            queryParametersTemp.Add("zone", zone);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/quotaHistory{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/quotaHistory/{id}
        public Task<_ipLoadbalancing_QuotaHistory.QuotaHistory> GetV1IpLoadbalancingServiceNameQuotaHistoryIdAsync(long id, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/quotaHistory/{id}";
            return this.SendAsync<_ipLoadbalancing_QuotaHistory.QuotaHistory>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/refresh
        public Task<_ipLoadbalancing_Task.Task> PostV1IpLoadbalancingServiceNameRefreshAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? zone) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("zone", zone);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/refresh";
            return this.SendAsync<_ipLoadbalancing_Task.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1IpLoadbalancingServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/serviceInfos
        public Task PutV1IpLoadbalancingServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/ssl
        public Task<System.Int64[]> GetV1IpLoadbalancingServiceNameSslAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? expireDate, [System.Runtime.InteropServices.OptionalAttribute()] System.String? fingerprint, [System.Runtime.InteropServices.OptionalAttribute()] System.String? serial, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.SslTypeEnum? type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("expireDate", expireDate);
            queryParametersTemp.Add("fingerprint", fingerprint);
            queryParametersTemp.Add("serial", serial);
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/ssl{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/ssl
        public Task<_ipLoadbalancing_Ssl.Ssl> PostV1IpLoadbalancingServiceNameSslAsync(string certificate, string key, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? chain, [System.Runtime.InteropServices.OptionalAttribute()] System.String? displayName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("certificate", certificate);
            _body.Add("chain", chain);
            _body.Add("displayName", displayName);
            _body.Add("key", key);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/ssl";
            return this.SendAsync<_ipLoadbalancing_Ssl.Ssl>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/ssl/{id}
        public Task DeleteV1IpLoadbalancingServiceNameSslIdAsync(long id, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/ssl/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/ssl/{id}
        public Task<_ipLoadbalancing_Ssl.Ssl> GetV1IpLoadbalancingServiceNameSslIdAsync(long id, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/ssl/{id}";
            return this.SendAsync<_ipLoadbalancing_Ssl.Ssl>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/ssl/{id}
        public Task PutV1IpLoadbalancingServiceNameSslIdAsync(_ipLoadbalancing_Ssl.Ssl _body, long id, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/ssl/{id}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/status
        public Task<_ipLoadbalancing.Status> GetV1IpLoadbalancingServiceNameStatusAsync(string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/status";
            return this.SendAsync<_ipLoadbalancing.Status>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/task
        public Task<System.Int64[]> GetV1IpLoadbalancingServiceNameTaskAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.TaskActionEnum? action, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDateTo, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? doneDateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? doneDateTo, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.TaskStatusEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("action", action);
            queryParametersTemp.Add("creationDate.from", creationDateFrom);
            queryParametersTemp.Add("creationDate.to", creationDateTo);
            queryParametersTemp.Add("doneDate.from", doneDateFrom);
            queryParametersTemp.Add("doneDate.to", doneDateTo);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/task{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/task/{id}
        public Task<_ipLoadbalancing_Task.Task> GetV1IpLoadbalancingServiceNameTaskIdAsync(long id, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/task/{id}";
            return this.SendAsync<_ipLoadbalancing_Task.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/tcp/farm
        public Task<System.Int64[]> GetV1IpLoadbalancingServiceNameTcpFarmAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? vrackNetworkId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? zone) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("vrackNetworkId", vrackNetworkId);
            queryParametersTemp.Add("zone", zone);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/tcp/farm{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/tcp/farm
        public Task<_ipLoadbalancing_backendTcp.BackendTcp> PostV1IpLoadbalancingServiceNameTcpFarmAsync(string serviceName, string zone, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.BalanceTCPEnum? balance, [System.Runtime.InteropServices.OptionalAttribute()] System.String? displayName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? port, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.BackendProbe? probe, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.StickinessTCPEnum? stickiness, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? vrackNetworkId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("balance", balance);
            _body.Add("displayName", displayName);
            _body.Add("port", port);
            _body.Add("probe", probe);
            _body.Add("stickiness", stickiness);
            _body.Add("vrackNetworkId", vrackNetworkId);
            _body.Add("zone", zone);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/tcp/farm";
            return this.SendAsync<_ipLoadbalancing_backendTcp.BackendTcp>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}
        public Task DeleteV1IpLoadbalancingServiceNameTcpFarmFarmIdAsync(long farmId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}
        public Task<_ipLoadbalancing_backendTcp.BackendTcp> GetV1IpLoadbalancingServiceNameTcpFarmFarmIdAsync(long farmId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}";
            return this.SendAsync<_ipLoadbalancing_backendTcp.BackendTcp>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}
        public Task PutV1IpLoadbalancingServiceNameTcpFarmFarmIdAsync(_ipLoadbalancing_backendTcp.BackendTcp _body, long farmId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server
        public Task<System.Int64[]> GetV1IpLoadbalancingServiceNameTcpFarmFarmIdServerAsync(long farmId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? address, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.BackendCustomerServerStatusEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("address", address);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server
        public Task<_ipLoadbalancing_backendTcpCustomerServer.BackendTCPServer> PostV1IpLoadbalancingServiceNameTcpFarmFarmIdServerAsync(string address, long farmId, string serviceName, _ipLoadbalancing.BackendCustomerServerStatusEnum status, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? backup, [System.Runtime.InteropServices.OptionalAttribute()] System.String? chain, [System.Runtime.InteropServices.OptionalAttribute()] System.String? displayName, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.OnMarkedDownEnum? onMarkedDown, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? port, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? probe, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.ProxyProtocolVersionEnum? proxyProtocolVersion, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? ssl, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? weight) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("address", address);
            _body.Add("backup", backup);
            _body.Add("chain", chain);
            _body.Add("displayName", displayName);
            _body.Add("onMarkedDown", onMarkedDown);
            _body.Add("port", port);
            _body.Add("probe", probe);
            _body.Add("proxyProtocolVersion", proxyProtocolVersion);
            _body.Add("ssl", ssl);
            _body.Add("status", status);
            _body.Add("weight", weight);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server";
            return this.SendAsync<_ipLoadbalancing_backendTcpCustomerServer.BackendTCPServer>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server/{serverId}
        public Task DeleteV1IpLoadbalancingServiceNameTcpFarmFarmIdServerServerIdAsync(long farmId, long serverId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server/{serverId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server/{serverId}
        public Task<_ipLoadbalancing_backendTcpCustomerServer.BackendTCPServer> GetV1IpLoadbalancingServiceNameTcpFarmFarmIdServerServerIdAsync(long farmId, long serverId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server/{serverId}";
            return this.SendAsync<_ipLoadbalancing_backendTcpCustomerServer.BackendTCPServer>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server/{serverId}
        public Task PutV1IpLoadbalancingServiceNameTcpFarmFarmIdServerServerIdAsync(_ipLoadbalancing_backendTcpCustomerServer.BackendTCPServer _body, long farmId, long serverId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server/{serverId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/tcp/frontend
        public Task<System.Int64[]> GetV1IpLoadbalancingServiceNameTcpFrontendAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? defaultFarmId, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? defaultSslId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? port, [System.Runtime.InteropServices.OptionalAttribute()] System.String? zone) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("defaultFarmId", defaultFarmId);
            queryParametersTemp.Add("defaultSslId", defaultSslId);
            queryParametersTemp.Add("port", port);
            queryParametersTemp.Add("zone", zone);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/tcp/frontend{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/tcp/frontend
        public Task<_ipLoadbalancing_frontendTcp.FrontendTcp> PostV1IpLoadbalancingServiceNameTcpFrontendAsync(string port, string serviceName, string zone, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? allowedSource, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? dedicatedIpfo, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? defaultFarmId, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? defaultSslId, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? deniedSource, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? disabled, [System.Runtime.InteropServices.OptionalAttribute()] System.String? displayName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? ssl) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("allowedSource", allowedSource);
            _body.Add("dedicatedIpfo", dedicatedIpfo);
            _body.Add("defaultFarmId", defaultFarmId);
            _body.Add("defaultSslId", defaultSslId);
            _body.Add("deniedSource", deniedSource);
            _body.Add("disabled", disabled);
            _body.Add("displayName", displayName);
            _body.Add("port", port);
            _body.Add("ssl", ssl);
            _body.Add("zone", zone);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/tcp/frontend";
            return this.SendAsync<_ipLoadbalancing_frontendTcp.FrontendTcp>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/tcp/frontend/{frontendId}
        public Task DeleteV1IpLoadbalancingServiceNameTcpFrontendFrontendIdAsync(long frontendId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/tcp/frontend/{frontendId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/tcp/frontend/{frontendId}
        public Task<_ipLoadbalancing_frontendTcp.FrontendTcp> GetV1IpLoadbalancingServiceNameTcpFrontendFrontendIdAsync(long frontendId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/tcp/frontend/{frontendId}";
            return this.SendAsync<_ipLoadbalancing_frontendTcp.FrontendTcp>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/tcp/frontend/{frontendId}
        public Task PutV1IpLoadbalancingServiceNameTcpFrontendFrontendIdAsync(_ipLoadbalancing_frontendTcp.FrontendTcp _body, long frontendId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/tcp/frontend/{frontendId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/tcp/route
        public Task<System.Int64[]> GetV1IpLoadbalancingServiceNameTcpRouteAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? frontendId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("frontendId", frontendId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/tcp/route{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/tcp/route
        public Task<_ipLoadbalancing_RouteTcp.RouteTcp> PostV1IpLoadbalancingServiceNameTcpRouteAsync(_ipLoadbalancing.RouteTcpAction action, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? displayName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? frontendId, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? weight) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("action", action);
            _body.Add("displayName", displayName);
            _body.Add("frontendId", frontendId);
            _body.Add("weight", weight);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/tcp/route";
            return this.SendAsync<_ipLoadbalancing_RouteTcp.RouteTcp>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/tcp/route/{routeId}
        public Task DeleteV1IpLoadbalancingServiceNameTcpRouteRouteIdAsync(long routeId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/tcp/route/{routeId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/tcp/route/{routeId}
        public Task<_ipLoadbalancing_RouteTcp.RouteTcp> GetV1IpLoadbalancingServiceNameTcpRouteRouteIdAsync(long routeId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/tcp/route/{routeId}";
            return this.SendAsync<_ipLoadbalancing_RouteTcp.RouteTcp>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/tcp/route/{routeId}
        public Task PutV1IpLoadbalancingServiceNameTcpRouteRouteIdAsync(_ipLoadbalancing_RouteTcp.RouteTcp _body, long routeId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/tcp/route/{routeId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule
        public Task<System.Int64[]> GetV1IpLoadbalancingServiceNameTcpRouteRouteIdRuleAsync(long routeId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule
        public Task<_ipLoadbalancing_RouteRule.RouteRule> PostV1IpLoadbalancingServiceNameTcpRouteRouteIdRuleAsync(string field, _ipLoadbalancing.RouteRuleMatchesEnum match, long routeId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? displayName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? negate, [System.Runtime.InteropServices.OptionalAttribute()] System.String? pattern, [System.Runtime.InteropServices.OptionalAttribute()] System.String? subField) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("displayName", displayName);
            _body.Add("field", field);
            _body.Add("match", match);
            _body.Add("negate", negate);
            _body.Add("pattern", pattern);
            _body.Add("subField", subField);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule";
            return this.SendAsync<_ipLoadbalancing_RouteRule.RouteRule>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule/{ruleId}
        public Task DeleteV1IpLoadbalancingServiceNameTcpRouteRouteIdRuleRuleIdAsync(long routeId, long ruleId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule/{ruleId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule/{ruleId}
        public Task<_ipLoadbalancing_RouteRule.RouteRule> GetV1IpLoadbalancingServiceNameTcpRouteRouteIdRuleRuleIdAsync(long routeId, long ruleId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule/{ruleId}";
            return this.SendAsync<_ipLoadbalancing_RouteRule.RouteRule>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule/{ruleId}
        public Task PutV1IpLoadbalancingServiceNameTcpRouteRouteIdRuleRuleIdAsync(_ipLoadbalancing_RouteRule.RouteRule _body, long routeId, long ruleId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule/{ruleId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/terminate
        public Task<System.String> PostV1IpLoadbalancingServiceNameTerminateAsync(string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/udp/farm
        public Task<System.Int64[]> GetV1IpLoadbalancingServiceNameUdpFarmAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? vrackNetworkId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? zone) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("vrackNetworkId", vrackNetworkId);
            queryParametersTemp.Add("zone", zone);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/udp/farm{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/udp/farm
        public Task<_ipLoadbalancing_backendUdp.BackendUdp> PostV1IpLoadbalancingServiceNameUdpFarmAsync(long port, string serviceName, string zone, [System.Runtime.InteropServices.OptionalAttribute()] System.String? displayName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? vrackNetworkId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("displayName", displayName);
            _body.Add("port", port);
            _body.Add("vrackNetworkId", vrackNetworkId);
            _body.Add("zone", zone);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/udp/farm";
            return this.SendAsync<_ipLoadbalancing_backendUdp.BackendUdp>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/udp/farm/{farmId}
        public Task DeleteV1IpLoadbalancingServiceNameUdpFarmFarmIdAsync(long farmId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/udp/farm/{farmId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/udp/farm/{farmId}
        public Task<_ipLoadbalancing_backendUdp.BackendUdp> GetV1IpLoadbalancingServiceNameUdpFarmFarmIdAsync(long farmId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/udp/farm/{farmId}";
            return this.SendAsync<_ipLoadbalancing_backendUdp.BackendUdp>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/udp/farm/{farmId}
        public Task PutV1IpLoadbalancingServiceNameUdpFarmFarmIdAsync(_ipLoadbalancing_backendUdp.BackendUdp _body, long farmId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/udp/farm/{farmId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server
        public Task<System.Int64[]> GetV1IpLoadbalancingServiceNameUdpFarmFarmIdServerAsync(long farmId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? address, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.BackendCustomerServerStatusEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("address", address);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server
        public Task<_ipLoadbalancing_backendUdpCustomerServer.BackendUDPServer> PostV1IpLoadbalancingServiceNameUdpFarmFarmIdServerAsync(string address, long farmId, string serviceName, _ipLoadbalancing.BackendCustomerServerStatusEnum status, [System.Runtime.InteropServices.OptionalAttribute()] System.String? displayName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? port) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("address", address);
            _body.Add("displayName", displayName);
            _body.Add("port", port);
            _body.Add("status", status);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server";
            return this.SendAsync<_ipLoadbalancing_backendUdpCustomerServer.BackendUDPServer>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server/{serverId}
        public Task DeleteV1IpLoadbalancingServiceNameUdpFarmFarmIdServerServerIdAsync(long farmId, long serverId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server/{serverId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server/{serverId}
        public Task<_ipLoadbalancing_backendUdpCustomerServer.BackendUDPServer> GetV1IpLoadbalancingServiceNameUdpFarmFarmIdServerServerIdAsync(long farmId, long serverId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server/{serverId}";
            return this.SendAsync<_ipLoadbalancing_backendUdpCustomerServer.BackendUDPServer>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server/{serverId}
        public Task PutV1IpLoadbalancingServiceNameUdpFarmFarmIdServerServerIdAsync(_ipLoadbalancing_backendUdpCustomerServer.BackendUDPServer _body, long farmId, long serverId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server/{serverId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/udp/frontend
        public Task<System.Int64[]> GetV1IpLoadbalancingServiceNameUdpFrontendAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? defaultFarmId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? port, [System.Runtime.InteropServices.OptionalAttribute()] System.String? zone) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("defaultFarmId", defaultFarmId);
            queryParametersTemp.Add("port", port);
            queryParametersTemp.Add("zone", zone);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/udp/frontend{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/udp/frontend
        public Task<_ipLoadbalancing_frontendUdp.FrontendUdp> PostV1IpLoadbalancingServiceNameUdpFrontendAsync(string port, string serviceName, string zone, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? dedicatedIpfo, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? defaultFarmId, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? disabled, [System.Runtime.InteropServices.OptionalAttribute()] System.String? displayName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("dedicatedIpfo", dedicatedIpfo);
            _body.Add("defaultFarmId", defaultFarmId);
            _body.Add("disabled", disabled);
            _body.Add("displayName", displayName);
            _body.Add("port", port);
            _body.Add("zone", zone);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/udp/frontend";
            return this.SendAsync<_ipLoadbalancing_frontendUdp.FrontendUdp>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/udp/frontend/{frontendId}
        public Task DeleteV1IpLoadbalancingServiceNameUdpFrontendFrontendIdAsync(long frontendId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/udp/frontend/{frontendId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/udp/frontend/{frontendId}
        public Task<_ipLoadbalancing_frontendUdp.FrontendUdp> GetV1IpLoadbalancingServiceNameUdpFrontendFrontendIdAsync(long frontendId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/udp/frontend/{frontendId}";
            return this.SendAsync<_ipLoadbalancing_frontendUdp.FrontendUdp>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/udp/frontend/{frontendId}
        public Task PutV1IpLoadbalancingServiceNameUdpFrontendFrontendIdAsync(_ipLoadbalancing_frontendUdp.FrontendUdp _body, long frontendId, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/udp/frontend/{frontendId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/vrack/network
        public Task<System.Int64[]> GetV1IpLoadbalancingServiceNameVrackNetworkAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? subnet, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? vlan) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("subnet", subnet);
            queryParametersTemp.Add("vlan", vlan);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/vrack/network{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/vrack/network
        public Task<_ipLoadbalancing_VrackNetwork.VrackNetwork> PostV1IpLoadbalancingServiceNameVrackNetworkAsync(string natIp, string serviceName, string subnet, [System.Runtime.InteropServices.OptionalAttribute()] System.String? displayName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64[]? farmId, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? vlan) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("displayName", displayName);
            _body.Add("farmId", farmId);
            _body.Add("natIp", natIp);
            _body.Add("subnet", subnet);
            _body.Add("vlan", vlan);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/vrack/network";
            return this.SendAsync<_ipLoadbalancing_VrackNetwork.VrackNetwork>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/vrack/network/{vrackNetworkId}
        public Task DeleteV1IpLoadbalancingServiceNameVrackNetworkVrackNetworkIdAsync(string serviceName, long vrackNetworkId) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/vrack/network/{vrackNetworkId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/vrack/network/{vrackNetworkId}
        public Task<_ipLoadbalancing_VrackNetwork.VrackNetwork> GetV1IpLoadbalancingServiceNameVrackNetworkVrackNetworkIdAsync(string serviceName, long vrackNetworkId) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/vrack/network/{vrackNetworkId}";
            return this.SendAsync<_ipLoadbalancing_VrackNetwork.VrackNetwork>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/vrack/network/{vrackNetworkId}
        public Task PutV1IpLoadbalancingServiceNameVrackNetworkVrackNetworkIdAsync(_ipLoadbalancing_VrackNetwork.VrackNetwork _body, string serviceName, long vrackNetworkId) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/vrack/network/{vrackNetworkId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/vrack/network/{vrackNetworkId}/updateFarmId
        public Task<_ipLoadbalancing_VrackNetwork.VrackNetwork> PostV1IpLoadbalancingServiceNameVrackNetworkVrackNetworkIdUpdateFarmIdAsync(long[] farmId, string serviceName, long vrackNetworkId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("farmId", farmId);
            string uri = $"/v1/ipLoadbalancing/{serviceName}/vrack/network/{vrackNetworkId}/updateFarmId";
            return this.SendAsync<_ipLoadbalancing_VrackNetwork.VrackNetwork>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/vrack/networkCreationRules
        public Task<_ipLoadbalancing.VrackNetworkCreationRules> GetV1IpLoadbalancingServiceNameVrackNetworkCreationRulesAsync(string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/vrack/networkCreationRules";
            return this.SendAsync<_ipLoadbalancing.VrackNetworkCreationRules>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/vrack/status
        public Task<_ipLoadbalancing.VrackInformation> GetV1IpLoadbalancingServiceNameVrackStatusAsync(string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/vrack/status";
            return this.SendAsync<_ipLoadbalancing.VrackInformation>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/zone
        public Task<System.String[]> GetV1IpLoadbalancingServiceNameZoneAsync(string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/zone";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/zone/{name}
        public Task<_ipLoadbalancing_Zone.Zone> GetV1IpLoadbalancingServiceNameZoneNameAsync(string name, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/zone/{name}";
            return this.SendAsync<_ipLoadbalancing_Zone.Zone>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/zone/{name}/cancelTermination
        public Task PostV1IpLoadbalancingServiceNameZoneNameCancelTerminationAsync(string name, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/zone/{name}/cancelTermination";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/ipLoadbalancing/{serviceName}/zone/{name}/terminate
        public Task PostV1IpLoadbalancingServiceNameZoneNameTerminateAsync(string name, string serviceName) {
            string uri = $"/v1/ipLoadbalancing/{serviceName}/zone/{name}/terminate";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/license/cloudLinux
        public Task<System.String[]> GetV1LicenseCloudLinuxAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/cloudLinux{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/cloudLinux/orderableVersions
        public Task<_license.CloudLinuxOrderConfiguration[]> GetV1LicenseCloudLinuxOrderableVersionsAsync(string ip) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ip", ip);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/cloudLinux/orderableVersions{queryParameters}";
            return this.SendAsync<_license.CloudLinuxOrderConfiguration[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/cloudLinux/{serviceName}
        public Task<_license_cloudLinux.CloudLinuxWithIAM> GetV1LicenseCloudLinuxServiceNameAsync(string serviceName) {
            string uri = $"/v1/license/cloudLinux/{serviceName}";
            return this.SendAsync<_license_cloudLinux.CloudLinuxWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/cloudLinux/{serviceName}/confirmTermination
        public Task<System.String> PostV1LicenseCloudLinuxServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] System.String? commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum? futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum? reason) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("commentary", commentary);
            _body.Add("futureUse", futureUse);
            _body.Add("reason", reason);
            _body.Add("token", token);
            string uri = $"/v1/license/cloudLinux/{serviceName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/license/cloudLinux/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1LicenseCloudLinuxServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/license/cloudLinux/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/cloudLinux/{serviceName}/serviceInfos
        public Task PutV1LicenseCloudLinuxServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/license/cloudLinux/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/license/cloudLinux/{serviceName}/tasks
        public Task<System.Int64[]> GetV1LicenseCloudLinuxServiceNameTasksAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.ActionType? action, [System.Runtime.InteropServices.OptionalAttribute()] _license.TaskStateEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("action", action);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/cloudLinux/{serviceName}/tasks{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/cloudLinux/{serviceName}/tasks/{taskId}
        public Task<_license.Task> GetV1LicenseCloudLinuxServiceNameTasksTaskIdAsync(string serviceName, long taskId) {
            string uri = $"/v1/license/cloudLinux/{serviceName}/tasks/{taskId}";
            return this.SendAsync<_license.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/cloudLinux/{serviceName}/terminate
        public Task<System.String> PostV1LicenseCloudLinuxServiceNameTerminateAsync(string serviceName) {
            string uri = $"/v1/license/cloudLinux/{serviceName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/license/cpanel
        public Task<System.String[]> GetV1LicenseCpanelAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/cpanel{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/cpanel/orderableVersions
        public Task<_license.CpanelOrderConfiguration[]> GetV1LicenseCpanelOrderableVersionsAsync(string ip) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ip", ip);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/cpanel/orderableVersions{queryParameters}";
            return this.SendAsync<_license.CpanelOrderConfiguration[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/cpanel/{serviceName}
        public Task<_license_cpanel.CpanelWithIAM> GetV1LicenseCpanelServiceNameAsync(string serviceName) {
            string uri = $"/v1/license/cpanel/{serviceName}";
            return this.SendAsync<_license_cpanel.CpanelWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/cpanel/{serviceName}
        public Task PutV1LicenseCpanelServiceNameAsync(_license_cpanel.Cpanel _body, string serviceName) {
            string uri = $"/v1/license/cpanel/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/license/cpanel/{serviceName}/allowedDestinationIp
        public Task<System.String[]> GetV1LicenseCpanelServiceNameAllowedDestinationIpAsync(string serviceName) {
            string uri = $"/v1/license/cpanel/{serviceName}/allowedDestinationIp";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/cpanel/{serviceName}/canLicenseBeMovedTo
        public Task<_license.ChangeIpStatus> GetV1LicenseCpanelServiceNameCanLicenseBeMovedToAsync(string destinationIp, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("destinationIp", destinationIp);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/cpanel/{serviceName}/canLicenseBeMovedTo{queryParameters}";
            return this.SendAsync<_license.ChangeIpStatus>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/cpanel/{serviceName}/changeIp
        public Task<_license.Task> PostV1LicenseCpanelServiceNameChangeIpAsync(string destinationIp, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("destinationIp", destinationIp);
            string uri = $"/v1/license/cpanel/{serviceName}/changeIp";
            return this.SendAsync<_license.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/license/cpanel/{serviceName}/confirmTermination
        public Task<System.String> PostV1LicenseCpanelServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] System.String? commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum? futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum? reason) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("commentary", commentary);
            _body.Add("futureUse", futureUse);
            _body.Add("reason", reason);
            _body.Add("token", token);
            string uri = $"/v1/license/cpanel/{serviceName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/license/cpanel/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1LicenseCpanelServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/license/cpanel/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/cpanel/{serviceName}/serviceInfos
        public Task PutV1LicenseCpanelServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/license/cpanel/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/license/cpanel/{serviceName}/tasks
        public Task<System.Int64[]> GetV1LicenseCpanelServiceNameTasksAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.ActionType? action, [System.Runtime.InteropServices.OptionalAttribute()] _license.TaskStateEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("action", action);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/cpanel/{serviceName}/tasks{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/cpanel/{serviceName}/tasks/{taskId}
        public Task<_license.Task> GetV1LicenseCpanelServiceNameTasksTaskIdAsync(string serviceName, long taskId) {
            string uri = $"/v1/license/cpanel/{serviceName}/tasks/{taskId}";
            return this.SendAsync<_license.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/cpanel/{serviceName}/terminate
        public Task<System.String> PostV1LicenseCpanelServiceNameTerminateAsync(string serviceName) {
            string uri = $"/v1/license/cpanel/{serviceName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/license/directadmin
        public Task<System.String[]> GetV1LicenseDirectadminAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/directadmin{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/directadmin/orderableVersions
        public Task<_license.DirectAdminOrderConfiguration[]> GetV1LicenseDirectadminOrderableVersionsAsync(string ip) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ip", ip);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/directadmin/orderableVersions{queryParameters}";
            return this.SendAsync<_license.DirectAdminOrderConfiguration[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/directadmin/{serviceName}
        public Task<_license_directadmin.DirectAdminWithIAM> GetV1LicenseDirectadminServiceNameAsync(string serviceName) {
            string uri = $"/v1/license/directadmin/{serviceName}";
            return this.SendAsync<_license_directadmin.DirectAdminWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/directadmin/{serviceName}
        public Task PutV1LicenseDirectadminServiceNameAsync(_license_directadmin.DirectAdmin _body, string serviceName) {
            string uri = $"/v1/license/directadmin/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/license/directadmin/{serviceName}/allowedDestinationIp
        public Task<System.String[]> GetV1LicenseDirectadminServiceNameAllowedDestinationIpAsync(string serviceName) {
            string uri = $"/v1/license/directadmin/{serviceName}/allowedDestinationIp";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/directadmin/{serviceName}/canLicenseBeMovedTo
        public Task<_license.ChangeIpStatus> GetV1LicenseDirectadminServiceNameCanLicenseBeMovedToAsync(string destinationIp, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("destinationIp", destinationIp);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/directadmin/{serviceName}/canLicenseBeMovedTo{queryParameters}";
            return this.SendAsync<_license.ChangeIpStatus>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/directadmin/{serviceName}/changeIp
        public Task<_license.Task> PostV1LicenseDirectadminServiceNameChangeIpAsync(string destinationIp, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("destinationIp", destinationIp);
            string uri = $"/v1/license/directadmin/{serviceName}/changeIp";
            return this.SendAsync<_license.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/license/directadmin/{serviceName}/changeOs
        public Task<_license.Task> PostV1LicenseDirectadminServiceNameChangeOsAsync(_license.DirectAdminOsEnum os, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("os", os);
            string uri = $"/v1/license/directadmin/{serviceName}/changeOs";
            return this.SendAsync<_license.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/license/directadmin/{serviceName}/confirmTermination
        public Task<System.String> PostV1LicenseDirectadminServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] System.String? commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum? futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum? reason) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("commentary", commentary);
            _body.Add("futureUse", futureUse);
            _body.Add("reason", reason);
            _body.Add("token", token);
            string uri = $"/v1/license/directadmin/{serviceName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/license/directadmin/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1LicenseDirectadminServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/license/directadmin/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/directadmin/{serviceName}/serviceInfos
        public Task PutV1LicenseDirectadminServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/license/directadmin/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/license/directadmin/{serviceName}/tasks
        public Task<System.Int64[]> GetV1LicenseDirectadminServiceNameTasksAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.ActionType? action, [System.Runtime.InteropServices.OptionalAttribute()] _license.TaskStateEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("action", action);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/directadmin/{serviceName}/tasks{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/directadmin/{serviceName}/tasks/{taskId}
        public Task<_license.Task> GetV1LicenseDirectadminServiceNameTasksTaskIdAsync(string serviceName, long taskId) {
            string uri = $"/v1/license/directadmin/{serviceName}/tasks/{taskId}";
            return this.SendAsync<_license.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/directadmin/{serviceName}/terminate
        public Task<System.String> PostV1LicenseDirectadminServiceNameTerminateAsync(string serviceName) {
            string uri = $"/v1/license/directadmin/{serviceName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/license/office
        public Task<System.String[]> GetV1LicenseOfficeAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/office{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/office/{serviceName}
        public Task<_license_office.OfficeTenantNativeWithIAM> GetV1LicenseOfficeServiceNameAsync(string serviceName) {
            string uri = $"/v1/license/office/{serviceName}";
            return this.SendAsync<_license_office.OfficeTenantNativeWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/office/{serviceName}
        public Task PutV1LicenseOfficeServiceNameAsync(_license_office.OfficeTenantNative _body, string serviceName) {
            string uri = $"/v1/license/office/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/license/office/{serviceName}/domain
        public Task<System.String[]> GetV1LicenseOfficeServiceNameDomainAsync(string serviceName) {
            string uri = $"/v1/license/office/{serviceName}/domain";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/office/{serviceName}/domain/{domainName}
        public Task<_license_office.DomainNative> GetV1LicenseOfficeServiceNameDomainDomainNameAsync(string domainName, string serviceName) {
            string uri = $"/v1/license/office/{serviceName}/domain/{domainName}";
            return this.SendAsync<_license_office.DomainNative>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/office/{serviceName}/pendingTask
        public Task<System.Int64[]> GetV1LicenseOfficeServiceNamePendingTaskAsync(string serviceName) {
            string uri = $"/v1/license/office/{serviceName}/pendingTask";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/office/{serviceName}/pendingTask/{id}
        public Task<_license_office.OfficeTaskNative> GetV1LicenseOfficeServiceNamePendingTaskIdAsync(long id, string serviceName) {
            string uri = $"/v1/license/office/{serviceName}/pendingTask/{id}";
            return this.SendAsync<_license_office.OfficeTaskNative>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/office/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1LicenseOfficeServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/license/office/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/office/{serviceName}/serviceInfos
        public Task PutV1LicenseOfficeServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/license/office/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/license/office/{serviceName}/usageStatistics
        public Task<_license_office.OfficeCurrentStatisticsNative[]> GetV1LicenseOfficeServiceNameUsageStatisticsAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? from, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? to) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("from", from);
            queryParametersTemp.Add("to", to);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/office/{serviceName}/usageStatistics{queryParameters}";
            return this.SendAsync<_license_office.OfficeCurrentStatisticsNative[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/office/{serviceName}/user
        public Task<System.String[]> GetV1LicenseOfficeServiceNameUserAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? activationEmail, [System.Runtime.InteropServices.OptionalAttribute()] System.String? firstName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? lastName, [System.Runtime.InteropServices.OptionalAttribute()] _license_office.LicenseEnum[]? licences) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("activationEmail", activationEmail);
            queryParametersTemp.Add("firstName", firstName);
            queryParametersTemp.Add("lastName", lastName);
            queryParametersTemp.Add("licences", licences);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/office/{serviceName}/user{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/office/{serviceName}/user
        public Task<_license_office.OfficeTaskNative> PostV1LicenseOfficeServiceNameUserAsync(_license_office.PostUserNative _body, string serviceName) {
            string uri = $"/v1/license/office/{serviceName}/user";
            return this.SendAsync<_license_office.OfficeTaskNative>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/license/office/{serviceName}/user/{activationEmail}
        public Task<_license_office.OfficeTaskNative> DeleteV1LicenseOfficeServiceNameUserActivationEmailAsync(string activationEmail, string serviceName) {
            string uri = $"/v1/license/office/{serviceName}/user/{activationEmail}";
            return this.SendAsync<_license_office.OfficeTaskNative>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/license/office/{serviceName}/user/{activationEmail}
        public Task<_license_office.OfficeUserNative> GetV1LicenseOfficeServiceNameUserActivationEmailAsync(string activationEmail, string serviceName) {
            string uri = $"/v1/license/office/{serviceName}/user/{activationEmail}";
            return this.SendAsync<_license_office.OfficeUserNative>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/office/{serviceName}/user/{activationEmail}
        public Task PutV1LicenseOfficeServiceNameUserActivationEmailAsync(_license_office.OfficeUserNativeUpdate _body, string activationEmail, string serviceName) {
            string uri = $"/v1/license/office/{serviceName}/user/{activationEmail}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/license/office/{serviceName}/user/{activationEmail}/changePassword
        public Task<_license_office.OfficeTaskNative> PostV1LicenseOfficeServiceNameUserActivationEmailChangePasswordAsync(_license_office.OfficeTenantPostChangePassword _body, string activationEmail, string serviceName) {
            string uri = $"/v1/license/office/{serviceName}/user/{activationEmail}/changePassword";
            return this.SendAsync<_license_office.OfficeTaskNative>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/license/officePrepaid
        public Task<System.String[]> GetV1LicenseOfficePrepaidAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/officePrepaid{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/officePrepaid/{serviceName}
        public Task<_license_officePrepaid.OfficeUserNativeWithIAM> GetV1LicenseOfficePrepaidServiceNameAsync(string serviceName) {
            string uri = $"/v1/license/officePrepaid/{serviceName}";
            return this.SendAsync<_license_officePrepaid.OfficeUserNativeWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/officePrepaid/{serviceName}
        public Task PutV1LicenseOfficePrepaidServiceNameAsync(_license_officePrepaid.PutOfficeUserNative _body, string serviceName) {
            string uri = $"/v1/license/officePrepaid/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/license/officePrepaid/{serviceName}/changePassword
        public Task<_license_officePrepaid.OfficeTaskNative> PostV1LicenseOfficePrepaidServiceNameChangePasswordAsync(_license_officePrepaid.OfficeTenantPostChangePassword _body, string serviceName) {
            string uri = $"/v1/license/officePrepaid/{serviceName}/changePassword";
            return this.SendAsync<_license_officePrepaid.OfficeTaskNative>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/license/officePrepaid/{serviceName}/confirmTermination
        public Task<System.String> PostV1LicenseOfficePrepaidServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] System.String? commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum? futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum? reason) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("commentary", commentary);
            _body.Add("futureUse", futureUse);
            _body.Add("reason", reason);
            _body.Add("token", token);
            string uri = $"/v1/license/officePrepaid/{serviceName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/license/officePrepaid/{serviceName}/parentTenant
        public Task<_license_officePrepaid.OfficeTenantNative> GetV1LicenseOfficePrepaidServiceNameParentTenantAsync(string serviceName) {
            string uri = $"/v1/license/officePrepaid/{serviceName}/parentTenant";
            return this.SendAsync<_license_officePrepaid.OfficeTenantNative>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/officePrepaid/{serviceName}/parentTenant
        public Task PutV1LicenseOfficePrepaidServiceNameParentTenantAsync(_license_officePrepaid.OfficeTenantPutParentTenant _body, string serviceName) {
            string uri = $"/v1/license/officePrepaid/{serviceName}/parentTenant";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/license/officePrepaid/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1LicenseOfficePrepaidServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/license/officePrepaid/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/officePrepaid/{serviceName}/serviceInfos
        public Task PutV1LicenseOfficePrepaidServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/license/officePrepaid/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/license/officePrepaid/{serviceName}/tenantPendingTask
        public Task<System.Int64[]> GetV1LicenseOfficePrepaidServiceNameTenantPendingTaskAsync(string serviceName) {
            string uri = $"/v1/license/officePrepaid/{serviceName}/tenantPendingTask";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/officePrepaid/{serviceName}/tenantPendingTask/{id}
        public Task<_license_officePrepaid.OfficeTaskNative> GetV1LicenseOfficePrepaidServiceNameTenantPendingTaskIdAsync(long id, string serviceName) {
            string uri = $"/v1/license/officePrepaid/{serviceName}/tenantPendingTask/{id}";
            return this.SendAsync<_license_officePrepaid.OfficeTaskNative>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/officePrepaid/{serviceName}/tenantUsageStatistics
        public Task<_license_officePrepaid.OfficeCurrentStatisticsNative[]> GetV1LicenseOfficePrepaidServiceNameTenantUsageStatisticsAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? from, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? to) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("from", from);
            queryParametersTemp.Add("to", to);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/officePrepaid/{serviceName}/tenantUsageStatistics{queryParameters}";
            return this.SendAsync<_license_officePrepaid.OfficeCurrentStatisticsNative[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/officePrepaid/{serviceName}/terminate
        public Task<System.String> PostV1LicenseOfficePrepaidServiceNameTerminateAsync(string serviceName) {
            string uri = $"/v1/license/officePrepaid/{serviceName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/license/officePrepaid/{serviceName}/unconfigure
        public Task<_license_officePrepaid.OfficeTaskNative> PostV1LicenseOfficePrepaidServiceNameUnconfigureAsync(string serviceName) {
            string uri = $"/v1/license/officePrepaid/{serviceName}/unconfigure";
            return this.SendAsync<_license_officePrepaid.OfficeTaskNative>("POST", uri, null, null, true);
        }
        
        // Path: /v1/license/plesk
        public Task<System.String[]> GetV1LicensePleskAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/plesk{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/plesk/orderableVersions
        public Task<_license.PleskOrderConfiguration[]> GetV1LicensePleskOrderableVersionsAsync(string ip) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ip", ip);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/plesk/orderableVersions{queryParameters}";
            return this.SendAsync<_license.PleskOrderConfiguration[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/plesk/{serviceName}
        public Task<_license_plesk.PleskWithIAM> GetV1LicensePleskServiceNameAsync(string serviceName) {
            string uri = $"/v1/license/plesk/{serviceName}";
            return this.SendAsync<_license_plesk.PleskWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/plesk/{serviceName}
        public Task PutV1LicensePleskServiceNameAsync(_license_plesk.Plesk _body, string serviceName) {
            string uri = $"/v1/license/plesk/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/license/plesk/{serviceName}/allowedDestinationIp
        public Task<System.String[]> GetV1LicensePleskServiceNameAllowedDestinationIpAsync(string serviceName) {
            string uri = $"/v1/license/plesk/{serviceName}/allowedDestinationIp";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/plesk/{serviceName}/canLicenseBeMovedTo
        public Task<_license.ChangeIpStatus> GetV1LicensePleskServiceNameCanLicenseBeMovedToAsync(string destinationIp, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("destinationIp", destinationIp);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/plesk/{serviceName}/canLicenseBeMovedTo{queryParameters}";
            return this.SendAsync<_license.ChangeIpStatus>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/plesk/{serviceName}/changeIp
        public Task<_license.Task> PostV1LicensePleskServiceNameChangeIpAsync(string destinationIp, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("destinationIp", destinationIp);
            string uri = $"/v1/license/plesk/{serviceName}/changeIp";
            return this.SendAsync<_license.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/license/plesk/{serviceName}/confirmTermination
        public Task<System.String> PostV1LicensePleskServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] System.String? commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum? futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum? reason) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("commentary", commentary);
            _body.Add("futureUse", futureUse);
            _body.Add("reason", reason);
            _body.Add("token", token);
            string uri = $"/v1/license/plesk/{serviceName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/license/plesk/{serviceName}/option
        public Task<_license.OptionLabel[]> GetV1LicensePleskServiceNameOptionAsync(string serviceName) {
            string uri = $"/v1/license/plesk/{serviceName}/option";
            return this.SendAsync<_license.OptionLabel[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/plesk/{serviceName}/option/{label}
        public Task<_license.Task> DeleteV1LicensePleskServiceNameOptionLabelAsync(_license.OptionLabel label, string serviceName) {
            string uri = $"/v1/license/plesk/{serviceName}/option/{label}";
            return this.SendAsync<_license.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/license/plesk/{serviceName}/option/{label}
        public Task<_license.Option> GetV1LicensePleskServiceNameOptionLabelAsync(_license.OptionLabel label, string serviceName) {
            string uri = $"/v1/license/plesk/{serviceName}/option/{label}";
            return this.SendAsync<_license.Option>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/plesk/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1LicensePleskServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/license/plesk/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/plesk/{serviceName}/serviceInfos
        public Task PutV1LicensePleskServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/license/plesk/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/license/plesk/{serviceName}/tasks
        public Task<System.Int64[]> GetV1LicensePleskServiceNameTasksAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.ActionType? action, [System.Runtime.InteropServices.OptionalAttribute()] _license.TaskStateEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("action", action);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/plesk/{serviceName}/tasks{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/plesk/{serviceName}/tasks/{taskId}
        public Task<_license.Task> GetV1LicensePleskServiceNameTasksTaskIdAsync(string serviceName, long taskId) {
            string uri = $"/v1/license/plesk/{serviceName}/tasks/{taskId}";
            return this.SendAsync<_license.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/plesk/{serviceName}/terminate
        public Task<System.String> PostV1LicensePleskServiceNameTerminateAsync(string serviceName) {
            string uri = $"/v1/license/plesk/{serviceName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/license/redhat
        public Task<System.String[]> GetV1LicenseRedhatAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/redhat{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/redhat/{serviceName}
        public Task<_license_redhat.RedHatWithIAM> GetV1LicenseRedhatServiceNameAsync(string serviceName) {
            string uri = $"/v1/license/redhat/{serviceName}";
            return this.SendAsync<_license_redhat.RedHatWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/redhat/{serviceName}
        public Task PutV1LicenseRedhatServiceNameAsync(_license_redhat.RedHat _body, string serviceName) {
            string uri = $"/v1/license/redhat/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/license/redhat/{serviceName}/confirmTermination
        public Task<System.String> PostV1LicenseRedhatServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] System.String? commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum? futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum? reason) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("commentary", commentary);
            _body.Add("futureUse", futureUse);
            _body.Add("reason", reason);
            _body.Add("token", token);
            string uri = $"/v1/license/redhat/{serviceName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/license/redhat/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1LicenseRedhatServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/license/redhat/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/redhat/{serviceName}/serviceInfos
        public Task PutV1LicenseRedhatServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/license/redhat/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/license/redhat/{serviceName}/tasks
        public Task<System.Int64[]> GetV1LicenseRedhatServiceNameTasksAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.ActionType? action, [System.Runtime.InteropServices.OptionalAttribute()] _license.TaskStateEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("action", action);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/redhat/{serviceName}/tasks{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/redhat/{serviceName}/tasks/{taskId}
        public Task<_license.Task> GetV1LicenseRedhatServiceNameTasksTaskIdAsync(string serviceName, long taskId) {
            string uri = $"/v1/license/redhat/{serviceName}/tasks/{taskId}";
            return this.SendAsync<_license.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/redhat/{serviceName}/terminate
        public Task<System.String> PostV1LicenseRedhatServiceNameTerminateAsync(string serviceName) {
            string uri = $"/v1/license/redhat/{serviceName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/license/sqlserver
        public Task<System.String[]> GetV1LicenseSqlserverAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/sqlserver{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/sqlserver/orderableVersions
        public Task<_license.SqlServerOrderConfiguration[]> GetV1LicenseSqlserverOrderableVersionsAsync(string ip) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ip", ip);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/sqlserver/orderableVersions{queryParameters}";
            return this.SendAsync<_license.SqlServerOrderConfiguration[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/sqlserver/{serviceName}
        public Task<_license_sqlserver.SqlServerWithIAM> GetV1LicenseSqlserverServiceNameAsync(string serviceName) {
            string uri = $"/v1/license/sqlserver/{serviceName}";
            return this.SendAsync<_license_sqlserver.SqlServerWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/sqlserver/{serviceName}/confirmTermination
        public Task<System.String> PostV1LicenseSqlserverServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] System.String? commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum? futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum? reason) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("commentary", commentary);
            _body.Add("futureUse", futureUse);
            _body.Add("reason", reason);
            _body.Add("token", token);
            string uri = $"/v1/license/sqlserver/{serviceName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/license/sqlserver/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1LicenseSqlserverServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/license/sqlserver/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/sqlserver/{serviceName}/serviceInfos
        public Task PutV1LicenseSqlserverServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/license/sqlserver/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/license/sqlserver/{serviceName}/tasks
        public Task<System.Int64[]> GetV1LicenseSqlserverServiceNameTasksAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.ActionType? action, [System.Runtime.InteropServices.OptionalAttribute()] _license.TaskStateEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("action", action);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/sqlserver/{serviceName}/tasks{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/sqlserver/{serviceName}/tasks/{taskId}
        public Task<_license.Task> GetV1LicenseSqlserverServiceNameTasksTaskIdAsync(string serviceName, long taskId) {
            string uri = $"/v1/license/sqlserver/{serviceName}/tasks/{taskId}";
            return this.SendAsync<_license.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/sqlserver/{serviceName}/terminate
        public Task<System.String> PostV1LicenseSqlserverServiceNameTerminateAsync(string serviceName) {
            string uri = $"/v1/license/sqlserver/{serviceName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/license/virtuozzo
        public Task<System.String[]> GetV1LicenseVirtuozzoAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/virtuozzo{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/virtuozzo/orderableVersions
        public Task<_license.VirtuozzoOrderConfiguration[]> GetV1LicenseVirtuozzoOrderableVersionsAsync(string ip) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ip", ip);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/virtuozzo/orderableVersions{queryParameters}";
            return this.SendAsync<_license.VirtuozzoOrderConfiguration[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/virtuozzo/{serviceName}
        public Task<_license_virtuozzo.VirtuozzoWithIAM> GetV1LicenseVirtuozzoServiceNameAsync(string serviceName) {
            string uri = $"/v1/license/virtuozzo/{serviceName}";
            return this.SendAsync<_license_virtuozzo.VirtuozzoWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/virtuozzo/{serviceName}
        public Task PutV1LicenseVirtuozzoServiceNameAsync(_license_virtuozzo.Virtuozzo _body, string serviceName) {
            string uri = $"/v1/license/virtuozzo/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/license/virtuozzo/{serviceName}/allowedDestinationIp
        public Task<System.String[]> GetV1LicenseVirtuozzoServiceNameAllowedDestinationIpAsync(string serviceName) {
            string uri = $"/v1/license/virtuozzo/{serviceName}/allowedDestinationIp";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/virtuozzo/{serviceName}/canLicenseBeMovedTo
        public Task<_license.ChangeIpStatus> GetV1LicenseVirtuozzoServiceNameCanLicenseBeMovedToAsync(string destinationIp, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("destinationIp", destinationIp);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/virtuozzo/{serviceName}/canLicenseBeMovedTo{queryParameters}";
            return this.SendAsync<_license.ChangeIpStatus>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/virtuozzo/{serviceName}/changeIp
        public Task<_license.Task> PostV1LicenseVirtuozzoServiceNameChangeIpAsync(string destinationIp, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("destinationIp", destinationIp);
            string uri = $"/v1/license/virtuozzo/{serviceName}/changeIp";
            return this.SendAsync<_license.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/license/virtuozzo/{serviceName}/confirmTermination
        public Task<System.String> PostV1LicenseVirtuozzoServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] System.String? commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum? futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum? reason) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("commentary", commentary);
            _body.Add("futureUse", futureUse);
            _body.Add("reason", reason);
            _body.Add("token", token);
            string uri = $"/v1/license/virtuozzo/{serviceName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/license/virtuozzo/{serviceName}/option
        public Task<_license.OptionLabel[]> GetV1LicenseVirtuozzoServiceNameOptionAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.OptionLabel? label) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("label", label);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/virtuozzo/{serviceName}/option{queryParameters}";
            return this.SendAsync<_license.OptionLabel[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/virtuozzo/{serviceName}/option/{label}
        public Task<_license.Task> DeleteV1LicenseVirtuozzoServiceNameOptionLabelAsync(_license.OptionLabel label, string serviceName) {
            string uri = $"/v1/license/virtuozzo/{serviceName}/option/{label}";
            return this.SendAsync<_license.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/license/virtuozzo/{serviceName}/option/{label}
        public Task<_license.Option> GetV1LicenseVirtuozzoServiceNameOptionLabelAsync(_license.OptionLabel label, string serviceName) {
            string uri = $"/v1/license/virtuozzo/{serviceName}/option/{label}";
            return this.SendAsync<_license.Option>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/virtuozzo/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1LicenseVirtuozzoServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/license/virtuozzo/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/virtuozzo/{serviceName}/serviceInfos
        public Task PutV1LicenseVirtuozzoServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/license/virtuozzo/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/license/virtuozzo/{serviceName}/tasks
        public Task<System.Int64[]> GetV1LicenseVirtuozzoServiceNameTasksAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.ActionType? action, [System.Runtime.InteropServices.OptionalAttribute()] _license.TaskStateEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("action", action);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/virtuozzo/{serviceName}/tasks{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/virtuozzo/{serviceName}/tasks/{taskId}
        public Task<_license.Task> GetV1LicenseVirtuozzoServiceNameTasksTaskIdAsync(string serviceName, long taskId) {
            string uri = $"/v1/license/virtuozzo/{serviceName}/tasks/{taskId}";
            return this.SendAsync<_license.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/virtuozzo/{serviceName}/terminate
        public Task<System.String> PostV1LicenseVirtuozzoServiceNameTerminateAsync(string serviceName) {
            string uri = $"/v1/license/virtuozzo/{serviceName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/license/windows
        public Task<System.String[]> GetV1LicenseWindowsAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/windows{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/windows/orderableVersions
        public Task<_license.WindowsOrderConfiguration[]> GetV1LicenseWindowsOrderableVersionsAsync(string ip) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ip", ip);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/windows/orderableVersions{queryParameters}";
            return this.SendAsync<_license.WindowsOrderConfiguration[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/windows/{serviceName}
        public Task<_license_windows.WindowsWithIAM> GetV1LicenseWindowsServiceNameAsync(string serviceName) {
            string uri = $"/v1/license/windows/{serviceName}";
            return this.SendAsync<_license_windows.WindowsWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/windows/{serviceName}
        public Task PutV1LicenseWindowsServiceNameAsync(_license_windows.Windows _body, string serviceName) {
            string uri = $"/v1/license/windows/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/license/windows/{serviceName}/confirmTermination
        public Task<System.String> PostV1LicenseWindowsServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] System.String? commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum? futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum? reason) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("commentary", commentary);
            _body.Add("futureUse", futureUse);
            _body.Add("reason", reason);
            _body.Add("token", token);
            string uri = $"/v1/license/windows/{serviceName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/license/windows/{serviceName}/option
        public Task<_license.OptionLabel[]> GetV1LicenseWindowsServiceNameOptionAsync(string serviceName) {
            string uri = $"/v1/license/windows/{serviceName}/option";
            return this.SendAsync<_license.OptionLabel[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/windows/{serviceName}/option/{label}
        public Task<_license.Task> DeleteV1LicenseWindowsServiceNameOptionLabelAsync(_license.OptionLabel label, string serviceName) {
            string uri = $"/v1/license/windows/{serviceName}/option/{label}";
            return this.SendAsync<_license.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/license/windows/{serviceName}/option/{label}
        public Task<_license.Option> GetV1LicenseWindowsServiceNameOptionLabelAsync(_license.OptionLabel label, string serviceName) {
            string uri = $"/v1/license/windows/{serviceName}/option/{label}";
            return this.SendAsync<_license.Option>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/windows/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1LicenseWindowsServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/license/windows/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/windows/{serviceName}/serviceInfos
        public Task PutV1LicenseWindowsServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/license/windows/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/license/windows/{serviceName}/sqlServer
        public Task<_license.Task> PostV1LicenseWindowsServiceNameSqlServerAsync(string licenseId, string serviceName, _license.WindowsSqlVersionEnum version) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("licenseId", licenseId);
            _body.Add("version", version);
            string uri = $"/v1/license/windows/{serviceName}/sqlServer";
            return this.SendAsync<_license.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/license/windows/{serviceName}/tasks
        public Task<System.Int64[]> GetV1LicenseWindowsServiceNameTasksAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.ActionType? action, [System.Runtime.InteropServices.OptionalAttribute()] _license.TaskStateEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("action", action);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/windows/{serviceName}/tasks{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/windows/{serviceName}/tasks/{taskId}
        public Task<_license.Task> GetV1LicenseWindowsServiceNameTasksTaskIdAsync(string serviceName, long taskId) {
            string uri = $"/v1/license/windows/{serviceName}/tasks/{taskId}";
            return this.SendAsync<_license.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/windows/{serviceName}/terminate
        public Task<System.String> PostV1LicenseWindowsServiceNameTerminateAsync(string serviceName) {
            string uri = $"/v1/license/windows/{serviceName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/license/worklight
        public Task<System.String[]> GetV1LicenseWorklightAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/worklight{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/worklight/orderableVersions
        public Task<_license.WorkLightOrderConfiguration[]> GetV1LicenseWorklightOrderableVersionsAsync(string ip) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ip", ip);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/worklight/orderableVersions{queryParameters}";
            return this.SendAsync<_license.WorkLightOrderConfiguration[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/worklight/{serviceName}
        public Task<_license_worklight.WorkLightWithIAM> GetV1LicenseWorklightServiceNameAsync(string serviceName) {
            string uri = $"/v1/license/worklight/{serviceName}";
            return this.SendAsync<_license_worklight.WorkLightWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/worklight/{serviceName}
        public Task PutV1LicenseWorklightServiceNameAsync(_license_worklight.WorkLight _body, string serviceName) {
            string uri = $"/v1/license/worklight/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/license/worklight/{serviceName}/allowedDestinationIp
        public Task<System.String[]> GetV1LicenseWorklightServiceNameAllowedDestinationIpAsync(string serviceName) {
            string uri = $"/v1/license/worklight/{serviceName}/allowedDestinationIp";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/worklight/{serviceName}/canLicenseBeMovedTo
        public Task<_license.ChangeIpStatus> GetV1LicenseWorklightServiceNameCanLicenseBeMovedToAsync(string destinationIp, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("destinationIp", destinationIp);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/worklight/{serviceName}/canLicenseBeMovedTo{queryParameters}";
            return this.SendAsync<_license.ChangeIpStatus>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/worklight/{serviceName}/changeIp
        public Task<_license.Task> PostV1LicenseWorklightServiceNameChangeIpAsync(string destinationIp, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("destinationIp", destinationIp);
            string uri = $"/v1/license/worklight/{serviceName}/changeIp";
            return this.SendAsync<_license.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/license/worklight/{serviceName}/confirmTermination
        public Task<System.String> PostV1LicenseWorklightServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] System.String? commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum? futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum? reason) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("commentary", commentary);
            _body.Add("futureUse", futureUse);
            _body.Add("reason", reason);
            _body.Add("token", token);
            string uri = $"/v1/license/worklight/{serviceName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/license/worklight/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1LicenseWorklightServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/license/worklight/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/worklight/{serviceName}/serviceInfos
        public Task PutV1LicenseWorklightServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/license/worklight/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/license/worklight/{serviceName}/tasks
        public Task<System.Int64[]> GetV1LicenseWorklightServiceNameTasksAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.ActionType? action, [System.Runtime.InteropServices.OptionalAttribute()] _license.TaskStateEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("action", action);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/license/worklight/{serviceName}/tasks{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/worklight/{serviceName}/tasks/{taskId}
        public Task<_license.Task> GetV1LicenseWorklightServiceNameTasksTaskIdAsync(string serviceName, long taskId) {
            string uri = $"/v1/license/worklight/{serviceName}/tasks/{taskId}";
            return this.SendAsync<_license.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/license/worklight/{serviceName}/terminate
        public Task<System.String> PostV1LicenseWorklightServiceNameTerminateAsync(string serviceName) {
            string uri = $"/v1/license/worklight/{serviceName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/me
        public Task<_nichandle.Nichandle> GetV1MeAsync() {
            string uri = $"/v1/me";
            return this.SendAsync<_nichandle.Nichandle>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me
        public Task PutV1MeAsync(_nichandle.Nichandle _body) {
            string uri = $"/v1/me";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/abuse
        public Task<System.String[]> GetV1MeAbuseAsync() {
            string uri = $"/v1/me/abuse";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/abuse/{id}
        public Task<_me_abuse.Abuse> GetV1MeAbuseIdAsync(string id) {
            string uri = $"/v1/me/abuse/{id}";
            return this.SendAsync<_me_abuse.Abuse>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/accessRestriction/backupCode
        public Task DeleteV1MeAccessRestrictionBackupCodeAsync() {
            string uri = $"/v1/me/accessRestriction/backupCode";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/accessRestriction/backupCode
        public Task<_nichandle_accessRestriction.SOTPAccount> GetV1MeAccessRestrictionBackupCodeAsync() {
            string uri = $"/v1/me/accessRestriction/backupCode";
            return this.SendAsync<_nichandle_accessRestriction.SOTPAccount>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/accessRestriction/backupCode
        public Task<_nichandle_accessRestriction.SOTPSecret> PostV1MeAccessRestrictionBackupCodeAsync() {
            string uri = $"/v1/me/accessRestriction/backupCode";
            return this.SendAsync<_nichandle_accessRestriction.SOTPSecret>("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/accessRestriction/backupCode/disable
        public Task PostV1MeAccessRestrictionBackupCodeDisableAsync(string code) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("code", code);
            string uri = $"/v1/me/accessRestriction/backupCode/disable";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/accessRestriction/backupCode/enable
        public Task PostV1MeAccessRestrictionBackupCodeEnableAsync(string code) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("code", code);
            string uri = $"/v1/me/accessRestriction/backupCode/enable";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/accessRestriction/backupCode/validate
        public Task<_nichandle_accessRestriction.SOTPValidate> PostV1MeAccessRestrictionBackupCodeValidateAsync(string code) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("code", code);
            string uri = $"/v1/me/accessRestriction/backupCode/validate";
            return this.SendAsync<_nichandle_accessRestriction.SOTPValidate>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/accessRestriction/developerMode
        public Task<_nichandle.DeveloperModeRestriction> GetV1MeAccessRestrictionDeveloperModeAsync() {
            string uri = $"/v1/me/accessRestriction/developerMode";
            return this.SendAsync<_nichandle.DeveloperModeRestriction>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/accessRestriction/developerMode
        public Task PutV1MeAccessRestrictionDeveloperModeAsync(_nichandle.DeveloperModeRestriction _body) {
            string uri = $"/v1/me/accessRestriction/developerMode";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/accessRestriction/ip
        public Task<System.Int64[]> GetV1MeAccessRestrictionIpAsync() {
            string uri = $"/v1/me/accessRestriction/ip";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/accessRestriction/ip
        public Task PostV1MeAccessRestrictionIpAsync(string ip, _nichandle_accessRestriction.IpRestrictionRuleEnum rule, bool warning) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("ip", ip);
            _body.Add("rule", rule);
            _body.Add("warning", warning);
            string uri = $"/v1/me/accessRestriction/ip";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/accessRestriction/ip/{id}
        public Task DeleteV1MeAccessRestrictionIpIdAsync(long id) {
            string uri = $"/v1/me/accessRestriction/ip/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/accessRestriction/ip/{id}
        public Task<_nichandle.IpRestriction> GetV1MeAccessRestrictionIpIdAsync(long id) {
            string uri = $"/v1/me/accessRestriction/ip/{id}";
            return this.SendAsync<_nichandle.IpRestriction>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/accessRestriction/ip/{id}
        public Task PutV1MeAccessRestrictionIpIdAsync(_nichandle.IpRestriction _body, long id) {
            string uri = $"/v1/me/accessRestriction/ip/{id}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/accessRestriction/ipDefaultRule
        public Task<_nichandle.IpRestrictionDefaultRule> GetV1MeAccessRestrictionIpDefaultRuleAsync() {
            string uri = $"/v1/me/accessRestriction/ipDefaultRule";
            return this.SendAsync<_nichandle.IpRestrictionDefaultRule>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/accessRestriction/ipDefaultRule
        public Task PutV1MeAccessRestrictionIpDefaultRuleAsync(_nichandle.IpRestrictionDefaultRule _body) {
            string uri = $"/v1/me/accessRestriction/ipDefaultRule";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/accessRestriction/sms
        public Task<System.Int64[]> GetV1MeAccessRestrictionSmsAsync() {
            string uri = $"/v1/me/accessRestriction/sms";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/accessRestriction/sms
        public Task<_nichandle_accessRestriction.SmsSecret> PostV1MeAccessRestrictionSmsAsync(string phone) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("phone", phone);
            string uri = $"/v1/me/accessRestriction/sms";
            return this.SendAsync<_nichandle_accessRestriction.SmsSecret>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/accessRestriction/sms/{id}
        public Task DeleteV1MeAccessRestrictionSmsIdAsync(long id) {
            string uri = $"/v1/me/accessRestriction/sms/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/accessRestriction/sms/{id}
        public Task<_nichandle_accessRestriction.SmsAccount> GetV1MeAccessRestrictionSmsIdAsync(long id) {
            string uri = $"/v1/me/accessRestriction/sms/{id}";
            return this.SendAsync<_nichandle_accessRestriction.SmsAccount>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/accessRestriction/sms/{id}
        public Task PutV1MeAccessRestrictionSmsIdAsync(_nichandle_accessRestriction.SmsAccount _body, long id) {
            string uri = $"/v1/me/accessRestriction/sms/{id}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/accessRestriction/sms/{id}/disable
        public Task PostV1MeAccessRestrictionSmsIdDisableAsync(string code, long id) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("code", code);
            string uri = $"/v1/me/accessRestriction/sms/{id}/disable";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/accessRestriction/sms/{id}/enable
        public Task PostV1MeAccessRestrictionSmsIdEnableAsync(string code, long id) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("code", code);
            string uri = $"/v1/me/accessRestriction/sms/{id}/enable";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/accessRestriction/sms/{id}/sendCode
        public Task<_nichandle_accessRestriction.SmsCode> PostV1MeAccessRestrictionSmsIdSendCodeAsync(long id) {
            string uri = $"/v1/me/accessRestriction/sms/{id}/sendCode";
            return this.SendAsync<_nichandle_accessRestriction.SmsCode>("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/accessRestriction/sms/{id}/validate
        public Task PostV1MeAccessRestrictionSmsIdValidateAsync(string code, long id) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("code", code);
            string uri = $"/v1/me/accessRestriction/sms/{id}/validate";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/accessRestriction/totp
        public Task<System.Int64[]> GetV1MeAccessRestrictionTotpAsync() {
            string uri = $"/v1/me/accessRestriction/totp";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/accessRestriction/totp
        public Task<_nichandle_accessRestriction.TOTPSecret> PostV1MeAccessRestrictionTotpAsync() {
            string uri = $"/v1/me/accessRestriction/totp";
            return this.SendAsync<_nichandle_accessRestriction.TOTPSecret>("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/accessRestriction/totp/{id}
        public Task DeleteV1MeAccessRestrictionTotpIdAsync(long id) {
            string uri = $"/v1/me/accessRestriction/totp/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/accessRestriction/totp/{id}
        public Task<_nichandle_accessRestriction.TOTPAccount> GetV1MeAccessRestrictionTotpIdAsync(long id) {
            string uri = $"/v1/me/accessRestriction/totp/{id}";
            return this.SendAsync<_nichandle_accessRestriction.TOTPAccount>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/accessRestriction/totp/{id}
        public Task PutV1MeAccessRestrictionTotpIdAsync(_nichandle_accessRestriction.TOTPAccount _body, long id) {
            string uri = $"/v1/me/accessRestriction/totp/{id}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/accessRestriction/totp/{id}/disable
        public Task PostV1MeAccessRestrictionTotpIdDisableAsync(string code, long id) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("code", code);
            string uri = $"/v1/me/accessRestriction/totp/{id}/disable";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/accessRestriction/totp/{id}/enable
        public Task PostV1MeAccessRestrictionTotpIdEnableAsync(string code, long id) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("code", code);
            string uri = $"/v1/me/accessRestriction/totp/{id}/enable";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/accessRestriction/totp/{id}/validate
        public Task PostV1MeAccessRestrictionTotpIdValidateAsync(string code, long id) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("code", code);
            string uri = $"/v1/me/accessRestriction/totp/{id}/validate";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/accessRestriction/u2f
        public Task<System.Int64[]> GetV1MeAccessRestrictionU2fAsync() {
            string uri = $"/v1/me/accessRestriction/u2f";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/accessRestriction/u2f
        public Task<_nichandle_accessRestriction.U2FRegisterChallenge> PostV1MeAccessRestrictionU2fAsync() {
            string uri = $"/v1/me/accessRestriction/u2f";
            return this.SendAsync<_nichandle_accessRestriction.U2FRegisterChallenge>("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/accessRestriction/u2f/{id}
        public Task DeleteV1MeAccessRestrictionU2fIdAsync(long id) {
            string uri = $"/v1/me/accessRestriction/u2f/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/accessRestriction/u2f/{id}
        public Task<_nichandle_accessRestriction.U2FAccount> GetV1MeAccessRestrictionU2fIdAsync(long id) {
            string uri = $"/v1/me/accessRestriction/u2f/{id}";
            return this.SendAsync<_nichandle_accessRestriction.U2FAccount>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/accessRestriction/u2f/{id}
        public Task PutV1MeAccessRestrictionU2fIdAsync(_nichandle_accessRestriction.U2FAccount _body, long id) {
            string uri = $"/v1/me/accessRestriction/u2f/{id}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/accessRestriction/u2f/{id}/disable
        public Task PostV1MeAccessRestrictionU2fIdDisableAsync(long id) {
            string uri = $"/v1/me/accessRestriction/u2f/{id}/disable";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/accessRestriction/u2f/{id}/enable
        public Task PostV1MeAccessRestrictionU2fIdEnableAsync(long id) {
            string uri = $"/v1/me/accessRestriction/u2f/{id}/enable";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/accessRestriction/u2f/{id}/validate
        public Task PostV1MeAccessRestrictionU2fIdValidateAsync(string attestationObject, string clientDataJSON, long id, string rawId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("attestationObject", attestationObject);
            _body.Add("clientDataJSON", clientDataJSON);
            _body.Add("rawId", rawId);
            string uri = $"/v1/me/accessRestriction/u2f/{id}/validate";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/agreements
        public Task<System.Int64[]> GetV1MeAgreementsAsync([System.Runtime.InteropServices.OptionalAttribute()] _agreements.AgreementStateEnum? agreed, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? contractId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("agreed", agreed);
            queryParametersTemp.Add("contractId", contractId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/agreements{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/agreements/{id}
        public Task<_agreements.ContractAgreement> GetV1MeAgreementsIdAsync(long id) {
            string uri = $"/v1/me/agreements/{id}";
            return this.SendAsync<_agreements.ContractAgreement>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/agreements/{id}/accept
        public Task<System.String> PostV1MeAgreementsIdAcceptAsync(long id) {
            string uri = $"/v1/me/agreements/{id}/accept";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/agreements/{id}/contract
        public Task<_agreements.Contract> GetV1MeAgreementsIdContractAsync(long id) {
            string uri = $"/v1/me/agreements/{id}/contract";
            return this.SendAsync<_agreements.Contract>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/api/application
        public Task<System.Int64[]> GetV1MeApiApplicationAsync() {
            string uri = $"/v1/me/api/application";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/api/application/{applicationId}
        public Task DeleteV1MeApiApplicationApplicationIdAsync(long applicationId) {
            string uri = $"/v1/me/api/application/{applicationId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/api/application/{applicationId}
        public Task<_auth.ApiApplication> GetV1MeApiApplicationApplicationIdAsync(long applicationId) {
            string uri = $"/v1/me/api/application/{applicationId}";
            return this.SendAsync<_auth.ApiApplication>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/api/credential
        public Task<System.Int64[]> GetV1MeApiCredentialAsync([System.Runtime.InteropServices.OptionalAttribute()] System.Int64? applicationId, [System.Runtime.InteropServices.OptionalAttribute()] _auth.CredentialStateEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("applicationId", applicationId);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/api/credential{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/api/credential/{credentialId}
        public Task DeleteV1MeApiCredentialCredentialIdAsync(long credentialId) {
            string uri = $"/v1/me/api/credential/{credentialId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/api/credential/{credentialId}
        public Task<_auth.ApiCredential> GetV1MeApiCredentialCredentialIdAsync(long credentialId) {
            string uri = $"/v1/me/api/credential/{credentialId}";
            return this.SendAsync<_auth.ApiCredential>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/api/credential/{credentialId}
        public Task PutV1MeApiCredentialCredentialIdAsync(_auth.ApiCredential _body, long credentialId) {
            string uri = $"/v1/me/api/credential/{credentialId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/api/credential/{credentialId}/application
        public Task<_auth.ApiApplication> GetV1MeApiCredentialCredentialIdApplicationAsync(long credentialId) {
            string uri = $"/v1/me/api/credential/{credentialId}/application";
            return this.SendAsync<_auth.ApiApplication>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/api/log/kind
        public Task<System.String[]> GetV1MeApiLogKindAsync() {
            string uri = $"/v1/me/api/log/kind";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/api/log/kind/{name}
        public Task<_dbaas_logs.LogKind> GetV1MeApiLogKindNameAsync(string name) {
            string uri = $"/v1/me/api/log/kind/{name}";
            return this.SendAsync<_dbaas_logs.LogKind>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/api/log/subscription
        public Task<System.Guid[]> GetV1MeApiLogSubscriptionAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? kind) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("kind", kind);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/api/log/subscription{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/api/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostV1MeApiLogSubscriptionAsync(_dbaas_logs.LogSubscriptionCreation _body) {
            string uri = $"/v1/me/api/log/subscription";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/api/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteV1MeApiLogSubscriptionSubscriptionIdAsync(System.Guid subscriptionId) {
            string uri = $"/v1/me/api/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/api/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetV1MeApiLogSubscriptionSubscriptionIdAsync(System.Guid subscriptionId) {
            string uri = $"/v1/me/api/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscription>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/api/log/url
        public Task<_dbaas_logs.TemporaryLogsLink> PostV1MeApiLogUrlAsync(_dbaas_logs.LogUrlCreation _body) {
            string uri = $"/v1/me/api/log/url";
            return this.SendAsync<_dbaas_logs.TemporaryLogsLink>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/api/logs/self
        public Task<System.Int64[]> GetV1MeApiLogsSelfAsync() {
            string uri = $"/v1/me/api/logs/self";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/api/logs/self/{logId}
        public Task<_api.Log> GetV1MeApiLogsSelfLogIdAsync(long logId) {
            string uri = $"/v1/me/api/logs/self/{logId}";
            return this.SendAsync<_api.Log>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/api/logs/services
        public Task<System.Int64[]> GetV1MeApiLogsServicesAsync() {
            string uri = $"/v1/me/api/logs/services";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/api/logs/services/{logId}
        public Task<_api.Log> GetV1MeApiLogsServicesLogIdAsync(long logId) {
            string uri = $"/v1/me/api/logs/services/{logId}";
            return this.SendAsync<_api.Log>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/api/oauth2/client
        public Task<System.String[]> GetV1MeApiOauth2ClientAsync() {
            string uri = $"/v1/me/api/oauth2/client";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/api/oauth2/client
        public Task<_oauth2.clientSecret> PostV1MeApiOauth2ClientAsync(_oauth2.clientRequest _body) {
            string uri = $"/v1/me/api/oauth2/client";
            return this.SendAsync<_oauth2.clientSecret>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/api/oauth2/client/{clientId}
        public Task DeleteV1MeApiOauth2ClientClientIdAsync(string clientId) {
            string uri = $"/v1/me/api/oauth2/client/{clientId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/api/oauth2/client/{clientId}
        public Task<_oauth2.client> GetV1MeApiOauth2ClientClientIdAsync(string clientId) {
            string uri = $"/v1/me/api/oauth2/client/{clientId}";
            return this.SendAsync<_oauth2.client>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/api/oauth2/client/{clientId}
        public Task PutV1MeApiOauth2ClientClientIdAsync(_oauth2.client _body, string clientId) {
            string uri = $"/v1/me/api/oauth2/client/{clientId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/autorenew
        public Task<_nichandle.NicAutorenewInfos> GetV1MeAutorenewAsync() {
            string uri = $"/v1/me/autorenew";
            return this.SendAsync<_nichandle.NicAutorenewInfos>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/autorenew
        public Task PostV1MeAutorenewAsync(long renewDay) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("renewDay", renewDay);
            string uri = $"/v1/me/autorenew";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/autorenew
        public Task PutV1MeAutorenewAsync(_nichandle.NicAutorenewInfos _body) {
            string uri = $"/v1/me/autorenew";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/availableAutomaticPaymentMeans
        public Task<_billing.AutomaticPaymentMean> GetV1MeAvailableAutomaticPaymentMeansAsync() {
            string uri = $"/v1/me/availableAutomaticPaymentMeans";
            return this.SendAsync<_billing.AutomaticPaymentMean>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/bill
        public Task<System.String[]> GetV1MeBillAsync([System.Runtime.InteropServices.OptionalAttribute()] _billing.CategoryEnum? category, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? dateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? dateTo, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? orderId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("category", category);
            queryParametersTemp.Add("date.from", dateFrom);
            queryParametersTemp.Add("date.to", dateTo);
            queryParametersTemp.Add("orderId", orderId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/bill{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/bill/export
        public Task PostV1MeBillExportAsync(_billing.ArchiveTypeEnum archiveType, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? endDate, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? ids, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? startDate) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("archiveType", archiveType);
            _body.Add("endDate", endDate);
            _body.Add("ids", ids);
            _body.Add("startDate", startDate);
            string uri = $"/v1/me/bill/export";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/bill/{billId}
        public Task<_billing.Bill> GetV1MeBillBillIdAsync(string billId) {
            string uri = $"/v1/me/bill/{billId}";
            return this.SendAsync<_billing.Bill>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/bill/{billId}/debt
        public Task<_debt.Debt> GetV1MeBillBillIdDebtAsync(string billId) {
            string uri = $"/v1/me/bill/{billId}/debt";
            return this.SendAsync<_debt.Debt>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/bill/{billId}/debt/operation
        public Task<System.Int64[]> GetV1MeBillBillIdDebtOperationAsync(string billId, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? depositOrderId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("depositOrderId", depositOrderId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/bill/{billId}/debt/operation{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/bill/{billId}/debt/operation/{operationId}
        public Task<_debt.Operation> GetV1MeBillBillIdDebtOperationOperationIdAsync(string billId, long operationId) {
            string uri = $"/v1/me/bill/{billId}/debt/operation/{operationId}";
            return this.SendAsync<_debt.Operation>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/bill/{billId}/debt/operation/{operationId}/associatedObject
        public Task<_debt_entry.AssociatedObject> GetV1MeBillBillIdDebtOperationOperationIdAssociatedObjectAsync(string billId, long operationId) {
            string uri = $"/v1/me/bill/{billId}/debt/operation/{operationId}/associatedObject";
            return this.SendAsync<_debt_entry.AssociatedObject>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/bill/{billId}/debt/pay
        public Task<_billing.Order> PostV1MeBillBillIdDebtPayAsync(string billId) {
            string uri = $"/v1/me/bill/{billId}/debt/pay";
            return this.SendAsync<_billing.Order>("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/bill/{billId}/details
        public Task<System.String[]> GetV1MeBillBillIdDetailsAsync(string billId) {
            string uri = $"/v1/me/bill/{billId}/details";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/bill/{billId}/details/{billDetailId}
        public Task<_billing.BillDetail> GetV1MeBillBillIdDetailsBillDetailIdAsync(string billDetailId, string billId) {
            string uri = $"/v1/me/bill/{billId}/details/{billDetailId}";
            return this.SendAsync<_billing.BillDetail>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/bill/{billId}/payment
        public Task<_billing.Payment> GetV1MeBillBillIdPaymentAsync(string billId) {
            string uri = $"/v1/me/bill/{billId}/payment";
            return this.SendAsync<_billing.Payment>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/billing/group
        public Task<System.Int64[]> GetV1MeBillingGroupAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? name, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? serviceId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("name", name);
            queryParametersTemp.Add("serviceId", serviceId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/billing/group{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/billing/group
        public Task<_me_billing_group.BillingGroup> PostV1MeBillingGroupAsync(_me_billing_group.BillingGroup _body) {
            string uri = $"/v1/me/billing/group";
            return this.SendAsync<_me_billing_group.BillingGroup>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/billing/group/{groupId}
        public Task DeleteV1MeBillingGroupGroupIdAsync(long groupId) {
            string uri = $"/v1/me/billing/group/{groupId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/billing/group/{groupId}
        public Task<_me_billing_group.BillingGroup> GetV1MeBillingGroupGroupIdAsync(long groupId) {
            string uri = $"/v1/me/billing/group/{groupId}";
            return this.SendAsync<_me_billing_group.BillingGroup>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/billing/group/{groupId}
        public Task PutV1MeBillingGroupGroupIdAsync(_me_billing_group.BillingGroup _body, long groupId) {
            string uri = $"/v1/me/billing/group/{groupId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/billing/group/{groupId}/service
        public Task<System.Int64[]> GetV1MeBillingGroupGroupIdServiceAsync(long groupId) {
            string uri = $"/v1/me/billing/group/{groupId}/service";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/billing/group/{groupId}/service
        public Task<_me_billing_group.Service> PostV1MeBillingGroupGroupIdServiceAsync(_me_billing_group_service.Create _body, long groupId) {
            string uri = $"/v1/me/billing/group/{groupId}/service";
            return this.SendAsync<_me_billing_group.Service>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/billing/group/{groupId}/service/{serviceId}
        public Task DeleteV1MeBillingGroupGroupIdServiceServiceIdAsync(long groupId, long serviceId) {
            string uri = $"/v1/me/billing/group/{groupId}/service/{serviceId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/billing/group/{groupId}/service/{serviceId}
        public Task<_me_billing_group.Service> GetV1MeBillingGroupGroupIdServiceServiceIdAsync(long groupId, long serviceId) {
            string uri = $"/v1/me/billing/group/{groupId}/service/{serviceId}";
            return this.SendAsync<_me_billing_group.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/billing/invoicesByPostalMail
        public Task<System.Boolean> GetV1MeBillingInvoicesByPostalMailAsync() {
            string uri = $"/v1/me/billing/invoicesByPostalMail";
            return this.SendAsync<bool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/billing/invoicesByPostalMail
        public Task PostV1MeBillingInvoicesByPostalMailAsync(bool enable) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("enable", enable);
            string uri = $"/v1/me/billing/invoicesByPostalMail";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/billing/purchaseOrder
        public Task<System.Int64[]> GetV1MeBillingPurchaseOrderAsync([System.Runtime.InteropServices.OptionalAttribute()] System.Int64? billingGroupId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("billingGroupId", billingGroupId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/billing/purchaseOrder{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/billing/purchaseOrder
        public Task<_me_billing_purchaseOrder.PurchaseOrder> PostV1MeBillingPurchaseOrderAsync(_me_billing_purchaseOrder.Creation _body) {
            string uri = $"/v1/me/billing/purchaseOrder";
            return this.SendAsync<_me_billing_purchaseOrder.PurchaseOrder>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/billing/purchaseOrder/{id}
        public Task DeleteV1MeBillingPurchaseOrderIdAsync(long id) {
            string uri = $"/v1/me/billing/purchaseOrder/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/billing/purchaseOrder/{id}
        public Task<_me_billing_purchaseOrder.PurchaseOrder> GetV1MeBillingPurchaseOrderIdAsync(long id) {
            string uri = $"/v1/me/billing/purchaseOrder/{id}";
            return this.SendAsync<_me_billing_purchaseOrder.PurchaseOrder>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/billing/purchaseOrder/{id}
        public Task PutV1MeBillingPurchaseOrderIdAsync(_me_billing_purchaseOrder.Update _body, long id) {
            string uri = $"/v1/me/billing/purchaseOrder/{id}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/billing/report/consumption
        public Task<System.String[]> GetV1MeBillingReportConsumptionAsync() {
            string uri = $"/v1/me/billing/report/consumption";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/billing/report/consumption
        public Task<_me_billing_report_consumption.CreationResponse> PostV1MeBillingReportConsumptionAsync(_me_billing_report_consumption.CreationRequest _body) {
            string uri = $"/v1/me/billing/report/consumption";
            return this.SendAsync<_me_billing_report_consumption.CreationResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/billing/report/consumption/{taskId}
        public Task<_me_billing_report.Consumption> GetV1MeBillingReportConsumptionTaskIdAsync(string taskId) {
            string uri = $"/v1/me/billing/report/consumption/{taskId}";
            return this.SendAsync<_me_billing_report.Consumption>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/bringYourOwnIp/token
        public Task<System.String> GetV1MeBringYourOwnIpTokenAsync(_ip.CampusEnum campus) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("campus", campus);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/bringYourOwnIp/token{queryParameters}";
            return this.SendAsync<string>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/carbonCalculator/hasInvoice
        public Task<_carbonCalculator.HasInvoiceResponse> GetV1MeCarbonCalculatorHasInvoiceAsync([System.Runtime.InteropServices.OptionalAttribute()] System.DateOnly? date) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("date", date);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/carbonCalculator/hasInvoice{queryParameters}";
            return this.SendAsync<_carbonCalculator.HasInvoiceResponse>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/carbonCalculator/task
        public Task<_carbonCalculator.Task[]> GetV1MeCarbonCalculatorTaskAsync() {
            string uri = $"/v1/me/carbonCalculator/task";
            return this.SendAsync<_carbonCalculator.Task[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/carbonCalculator/task
        public Task<_carbonCalculator.CalculationResponse> PostV1MeCarbonCalculatorTaskAsync(_carbonCalculator.CalculationRequest _body) {
            string uri = $"/v1/me/carbonCalculator/task";
            return this.SendAsync<_carbonCalculator.CalculationResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/carbonCalculator/task/{taskID}
        public Task<_carbonCalculator.Task> GetV1MeCarbonCalculatorTaskTaskIDAsync(string taskID) {
            string uri = $"/v1/me/carbonCalculator/task/{taskID}";
            return this.SendAsync<_carbonCalculator.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/certificates
        public Task<System.String[]> GetV1MeCertificatesAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? name) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("name", name);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/certificates{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/changeEmail
        public Task<_nichandle_emailChange.Task> PostV1MeChangeEmailAsync(string newEmail) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("newEmail", newEmail);
            string uri = $"/v1/me/changeEmail";
            return this.SendAsync<_nichandle_emailChange.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/changePassword
        public Task PostV1MeChangePasswordAsync() {
            string uri = $"/v1/me/changePassword";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/consent
        public Task<_me_consent.Campaign[]> GetV1MeConsentAsync() {
            string uri = $"/v1/me/consent";
            return this.SendAsync<_me_consent.Campaign[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/consent/{campaignName}
        public Task<_me_consent.Campaign> GetV1MeConsentCampaignNameAsync(string campaignName) {
            string uri = $"/v1/me/consent/{campaignName}";
            return this.SendAsync<_me_consent.Campaign>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/consent/{campaignName}/decision
        public Task<_me_consent.Consent> GetV1MeConsentCampaignNameDecisionAsync(string campaignName) {
            string uri = $"/v1/me/consent/{campaignName}/decision";
            return this.SendAsync<_me_consent.Consent>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/consent/{campaignName}/decision
        public Task PutV1MeConsentCampaignNameDecisionAsync(_me_consent.Decision _body, string campaignName) {
            string uri = $"/v1/me/consent/{campaignName}/decision";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/consumption/usage/current
        public Task<_me_consumption.Transaction[]> GetV1MeConsumptionUsageCurrentAsync() {
            string uri = $"/v1/me/consumption/usage/current";
            return this.SendAsync<_me_consumption.Transaction[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/consumption/usage/forecast
        public Task<_me_consumption.Transaction[]> GetV1MeConsumptionUsageForecastAsync() {
            string uri = $"/v1/me/consumption/usage/forecast";
            return this.SendAsync<_me_consumption.Transaction[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/consumption/usage/history
        public Task<_me_consumption.Transaction[]> GetV1MeConsumptionUsageHistoryAsync(System.DateTime beginDate, System.DateTime endDate) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("beginDate", beginDate);
            queryParametersTemp.Add("endDate", endDate);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/consumption/usage/history{queryParameters}";
            return this.SendAsync<_me_consumption.Transaction[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/contact
        public Task<System.Int64[]> GetV1MeContactAsync() {
            string uri = $"/v1/me/contact";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/contact
        public Task<_me_contact.Contact> PostV1MeContactAsync(_me_contact.Contact _body) {
            string uri = $"/v1/me/contact";
            return this.SendAsync<_me_contact.Contact>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/contact/{contactId}
        public Task<_me_contact.Contact> GetV1MeContactContactIdAsync(long contactId) {
            string uri = $"/v1/me/contact/{contactId}";
            return this.SendAsync<_me_contact.Contact>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/contact/{contactId}
        public Task<_me_contact.Contact> PutV1MeContactContactIdAsync(_me_contact.Contact _body, long contactId) {
            string uri = $"/v1/me/contact/{contactId}";
            return this.SendAsync<_me_contact.Contact>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/contact/{contactId}/fields
        public Task<_me_contact.FieldInformation[]> GetV1MeContactContactIdFieldsAsync(long contactId) {
            string uri = $"/v1/me/contact/{contactId}/fields";
            return this.SendAsync<_me_contact.FieldInformation[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/credit/balance
        public Task<System.String[]> GetV1MeCreditBalanceAsync([System.Runtime.InteropServices.OptionalAttribute()] _me_credit_balance.TypeEnum? type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/credit/balance{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/credit/balance/{balanceName}
        public Task<_me_credit.Balance> GetV1MeCreditBalanceBalanceNameAsync(string balanceName) {
            string uri = $"/v1/me/credit/balance/{balanceName}";
            return this.SendAsync<_me_credit.Balance>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/credit/balance/{balanceName}/movement
        public Task<System.Int64[]> GetV1MeCreditBalanceBalanceNameMovementAsync(string balanceName) {
            string uri = $"/v1/me/credit/balance/{balanceName}/movement";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/credit/balance/{balanceName}/movement/{movementId}
        public Task<_me_credit_balance.Movement> GetV1MeCreditBalanceBalanceNameMovementMovementIdAsync(string balanceName, long movementId) {
            string uri = $"/v1/me/credit/balance/{balanceName}/movement/{movementId}";
            return this.SendAsync<_me_credit_balance.Movement>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/credit/code
        public Task<_me_credit_balance.Movement> PostV1MeCreditCodeAsync(_me_credit_code.Redeem _body) {
            string uri = $"/v1/me/credit/code";
            return this.SendAsync<_me_credit_balance.Movement>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/debtAccount
        public Task<_debt.Balance> GetV1MeDebtAccountAsync() {
            string uri = $"/v1/me/debtAccount";
            return this.SendAsync<_debt.Balance>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/debtAccount/debt
        public Task<System.Int64[]> GetV1MeDebtAccountDebtAsync() {
            string uri = $"/v1/me/debtAccount/debt";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/debtAccount/debt/{debtId}
        public Task<_debt.Debt> GetV1MeDebtAccountDebtDebtIdAsync(long debtId) {
            string uri = $"/v1/me/debtAccount/debt/{debtId}";
            return this.SendAsync<_debt.Debt>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/debtAccount/debt/{debtId}/operation
        public Task<System.Int64[]> GetV1MeDebtAccountDebtDebtIdOperationAsync(long debtId, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? depositOrderId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("depositOrderId", depositOrderId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/debtAccount/debt/{debtId}/operation{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/debtAccount/debt/{debtId}/operation/{operationId}
        public Task<_debt.Operation> GetV1MeDebtAccountDebtDebtIdOperationOperationIdAsync(long debtId, long operationId) {
            string uri = $"/v1/me/debtAccount/debt/{debtId}/operation/{operationId}";
            return this.SendAsync<_debt.Operation>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/debtAccount/debt/{debtId}/operation/{operationId}/associatedObject
        public Task<_debt_entry.AssociatedObject> GetV1MeDebtAccountDebtDebtIdOperationOperationIdAssociatedObjectAsync(long debtId, long operationId) {
            string uri = $"/v1/me/debtAccount/debt/{debtId}/operation/{operationId}/associatedObject";
            return this.SendAsync<_debt_entry.AssociatedObject>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/debtAccount/debt/{debtId}/pay
        public Task<_billing.Order> PostV1MeDebtAccountDebtDebtIdPayAsync(long debtId) {
            string uri = $"/v1/me/debtAccount/debt/{debtId}/pay";
            return this.SendAsync<_billing.Order>("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/debtAccount/pay
        public Task<_billing.Order> PostV1MeDebtAccountPayAsync() {
            string uri = $"/v1/me/debtAccount/pay";
            return this.SendAsync<_billing.Order>("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/deposit
        public Task<System.String[]> GetV1MeDepositAsync([System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? dateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? dateTo, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? orderId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("date.from", dateFrom);
            queryParametersTemp.Add("date.to", dateTo);
            queryParametersTemp.Add("orderId", orderId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/deposit{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/deposit/{depositId}
        public Task<_billing.Deposit> GetV1MeDepositDepositIdAsync(string depositId) {
            string uri = $"/v1/me/deposit/{depositId}";
            return this.SendAsync<_billing.Deposit>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/deposit/{depositId}/details
        public Task<System.String[]> GetV1MeDepositDepositIdDetailsAsync(string depositId) {
            string uri = $"/v1/me/deposit/{depositId}/details";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/deposit/{depositId}/details/{depositDetailId}
        public Task<_billing.DepositDetail> GetV1MeDepositDepositIdDetailsDepositDetailIdAsync(string depositDetailId, string depositId) {
            string uri = $"/v1/me/deposit/{depositId}/details/{depositDetailId}";
            return this.SendAsync<_billing.DepositDetail>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/deposit/{depositId}/paidBills
        public Task<System.String[]> GetV1MeDepositDepositIdPaidBillsAsync(string depositId) {
            string uri = $"/v1/me/deposit/{depositId}/paidBills";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/deposit/{depositId}/paidBills/{billId}
        public Task<_billing.Bill> GetV1MeDepositDepositIdPaidBillsBillIdAsync(string billId, string depositId) {
            string uri = $"/v1/me/deposit/{depositId}/paidBills/{billId}";
            return this.SendAsync<_billing.Bill>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/deposit/{depositId}/paidBills/{billId}/debt
        public Task<_debt.Debt> GetV1MeDepositDepositIdPaidBillsBillIdDebtAsync(string billId, string depositId) {
            string uri = $"/v1/me/deposit/{depositId}/paidBills/{billId}/debt";
            return this.SendAsync<_debt.Debt>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/deposit/{depositId}/paidBills/{billId}/debt/operation
        public Task<System.Int64[]> GetV1MeDepositDepositIdPaidBillsBillIdDebtOperationAsync(string billId, string depositId, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? depositOrderId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("depositOrderId", depositOrderId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/deposit/{depositId}/paidBills/{billId}/debt/operation{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/deposit/{depositId}/paidBills/{billId}/debt/operation/{operationId}
        public Task<_debt.Operation> GetV1MeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAsync(string billId, string depositId, long operationId) {
            string uri = $"/v1/me/deposit/{depositId}/paidBills/{billId}/debt/operation/{operationId}";
            return this.SendAsync<_debt.Operation>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/deposit/{depositId}/paidBills/{billId}/debt/operation/{operationId}/associatedObject
        public Task<_debt_entry.AssociatedObject> GetV1MeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAssociatedObjectAsync(string billId, string depositId, long operationId) {
            string uri = $"/v1/me/deposit/{depositId}/paidBills/{billId}/debt/operation/{operationId}/associatedObject";
            return this.SendAsync<_debt_entry.AssociatedObject>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/deposit/{depositId}/paidBills/{billId}/debt/pay
        public Task<_billing.Order> PostV1MeDepositDepositIdPaidBillsBillIdDebtPayAsync(string billId, string depositId) {
            string uri = $"/v1/me/deposit/{depositId}/paidBills/{billId}/debt/pay";
            return this.SendAsync<_billing.Order>("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/deposit/{depositId}/paidBills/{billId}/details
        public Task<System.String[]> GetV1MeDepositDepositIdPaidBillsBillIdDetailsAsync(string billId, string depositId) {
            string uri = $"/v1/me/deposit/{depositId}/paidBills/{billId}/details";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/deposit/{depositId}/paidBills/{billId}/details/{billDetailId}
        public Task<_billing.BillDetail> GetV1MeDepositDepositIdPaidBillsBillIdDetailsBillDetailIdAsync(string billDetailId, string billId, string depositId) {
            string uri = $"/v1/me/deposit/{depositId}/paidBills/{billId}/details/{billDetailId}";
            return this.SendAsync<_billing.BillDetail>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/deposit/{depositId}/paidBills/{billId}/payment
        public Task<_billing.Payment> GetV1MeDepositDepositIdPaidBillsBillIdPaymentAsync(string billId, string depositId) {
            string uri = $"/v1/me/deposit/{depositId}/paidBills/{billId}/payment";
            return this.SendAsync<_billing.Payment>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/deposit/{depositId}/payment
        public Task<_billing.Payment> GetV1MeDepositDepositIdPaymentAsync(string depositId) {
            string uri = $"/v1/me/deposit/{depositId}/payment";
            return this.SendAsync<_billing.Payment>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/document
        public Task<System.Guid[]> GetV1MeDocumentAsync() {
            string uri = $"/v1/me/document";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/document
        public Task<_nichandle_document.Document> PostV1MeDocumentAsync(string name, [System.Runtime.InteropServices.OptionalAttribute()] _complexType.SafeKeyValue<string>? tags) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("name", name);
            _body.Add("tags", tags);
            string uri = $"/v1/me/document";
            return this.SendAsync<_nichandle_document.Document>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/document/cors
        public Task PostV1MeDocumentCorsAsync(string origin) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("origin", origin);
            string uri = $"/v1/me/document/cors";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/document/{id}
        public Task DeleteV1MeDocumentIdAsync(System.Guid id) {
            string uri = $"/v1/me/document/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/document/{id}
        public Task<_nichandle_document.Document> GetV1MeDocumentIdAsync(System.Guid id) {
            string uri = $"/v1/me/document/{id}";
            return this.SendAsync<_nichandle_document.Document>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/document/{id}
        public Task PutV1MeDocumentIdAsync(_nichandle_document.Document _body, System.Guid id) {
            string uri = $"/v1/me/document/{id}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/fax/customDomains
        public Task<System.Int64[]> GetV1MeFaxCustomDomainsAsync() {
            string uri = $"/v1/me/fax/customDomains";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/fax/customDomains
        public Task<_telephony.MailDomain2Service> PostV1MeFaxCustomDomainsAsync(string domain) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("domain", domain);
            string uri = $"/v1/me/fax/customDomains";
            return this.SendAsync<_telephony.MailDomain2Service>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/fax/customDomains/{id}
        public Task DeleteV1MeFaxCustomDomainsIdAsync(long id) {
            string uri = $"/v1/me/fax/customDomains/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/fax/customDomains/{id}
        public Task<_telephony.MailDomain2Service> GetV1MeFaxCustomDomainsIdAsync(long id) {
            string uri = $"/v1/me/fax/customDomains/{id}";
            return this.SendAsync<_telephony.MailDomain2Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/fidelityAccount
        public Task<_billing.FidelityAccount> GetV1MeFidelityAccountAsync() {
            string uri = $"/v1/me/fidelityAccount";
            return this.SendAsync<_billing.FidelityAccount>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/fidelityAccount
        public Task PutV1MeFidelityAccountAsync(_billing.FidelityAccount _body) {
            string uri = $"/v1/me/fidelityAccount";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/fidelityAccount/creditOrder
        public Task<_billing.Order> PostV1MeFidelityAccountCreditOrderAsync(long amount) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("amount", amount);
            string uri = $"/v1/me/fidelityAccount/creditOrder";
            return this.SendAsync<_billing.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/fidelityAccount/movements
        public Task<System.Int64[]> GetV1MeFidelityAccountMovementsAsync([System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? dateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? dateTo) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("date.from", dateFrom);
            queryParametersTemp.Add("date.to", dateTo);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/fidelityAccount/movements{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/fidelityAccount/movements/{movementId}
        public Task<_billing.FidelityMovement> GetV1MeFidelityAccountMovementsMovementIdAsync(long movementId) {
            string uri = $"/v1/me/fidelityAccount/movements/{movementId}";
            return this.SendAsync<_billing.FidelityMovement>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/geolocation
        public Task<_me_geolocation.ContinentCountryLocation> PostV1MeGeolocationAsync() {
            string uri = $"/v1/me/geolocation";
            return this.SendAsync<_me_geolocation.ContinentCountryLocation>("POST", uri, null, null, false);
        }
        
        // Path: /v1/me/identity/group
        public Task<System.String[]> GetV1MeIdentityGroupAsync() {
            string uri = $"/v1/me/identity/group";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/identity/group
        public Task<_auth.Group> PostV1MeIdentityGroupAsync(_auth.GroupRequest _body) {
            string uri = $"/v1/me/identity/group";
            return this.SendAsync<_auth.Group>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/identity/group/{group}
        public Task DeleteV1MeIdentityGroupGroupAsync(string group) {
            string uri = $"/v1/me/identity/group/{group}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/identity/group/{group}
        public Task<_auth.Group> GetV1MeIdentityGroupGroupAsync(string group) {
            string uri = $"/v1/me/identity/group/{group}";
            return this.SendAsync<_auth.Group>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/identity/group/{group}
        public Task PutV1MeIdentityGroupGroupAsync(_auth.Group _body, string group) {
            string uri = $"/v1/me/identity/group/{group}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/identity/provider
        public Task DeleteV1MeIdentityProviderAsync() {
            string uri = $"/v1/me/identity/provider";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/identity/provider
        public Task<_auth.Provider> GetV1MeIdentityProviderAsync() {
            string uri = $"/v1/me/identity/provider";
            return this.SendAsync<_auth.Provider>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/identity/provider
        public Task<_auth.Provider> PostV1MeIdentityProviderAsync(_auth.ProviderRequest _body) {
            string uri = $"/v1/me/identity/provider";
            return this.SendAsync<_auth.Provider>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/identity/provider
        public Task PutV1MeIdentityProviderAsync(_auth.Provider _body) {
            string uri = $"/v1/me/identity/provider";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/identity/user
        public Task<System.String[]> GetV1MeIdentityUserAsync() {
            string uri = $"/v1/me/identity/user";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/identity/user
        public Task PostV1MeIdentityUserAsync(_auth.UserRequest _body) {
            string uri = $"/v1/me/identity/user";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/identity/user/{user}
        public Task DeleteV1MeIdentityUserUserAsync(string user) {
            string uri = $"/v1/me/identity/user/{user}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/identity/user/{user}
        public Task<_auth.User> GetV1MeIdentityUserUserAsync(string user) {
            string uri = $"/v1/me/identity/user/{user}";
            return this.SendAsync<_auth.User>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/identity/user/{user}
        public Task PutV1MeIdentityUserUserAsync(_auth.User _body, string user) {
            string uri = $"/v1/me/identity/user/{user}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/identity/user/{user}/disable
        public Task PostV1MeIdentityUserUserDisableAsync(string user) {
            string uri = $"/v1/me/identity/user/{user}/disable";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/identity/user/{user}/enable
        public Task PostV1MeIdentityUserUserEnableAsync(string user) {
            string uri = $"/v1/me/identity/user/{user}/enable";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/incident/sbg/migrateServices
        public Task<_me_incident.ServiceMigration[]> GetV1MeIncidentSbgMigrateServicesAsync() {
            string uri = $"/v1/me/incident/sbg/migrateServices";
            return this.SendAsync<_me_incident.ServiceMigration[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/incident/sbg/migrateServices
        public Task<_me_incident.Order> PostV1MeIncidentSbgMigrateServicesAsync(_me_incident.MigrateServices _body) {
            string uri = $"/v1/me/incident/sbg/migrateServices";
            return this.SendAsync<_me_incident.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/insight
        public Task<_me_insight.Access> GetV1MeInsightAsync() {
            string uri = $"/v1/me/insight";
            return this.SendAsync<_me_insight.Access>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/installationTemplate
        public Task<System.String[]> GetV1MeInstallationTemplateAsync() {
            string uri = $"/v1/me/installationTemplate";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/installationTemplate
        public Task PostV1MeInstallationTemplateAsync(string baseTemplateName, string name) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("baseTemplateName", baseTemplateName);
            _body.Add("name", name);
            string uri = $"/v1/me/installationTemplate";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/installationTemplate/{templateName}
        public Task DeleteV1MeInstallationTemplateTemplateNameAsync(string templateName) {
            string uri = $"/v1/me/installationTemplate/{templateName}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/installationTemplate/{templateName}
        public Task<_dedicated_installationTemplate.Templates> GetV1MeInstallationTemplateTemplateNameAsync(string templateName) {
            string uri = $"/v1/me/installationTemplate/{templateName}";
            return this.SendAsync<_dedicated_installationTemplate.Templates>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/installationTemplate/{templateName}
        public Task PutV1MeInstallationTemplateTemplateNameAsync(_dedicated_installationTemplate.Templates _body, string templateName) {
            string uri = $"/v1/me/installationTemplate/{templateName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/installationTemplate/{templateName}/checkIntegrity
        public Task PostV1MeInstallationTemplateTemplateNameCheckIntegrityAsync(string templateName) {
            string uri = $"/v1/me/installationTemplate/{templateName}/checkIntegrity";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/installationTemplate/{templateName}/partitionScheme
        public Task<System.String[]> GetV1MeInstallationTemplateTemplateNamePartitionSchemeAsync(string templateName) {
            string uri = $"/v1/me/installationTemplate/{templateName}/partitionScheme";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/installationTemplate/{templateName}/partitionScheme
        public Task PostV1MeInstallationTemplateTemplateNamePartitionSchemeAsync(string name, long priority, string templateName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("name", name);
            _body.Add("priority", priority);
            string uri = $"/v1/me/installationTemplate/{templateName}/partitionScheme";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/installationTemplate/{templateName}/partitionScheme/{schemeName}
        public Task DeleteV1MeInstallationTemplateTemplateNamePartitionSchemeSchemeNameAsync(string schemeName, string templateName) {
            string uri = $"/v1/me/installationTemplate/{templateName}/partitionScheme/{schemeName}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/installationTemplate/{templateName}/partitionScheme/{schemeName}
        public Task<_dedicated_installationTemplate.templatePartitioningSchemes> GetV1MeInstallationTemplateTemplateNamePartitionSchemeSchemeNameAsync(string schemeName, string templateName) {
            string uri = $"/v1/me/installationTemplate/{templateName}/partitionScheme/{schemeName}";
            return this.SendAsync<_dedicated_installationTemplate.templatePartitioningSchemes>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/installationTemplate/{templateName}/partitionScheme/{schemeName}
        public Task PutV1MeInstallationTemplateTemplateNamePartitionSchemeSchemeNameAsync(_dedicated_installationTemplate.templatePartitioningSchemes _body, string schemeName, string templateName) {
            string uri = $"/v1/me/installationTemplate/{templateName}/partitionScheme/{schemeName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid
        public Task<System.String[]> GetV1MeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidAsync(string schemeName, string templateName) {
            string uri = $"/v1/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid
        public Task PostV1MeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidAsync(string[] disks, _dedicated.TemplateOsHardwareRaidEnum mode, string name, string schemeName, long step, string templateName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("disks", disks);
            _body.Add("mode", mode);
            _body.Add("name", name);
            _body.Add("step", step);
            string uri = $"/v1/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid/{name}
        public Task DeleteV1MeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameAsync(string name, string schemeName, string templateName) {
            string uri = $"/v1/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid/{name}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid/{name}
        public Task<_dedicated_installationTemplate.hardwareRaid> GetV1MeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameAsync(string name, string schemeName, string templateName) {
            string uri = $"/v1/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid/{name}";
            return this.SendAsync<_dedicated_installationTemplate.hardwareRaid>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid/{name}
        public Task PutV1MeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameAsync(_dedicated_installationTemplate.hardwareRaid _body, string name, string schemeName, string templateName) {
            string uri = $"/v1/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid/{name}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition
        public Task<System.String[]> GetV1MeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionAsync(string schemeName, string templateName) {
            string uri = $"/v1/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition
        public Task PostV1MeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionAsync(_dedicated_server.FileSystemEnum filesystem, string mountpoint, string schemeName, long size, long step, string templateName, _dedicated.TemplatePartitionTypeEnum type, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_server.PartitionRaidEnum? raid, [System.Runtime.InteropServices.OptionalAttribute()] System.String? volumeName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("filesystem", filesystem);
            _body.Add("mountpoint", mountpoint);
            _body.Add("raid", raid);
            _body.Add("size", size);
            _body.Add("step", step);
            _body.Add("type", type);
            _body.Add("volumeName", volumeName);
            string uri = $"/v1/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition/{mountpoint}
        public Task DeleteV1MeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointAsync(string mountpoint, string schemeName, string templateName) {
            string uri = $"/v1/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition/{mountpoint}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition/{mountpoint}
        public Task<_dedicated_installationTemplate.templatePartitions> GetV1MeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointAsync(string mountpoint, string schemeName, string templateName) {
            string uri = $"/v1/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition/{mountpoint}";
            return this.SendAsync<_dedicated_installationTemplate.templatePartitions>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition/{mountpoint}
        public Task PutV1MeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointAsync(_dedicated_installationTemplate.templatePartitions _body, string mountpoint, string schemeName, string templateName) {
            string uri = $"/v1/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition/{mountpoint}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/ipOrganisation
        public Task<System.String[]> GetV1MeIpOrganisationAsync() {
            string uri = $"/v1/me/ipOrganisation";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/ipOrganisation
        public Task PostV1MeIpOrganisationAsync(string abuse_mailbox, string address, string city, _nichandle.CountryEnum country, string firstname, string lastname, string phone, _nichandle.IpRegistryEnum registry, [System.Runtime.InteropServices.OptionalAttribute()] System.String? state, [System.Runtime.InteropServices.OptionalAttribute()] System.String? zip) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("abuse_mailbox", abuse_mailbox);
            _body.Add("address", address);
            _body.Add("city", city);
            _body.Add("country", country);
            _body.Add("firstname", firstname);
            _body.Add("lastname", lastname);
            _body.Add("phone", phone);
            _body.Add("registry", registry);
            _body.Add("state", state);
            _body.Add("zip", zip);
            string uri = $"/v1/me/ipOrganisation";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/ipOrganisation/{organisationId}
        public Task DeleteV1MeIpOrganisationOrganisationIdAsync(string organisationId) {
            string uri = $"/v1/me/ipOrganisation/{organisationId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/ipOrganisation/{organisationId}
        public Task<_nichandle.Ipv4Org> GetV1MeIpOrganisationOrganisationIdAsync(string organisationId) {
            string uri = $"/v1/me/ipOrganisation/{organisationId}";
            return this.SendAsync<_nichandle.Ipv4Org>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/ipOrganisation/{organisationId}
        public Task PutV1MeIpOrganisationOrganisationIdAsync(_nichandle.Ipv4Org _body, string organisationId) {
            string uri = $"/v1/me/ipOrganisation/{organisationId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/logs/audit
        public Task<_audit.Log[]> GetV1MeLogsAuditAsync() {
            string uri = $"/v1/me/logs/audit";
            return this.SendAsync<_audit.Log[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/logs/audit/forward
        public Task<_audit_log.ForwardResponse> PostV1MeLogsAuditForwardAsync(_audit_log.ForwardRequest _body) {
            string uri = $"/v1/me/logs/audit/forward";
            return this.SendAsync<_audit_log.ForwardResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/logs/audit/log/kind
        public Task<System.String[]> GetV1MeLogsAuditLogKindAsync() {
            string uri = $"/v1/me/logs/audit/log/kind";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/logs/audit/log/kind/{name}
        public Task<_dbaas_logs.LogKind> GetV1MeLogsAuditLogKindNameAsync(string name) {
            string uri = $"/v1/me/logs/audit/log/kind/{name}";
            return this.SendAsync<_dbaas_logs.LogKind>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/logs/audit/log/subscription
        public Task<System.Guid[]> GetV1MeLogsAuditLogSubscriptionAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? kind) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("kind", kind);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/logs/audit/log/subscription{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/logs/audit/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostV1MeLogsAuditLogSubscriptionAsync(_dbaas_logs.LogSubscriptionCreation _body) {
            string uri = $"/v1/me/logs/audit/log/subscription";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/logs/audit/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteV1MeLogsAuditLogSubscriptionSubscriptionIdAsync(System.Guid subscriptionId) {
            string uri = $"/v1/me/logs/audit/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/logs/audit/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetV1MeLogsAuditLogSubscriptionSubscriptionIdAsync(System.Guid subscriptionId) {
            string uri = $"/v1/me/logs/audit/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscription>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/logs/audit/log/url
        public Task<_dbaas_logs.TemporaryLogsLink> PostV1MeLogsAuditLogUrlAsync(_dbaas_logs.LogUrlCreation _body) {
            string uri = $"/v1/me/logs/audit/log/url";
            return this.SendAsync<_dbaas_logs.TemporaryLogsLink>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/mailingList/availableLists
        public Task<System.String[]> GetV1MeMailingListAvailableListsAsync() {
            string uri = $"/v1/me/mailingList/availableLists";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/mailingList/subscribe
        public Task PostV1MeMailingListSubscribeAsync(string email, string mailingList) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("email", email);
            _body.Add("mailingList", mailingList);
            string uri = $"/v1/me/mailingList/subscribe";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/marketing
        public Task<_me_marketing.Consent> GetV1MeMarketingAsync() {
            string uri = $"/v1/me/marketing";
            return this.SendAsync<_me_marketing.Consent>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/marketing
        public Task<_me_marketing.Consent> PutV1MeMarketingAsync(_me_marketing.Consent _body) {
            string uri = $"/v1/me/marketing";
            return this.SendAsync<_me_marketing.Consent>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/migration
        public Task<System.Int64[]> GetV1MeMigrationAsync() {
            string uri = $"/v1/me/migration";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/migration/{migrationId}
        public Task<_me.Migration> GetV1MeMigrationMigrationIdAsync(long migrationId) {
            string uri = $"/v1/me/migration/{migrationId}";
            return this.SendAsync<_me.Migration>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/migration/{migrationId}/contract
        public Task<System.Int64[]> GetV1MeMigrationMigrationIdContractAsync(long migrationId) {
            string uri = $"/v1/me/migration/{migrationId}/contract";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/migration/{migrationId}/contract/{contractId}
        public Task<_me_migration.Contract> GetV1MeMigrationMigrationIdContractContractIdAsync(long contractId, long migrationId) {
            string uri = $"/v1/me/migration/{migrationId}/contract/{contractId}";
            return this.SendAsync<_me_migration.Contract>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/migration/{migrationId}/contract/{contractId}/accept
        public Task<_me_agreements.ContractAgreement> PostV1MeMigrationMigrationIdContractContractIdAcceptAsync(long contractId, long migrationId) {
            string uri = $"/v1/me/migration/{migrationId}/contract/{contractId}/accept";
            return this.SendAsync<_me_agreements.ContractAgreement>("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/migration/{migrationId}/contract/{contractId}/agreement
        public Task<_me_agreements.ContractAgreement> GetV1MeMigrationMigrationIdContractContractIdAgreementAsync(long contractId, long migrationId) {
            string uri = $"/v1/me/migration/{migrationId}/contract/{contractId}/agreement";
            return this.SendAsync<_me_agreements.ContractAgreement>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/notification/email/history
        public Task<System.Int64[]> GetV1MeNotificationEmailHistoryAsync() {
            string uri = $"/v1/me/notification/email/history";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/notification/email/history/{id}
        public Task<_nichandle.EmailNotification> GetV1MeNotificationEmailHistoryIdAsync(long id) {
            string uri = $"/v1/me/notification/email/history/{id}";
            return this.SendAsync<_nichandle.EmailNotification>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/order
        public Task<System.Int64[]> GetV1MeOrderAsync([System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? dateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? dateTo) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("date.from", dateFrom);
            queryParametersTemp.Add("date.to", dateTo);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/order{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/order/{orderId}
        public Task<_billing.Order> GetV1MeOrderOrderIdAsync(long orderId) {
            string uri = $"/v1/me/order/{orderId}";
            return this.SendAsync<_billing.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/order/{orderId}/associatedObject
        public Task<_billing_order.AssociatedObject> GetV1MeOrderOrderIdAssociatedObjectAsync(long orderId) {
            string uri = $"/v1/me/order/{orderId}/associatedObject";
            return this.SendAsync<_billing_order.AssociatedObject>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/order/{orderId}/availableRegisteredPaymentMean
        public Task<_billing_order.RegisteredPaymentMean[]> GetV1MeOrderOrderIdAvailableRegisteredPaymentMeanAsync(long orderId) {
            string uri = $"/v1/me/order/{orderId}/availableRegisteredPaymentMean";
            return this.SendAsync<_billing_order.RegisteredPaymentMean[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/order/{orderId}/balance
        public Task<System.String[]> GetV1MeOrderOrderIdBalanceAsync(long orderId) {
            string uri = $"/v1/me/order/{orderId}/balance";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/order/{orderId}/balance
        public Task<_billing.CreditBalance> PostV1MeOrderOrderIdBalanceAsync(string balanceName, long orderId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("balanceName", balanceName);
            string uri = $"/v1/me/order/{orderId}/balance";
            return this.SendAsync<_billing.CreditBalance>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/order/{orderId}/balance/{balanceName}
        public Task DeleteV1MeOrderOrderIdBalanceBalanceNameAsync(string balanceName, long orderId) {
            string uri = $"/v1/me/order/{orderId}/balance/{balanceName}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/order/{orderId}/balance/{balanceName}
        public Task<_billing.CreditBalance> GetV1MeOrderOrderIdBalanceBalanceNameAsync(string balanceName, long orderId) {
            string uri = $"/v1/me/order/{orderId}/balance/{balanceName}";
            return this.SendAsync<_billing.CreditBalance>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/order/{orderId}/consumption/details
        public Task<_billing_order.ConsumptionDetails> GetV1MeOrderOrderIdConsumptionDetailsAsync(_consumption.ConsumptionExportFormatsEnum fileFormat, long orderId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("fileFormat", fileFormat);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/order/{orderId}/consumption/details{queryParameters}";
            return this.SendAsync<_billing_order.ConsumptionDetails>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/order/{orderId}/debt
        public Task<_debt.Debt> GetV1MeOrderOrderIdDebtAsync(long orderId) {
            string uri = $"/v1/me/order/{orderId}/debt";
            return this.SendAsync<_debt.Debt>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/order/{orderId}/debt/operation
        public Task<System.Int64[]> GetV1MeOrderOrderIdDebtOperationAsync(long orderId, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? depositOrderId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("depositOrderId", depositOrderId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/order/{orderId}/debt/operation{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/order/{orderId}/debt/operation/{operationId}
        public Task<_debt.Operation> GetV1MeOrderOrderIdDebtOperationOperationIdAsync(long operationId, long orderId) {
            string uri = $"/v1/me/order/{orderId}/debt/operation/{operationId}";
            return this.SendAsync<_debt.Operation>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/order/{orderId}/debt/operation/{operationId}/associatedObject
        public Task<_debt_entry.AssociatedObject> GetV1MeOrderOrderIdDebtOperationOperationIdAssociatedObjectAsync(long operationId, long orderId) {
            string uri = $"/v1/me/order/{orderId}/debt/operation/{operationId}/associatedObject";
            return this.SendAsync<_debt_entry.AssociatedObject>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/order/{orderId}/debt/pay
        public Task<_billing.Order> PostV1MeOrderOrderIdDebtPayAsync(long orderId) {
            string uri = $"/v1/me/order/{orderId}/debt/pay";
            return this.SendAsync<_billing.Order>("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/order/{orderId}/details
        public Task<System.Int64[]> GetV1MeOrderOrderIdDetailsAsync(long orderId) {
            string uri = $"/v1/me/order/{orderId}/details";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/order/{orderId}/details/{orderDetailId}
        public Task<_billing.OrderDetail> GetV1MeOrderOrderIdDetailsOrderDetailIdAsync(long orderDetailId, long orderId) {
            string uri = $"/v1/me/order/{orderId}/details/{orderDetailId}";
            return this.SendAsync<_billing.OrderDetail>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/order/{orderId}/details/{orderDetailId}/extension
        public Task<_billing.ItemDetail> GetV1MeOrderOrderIdDetailsOrderDetailIdExtensionAsync(long orderDetailId, long orderId) {
            string uri = $"/v1/me/order/{orderId}/details/{orderDetailId}/extension";
            return this.SendAsync<_billing.ItemDetail>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/order/{orderId}/followUp
        public Task<_billing_order.FollowUp[]> GetV1MeOrderOrderIdFollowUpAsync(long orderId) {
            string uri = $"/v1/me/order/{orderId}/followUp";
            return this.SendAsync<_billing_order.FollowUp[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/order/{orderId}/pay
        public Task PostV1MeOrderOrderIdPayAsync(long orderId, _billing_order.PayWithPaymentMethod paymentMethod) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("paymentMethod", paymentMethod);
            string uri = $"/v1/me/order/{orderId}/pay";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/order/{orderId}/payWithRegisteredPaymentMean
        public Task PostV1MeOrderOrderIdPayWithRegisteredPaymentMeanAsync(long orderId, _billing.ReusablePaymentMeanEnum paymentMean, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? paymentMeanId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("paymentMean", paymentMean);
            _body.Add("paymentMeanId", paymentMeanId);
            string uri = $"/v1/me/order/{orderId}/payWithRegisteredPaymentMean";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/order/{orderId}/payment
        public Task<_billing.Payment> GetV1MeOrderOrderIdPaymentAsync(long orderId) {
            string uri = $"/v1/me/order/{orderId}/payment";
            return this.SendAsync<_billing.Payment>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/order/{orderId}/paymentMeans
        public Task<_billing_order.PaymentMeans> GetV1MeOrderOrderIdPaymentMeansAsync(long orderId) {
            string uri = $"/v1/me/order/{orderId}/paymentMeans";
            return this.SendAsync<_billing_order.PaymentMeans>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/order/{orderId}/paymentMethods
        public Task<_billing_order.PaymentMethods> GetV1MeOrderOrderIdPaymentMethodsAsync(long orderId) {
            string uri = $"/v1/me/order/{orderId}/paymentMethods";
            return this.SendAsync<_billing_order.PaymentMethods>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/order/{orderId}/retraction
        public Task PostV1MeOrderOrderIdRetractionAsync(long orderId, _billing_order.RetractionReasonEnum reason, [System.Runtime.InteropServices.OptionalAttribute()] System.String? comment) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("comment", comment);
            _body.Add("reason", reason);
            string uri = $"/v1/me/order/{orderId}/retraction";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/order/{orderId}/status
        public Task<_billing_order.OrderStatusEnum> GetV1MeOrderOrderIdStatusAsync(long orderId) {
            string uri = $"/v1/me/order/{orderId}/status";
            return this.SendAsync<_billing_order.OrderStatusEnum>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/order/{orderId}/waiveRetraction
        public Task PostV1MeOrderOrderIdWaiveRetractionAsync(long orderId) {
            string uri = $"/v1/me/order/{orderId}/waiveRetraction";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/ovhAccount
        public Task<System.String[]> GetV1MeOvhAccountAsync() {
            string uri = $"/v1/me/ovhAccount";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/ovhAccount/{ovhAccountId}
        public Task<_billing.OvhAccount> GetV1MeOvhAccountOvhAccountIdAsync(string ovhAccountId) {
            string uri = $"/v1/me/ovhAccount/{ovhAccountId}";
            return this.SendAsync<_billing.OvhAccount>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/ovhAccount/{ovhAccountId}
        public Task PutV1MeOvhAccountOvhAccountIdAsync(_billing.OvhAccount _body, string ovhAccountId) {
            string uri = $"/v1/me/ovhAccount/{ovhAccountId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/ovhAccount/{ovhAccountId}/creditOrder
        public Task<_billing.Order> PostV1MeOvhAccountOvhAccountIdCreditOrderAsync(long amount, string ovhAccountId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("amount", amount);
            string uri = $"/v1/me/ovhAccount/{ovhAccountId}/creditOrder";
            return this.SendAsync<_billing.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/ovhAccount/{ovhAccountId}/movements
        public Task<System.Int64[]> GetV1MeOvhAccountOvhAccountIdMovementsAsync(string ovhAccountId, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? dateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? dateTo) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("date.from", dateFrom);
            queryParametersTemp.Add("date.to", dateTo);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/ovhAccount/{ovhAccountId}/movements{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/ovhAccount/{ovhAccountId}/movements/{movementId}
        public Task<_billing.Movement> GetV1MeOvhAccountOvhAccountIdMovementsMovementIdAsync(long movementId, string ovhAccountId) {
            string uri = $"/v1/me/ovhAccount/{ovhAccountId}/movements/{movementId}";
            return this.SendAsync<_billing.Movement>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/ovhAccount/{ovhAccountId}/movements/{movementId}/requestRefund
        public Task PostV1MeOvhAccountOvhAccountIdMovementsMovementIdRequestRefundAsync(long amount, long movementId, string ovhAccountId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("amount", amount);
            string uri = $"/v1/me/ovhAccount/{ovhAccountId}/movements/{movementId}/requestRefund";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/ovhAccount/{ovhAccountId}/retrieveMoney
        public Task<_billing.Order> PostV1MeOvhAccountOvhAccountIdRetrieveMoneyAsync(long amount, long bankAccountId, string ovhAccountId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("amount", amount);
            _body.Add("bankAccountId", bankAccountId);
            string uri = $"/v1/me/ovhAccount/{ovhAccountId}/retrieveMoney";
            return this.SendAsync<_billing.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/partnerLevel
        public Task<_me_partnerLevel.Level> GetV1MePartnerLevelAsync() {
            string uri = $"/v1/me/partnerLevel";
            return this.SendAsync<_me_partnerLevel.Level>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/passwordRecover
        public Task PostV1MePasswordRecoverAsync(_nichandle.OvhCompanyEnum ovhCompany, string ovhId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("ovhCompany", ovhCompany);
            _body.Add("ovhId", ovhId);
            string uri = $"/v1/me/passwordRecover";
            return this.SendAsync("POST", uri, null, _body, false);
        }
        
        // Path: /v1/me/payment/availableMethods
        public Task<_me_payment.AvailablePaymentMethod[]> GetV1MePaymentAvailableMethodsAsync() {
            string uri = $"/v1/me/payment/availableMethods";
            return this.SendAsync<_me_payment.AvailablePaymentMethod[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/payment/method
        public Task<System.Int64[]> GetV1MePaymentMethodAsync([System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? @default, [System.Runtime.InteropServices.OptionalAttribute()] System.String? paymentType, [System.Runtime.InteropServices.OptionalAttribute()] _me_payment_method.StatusEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("default", @default);
            queryParametersTemp.Add("paymentType", paymentType);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/payment/method{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/payment/method
        public Task<_me_payment_method.Validation> PostV1MePaymentMethodAsync(_me_payment_method.Creation _body) {
            string uri = $"/v1/me/payment/method";
            return this.SendAsync<_me_payment_method.Validation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/payment/method/{paymentMethodId}
        public Task<_me_payment.PaymentMethod> DeleteV1MePaymentMethodPaymentMethodIdAsync(long paymentMethodId) {
            string uri = $"/v1/me/payment/method/{paymentMethodId}";
            return this.SendAsync<_me_payment.PaymentMethod>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/payment/method/{paymentMethodId}
        public Task<_me_payment.PaymentMethod> GetV1MePaymentMethodPaymentMethodIdAsync(long paymentMethodId) {
            string uri = $"/v1/me/payment/method/{paymentMethodId}";
            return this.SendAsync<_me_payment.PaymentMethod>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/payment/method/{paymentMethodId}
        public Task<_me_payment.PaymentMethod> PutV1MePaymentMethodPaymentMethodIdAsync(_me_payment.PaymentMethod _body, long paymentMethodId) {
            string uri = $"/v1/me/payment/method/{paymentMethodId}";
            return this.SendAsync<_me_payment.PaymentMethod>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/payment/method/{paymentMethodId}/challenge
        public Task PostV1MePaymentMethodPaymentMethodIdChallengeAsync(_me_payment_method.Challenge _body, long paymentMethodId) {
            string uri = $"/v1/me/payment/method/{paymentMethodId}/challenge";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/payment/method/{paymentMethodId}/details
        public Task<_me_payment_method.Validation> PostV1MePaymentMethodPaymentMethodIdDetailsAsync(_me_payment_method.Details _body, long paymentMethodId) {
            string uri = $"/v1/me/payment/method/{paymentMethodId}/details";
            return this.SendAsync<_me_payment_method.Validation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/payment/method/{paymentMethodId}/finalize
        public Task<_me_payment.PaymentMethod> PostV1MePaymentMethodPaymentMethodIdFinalizeAsync(_me_payment_method.Finalize _body, long paymentMethodId) {
            string uri = $"/v1/me/payment/method/{paymentMethodId}/finalize";
            return this.SendAsync<_me_payment.PaymentMethod>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/payment/transaction
        public Task<System.Int64[]> GetV1MePaymentTransactionAsync([System.Runtime.InteropServices.OptionalAttribute()] System.Int64? paymentMethodId, [System.Runtime.InteropServices.OptionalAttribute()] _me_payment_transaction.StatusEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("paymentMethodId", paymentMethodId);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/payment/transaction{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/payment/transaction/{transactionId}
        public Task<_me_payment.Transaction> GetV1MePaymentTransactionTransactionIdAsync(long transactionId) {
            string uri = $"/v1/me/payment/transaction/{transactionId}";
            return this.SendAsync<_me_payment.Transaction>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/paymentMean/bankAccount
        public Task<System.Int64[]> GetV1MePaymentMeanBankAccountAsync([System.Runtime.InteropServices.OptionalAttribute()] _me_paymentMean.BankAccountStateEnum? state) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("state", state);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/paymentMean/bankAccount{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/paymentMean/bankAccount
        public Task<_me_paymentMean.BankAccountValidation> PostV1MePaymentMeanBankAccountAsync(_me_paymentMean.BankAccountCreation _body) {
            string uri = $"/v1/me/paymentMean/bankAccount";
            return this.SendAsync<_me_paymentMean.BankAccountValidation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/paymentMean/bankAccount/{id}
        public Task DeleteV1MePaymentMeanBankAccountIdAsync(long id) {
            string uri = $"/v1/me/paymentMean/bankAccount/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/paymentMean/bankAccount/{id}
        public Task<_me_paymentMean.BankAccount> GetV1MePaymentMeanBankAccountIdAsync(long id) {
            string uri = $"/v1/me/paymentMean/bankAccount/{id}";
            return this.SendAsync<_me_paymentMean.BankAccount>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/paymentMean/bankAccount/{id}
        public Task PutV1MePaymentMeanBankAccountIdAsync(_me_paymentMean.BankAccount _body, long id) {
            string uri = $"/v1/me/paymentMean/bankAccount/{id}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/paymentMean/bankAccount/{id}/challenge
        public Task PostV1MePaymentMeanBankAccountIdChallengeAsync(_me_paymentMean.BankAccountChallengeCreation _body, long id) {
            string uri = $"/v1/me/paymentMean/bankAccount/{id}/challenge";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/paymentMean/bankAccount/{id}/chooseAsDefaultPaymentMean
        public Task PostV1MePaymentMeanBankAccountIdChooseAsDefaultPaymentMeanAsync(long id) {
            string uri = $"/v1/me/paymentMean/bankAccount/{id}/chooseAsDefaultPaymentMean";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/paymentMean/creditCard
        public Task<System.Int64[]> GetV1MePaymentMeanCreditCardAsync() {
            string uri = $"/v1/me/paymentMean/creditCard";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/paymentMean/creditCard
        public Task<_me_paymentMean.CreditCardValidation> PostV1MePaymentMeanCreditCardAsync(_me_paymentMean.CreditCardCreation _body) {
            string uri = $"/v1/me/paymentMean/creditCard";
            return this.SendAsync<_me_paymentMean.CreditCardValidation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/paymentMean/creditCard/{id}
        public Task DeleteV1MePaymentMeanCreditCardIdAsync(long id) {
            string uri = $"/v1/me/paymentMean/creditCard/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/paymentMean/creditCard/{id}
        public Task<_me_paymentMean.CreditCard> GetV1MePaymentMeanCreditCardIdAsync(long id) {
            string uri = $"/v1/me/paymentMean/creditCard/{id}";
            return this.SendAsync<_me_paymentMean.CreditCard>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/paymentMean/creditCard/{id}
        public Task PutV1MePaymentMeanCreditCardIdAsync(_me_paymentMean.CreditCard _body, long id) {
            string uri = $"/v1/me/paymentMean/creditCard/{id}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/paymentMean/creditCard/{id}/challenge
        public Task PostV1MePaymentMeanCreditCardIdChallengeAsync(_me_paymentMean.CreditCardChallengeCreation _body, long id) {
            string uri = $"/v1/me/paymentMean/creditCard/{id}/challenge";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/paymentMean/creditCard/{id}/chooseAsDefaultPaymentMean
        public Task PostV1MePaymentMeanCreditCardIdChooseAsDefaultPaymentMeanAsync(long id) {
            string uri = $"/v1/me/paymentMean/creditCard/{id}/chooseAsDefaultPaymentMean";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/paymentMean/deferredPaymentAccount
        public Task<System.Int64[]> GetV1MePaymentMeanDeferredPaymentAccountAsync() {
            string uri = $"/v1/me/paymentMean/deferredPaymentAccount";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/paymentMean/deferredPaymentAccount/{id}
        public Task<_me_paymentMean.Deferred> GetV1MePaymentMeanDeferredPaymentAccountIdAsync(long id) {
            string uri = $"/v1/me/paymentMean/deferredPaymentAccount/{id}";
            return this.SendAsync<_me_paymentMean.Deferred>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/paymentMean/deferredPaymentAccount/{id}
        public Task PutV1MePaymentMeanDeferredPaymentAccountIdAsync(_me_paymentMean.Deferred _body, long id) {
            string uri = $"/v1/me/paymentMean/deferredPaymentAccount/{id}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/paymentMean/deferredPaymentAccount/{id}/chooseAsDefaultPaymentMean
        public Task PostV1MePaymentMeanDeferredPaymentAccountIdChooseAsDefaultPaymentMeanAsync(long id) {
            string uri = $"/v1/me/paymentMean/deferredPaymentAccount/{id}/chooseAsDefaultPaymentMean";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/paymentMean/paypal
        public Task<System.Int64[]> GetV1MePaymentMeanPaypalAsync() {
            string uri = $"/v1/me/paymentMean/paypal";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/paymentMean/paypal
        public Task<_me_paymentMean.PaypalValidation> PostV1MePaymentMeanPaypalAsync(_me_paymentMean.PaypalCreation _body) {
            string uri = $"/v1/me/paymentMean/paypal";
            return this.SendAsync<_me_paymentMean.PaypalValidation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/paymentMean/paypal/{id}
        public Task DeleteV1MePaymentMeanPaypalIdAsync(long id) {
            string uri = $"/v1/me/paymentMean/paypal/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/paymentMean/paypal/{id}
        public Task<_me_paymentMean.Paypal> GetV1MePaymentMeanPaypalIdAsync(long id) {
            string uri = $"/v1/me/paymentMean/paypal/{id}";
            return this.SendAsync<_me_paymentMean.Paypal>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/paymentMean/paypal/{id}
        public Task PutV1MePaymentMeanPaypalIdAsync(_me_paymentMean.Paypal _body, long id) {
            string uri = $"/v1/me/paymentMean/paypal/{id}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/paymentMean/paypal/{id}/challenge
        public Task PostV1MePaymentMeanPaypalIdChallengeAsync(_me_paymentMean.PaypalChallengeCreation _body, long id) {
            string uri = $"/v1/me/paymentMean/paypal/{id}/challenge";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/paymentMean/paypal/{id}/chooseAsDefaultPaymentMean
        public Task PostV1MePaymentMeanPaypalIdChooseAsDefaultPaymentMeanAsync(long id) {
            string uri = $"/v1/me/paymentMean/paypal/{id}/chooseAsDefaultPaymentMean";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/recommendations
        public Task<_recommendations.Recommendations> GetV1MeRecommendationsAsync([System.Runtime.InteropServices.OptionalAttribute()] System.Int64? max, [System.Runtime.InteropServices.OptionalAttribute()] _recommendations.productRangesEnum? range) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("max", max);
            queryParametersTemp.Add("range", range);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/recommendations{queryParameters}";
            return this.SendAsync<_recommendations.Recommendations>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/refund
        public Task<System.String[]> GetV1MeRefundAsync([System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? dateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? dateTo, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? orderId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("date.from", dateFrom);
            queryParametersTemp.Add("date.to", dateTo);
            queryParametersTemp.Add("orderId", orderId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/refund{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/refund/export
        public Task PostV1MeRefundExportAsync(_billing.ArchiveTypeEnum archiveType, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? endDate, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? ids, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? startDate) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("archiveType", archiveType);
            _body.Add("endDate", endDate);
            _body.Add("ids", ids);
            _body.Add("startDate", startDate);
            string uri = $"/v1/me/refund/export";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/refund/{refundId}
        public Task<_billing.Refund> GetV1MeRefundRefundIdAsync(string refundId) {
            string uri = $"/v1/me/refund/{refundId}";
            return this.SendAsync<_billing.Refund>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/refund/{refundId}/details
        public Task<System.String[]> GetV1MeRefundRefundIdDetailsAsync(string refundId) {
            string uri = $"/v1/me/refund/{refundId}/details";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/refund/{refundId}/details/{refundDetailId}
        public Task<_billing.RefundDetail> GetV1MeRefundRefundIdDetailsRefundDetailIdAsync(string refundDetailId, string refundId) {
            string uri = $"/v1/me/refund/{refundId}/details/{refundDetailId}";
            return this.SendAsync<_billing.RefundDetail>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/refund/{refundId}/payment
        public Task<_billing.Payment> GetV1MeRefundRefundIdPaymentAsync(string refundId) {
            string uri = $"/v1/me/refund/{refundId}/payment";
            return this.SendAsync<_billing.Payment>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/reverseBill
        public Task<System.String[]> GetV1MeReverseBillAsync([System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? dateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? dateTo, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? orderId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("date.from", dateFrom);
            queryParametersTemp.Add("date.to", dateTo);
            queryParametersTemp.Add("orderId", orderId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/reverseBill{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/reverseBill/{reverseBillId}
        public Task<_billing.ReverseBill> GetV1MeReverseBillReverseBillIdAsync(string reverseBillId) {
            string uri = $"/v1/me/reverseBill/{reverseBillId}";
            return this.SendAsync<_billing.ReverseBill>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/reverseBill/{reverseBillId}/details
        public Task<System.String[]> GetV1MeReverseBillReverseBillIdDetailsAsync(string reverseBillId) {
            string uri = $"/v1/me/reverseBill/{reverseBillId}/details";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/reverseBill/{reverseBillId}/details/{reverseBillDetailId}
        public Task<_billing.ReversableBillDetail> GetV1MeReverseBillReverseBillIdDetailsReverseBillDetailIdAsync(string reverseBillDetailId, string reverseBillId) {
            string uri = $"/v1/me/reverseBill/{reverseBillId}/details/{reverseBillDetailId}";
            return this.SendAsync<_billing.ReversableBillDetail>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/reverseBill/{reverseBillId}/payment
        public Task<_billing.Payment> GetV1MeReverseBillReverseBillIdPaymentAsync(string reverseBillId) {
            string uri = $"/v1/me/reverseBill/{reverseBillId}/payment";
            return this.SendAsync<_billing.Payment>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/sla
        public Task<System.Int64[]> GetV1MeSlaAsync() {
            string uri = $"/v1/me/sla";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/sla/{id}
        public Task<_billing.SlaOperation> GetV1MeSlaIdAsync(long id) {
            string uri = $"/v1/me/sla/{id}";
            return this.SendAsync<_billing.SlaOperation>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/sla/{id}/apply
        public Task PostV1MeSlaIdApplyAsync(long id) {
            string uri = $"/v1/me/sla/{id}/apply";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/sla/{id}/canBeApplied
        public Task<System.Boolean> GetV1MeSlaIdCanBeAppliedAsync(long id) {
            string uri = $"/v1/me/sla/{id}/canBeApplied";
            return this.SendAsync<bool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/sla/{id}/services
        public Task<_billing.SlaOperationService[]> GetV1MeSlaIdServicesAsync(long id) {
            string uri = $"/v1/me/sla/{id}/services";
            return this.SendAsync<_billing.SlaOperationService[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/sla/{id}/status
        public Task<System.String> GetV1MeSlaIdStatusAsync(long id) {
            string uri = $"/v1/me/sla/{id}/status";
            return this.SendAsync<string>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/sshKey
        public Task<System.String[]> GetV1MeSshKeyAsync() {
            string uri = $"/v1/me/sshKey";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/sshKey
        public Task PostV1MeSshKeyAsync(string key, string keyName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("key", key);
            _body.Add("keyName", keyName);
            string uri = $"/v1/me/sshKey";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/sshKey/{keyName}
        public Task DeleteV1MeSshKeyKeyNameAsync(string keyName) {
            string uri = $"/v1/me/sshKey/{keyName}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/sshKey/{keyName}
        public Task<_nichandle.sshKey> GetV1MeSshKeyKeyNameAsync(string keyName) {
            string uri = $"/v1/me/sshKey/{keyName}";
            return this.SendAsync<_nichandle.sshKey>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/subAccount
        public Task<System.Int64[]> GetV1MeSubAccountAsync() {
            string uri = $"/v1/me/subAccount";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/subAccount
        public Task<System.Int64> PostV1MeSubAccountAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? description) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("description", description);
            string uri = $"/v1/me/subAccount";
            return this.SendAsync<long>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/subAccount/{id}
        public Task<_nichandle.SubAccount> GetV1MeSubAccountIdAsync(long id) {
            string uri = $"/v1/me/subAccount/{id}";
            return this.SendAsync<_nichandle.SubAccount>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/subAccount/{id}
        public Task PutV1MeSubAccountIdAsync(_nichandle.SubAccount _body, long id) {
            string uri = $"/v1/me/subAccount/{id}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/subAccount/{id}/createConsumerKey
        public Task<_nichandle.SubAccountConsumerKey> PostV1MeSubAccountIdCreateConsumerKeyAsync(long id) {
            string uri = $"/v1/me/subAccount/{id}/createConsumerKey";
            return this.SendAsync<_nichandle.SubAccountConsumerKey>("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/subscription
        public Task<System.String[]> GetV1MeSubscriptionAsync() {
            string uri = $"/v1/me/subscription";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/subscription/{subscriptionType}
        public Task<_nichandle.Subscription> GetV1MeSubscriptionSubscriptionTypeAsync(string subscriptionType) {
            string uri = $"/v1/me/subscription/{subscriptionType}";
            return this.SendAsync<_nichandle.Subscription>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/subscription/{subscriptionType}
        public Task PutV1MeSubscriptionSubscriptionTypeAsync(_nichandle.Subscription _body, string subscriptionType) {
            string uri = $"/v1/me/subscription/{subscriptionType}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/supportLevel
        public Task<_me_SupportLevel.Level> GetV1MeSupportLevelAsync() {
            string uri = $"/v1/me/supportLevel";
            return this.SendAsync<_me_SupportLevel.Level>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/tag
        public Task<System.String[]> GetV1MeTagAsync() {
            string uri = $"/v1/me/tag";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/tag
        public Task<_me_tag.Tag> PostV1MeTagAsync(_me_tag.Creation _body) {
            string uri = $"/v1/me/tag";
            return this.SendAsync<_me_tag.Tag>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/tag/available
        public Task<_me_tag.AvailableTag[]> GetV1MeTagAvailableAsync() {
            string uri = $"/v1/me/tag/available";
            return this.SendAsync<_me_tag.AvailableTag[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/tag/{tag}
        public Task<_me_tag.Tag> DeleteV1MeTagTagAsync(string tag) {
            string uri = $"/v1/me/tag/{tag}";
            return this.SendAsync<_me_tag.Tag>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/tag/{tag}
        public Task<_me_tag.Tag> GetV1MeTagTagAsync(string tag) {
            string uri = $"/v1/me/tag/{tag}";
            return this.SendAsync<_me_tag.Tag>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/task/contactChange
        public Task<System.Int64[]> GetV1MeTaskContactChangeAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? askingAccount, [System.Runtime.InteropServices.OptionalAttribute()] _nichandle_changeContact.TaskStateEnum? state, [System.Runtime.InteropServices.OptionalAttribute()] System.String? toAccount) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("askingAccount", askingAccount);
            queryParametersTemp.Add("state", state);
            queryParametersTemp.Add("toAccount", toAccount);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/task/contactChange{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/task/contactChange/{id}
        public Task<_nichandle_contactChange.Task> GetV1MeTaskContactChangeIdAsync(long id) {
            string uri = $"/v1/me/task/contactChange/{id}";
            return this.SendAsync<_nichandle_contactChange.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/task/contactChange/{id}/accept
        public Task PostV1MeTaskContactChangeIdAcceptAsync(long id, string token) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("token", token);
            string uri = $"/v1/me/task/contactChange/{id}/accept";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/task/contactChange/{id}/refuse
        public Task PostV1MeTaskContactChangeIdRefuseAsync(long id, string token) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("token", token);
            string uri = $"/v1/me/task/contactChange/{id}/refuse";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/task/contactChange/{id}/resendEmail
        public Task PostV1MeTaskContactChangeIdResendEmailAsync(long id) {
            string uri = $"/v1/me/task/contactChange/{id}/resendEmail";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/task/dns
        public Task<System.Int64[]> GetV1MeTaskDnsAsync([System.Runtime.InteropServices.OptionalAttribute()] _domain.TaskFunctionEnum? function, [System.Runtime.InteropServices.OptionalAttribute()] _domain.TaskStatusEnum? status, [System.Runtime.InteropServices.OptionalAttribute()] System.String? zone) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("function", function);
            queryParametersTemp.Add("status", status);
            queryParametersTemp.Add("zone", zone);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/task/dns{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/task/dns/{id}
        public Task<_me_dns.Task> GetV1MeTaskDnsIdAsync(long id) {
            string uri = $"/v1/me/task/dns/{id}";
            return this.SendAsync<_me_dns.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/task/dns/{id}/accelerate
        public Task PostV1MeTaskDnsIdAccelerateAsync(long id) {
            string uri = $"/v1/me/task/dns/{id}/accelerate";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/task/dns/{id}/cancel
        public Task PostV1MeTaskDnsIdCancelAsync(long id) {
            string uri = $"/v1/me/task/dns/{id}/cancel";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/task/dns/{id}/relaunch
        public Task PostV1MeTaskDnsIdRelaunchAsync(long id) {
            string uri = $"/v1/me/task/dns/{id}/relaunch";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/task/domain
        public Task<System.Int64[]> GetV1MeTaskDomainAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? domain, [System.Runtime.InteropServices.OptionalAttribute()] _domain.OperationFunctionEnum? function, [System.Runtime.InteropServices.OptionalAttribute()] _domain.OperationStatusEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("domain", domain);
            queryParametersTemp.Add("function", function);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/task/domain{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/task/domain/{id}
        public Task<_domain.Task> GetV1MeTaskDomainIdAsync(long id) {
            string uri = $"/v1/me/task/domain/{id}";
            return this.SendAsync<_domain.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/task/domain/{id}/accelerate
        public Task PostV1MeTaskDomainIdAccelerateAsync(long id) {
            string uri = $"/v1/me/task/domain/{id}/accelerate";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/task/domain/{id}/argument
        public Task<System.String[]> GetV1MeTaskDomainIdArgumentAsync(long id) {
            string uri = $"/v1/me/task/domain/{id}/argument";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/task/domain/{id}/argument/{key}
        public Task<_nichandle.DomainTaskArgument> GetV1MeTaskDomainIdArgumentKeyAsync(long id, string key) {
            string uri = $"/v1/me/task/domain/{id}/argument/{key}";
            return this.SendAsync<_nichandle.DomainTaskArgument>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/task/domain/{id}/argument/{key}
        public Task PutV1MeTaskDomainIdArgumentKeyAsync(_nichandle.DomainTaskArgument _body, long id, string key) {
            string uri = $"/v1/me/task/domain/{id}/argument/{key}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/me/task/domain/{id}/cancel
        public Task PostV1MeTaskDomainIdCancelAsync(long id) {
            string uri = $"/v1/me/task/domain/{id}/cancel";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/task/domain/{id}/progressbar
        public Task<_nichandle.DomainTaskProgressBar> GetV1MeTaskDomainIdProgressbarAsync(long id) {
            string uri = $"/v1/me/task/domain/{id}/progressbar";
            return this.SendAsync<_nichandle.DomainTaskProgressBar>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/task/domain/{id}/relaunch
        public Task PostV1MeTaskDomainIdRelaunchAsync(long id) {
            string uri = $"/v1/me/task/domain/{id}/relaunch";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/me/task/emailChange
        public Task<System.Int64[]> GetV1MeTaskEmailChangeAsync([System.Runtime.InteropServices.OptionalAttribute()] _nichandle_changeEmail.TaskStateEnum? state) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("state", state);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/task/emailChange{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/task/emailChange/{id}
        public Task<_nichandle_emailChange.Task> GetV1MeTaskEmailChangeIdAsync(long id) {
            string uri = $"/v1/me/task/emailChange/{id}";
            return this.SendAsync<_nichandle_emailChange.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/task/emailChange/{id}/accept
        public Task PostV1MeTaskEmailChangeIdAcceptAsync(long id, string token) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("token", token);
            string uri = $"/v1/me/task/emailChange/{id}/accept";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/task/emailChange/{id}/refuse
        public Task PostV1MeTaskEmailChangeIdRefuseAsync(long id, string token) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("token", token);
            string uri = $"/v1/me/task/emailChange/{id}/refuse";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/telephony/defaultIpRestriction
        public Task<System.Int64[]> GetV1MeTelephonyDefaultIpRestrictionAsync() {
            string uri = $"/v1/me/telephony/defaultIpRestriction";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/telephony/defaultIpRestriction
        public Task<_telephony.DefaultIpRestriction> PostV1MeTelephonyDefaultIpRestrictionAsync(string subnet, _telephony.ProtocolEnum type) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("subnet", subnet);
            _body.Add("type", type);
            string uri = $"/v1/me/telephony/defaultIpRestriction";
            return this.SendAsync<_telephony.DefaultIpRestriction>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/telephony/defaultIpRestriction/{id}
        public Task DeleteV1MeTelephonyDefaultIpRestrictionIdAsync(long id) {
            string uri = $"/v1/me/telephony/defaultIpRestriction/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/me/telephony/defaultIpRestriction/{id}
        public Task<_telephony.DefaultIpRestriction> GetV1MeTelephonyDefaultIpRestrictionIdAsync(long id) {
            string uri = $"/v1/me/telephony/defaultIpRestriction/{id}";
            return this.SendAsync<_telephony.DefaultIpRestriction>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/telephony/settings
        public Task<_telephony.Settings> GetV1MeTelephonySettingsAsync() {
            string uri = $"/v1/me/telephony/settings";
            return this.SendAsync<_telephony.Settings>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/telephony/settings
        public Task PostV1MeTelephonySettingsAsync(_telephony.Settings settings) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("settings", settings);
            string uri = $"/v1/me/telephony/settings";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/vipStatus
        public Task<_nichandle.VipStatus> GetV1MeVipStatusAsync() {
            string uri = $"/v1/me/vipStatus";
            return this.SendAsync<_nichandle.VipStatus>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/voucher/checkValidity
        public Task<_nichandle.VoucherStatus> PostV1MeVoucherCheckValidityAsync(string voucher) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("voucher", voucher);
            string uri = $"/v1/me/voucher/checkValidity";
            return this.SendAsync<_nichandle.VoucherStatus>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/me/withdrawal
        public Task<System.String[]> GetV1MeWithdrawalAsync([System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? dateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? dateTo, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? orderId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("date.from", dateFrom);
            queryParametersTemp.Add("date.to", dateTo);
            queryParametersTemp.Add("orderId", orderId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/me/withdrawal{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/withdrawal/{withdrawalId}
        public Task<_billing.Withdrawal> GetV1MeWithdrawalWithdrawalIdAsync(string withdrawalId) {
            string uri = $"/v1/me/withdrawal/{withdrawalId}";
            return this.SendAsync<_billing.Withdrawal>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/withdrawal/{withdrawalId}/details
        public Task<System.String[]> GetV1MeWithdrawalWithdrawalIdDetailsAsync(string withdrawalId) {
            string uri = $"/v1/me/withdrawal/{withdrawalId}/details";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/withdrawal/{withdrawalId}/details/{withdrawalDetailId}
        public Task<_billing.WithdrawalDetail> GetV1MeWithdrawalWithdrawalIdDetailsWithdrawalDetailIdAsync(string withdrawalDetailId, string withdrawalId) {
            string uri = $"/v1/me/withdrawal/{withdrawalId}/details/{withdrawalDetailId}";
            return this.SendAsync<_billing.WithdrawalDetail>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/withdrawal/{withdrawalId}/payment
        public Task<_billing.Payment> GetV1MeWithdrawalWithdrawalIdPaymentAsync(string withdrawalId) {
            string uri = $"/v1/me/withdrawal/{withdrawalId}/payment";
            return this.SendAsync<_billing.Payment>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/xdsl/setting
        public Task<_xdsl.Setting> GetV1MeXdslSettingAsync() {
            string uri = $"/v1/me/xdsl/setting";
            return this.SendAsync<_xdsl.Setting>("GET", uri, null, null, true);
        }
        
        // Path: /v1/me/xdsl/setting
        public Task PostV1MeXdslSettingAsync([System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? resellerFastModemShipping, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? resellerModemBasicConfig) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("resellerFastModemShipping", resellerFastModemShipping);
            _body.Add("resellerModemBasicConfig", resellerModemBasicConfig);
            string uri = $"/v1/me/xdsl/setting";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/metrics
        public Task<System.String[]> GetV1MetricsAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/metrics{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/metrics/{serviceName}
        public Task<_metrics_api.ServiceWithIAM> GetV1MetricsServiceNameAsync(string serviceName) {
            string uri = $"/v1/metrics/{serviceName}";
            return this.SendAsync<_metrics_api.ServiceWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/metrics/{serviceName}
        public Task<_metrics_api.Service> PutV1MetricsServiceNameAsync(_metrics.Update _body, string serviceName) {
            string uri = $"/v1/metrics/{serviceName}";
            return this.SendAsync<_metrics_api.Service>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/metrics/{serviceName}/changeContact
        public Task<System.Int64[]> PostV1MetricsServiceNameChangeContactAsync(_services.changeContact _body, string serviceName) {
            string uri = $"/v1/metrics/{serviceName}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/metrics/{serviceName}/confirmTermination
        public Task<System.String> PostV1MetricsServiceNameConfirmTerminationAsync(_services.confirmTermination _body, string serviceName) {
            string uri = $"/v1/metrics/{serviceName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/metrics/{serviceName}/consumption
        public Task<_metrics_api.Consumption> GetV1MetricsServiceNameConsumptionAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? duration) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("duration", duration);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/metrics/{serviceName}/consumption{queryParameters}";
            return this.SendAsync<_metrics_api.Consumption>("GET", uri, null, null, true);
        }
        
        // Path: /v1/metrics/{serviceName}/lookup/token
        public Task<System.String[]> PostV1MetricsServiceNameLookupTokenAsync(_metrics.LookupTokenCreation _body, string serviceName) {
            string uri = $"/v1/metrics/{serviceName}/lookup/token";
            return this.SendAsync<string[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/metrics/{serviceName}/quota
        public Task<System.String> PutV1MetricsServiceNameQuotaAsync(_metrics.QuotaUpdate _body, string serviceName) {
            string uri = $"/v1/metrics/{serviceName}/quota";
            return this.SendAsync<string>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/metrics/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1MetricsServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/metrics/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/metrics/{serviceName}/serviceInfos
        public Task PutV1MetricsServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/metrics/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/metrics/{serviceName}/terminate
        public Task<System.String> PostV1MetricsServiceNameTerminateAsync(string serviceName) {
            string uri = $"/v1/metrics/{serviceName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/metrics/{serviceName}/token
        public Task<System.String[]> GetV1MetricsServiceNameTokenAsync(string serviceName) {
            string uri = $"/v1/metrics/{serviceName}/token";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/metrics/{serviceName}/token
        public Task<_metrics_api.Token> PostV1MetricsServiceNameTokenAsync(_metrics.TokenCreation _body, string serviceName) {
            string uri = $"/v1/metrics/{serviceName}/token";
            return this.SendAsync<_metrics_api.Token>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/metrics/{serviceName}/token/{tokenId}
        public Task DeleteV1MetricsServiceNameTokenTokenIdAsync(string serviceName, string tokenId) {
            string uri = $"/v1/metrics/{serviceName}/token/{tokenId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/metrics/{serviceName}/token/{tokenId}
        public Task<_metrics_api.Token> GetV1MetricsServiceNameTokenTokenIdAsync(string serviceName, string tokenId) {
            string uri = $"/v1/metrics/{serviceName}/token/{tokenId}";
            return this.SendAsync<_metrics_api.Token>("GET", uri, null, null, true);
        }
        
        // Path: /v1/metrics/{serviceName}/token/{tokenId}
        public Task<_metrics_api.Token> PutV1MetricsServiceNameTokenTokenIdAsync(_metrics.TokenUpdate _body, string serviceName, string tokenId) {
            string uri = $"/v1/metrics/{serviceName}/token/{tokenId}";
            return this.SendAsync<_metrics_api.Token>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/msServices
        public Task<System.String[]> GetV1MsServicesAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/msServices{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/msServices/sharepoint
        public Task<System.String[]> GetV1MsServicesSharepointAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/msServices/sharepoint{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/msServices/sharepoint/{domain}
        public Task<_msServices.SharepointServiceInfoWithIAM> GetV1MsServicesSharepointDomainAsync(string domain) {
            string uri = $"/v1/msServices/sharepoint/{domain}";
            return this.SendAsync<_msServices.SharepointServiceInfoWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/msServices/sharepoint/{domain}/serviceInfos
        public Task<_services.Service> GetV1MsServicesSharepointDomainServiceInfosAsync(string domain) {
            string uri = $"/v1/msServices/sharepoint/{domain}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/msServices/sharepoint/{domain}/serviceInfos
        public Task PutV1MsServicesSharepointDomainServiceInfosAsync(_services.Service _body, string domain) {
            string uri = $"/v1/msServices/sharepoint/{domain}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/msServices/{serviceName}
        public Task<_msServices.ActiveDirectoryOrganizationalUnitWithIAM> GetV1MsServicesServiceNameAsync(string serviceName) {
            string uri = $"/v1/msServices/{serviceName}";
            return this.SendAsync<_msServices.ActiveDirectoryOrganizationalUnitWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}
        public Task PutV1MsServicesServiceNameAsync(_msServices.ActiveDirectoryOrganizationalUnit _body, string serviceName) {
            string uri = $"/v1/msServices/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/msServices/{serviceName}/account
        public Task<System.String[]> GetV1MsServicesServiceNameAccountAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? company, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? id, [System.Runtime.InteropServices.OptionalAttribute()] System.String? userPrincipalName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("company", company);
            queryParametersTemp.Add("id", id);
            queryParametersTemp.Add("userPrincipalName", userPrincipalName);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/msServices/{serviceName}/account{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/account/{userPrincipalName}
        public Task<_msServices.Account> GetV1MsServicesServiceNameAccountUserPrincipalNameAsync(string serviceName, string userPrincipalName) {
            string uri = $"/v1/msServices/{serviceName}/account/{userPrincipalName}";
            return this.SendAsync<_msServices.Account>("GET", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/account/{userPrincipalName}
        public Task PutV1MsServicesServiceNameAccountUserPrincipalNameAsync(_msServices.Account _body, string serviceName, string userPrincipalName) {
            string uri = $"/v1/msServices/{serviceName}/account/{userPrincipalName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/msServices/{serviceName}/account/{userPrincipalName}/changePassword
        public Task<_msServices.Task> PostV1MsServicesServiceNameAccountUserPrincipalNameChangePasswordAsync(string password, string serviceName, string userPrincipalName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("password", password);
            string uri = $"/v1/msServices/{serviceName}/account/{userPrincipalName}/changePassword";
            return this.SendAsync<_msServices.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/msServices/{serviceName}/account/{userPrincipalName}/exchange
        public Task<_msServices.ExchangeInformation> GetV1MsServicesServiceNameAccountUserPrincipalNameExchangeAsync(string serviceName, string userPrincipalName) {
            string uri = $"/v1/msServices/{serviceName}/account/{userPrincipalName}/exchange";
            return this.SendAsync<_msServices.ExchangeInformation>("GET", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/account/{userPrincipalName}/exchange
        public Task PutV1MsServicesServiceNameAccountUserPrincipalNameExchangeAsync(_msServices.ExchangeInformation _body, string serviceName, string userPrincipalName) {
            string uri = $"/v1/msServices/{serviceName}/account/{userPrincipalName}/exchange";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/msServices/{serviceName}/account/{userPrincipalName}/exchange/configure
        public Task<_msServices.exchangeTask> PostV1MsServicesServiceNameAccountUserPrincipalNameExchangeConfigureAsync(string serviceName, string userPrincipalName) {
            string uri = $"/v1/msServices/{serviceName}/account/{userPrincipalName}/exchange/configure";
            return this.SendAsync<_msServices.exchangeTask>("POST", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/account/{userPrincipalName}/mfa
        public Task<_msServices.Task> DeleteV1MsServicesServiceNameAccountUserPrincipalNameMfaAsync(string serviceName, string userPrincipalName) {
            string uri = $"/v1/msServices/{serviceName}/account/{userPrincipalName}/mfa";
            return this.SendAsync<_msServices.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/account/{userPrincipalName}/mfa
        public Task<_msServices.MfaInformation> GetV1MsServicesServiceNameAccountUserPrincipalNameMfaAsync(string serviceName, string userPrincipalName) {
            string uri = $"/v1/msServices/{serviceName}/account/{userPrincipalName}/mfa";
            return this.SendAsync<_msServices.MfaInformation>("GET", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/account/{userPrincipalName}/mfa
        public Task<_msServices.Task> PostV1MsServicesServiceNameAccountUserPrincipalNameMfaAsync(string serviceName, string userPrincipalName) {
            string uri = $"/v1/msServices/{serviceName}/account/{userPrincipalName}/mfa";
            return this.SendAsync<_msServices.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/account/{userPrincipalName}/mfa/disable
        public Task<_msServices.Task> PostV1MsServicesServiceNameAccountUserPrincipalNameMfaDisableAsync(long period, string serviceName, string userPrincipalName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("period", period);
            string uri = $"/v1/msServices/{serviceName}/account/{userPrincipalName}/mfa/disable";
            return this.SendAsync<_msServices.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/msServices/{serviceName}/account/{userPrincipalName}/mfa/enable
        public Task<_msServices.Task> PostV1MsServicesServiceNameAccountUserPrincipalNameMfaEnableAsync(string serviceName, string userPrincipalName) {
            string uri = $"/v1/msServices/{serviceName}/account/{userPrincipalName}/mfa/enable";
            return this.SendAsync<_msServices.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/account/{userPrincipalName}/mfa/reset
        public Task<_msServices.Task> PostV1MsServicesServiceNameAccountUserPrincipalNameMfaResetAsync(string serviceName, string userPrincipalName) {
            string uri = $"/v1/msServices/{serviceName}/account/{userPrincipalName}/mfa/reset";
            return this.SendAsync<_msServices.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/account/{userPrincipalName}/sharepoint
        public Task<_msServices.SharepointInformation> GetV1MsServicesServiceNameAccountUserPrincipalNameSharepointAsync(string serviceName, string userPrincipalName) {
            string uri = $"/v1/msServices/{serviceName}/account/{userPrincipalName}/sharepoint";
            return this.SendAsync<_msServices.SharepointInformation>("GET", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/account/{userPrincipalName}/sharepoint
        public Task PutV1MsServicesServiceNameAccountUserPrincipalNameSharepointAsync(_msServices.SharepointInformation _body, string serviceName, string userPrincipalName) {
            string uri = $"/v1/msServices/{serviceName}/account/{userPrincipalName}/sharepoint";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/msServices/{serviceName}/account/{userPrincipalName}/sharepoint/clearSpace
        public Task<_msServices.sharepointTask> PostV1MsServicesServiceNameAccountUserPrincipalNameSharepointClearSpaceAsync(string serviceName, string userPrincipalName) {
            string uri = $"/v1/msServices/{serviceName}/account/{userPrincipalName}/sharepoint/clearSpace";
            return this.SendAsync<_msServices.sharepointTask>("POST", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/account/{userPrincipalName}/sharepoint/configure
        public Task<_msServices.sharepointTask> PostV1MsServicesServiceNameAccountUserPrincipalNameSharepointConfigureAsync(string serviceName, string userPrincipalName) {
            string uri = $"/v1/msServices/{serviceName}/account/{userPrincipalName}/sharepoint/configure";
            return this.SendAsync<_msServices.sharepointTask>("POST", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/account/{userPrincipalName}/sync
        public Task<_msServices.Task> DeleteV1MsServicesServiceNameAccountUserPrincipalNameSyncAsync(string serviceName, string userPrincipalName) {
            string uri = $"/v1/msServices/{serviceName}/account/{userPrincipalName}/sync";
            return this.SendAsync<_msServices.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/account/{userPrincipalName}/sync
        public Task<_msServices.SyncInformation> GetV1MsServicesServiceNameAccountUserPrincipalNameSyncAsync(string serviceName, string userPrincipalName) {
            string uri = $"/v1/msServices/{serviceName}/account/{userPrincipalName}/sync";
            return this.SendAsync<_msServices.SyncInformation>("GET", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/account/{userPrincipalName}/sync
        public Task<_msServices.Task> PostV1MsServicesServiceNameAccountUserPrincipalNameSyncAsync(_msServices.SyncLicenseEnum license, string serviceName, string userPrincipalName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("license", license);
            string uri = $"/v1/msServices/{serviceName}/account/{userPrincipalName}/sync";
            return this.SendAsync<_msServices.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/msServices/{serviceName}/account/{userPrincipalName}/sync/configure
        public Task<_msServices.Task> PostV1MsServicesServiceNameAccountUserPrincipalNameSyncConfigureAsync(string serviceName, string userPrincipalName) {
            string uri = $"/v1/msServices/{serviceName}/account/{userPrincipalName}/sync/configure";
            return this.SendAsync<_msServices.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/changeContact
        public Task<System.Int64[]> PostV1MsServicesServiceNameChangeContactAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactTech) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("contactAdmin", contactAdmin);
            _body.Add("contactBilling", contactBilling);
            _body.Add("contactTech", contactTech);
            string uri = $"/v1/msServices/{serviceName}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/msServices/{serviceName}/createMfaOnAllUsers
        public Task<_msServices.Task> PostV1MsServicesServiceNameCreateMfaOnAllUsersAsync(string serviceName) {
            string uri = $"/v1/msServices/{serviceName}/createMfaOnAllUsers";
            return this.SendAsync<_msServices.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/exchange
        public Task<_msServices.ExchangeService> GetV1MsServicesServiceNameExchangeAsync(string serviceName) {
            string uri = $"/v1/msServices/{serviceName}/exchange";
            return this.SendAsync<_msServices.ExchangeService>("GET", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/exchange
        public Task PutV1MsServicesServiceNameExchangeAsync(_msServices.ExchangeService _body, string serviceName) {
            string uri = $"/v1/msServices/{serviceName}/exchange";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/msServices/{serviceName}/exchange/billingMigrated
        public Task<System.Boolean> GetV1MsServicesServiceNameExchangeBillingMigratedAsync(string serviceName) {
            string uri = $"/v1/msServices/{serviceName}/exchange/billingMigrated";
            return this.SendAsync<bool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/exchange/task
        public Task<System.Int64[]> GetV1MsServicesServiceNameExchangeTaskAsync(string serviceName) {
            string uri = $"/v1/msServices/{serviceName}/exchange/task";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/exchange/task/{id}
        public Task<_msServices.exchangeTask> GetV1MsServicesServiceNameExchangeTaskIdAsync(long id, string serviceName) {
            string uri = $"/v1/msServices/{serviceName}/exchange/task/{id}";
            return this.SendAsync<_msServices.exchangeTask>("GET", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/removeMfaOnAllUsers
        public Task<_msServices.Task> PostV1MsServicesServiceNameRemoveMfaOnAllUsersAsync(string serviceName) {
            string uri = $"/v1/msServices/{serviceName}/removeMfaOnAllUsers";
            return this.SendAsync<_msServices.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/sharepoint
        public Task<_msServices.SharepointService> GetV1MsServicesServiceNameSharepointAsync(string serviceName) {
            string uri = $"/v1/msServices/{serviceName}/sharepoint";
            return this.SendAsync<_msServices.SharepointService>("GET", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/sharepoint
        public Task PutV1MsServicesServiceNameSharepointAsync(_msServices.SharepointService _body, string serviceName) {
            string uri = $"/v1/msServices/{serviceName}/sharepoint";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/msServices/{serviceName}/sharepoint/billingMigrated
        public Task<System.Boolean> GetV1MsServicesServiceNameSharepointBillingMigratedAsync(string serviceName) {
            string uri = $"/v1/msServices/{serviceName}/sharepoint/billingMigrated";
            return this.SendAsync<bool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/sharepoint/license
        public Task<_msServices.SharepointDailyLicense[]> GetV1MsServicesServiceNameSharepointLicenseAsync(_msServices.LicensePeriodEnum period, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _msServices.SharepointLicenseEnum? license) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("license", license);
            queryParametersTemp.Add("period", period);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/msServices/{serviceName}/sharepoint/license{queryParameters}";
            return this.SendAsync<_msServices.SharepointDailyLicense[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/sharepoint/restoreAdminRights
        public Task<_msServices.sharepointTask> PostV1MsServicesServiceNameSharepointRestoreAdminRightsAsync(string serviceName) {
            string uri = $"/v1/msServices/{serviceName}/sharepoint/restoreAdminRights";
            return this.SendAsync<_msServices.sharepointTask>("POST", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/sharepoint/task
        public Task<System.Int64[]> GetV1MsServicesServiceNameSharepointTaskAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? function, [System.Runtime.InteropServices.OptionalAttribute()] _msServices.TaskStatusEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("function", function);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/msServices/{serviceName}/sharepoint/task{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/sharepoint/task/{id}
        public Task<_msServices.sharepointTask> GetV1MsServicesServiceNameSharepointTaskIdAsync(long id, string serviceName) {
            string uri = $"/v1/msServices/{serviceName}/sharepoint/task/{id}";
            return this.SendAsync<_msServices.sharepointTask>("GET", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/sync
        public Task<_msServices.Task> DeleteV1MsServicesServiceNameSyncAsync(string serviceName) {
            string uri = $"/v1/msServices/{serviceName}/sync";
            return this.SendAsync<_msServices.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/sync
        public Task<_msServices.SyncService> GetV1MsServicesServiceNameSyncAsync(string serviceName) {
            string uri = $"/v1/msServices/{serviceName}/sync";
            return this.SendAsync<_msServices.SyncService>("GET", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/sync/changePassword
        public Task<_msServices.Task> PostV1MsServicesServiceNameSyncChangePasswordAsync(string password, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("password", password);
            string uri = $"/v1/msServices/{serviceName}/sync/changePassword";
            return this.SendAsync<_msServices.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/msServices/{serviceName}/sync/clientSoftwareURL
        public Task<_msServices.ActiveDirectorySyncClientUrl> GetV1MsServicesServiceNameSyncClientSoftwareURLAsync(string serviceName) {
            string uri = $"/v1/msServices/{serviceName}/sync/clientSoftwareURL";
            return this.SendAsync<_msServices.ActiveDirectorySyncClientUrl>("GET", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/sync/clientSoftwareURL
        public Task<_msServices.Task> PostV1MsServicesServiceNameSyncClientSoftwareURLAsync(string serviceName) {
            string uri = $"/v1/msServices/{serviceName}/sync/clientSoftwareURL";
            return this.SendAsync<_msServices.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/sync/license
        public Task<_msServices.SyncDailyLicense[]> GetV1MsServicesServiceNameSyncLicenseAsync(_msServices.LicensePeriodEnum period, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _msServices.SyncLicenseEnum? license) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("license", license);
            queryParametersTemp.Add("period", period);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/msServices/{serviceName}/sync/license{queryParameters}";
            return this.SendAsync<_msServices.SyncDailyLicense[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/task
        public Task<System.Int64[]> GetV1MsServicesServiceNameTaskAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _msServices.TaskFunctionEnum? function, [System.Runtime.InteropServices.OptionalAttribute()] _msServices.TaskStatusEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("function", function);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/msServices/{serviceName}/task{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/task/{id}
        public Task<_msServices.Task> GetV1MsServicesServiceNameTaskIdAsync(long id, string serviceName) {
            string uri = $"/v1/msServices/{serviceName}/task/{id}";
            return this.SendAsync<_msServices.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/upnSuffix
        public Task<System.String[]> GetV1MsServicesServiceNameUpnSuffixAsync(string serviceName) {
            string uri = $"/v1/msServices/{serviceName}/upnSuffix";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/upnSuffix
        public Task<_msServices.Task> PostV1MsServicesServiceNameUpnSuffixAsync(string serviceName, string suffix) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("suffix", suffix);
            string uri = $"/v1/msServices/{serviceName}/upnSuffix";
            return this.SendAsync<_msServices.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/msServices/{serviceName}/upnSuffix/{suffix}
        public Task<_msServices.Task> DeleteV1MsServicesServiceNameUpnSuffixSuffixAsync(string serviceName, string suffix) {
            string uri = $"/v1/msServices/{serviceName}/upnSuffix/{suffix}";
            return this.SendAsync<_msServices.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/msServices/{serviceName}/upnSuffix/{suffix}
        public Task<_msServices.upnSuffix> GetV1MsServicesServiceNameUpnSuffixSuffixAsync(string serviceName, string suffix) {
            string uri = $"/v1/msServices/{serviceName}/upnSuffix/{suffix}";
            return this.SendAsync<_msServices.upnSuffix>("GET", uri, null, null, true);
        }
        
        // Path: /v1/newAccount
        public Task<_nichandle.NewAccountAndToken> PostV1NewAccountAsync(
                    _nichandle.CountryEnum country, 
                    string email, 
                    _nichandle.LegalFormEnum legalform, 
                    _nichandle.OvhCompanyEnum ovhCompany, 
                    _nichandle.OvhSubsidiaryEnum ovhSubsidiary, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? address, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? area, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? birthCity, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? birthDay, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? city, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? companyNationalIdentificationNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? corporationType, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? fax, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? firstname, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? italianSDI, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _nichandle.LanguageEnum? language, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? name, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? nationalIdentificationNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? organisation, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? phone, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _nichandle.CountryEnum? phoneCountry, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _nichandle.PhoneTypeEnum? phoneType, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? purposeOfPurchase, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _nichandle.GenderEnum? sex, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? spareEmail, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? vat, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? zip) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("address", address);
            _body.Add("area", area);
            _body.Add("birthCity", birthCity);
            _body.Add("birthDay", birthDay);
            _body.Add("city", city);
            _body.Add("companyNationalIdentificationNumber", companyNationalIdentificationNumber);
            _body.Add("corporationType", corporationType);
            _body.Add("country", country);
            _body.Add("email", email);
            _body.Add("fax", fax);
            _body.Add("firstname", firstname);
            _body.Add("italianSDI", italianSDI);
            _body.Add("language", language);
            _body.Add("legalform", legalform);
            _body.Add("name", name);
            _body.Add("nationalIdentificationNumber", nationalIdentificationNumber);
            _body.Add("organisation", organisation);
            _body.Add("ovhCompany", ovhCompany);
            _body.Add("ovhSubsidiary", ovhSubsidiary);
            _body.Add("phone", phone);
            _body.Add("phoneCountry", phoneCountry);
            _body.Add("phoneType", phoneType);
            _body.Add("purposeOfPurchase", purposeOfPurchase);
            _body.Add("sex", sex);
            _body.Add("spareEmail", spareEmail);
            _body.Add("vat", vat);
            _body.Add("zip", zip);
            string uri = $"/v1/newAccount";
            return this.SendAsync<_nichandle.NewAccountAndToken>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/newAccount/area
        public Task<System.String[]> GetV1NewAccountAreaAsync(_nichandle.CountryEnum country) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("country", country);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/newAccount/area{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/newAccount/contracts
        public Task<_order.Contract[]> GetV1NewAccountContractsAsync(_nichandle.OvhCompanyEnum company, _nichandle.OvhSubsidiaryEnum subsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("company", company);
            queryParametersTemp.Add("subsidiary", subsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/newAccount/contracts{queryParameters}";
            return this.SendAsync<_order.Contract[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/newAccount/corporationType
        public Task<System.String[]> GetV1NewAccountCorporationTypeAsync(_nichandle.CountryEnum country) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("country", country);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/newAccount/corporationType{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/newAccount/countries
        public Task<_nichandle.CountryEnum[]> GetV1NewAccountCountriesAsync(_nichandle.OvhCompanyEnum ovhCompany, _nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhCompany", ovhCompany);
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/newAccount/countries{queryParameters}";
            return this.SendAsync<_nichandle.CountryEnum[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/newAccount/creationRules
        public Task<_nichandle.CreationRules> GetV1NewAccountCreationRulesAsync(_nichandle.CountryEnum country, _nichandle.LegalFormEnum legalform, _nichandle.OvhCompanyEnum ovhCompany, _nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("country", country);
            queryParametersTemp.Add("legalform", legalform);
            queryParametersTemp.Add("ovhCompany", ovhCompany);
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/newAccount/creationRules{queryParameters}";
            return this.SendAsync<_nichandle.CreationRules>("GET", uri, null, null, false);
        }
        
        // Path: /v1/newAccount/legalform
        public Task<System.String[]> GetV1NewAccountLegalformAsync(_nichandle.CountryEnum country) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("country", country);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/newAccount/legalform{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/newAccount/rules
        public Task<_nichandle.CreationRule[]> PostV1NewAccountRulesAsync(
                    [System.Runtime.InteropServices.OptionalAttribute()] _nichandle.CreationRulesActionEnum? action, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? address, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? area, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? birthCity, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? birthDay, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? city, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? companyNationalIdentificationNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? corporationType, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _nichandle.CountryEnum? country, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? email, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? fax, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? firstname, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? italianSDI, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _nichandle.LanguageEnum? language, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _nichandle.LegalFormEnum? legalform, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? name, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? nationalIdentificationNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? organisation, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _nichandle.OvhCompanyEnum? ovhCompany, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _nichandle.OvhSubsidiaryEnum? ovhSubsidiary, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? phone, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _nichandle.CountryEnum? phoneCountry, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _nichandle.PhoneTypeEnum? phoneType, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? purposeOfPurchase, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _nichandle.GenderEnum? sex, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? spareEmail, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? vat, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? zip) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("action", action);
            _body.Add("address", address);
            _body.Add("area", area);
            _body.Add("birthCity", birthCity);
            _body.Add("birthDay", birthDay);
            _body.Add("city", city);
            _body.Add("companyNationalIdentificationNumber", companyNationalIdentificationNumber);
            _body.Add("corporationType", corporationType);
            _body.Add("country", country);
            _body.Add("email", email);
            _body.Add("fax", fax);
            _body.Add("firstname", firstname);
            _body.Add("italianSDI", italianSDI);
            _body.Add("language", language);
            _body.Add("legalform", legalform);
            _body.Add("name", name);
            _body.Add("nationalIdentificationNumber", nationalIdentificationNumber);
            _body.Add("organisation", organisation);
            _body.Add("ovhCompany", ovhCompany);
            _body.Add("ovhSubsidiary", ovhSubsidiary);
            _body.Add("phone", phone);
            _body.Add("phoneCountry", phoneCountry);
            _body.Add("phoneType", phoneType);
            _body.Add("purposeOfPurchase", purposeOfPurchase);
            _body.Add("sex", sex);
            _body.Add("spareEmail", spareEmail);
            _body.Add("vat", vat);
            _body.Add("zip", zip);
            string uri = $"/v1/newAccount/rules";
            return this.SendAsync<_nichandle.CreationRule[]>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/nutanix
        public Task<System.String[]> GetV1NutanixAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/nutanix{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/nutanix/availabilities
        public Task<_nutanix.availability[]> GetV1NutanixAvailabilitiesAsync(long quantity, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? erasureCoding, [System.Runtime.InteropServices.OptionalAttribute()] System.String? memory, [System.Runtime.InteropServices.OptionalAttribute()] System.String? planCode, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? rackAwareness, [System.Runtime.InteropServices.OptionalAttribute()] _nutanix.RedundancyFactorEnum? redundancyFactor, [System.Runtime.InteropServices.OptionalAttribute()] System.String? server, [System.Runtime.InteropServices.OptionalAttribute()] System.String? storage, [System.Runtime.InteropServices.OptionalAttribute()] System.String? systemStorage) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("erasureCoding", erasureCoding);
            queryParametersTemp.Add("memory", memory);
            queryParametersTemp.Add("planCode", planCode);
            queryParametersTemp.Add("quantity", quantity);
            queryParametersTemp.Add("rackAwareness", rackAwareness);
            queryParametersTemp.Add("redundancyFactor", redundancyFactor);
            queryParametersTemp.Add("server", server);
            queryParametersTemp.Add("storage", storage);
            queryParametersTemp.Add("systemStorage", systemStorage);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/nutanix/availabilities{queryParameters}";
            return this.SendAsync<_nutanix.availability[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/nutanix/availabilities/raw
        public Task<_nutanix.AvailabilitiesRaw[]> GetV1NutanixAvailabilitiesRawAsync(long quantity, [System.Runtime.InteropServices.OptionalAttribute()] System.String? datacenters, [System.Runtime.InteropServices.OptionalAttribute()] _nutanix.DeploymentTypeEnum? deploymentType, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? erasureCoding, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? excludeDatacenters, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? excludeRegions, [System.Runtime.InteropServices.OptionalAttribute()] System.String? memory, [System.Runtime.InteropServices.OptionalAttribute()] System.String? planCode, [System.Runtime.InteropServices.OptionalAttribute()] _nutanix.RedundancyFactorEnum? redundancyFactor, [System.Runtime.InteropServices.OptionalAttribute()] System.String? regions, [System.Runtime.InteropServices.OptionalAttribute()] System.String? server, [System.Runtime.InteropServices.OptionalAttribute()] System.String? storage, [System.Runtime.InteropServices.OptionalAttribute()] System.String? systemStorage) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("datacenters", datacenters);
            queryParametersTemp.Add("deploymentType", deploymentType);
            queryParametersTemp.Add("erasureCoding", erasureCoding);
            queryParametersTemp.Add("excludeDatacenters", excludeDatacenters);
            queryParametersTemp.Add("excludeRegions", excludeRegions);
            queryParametersTemp.Add("memory", memory);
            queryParametersTemp.Add("planCode", planCode);
            queryParametersTemp.Add("quantity", quantity);
            queryParametersTemp.Add("redundancyFactor", redundancyFactor);
            queryParametersTemp.Add("regions", regions);
            queryParametersTemp.Add("server", server);
            queryParametersTemp.Add("storage", storage);
            queryParametersTemp.Add("systemStorage", systemStorage);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/nutanix/availabilities/raw{queryParameters}";
            return this.SendAsync<_nutanix.AvailabilitiesRaw[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/nutanix/availableVersions
        public Task<System.String[]> GetV1NutanixAvailableVersionsAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? fqn) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("fqn", fqn);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/nutanix/availableVersions{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/nutanix/requirements
        public Task<_nutanix.Requirements> GetV1NutanixRequirementsAsync(bool erasureCoding, bool rackAwareness, _nutanix.RedundancyFactorEnum redundancyFactor) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("erasureCoding", erasureCoding);
            queryParametersTemp.Add("rackAwareness", rackAwareness);
            queryParametersTemp.Add("redundancyFactor", redundancyFactor);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/nutanix/requirements{queryParameters}";
            return this.SendAsync<_nutanix.Requirements>("GET", uri, null, null, false);
        }
        
        // Path: /v1/nutanix/{serviceName}
        public Task<_nutanix.stateWithIAM> GetV1NutanixServiceNameAsync(string serviceName) {
            string uri = $"/v1/nutanix/{serviceName}";
            return this.SendAsync<_nutanix.stateWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/nutanix/{serviceName}
        public Task<_nutanix.state> PutV1NutanixServiceNameAsync(_nutanix.cluster _body, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? redeploycluster, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? scaleUp) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("redeploycluster", redeploycluster);
            queryParametersTemp.Add("scaleUp", scaleUp);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/nutanix/{serviceName}{queryParameters}";
            return this.SendAsync<_nutanix.state>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/nutanix/{serviceName}/changeContact
        public Task<System.Int64[]> PostV1NutanixServiceNameChangeContactAsync(_services.changeContact _body, string serviceName) {
            string uri = $"/v1/nutanix/{serviceName}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/nutanix/{serviceName}/confirmTermination
        public Task<System.String> PostV1NutanixServiceNameConfirmTerminationAsync(_services.confirmTermination _body, string serviceName) {
            string uri = $"/v1/nutanix/{serviceName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/nutanix/{serviceName}/nodes
        public Task<_nutanix.nodeDetails[]> GetV1NutanixServiceNameNodesAsync(string serviceName) {
            string uri = $"/v1/nutanix/{serviceName}/nodes";
            return this.SendAsync<_nutanix.nodeDetails[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/nutanix/{serviceName}/nodes/{server}
        public Task<_nutanix.nodeDetails> GetV1NutanixServiceNameNodesServerAsync(string server, string serviceName) {
            string uri = $"/v1/nutanix/{serviceName}/nodes/{server}";
            return this.SendAsync<_nutanix.nodeDetails>("GET", uri, null, null, true);
        }
        
        // Path: /v1/nutanix/{serviceName}/nodes/{server}/deploy
        public Task PutV1NutanixServiceNameNodesServerDeployAsync(_nutanix.deploy _body, string server, string serviceName) {
            string uri = $"/v1/nutanix/{serviceName}/nodes/{server}/deploy";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/nutanix/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1NutanixServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/nutanix/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/nutanix/{serviceName}/serviceInfos
        public Task PutV1NutanixServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/nutanix/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/nutanix/{serviceName}/terminate
        public Task<System.String> PostV1NutanixServiceNameTerminateAsync(string serviceName) {
            string uri = $"/v1/nutanix/{serviceName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/order/cart
        public Task<System.String[]> GetV1OrderCartAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? description) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("description", description);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cart
        public Task<_order_cart.Cart> PostV1OrderCartAsync(_order_cart.Creation _body) {
            string uri = $"/v1/order/cart";
            return this.SendAsync<_order_cart.Cart>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}
        public Task DeleteV1OrderCartCartIdAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/order/cart/{cartId}
        public Task<_order_cart.Cart> GetV1OrderCartCartIdAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}";
            return this.SendAsync<_order_cart.Cart>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}
        public Task<_order_cart.Cart> PutV1OrderCartCartIdAsync(_order_cart.Update _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}";
            return this.SendAsync<_order_cart.Cart>("PUT", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/advisoryServicesHostingWeb
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdAdvisoryServicesHostingWebAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/advisoryServicesHostingWeb";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cart/{cartId}/advisoryServicesHostingWeb
        public Task<_order_cart.Item> PostV1OrderCartCartIdAdvisoryServicesHostingWebAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/advisoryServicesHostingWeb";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cart/{cartId}/advisoryServicesHostingWeb/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdAdvisoryServicesHostingWebOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/advisoryServicesHostingWeb/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cart/{cartId}/advisoryServicesHostingWeb/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdAdvisoryServicesHostingWebOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/advisoryServicesHostingWeb/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cart/{cartId}/advisoryServicesPublicCloud
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdAdvisoryServicesPublicCloudAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/advisoryServicesPublicCloud";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cart/{cartId}/advisoryServicesPublicCloud
        public Task<_order_cart.Item> PostV1OrderCartCartIdAdvisoryServicesPublicCloudAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/advisoryServicesPublicCloud";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cart/{cartId}/advisoryServicesPublicCloud/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdAdvisoryServicesPublicCloudOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/advisoryServicesPublicCloud/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cart/{cartId}/advisoryServicesPublicCloud/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdAdvisoryServicesPublicCloudOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/advisoryServicesPublicCloud/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cart/{cartId}/advisoryServicesTelecom
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdAdvisoryServicesTelecomAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/advisoryServicesTelecom";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cart/{cartId}/advisoryServicesTelecom
        public Task<_order_cart.Item> PostV1OrderCartCartIdAdvisoryServicesTelecomAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/advisoryServicesTelecom";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cart/{cartId}/advisoryServicesTelecom/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdAdvisoryServicesTelecomOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/advisoryServicesTelecom/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cart/{cartId}/advisoryServicesTelecom/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdAdvisoryServicesTelecomOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/advisoryServicesTelecom/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cart/{cartId}/analytics
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdAnalyticsAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/analytics";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/analytics
        public Task<_order_cart.Item> PostV1OrderCartCartIdAnalyticsAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/analytics";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/analytics/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdAnalyticsOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/analytics/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/analytics/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdAnalyticsOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/analytics/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/assign
        public Task PostV1OrderCartCartIdAssignAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/assign";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/order/cart/{cartId}/baremetalServers
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdBaremetalServersAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/baremetalServers";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/baremetalServers
        public Task<_order_cart.Item> PostV1OrderCartCartIdBaremetalServersAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/baremetalServers";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/baremetalServers/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdBaremetalServersOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/baremetalServers/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/baremetalServers/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdBaremetalServersOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/baremetalServers/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/bringYourOwnIp
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdBringYourOwnIpAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/bringYourOwnIp";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/bringYourOwnIp
        public Task<_order_cart.Item> PostV1OrderCartCartIdBringYourOwnIpAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/bringYourOwnIp";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/cdn
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdCdnAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/cdn";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/cdn
        public Task<_order_cart.Item> PostV1OrderCartCartIdCdnAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/cdn";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/cdn/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdCdnOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/cdn/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/cdn/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdCdnOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/cdn/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/cephaas
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdCephaasAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/cephaas";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/cephaas
        public Task<_order_cart.Item> PostV1OrderCartCartIdCephaasAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/cephaas";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/cephaas/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdCephaasOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/cephaas/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/cephaas/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdCephaasOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/cephaas/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/checkout
        public Task<_order.Order> GetV1OrderCartCartIdCheckoutAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/checkout";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cart/{cartId}/checkout
        public Task<_order.Order> PostV1OrderCartCartIdCheckoutAsync(_order_cart.Checkout _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/checkout";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cart/{cartId}/cloud
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdCloudAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/cloud";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/cloud
        public Task<_order_cart.Item> PostV1OrderCartCartIdCloudAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/cloud";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/cloud/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdCloudOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/cloud/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/cloud/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdCloudOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/cloud/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/cloudDB
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdCloudDBAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/cloudDB";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/cloudDB
        public Task<_order_cart.Item> PostV1OrderCartCartIdCloudDBAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/cloudDB";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/cloudweb
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdCloudwebAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/cloudweb";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/cloudweb
        public Task<_order_cart.Item> PostV1OrderCartCartIdCloudwebAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/cloudweb";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/cloudweb/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdCloudwebOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/cloudweb/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/cloudweb/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdCloudwebOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/cloudweb/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/coupon
        public Task DeleteV1OrderCartCartIdCouponAsync(string cartId, string coupon) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("coupon", coupon);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/coupon{queryParameters}";
            return this.SendAsync("DELETE", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/coupon
        public Task<System.String[]> GetV1OrderCartCartIdCouponAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/coupon";
            return this.SendAsync<string[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/coupon
        public Task<System.String[]> PostV1OrderCartCartIdCouponAsync(_order_cart.CouponCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/coupon";
            return this.SendAsync<string[]>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/csp2
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdCsp2Async(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/csp2";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/csp2
        public Task<_order_cart.Item> PostV1OrderCartCartIdCsp2Async(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/csp2";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/csp2/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdCsp2OptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/csp2/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/csp2/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdCsp2OptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/csp2/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/dbaasTimeseries
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdDbaasTimeseriesAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/dbaasTimeseries";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/dbaasTimeseries
        public Task<_order_cart.Item> PostV1OrderCartCartIdDbaasTimeseriesAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/dbaasTimeseries";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/dedicated
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdDedicatedAsync(string cartId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? family, [System.Runtime.InteropServices.OptionalAttribute()] System.String? planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("family", family);
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/dedicated{queryParameters}";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/dedicated
        public Task<_order_cart.Item> PostV1OrderCartCartIdDedicatedAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/dedicated";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/dedicated/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdDedicatedOptionsAsync(string cartId, string planCode, [System.Runtime.InteropServices.OptionalAttribute()] System.String? family) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("family", family);
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/dedicated/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/dedicated/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdDedicatedOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/dedicated/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/dedicatedCloud
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdDedicatedCloudAsync(string cartId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? family, [System.Runtime.InteropServices.OptionalAttribute()] System.String? planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("family", family);
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/dedicatedCloud{queryParameters}";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/dedicatedCloud
        public Task<_order_cart.Item> PostV1OrderCartCartIdDedicatedCloudAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/dedicatedCloud";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/dedicatedCloud/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdDedicatedCloudOptionsAsync(string cartId, string planCode, [System.Runtime.InteropServices.OptionalAttribute()] System.String? family) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("family", family);
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/dedicatedCloud/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/dedicatedCloud/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdDedicatedCloudOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/dedicatedCloud/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/dedicatedDirectSales
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdDedicatedDirectSalesAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/dedicatedDirectSales";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cart/{cartId}/dedicatedDirectSales
        public Task<_order_cart.Item> PostV1OrderCartCartIdDedicatedDirectSalesAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/dedicatedDirectSales";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cart/{cartId}/dedicatedDirectSales/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdDedicatedDirectSalesOptionsAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/dedicatedDirectSales/options";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cart/{cartId}/dedicatedDirectSales/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdDedicatedDirectSalesOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/dedicatedDirectSales/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cart/{cartId}/dedicatedLabs
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdDedicatedLabsAsync(string cartId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/dedicatedLabs{queryParameters}";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/dedicatedLabs
        public Task<_order_cart.Item> PostV1OrderCartCartIdDedicatedLabsAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/dedicatedLabs";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/dedicatedLabs/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdDedicatedLabsOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/dedicatedLabs/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/dedicatedLabs/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdDedicatedLabsOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/dedicatedLabs/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/dedicatedLegacy
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdDedicatedLegacyAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/dedicatedLegacy";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/dedicatedLegacy
        public Task<_order_cart.Item> PostV1OrderCartCartIdDedicatedLegacyAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/dedicatedLegacy";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/dedicatedLegacy/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdDedicatedLegacyOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/dedicatedLegacy/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/dedicatedLegacy/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdDedicatedLegacyOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/dedicatedLegacy/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/dedicatedPciVps
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdDedicatedPciVpsAsync(string cartId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? family, [System.Runtime.InteropServices.OptionalAttribute()] System.String? planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("family", family);
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/dedicatedPciVps{queryParameters}";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/dedicatedPciVps
        public Task<_order_cart.Item> PostV1OrderCartCartIdDedicatedPciVpsAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/dedicatedPciVps";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/dedicatedPciVps/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdDedicatedPciVpsOptionsAsync(string cartId, string planCode, [System.Runtime.InteropServices.OptionalAttribute()] System.String? family) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("family", family);
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/dedicatedPciVps/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/dedicatedPciVps/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdDedicatedPciVpsOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/dedicatedPciVps/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/dedicatedReseller
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdDedicatedResellerAsync(string cartId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? family, [System.Runtime.InteropServices.OptionalAttribute()] System.String? planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("family", family);
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/dedicatedReseller{queryParameters}";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cart/{cartId}/dedicatedReseller
        public Task<_order_cart.Item> PostV1OrderCartCartIdDedicatedResellerAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/dedicatedReseller";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cart/{cartId}/dedicatedReseller/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdDedicatedResellerOptionsAsync(string cartId, string planCode, [System.Runtime.InteropServices.OptionalAttribute()] System.String? family) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("family", family);
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/dedicatedReseller/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cart/{cartId}/dedicatedReseller/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdDedicatedResellerOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/dedicatedReseller/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cart/{cartId}/deskaas
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdDeskaasAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/deskaas";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/deskaas
        public Task<_order_cart.Item> PostV1OrderCartCartIdDeskaasAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/deskaas";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/discover
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdDiscoverAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/discover";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/discover
        public Task<_order_cart.Item> PostV1OrderCartCartIdDiscoverAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/discover";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/discover/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdDiscoverOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/discover/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/discover/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdDiscoverOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/discover/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/dns
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdDnsAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/dns";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/dns
        public Task<_order_cart.Item> PostV1OrderCartCartIdDnsAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/dns";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/dns/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdDnsOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/dns/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/dns/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdDnsOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/dns/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/domain
        public Task<_order_cart.ProductInformation[]> GetV1OrderCartCartIdDomainAsync(string cartId, string domain) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("domain", domain);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/domain{queryParameters}";
            return this.SendAsync<_order_cart.ProductInformation[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cart/{cartId}/domain
        public Task<_order_cart.Item> PostV1OrderCartCartIdDomainAsync(_order_cart.GenericDomainCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/domain";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cart/{cartId}/domain/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdDomainOptionsAsync(string cartId, string domain) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("domain", domain);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/domain/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/domain/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdDomainOptionsAsync(_order_cart.GenericDomainOptionsCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/domain/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/domainPacks
        public Task<_order_cart.DomainPacksProductInformation[]> GetV1OrderCartCartIdDomainPacksAsync(string cartId, string domain) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("domain", domain);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/domainPacks{queryParameters}";
            return this.SendAsync<_order_cart.DomainPacksProductInformation[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/domainPacks
        public Task<_order_cart.Item> PostV1OrderCartCartIdDomainPacksAsync(_order_cart.DomainPacksCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/domainPacks";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/domainRestore
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdDomainRestoreAsync(string cartId, string domain) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("domain", domain);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/domainRestore{queryParameters}";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/eco
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdEcoAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/eco";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/eco
        public Task<_order_cart.Item> PostV1OrderCartCartIdEcoAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/eco";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/eco/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdEcoOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/eco/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/eco/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdEcoOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/eco/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/emailDomain
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdEmailDomainAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/emailDomain";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/emailDomain
        public Task<_order_cart.Item> PostV1OrderCartCartIdEmailDomainAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/emailDomain";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/emailpro
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdEmailproAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/emailpro";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/emailpro
        public Task<_order_cart.Item> PostV1OrderCartCartIdEmailproAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/emailpro";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/emailpro/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdEmailproOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/emailpro/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/emailpro/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdEmailproOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/emailpro/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/exchange
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdExchangeAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/exchange";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/exchange
        public Task<_order_cart.Item> PostV1OrderCartCartIdExchangeAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/exchange";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/exchange/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdExchangeOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/exchange/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/exchange/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdExchangeOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/exchange/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/exchangeEnterprise
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdExchangeEnterpriseAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/exchangeEnterprise";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/exchangeEnterprise
        public Task<_order_cart.Item> PostV1OrderCartCartIdExchangeEnterpriseAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/exchangeEnterprise";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/exchangeEnterprise/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdExchangeEnterpriseOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/exchangeEnterprise/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/exchangeEnterprise/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdExchangeEnterpriseOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/exchangeEnterprise/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/ip
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdIpAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/ip";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/ip
        public Task<_order_cart.Item> PostV1OrderCartCartIdIpAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/ip";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/ip/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdIpOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/ip/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/ip/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdIpOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/ip/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/ipLoadbalancing
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdIpLoadbalancingAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/ipLoadbalancing";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/ipLoadbalancing
        public Task<_order_cart.Item> PostV1OrderCartCartIdIpLoadbalancingAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/ipLoadbalancing";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/ipLoadbalancing/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdIpLoadbalancingOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/ipLoadbalancing/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/ipLoadbalancing/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdIpLoadbalancingOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/ipLoadbalancing/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/ipReseller
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdIpResellerAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/ipReseller";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cart/{cartId}/ipReseller
        public Task<_order_cart.Item> PostV1OrderCartCartIdIpResellerAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/ipReseller";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cart/{cartId}/ispPublic
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdIspPublicAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/ispPublic";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/ispPublic
        public Task<_order_cart.Item> PostV1OrderCartCartIdIspPublicAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/ispPublic";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/ispPublic/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdIspPublicOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/ispPublic/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/ispPublic/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdIspPublicOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/ispPublic/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/ispReseller
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdIspResellerAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/ispReseller";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/ispReseller
        public Task<_order_cart.Item> PostV1OrderCartCartIdIspResellerAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/ispReseller";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/ispReseller/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdIspResellerOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/ispReseller/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/ispReseller/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdIspResellerOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/ispReseller/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/item
        public Task<System.Int64[]> GetV1OrderCartCartIdItemAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/item";
            return this.SendAsync<long[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/item/{itemId}
        public Task DeleteV1OrderCartCartIdItemItemIdAsync(string cartId, long itemId) {
            string uri = $"/v1/order/cart/{cartId}/item/{itemId}";
            return this.SendAsync("DELETE", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/item/{itemId}
        public Task<_order_cart.Item> GetV1OrderCartCartIdItemItemIdAsync(string cartId, long itemId) {
            string uri = $"/v1/order/cart/{cartId}/item/{itemId}";
            return this.SendAsync<_order_cart.Item>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/item/{itemId}
        public Task<_order_cart.Item> PutV1OrderCartCartIdItemItemIdAsync(_order_cart.ItemUpdate _body, string cartId, long itemId) {
            string uri = $"/v1/order/cart/{cartId}/item/{itemId}";
            return this.SendAsync<_order_cart.Item>("PUT", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/item/{itemId}/configuration
        public Task<System.Int64[]> GetV1OrderCartCartIdItemItemIdConfigurationAsync(string cartId, long itemId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? label) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("label", label);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/item/{itemId}/configuration{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/item/{itemId}/configuration
        public Task<_order_cart.ConfigurationItem> PostV1OrderCartCartIdItemItemIdConfigurationAsync(_order_cart.ItemConfigurationCreation _body, string cartId, long itemId) {
            string uri = $"/v1/order/cart/{cartId}/item/{itemId}/configuration";
            return this.SendAsync<_order_cart.ConfigurationItem>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/item/{itemId}/configuration/{configurationId}
        public Task DeleteV1OrderCartCartIdItemItemIdConfigurationConfigurationIdAsync(string cartId, long configurationId, long itemId) {
            string uri = $"/v1/order/cart/{cartId}/item/{itemId}/configuration/{configurationId}";
            return this.SendAsync("DELETE", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/item/{itemId}/configuration/{configurationId}
        public Task<_order_cart.ConfigurationItem> GetV1OrderCartCartIdItemItemIdConfigurationConfigurationIdAsync(string cartId, long configurationId, long itemId) {
            string uri = $"/v1/order/cart/{cartId}/item/{itemId}/configuration/{configurationId}";
            return this.SendAsync<_order_cart.ConfigurationItem>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/item/{itemId}/requiredConfiguration
        public Task<_order_cart.ConfigurationRequirements[]> GetV1OrderCartCartIdItemItemIdRequiredConfigurationAsync(string cartId, long itemId) {
            string uri = $"/v1/order/cart/{cartId}/item/{itemId}/requiredConfiguration";
            return this.SendAsync<_order_cart.ConfigurationRequirements[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/kubernetes
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdKubernetesAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/kubernetes";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/kubernetes
        public Task<_order_cart.Item> PostV1OrderCartCartIdKubernetesAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/kubernetes";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/kubernetes/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdKubernetesOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/kubernetes/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/kubernetes/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdKubernetesOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/kubernetes/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/licenseCloudLinux
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdLicenseCloudLinuxAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/licenseCloudLinux";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/licenseCloudLinux
        public Task<_order_cart.Item> PostV1OrderCartCartIdLicenseCloudLinuxAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/licenseCloudLinux";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/licenseDirectadmin
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdLicenseDirectadminAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/licenseDirectadmin";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/licenseDirectadmin
        public Task<_order_cart.Item> PostV1OrderCartCartIdLicenseDirectadminAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/licenseDirectadmin";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/licensePlesk
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdLicensePleskAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/licensePlesk";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/licensePlesk
        public Task<_order_cart.Item> PostV1OrderCartCartIdLicensePleskAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/licensePlesk";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/licensePlesk/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdLicensePleskOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/licensePlesk/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/licensePlesk/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdLicensePleskOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/licensePlesk/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/licenseSqlServer
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdLicenseSqlServerAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/licenseSqlServer";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/licenseSqlServer
        public Task<_order_cart.Item> PostV1OrderCartCartIdLicenseSqlServerAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/licenseSqlServer";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/licenseVirtuozzo
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdLicenseVirtuozzoAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/licenseVirtuozzo";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/licenseVirtuozzo
        public Task<_order_cart.Item> PostV1OrderCartCartIdLicenseVirtuozzoAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/licenseVirtuozzo";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/licenseWindows
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdLicenseWindowsAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/licenseWindows";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/licenseWindows
        public Task<_order_cart.Item> PostV1OrderCartCartIdLicenseWindowsAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/licenseWindows";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/licenseWorklight
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdLicenseWorklightAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/licenseWorklight";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/licenseWorklight
        public Task<_order_cart.Item> PostV1OrderCartCartIdLicenseWorklightAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/licenseWorklight";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/licensecPanel
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdLicensecPanelAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/licensecPanel";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/licensecPanel
        public Task<_order_cart.Item> PostV1OrderCartCartIdLicensecPanelAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/licensecPanel";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/logs
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdLogsAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/logs";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/logs
        public Task<_order_cart.Item> PostV1OrderCartCartIdLogsAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/logs";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/logs/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdLogsOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/logs/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/logs/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdLogsOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/logs/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/managedServices
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdManagedServicesAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/managedServices";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/managedServices
        public Task<_order_cart.Item> PostV1OrderCartCartIdManagedServicesAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/managedServices";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/managedServices/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdManagedServicesOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/managedServices/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/managedServices/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdManagedServicesOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/managedServices/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/metrics
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdMetricsAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/metrics";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/metrics
        public Task<_order_cart.Item> PostV1OrderCartCartIdMetricsAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/metrics";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/metrics/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdMetricsOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/metrics/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/metrics/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdMetricsOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/metrics/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/microsoft
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdMicrosoftAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/microsoft";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/microsoft
        public Task<_order_cart.Item> PostV1OrderCartCartIdMicrosoftAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/microsoft";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/microsoft/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdMicrosoftOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/microsoft/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/microsoft/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdMicrosoftOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/microsoft/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/nasha
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdNashaAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/nasha";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/nasha
        public Task<_order_cart.Item> PostV1OrderCartCartIdNashaAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/nasha";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/nasha/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdNashaOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/nasha/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/nasha/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdNashaOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/nasha/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/netapp
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdNetappAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/netapp";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/netapp
        public Task<_order_cart.Item> PostV1OrderCartCartIdNetappAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/netapp";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/netapp/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdNetappOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/netapp/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/netapp/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdNetappOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/netapp/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/nutanix
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdNutanixAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/nutanix";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/nutanix
        public Task<_order_cart.Item> PostV1OrderCartCartIdNutanixAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/nutanix";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/nutanix/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdNutanixOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/nutanix/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/nutanix/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdNutanixOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/nutanix/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/office365
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdOffice365Async(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/office365";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/office365
        public Task<_order_cart.Item> PostV1OrderCartCartIdOffice365Async(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/office365";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/office365/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdOffice365OptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/office365/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/office365/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdOffice365OptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/office365/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/office365Prepaid
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdOffice365PrepaidAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/office365Prepaid";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/office365Prepaid
        public Task<_order_cart.Item> PostV1OrderCartCartIdOffice365PrepaidAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/office365Prepaid";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/office365Prepaid/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdOffice365PrepaidOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/office365Prepaid/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/office365Prepaid/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdOffice365PrepaidOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/office365Prepaid/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/officePrepaid
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdOfficePrepaidAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/officePrepaid";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/officePrepaid
        public Task<_order_cart.Item> PostV1OrderCartCartIdOfficePrepaidAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/officePrepaid";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/officePrepaid/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdOfficePrepaidOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/officePrepaid/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/officePrepaid/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdOfficePrepaidOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/officePrepaid/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/okms
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdOkmsAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/okms";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/okms
        public Task<_order_cart.Item> PostV1OrderCartCartIdOkmsAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/okms";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/otb
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdOtbAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/otb";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/otb
        public Task<_order_cart.Item> PostV1OrderCartCartIdOtbAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/otb";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/otb/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdOtbOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/otb/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/otb/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdOtbOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/otb/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/otbReseller
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdOtbResellerAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/otbReseller";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/otbReseller
        public Task<_order_cart.Item> PostV1OrderCartCartIdOtbResellerAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/otbReseller";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/otbReseller/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdOtbResellerOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/otbReseller/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/otbReseller/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdOtbResellerOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/otbReseller/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/ovhCloudConnect
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdOvhCloudConnectAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/ovhCloudConnect";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/ovhCloudConnect
        public Task<_order_cart.Item> PostV1OrderCartCartIdOvhCloudConnectAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/ovhCloudConnect";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/paasmon
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdPaasmonAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/paasmon";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/paasmon
        public Task<_order_cart.Item> PostV1OrderCartCartIdPaasmonAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/paasmon";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/packsProfessionalServices
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdPacksProfessionalServicesAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/packsProfessionalServices";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/packsProfessionalServices
        public Task<_order_cart.Item> PostV1OrderCartCartIdPacksProfessionalServicesAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/packsProfessionalServices";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/packsProfessionalServices/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdPacksProfessionalServicesOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/packsProfessionalServices/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/packsProfessionalServices/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdPacksProfessionalServicesOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/packsProfessionalServices/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/powerHosting
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdPowerHostingAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/powerHosting";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/powerHosting
        public Task<_order_cart.Item> PostV1OrderCartCartIdPowerHostingAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/powerHosting";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/privateCloud
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdPrivateCloudAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/privateCloud";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/privateCloud
        public Task<_order_cart.Item> PostV1OrderCartCartIdPrivateCloudAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/privateCloud";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/privateCloud/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdPrivateCloudOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/privateCloud/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/privateCloud/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdPrivateCloudOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/privateCloud/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/privateCloudCDI
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdPrivateCloudCDIAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/privateCloudCDI";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/privateCloudCDI
        public Task<_order_cart.Item> PostV1OrderCartCartIdPrivateCloudCDIAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/privateCloudCDI";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/privateCloudCDI/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdPrivateCloudCDIOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/privateCloudCDI/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/privateCloudCDI/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdPrivateCloudCDIOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/privateCloudCDI/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/privateCloudDC
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdPrivateCloudDCAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/privateCloudDC";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/privateCloudDC
        public Task<_order_cart.Item> PostV1OrderCartCartIdPrivateCloudDCAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/privateCloudDC";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/privateCloudDC/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdPrivateCloudDCOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/privateCloudDC/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/privateCloudDC/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdPrivateCloudDCOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/privateCloudDC/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/privateCloudEnterprise
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdPrivateCloudEnterpriseAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/privateCloudEnterprise";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/privateCloudEnterprise
        public Task<_order_cart.Item> PostV1OrderCartCartIdPrivateCloudEnterpriseAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/privateCloudEnterprise";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/privateCloudEnterprise/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdPrivateCloudEnterpriseOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/privateCloudEnterprise/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/privateCloudEnterprise/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdPrivateCloudEnterpriseOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/privateCloudEnterprise/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/privateCloudReseller
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdPrivateCloudResellerAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/privateCloudReseller";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cart/{cartId}/privateCloudReseller
        public Task<_order_cart.Item> PostV1OrderCartCartIdPrivateCloudResellerAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/privateCloudReseller";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cart/{cartId}/privateCloudReseller/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdPrivateCloudResellerOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/privateCloudReseller/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cart/{cartId}/privateCloudReseller/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdPrivateCloudResellerOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/privateCloudReseller/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cart/{cartId}/privateCloudResellerEnterprise
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdPrivateCloudResellerEnterpriseAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/privateCloudResellerEnterprise";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cart/{cartId}/privateCloudResellerEnterprise
        public Task<_order_cart.Item> PostV1OrderCartCartIdPrivateCloudResellerEnterpriseAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/privateCloudResellerEnterprise";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cart/{cartId}/privateCloudResellerEnterprise/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdPrivateCloudResellerEnterpriseOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/privateCloudResellerEnterprise/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cart/{cartId}/privateCloudResellerEnterprise/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdPrivateCloudResellerEnterpriseOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/privateCloudResellerEnterprise/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cart/{cartId}/privateCloudSDDC
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdPrivateCloudSDDCAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/privateCloudSDDC";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/privateCloudSDDC
        public Task<_order_cart.Item> PostV1OrderCartCartIdPrivateCloudSDDCAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/privateCloudSDDC";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/privateCloudSDDC/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdPrivateCloudSDDCOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/privateCloudSDDC/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/privateCloudSDDC/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdPrivateCloudSDDCOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/privateCloudSDDC/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/privateSQL
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdPrivateSQLAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/privateSQL";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/privateSQL
        public Task<_order_cart.Item> PostV1OrderCartCartIdPrivateSQLAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/privateSQL";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/reseller
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdResellerAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/reseller";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/reseller
        public Task<_order_cart.Item> PostV1OrderCartCartIdResellerAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/reseller";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/sharepoint
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdSharepointAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/sharepoint";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/sharepoint
        public Task<_order_cart.Item> PostV1OrderCartCartIdSharepointAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/sharepoint";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/sharepoint/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdSharepointOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/sharepoint/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/sharepoint/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdSharepointOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/sharepoint/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/sms
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdSmsAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/sms";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/sms
        public Task<_order_cart.Item> PostV1OrderCartCartIdSmsAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/sms";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/sslComodo
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdSslComodoAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/sslComodo";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/sslComodo
        public Task<_order_cart.Item> PostV1OrderCartCartIdSslComodoAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/sslComodo";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/sslComodo/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdSslComodoOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/sslComodo/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/sslComodo/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdSslComodoOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/sslComodo/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/sslGateway
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdSslGatewayAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/sslGateway";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/sslGateway
        public Task<_order_cart.Item> PostV1OrderCartCartIdSslGatewayAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/sslGateway";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/sslGateway/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdSslGatewayOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/sslGateway/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/sslGateway/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdSslGatewayOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/sslGateway/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/summary
        public Task<_order.Order> GetV1OrderCartCartIdSummaryAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/summary";
            return this.SendAsync<_order.Order>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/support
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdSupportAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/support";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/support
        public Task<_order_cart.Item> PostV1OrderCartCartIdSupportAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/support";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/telephony
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdTelephonyAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/telephony";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/telephony
        public Task<_order_cart.Item> PostV1OrderCartCartIdTelephonyAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/telephony";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/telephony/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdTelephonyOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/telephony/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/telephony/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdTelephonyOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/telephony/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/vdi
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdVdiAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/vdi";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/vdi
        public Task<_order_cart.Item> PostV1OrderCartCartIdVdiAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/vdi";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/vdi/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdVdiOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/vdi/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/vdi/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdVdiOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/vdi/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/veeamEnterprise
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdVeeamEnterpriseAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/veeamEnterprise";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/veeamEnterprise
        public Task<_order_cart.Item> PostV1OrderCartCartIdVeeamEnterpriseAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/veeamEnterprise";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/veeamEnterprise/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdVeeamEnterpriseOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/veeamEnterprise/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/veeamEnterprise/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdVeeamEnterpriseOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/veeamEnterprise/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/veeamcc
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdVeeamccAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/veeamcc";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/veeamcc
        public Task<_order_cart.Item> PostV1OrderCartCartIdVeeamccAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/veeamcc";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/veeamcc/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdVeeamccOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/veeamcc/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/veeamcc/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdVeeamccOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/veeamcc/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/vps
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdVpsAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/vps";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/vps
        public Task<_order_cart.Item> PostV1OrderCartCartIdVpsAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/vps";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/vps/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdVpsOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/vps/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/vps/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdVpsOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/vps/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/vrack
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdVrackAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/vrack";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/vrack
        public Task<_order_cart.Item> PostV1OrderCartCartIdVrackAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/vrack";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/vrackReseller
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdVrackResellerAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/vrackReseller";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cart/{cartId}/vrackReseller
        public Task<_order_cart.Item> PostV1OrderCartCartIdVrackResellerAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/vrackReseller";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cart/{cartId}/vrackServices
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdVrackServicesAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/vrackServices";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cart/{cartId}/vrackServices
        public Task<_order_cart.Item> PostV1OrderCartCartIdVrackServicesAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/vrackServices";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cart/{cartId}/webHosting
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdWebHostingAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/webHosting";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/webHosting
        public Task<_order_cart.Item> PostV1OrderCartCartIdWebHostingAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/webHosting";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/webHosting/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdWebHostingOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/webHosting/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/webHosting/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdWebHostingOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/webHosting/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/webPaaS
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdWebPaaSAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/webPaaS";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/webPaaS
        public Task<_order_cart.Item> PostV1OrderCartCartIdWebPaaSAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/webPaaS";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/webPaaS/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdWebPaaSOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/webPaaS/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cart/{cartId}/webPaaS/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdWebPaaSOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/webPaaS/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cart/{cartId}/xdsl
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderCartCartIdXdslAsync(string cartId) {
            string uri = $"/v1/order/cart/{cartId}/xdsl";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/xdsl
        public Task<_order_cart.Item> PostV1OrderCartCartIdXdslAsync(_order_cart.GenericProductCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/xdsl";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cart/{cartId}/xdsl/options
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartCartIdXdslOptionsAsync(string cartId, string planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cart/{cartId}/xdsl/options{queryParameters}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cart/{cartId}/xdsl/options
        public Task<_order_cart.Item> PostV1OrderCartCartIdXdslOptionsAsync(_order_cart.GenericOptionCreation _body, string cartId) {
            string uri = $"/v1/order/cart/{cartId}/xdsl/options";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/order/cartServiceOption/baremetalServers
        public Task<System.String[]> GetV1OrderCartServiceOptionBaremetalServersAsync() {
            string uri = $"/v1/order/cartServiceOption/baremetalServers";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/baremetalServers/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartServiceOptionBaremetalServersServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/cartServiceOption/baremetalServers/{serviceName}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/baremetalServers/{serviceName}
        public Task<_order_cart.Item> PostV1OrderCartServiceOptionBaremetalServersServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("cartId", cartId);
            _body.Add("duration", duration);
            _body.Add("planCode", planCode);
            _body.Add("pricingMode", pricingMode);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/cartServiceOption/baremetalServers/{serviceName}";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cartServiceOption/cloud
        public Task<System.String[]> GetV1OrderCartServiceOptionCloudAsync() {
            string uri = $"/v1/order/cartServiceOption/cloud";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/cloud/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartServiceOptionCloudServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/cartServiceOption/cloud/{serviceName}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/cloud/{serviceName}
        public Task<_order_cart.Item> PostV1OrderCartServiceOptionCloudServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("cartId", cartId);
            _body.Add("duration", duration);
            _body.Add("planCode", planCode);
            _body.Add("pricingMode", pricingMode);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/cartServiceOption/cloud/{serviceName}";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cartServiceOption/dedicated
        public Task<System.String[]> GetV1OrderCartServiceOptionDedicatedAsync() {
            string uri = $"/v1/order/cartServiceOption/dedicated";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/dedicated/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartServiceOptionDedicatedServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/cartServiceOption/dedicated/{serviceName}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/dedicated/{serviceName}
        public Task<_order_cart.Item> PostV1OrderCartServiceOptionDedicatedServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("cartId", cartId);
            _body.Add("duration", duration);
            _body.Add("planCode", planCode);
            _body.Add("pricingMode", pricingMode);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/cartServiceOption/dedicated/{serviceName}";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cartServiceOption/dns
        public Task<System.String[]> GetV1OrderCartServiceOptionDnsAsync() {
            string uri = $"/v1/order/cartServiceOption/dns";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/dns/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartServiceOptionDnsServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/cartServiceOption/dns/{serviceName}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/dns/{serviceName}
        public Task<_order_cart.Item> PostV1OrderCartServiceOptionDnsServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("cartId", cartId);
            _body.Add("duration", duration);
            _body.Add("planCode", planCode);
            _body.Add("pricingMode", pricingMode);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/cartServiceOption/dns/{serviceName}";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cartServiceOption/domain
        public Task<System.String[]> GetV1OrderCartServiceOptionDomainAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? whoisOwner) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("whoisOwner", whoisOwner);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cartServiceOption/domain{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/domain/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartServiceOptionDomainServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/cartServiceOption/domain/{serviceName}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/domain/{serviceName}
        public Task<_order_cart.Item> PostV1OrderCartServiceOptionDomainServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("cartId", cartId);
            _body.Add("duration", duration);
            _body.Add("planCode", planCode);
            _body.Add("pricingMode", pricingMode);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/cartServiceOption/domain/{serviceName}";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cartServiceOption/emailpro
        public Task<System.String[]> GetV1OrderCartServiceOptionEmailproAsync() {
            string uri = $"/v1/order/cartServiceOption/emailpro";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/emailpro/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartServiceOptionEmailproServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/cartServiceOption/emailpro/{serviceName}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/emailpro/{serviceName}
        public Task<_order_cart.Item> PostV1OrderCartServiceOptionEmailproServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("cartId", cartId);
            _body.Add("duration", duration);
            _body.Add("planCode", planCode);
            _body.Add("pricingMode", pricingMode);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/cartServiceOption/emailpro/{serviceName}";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cartServiceOption/ipLoadbalancing
        public Task<System.String[]> GetV1OrderCartServiceOptionIpLoadbalancingAsync() {
            string uri = $"/v1/order/cartServiceOption/ipLoadbalancing";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/ipLoadbalancing/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartServiceOptionIpLoadbalancingServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/cartServiceOption/ipLoadbalancing/{serviceName}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/ipLoadbalancing/{serviceName}
        public Task<_order_cart.Item> PostV1OrderCartServiceOptionIpLoadbalancingServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("cartId", cartId);
            _body.Add("duration", duration);
            _body.Add("planCode", planCode);
            _body.Add("pricingMode", pricingMode);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/cartServiceOption/ipLoadbalancing/{serviceName}";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cartServiceOption/logs
        public Task<System.String[]> GetV1OrderCartServiceOptionLogsAsync() {
            string uri = $"/v1/order/cartServiceOption/logs";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/logs/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartServiceOptionLogsServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/cartServiceOption/logs/{serviceName}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/logs/{serviceName}
        public Task<_order_cart.Item> PostV1OrderCartServiceOptionLogsServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("cartId", cartId);
            _body.Add("duration", duration);
            _body.Add("planCode", planCode);
            _body.Add("pricingMode", pricingMode);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/cartServiceOption/logs/{serviceName}";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cartServiceOption/microsoft
        public Task<System.String[]> GetV1OrderCartServiceOptionMicrosoftAsync() {
            string uri = $"/v1/order/cartServiceOption/microsoft";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/microsoft/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartServiceOptionMicrosoftServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/cartServiceOption/microsoft/{serviceName}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/microsoft/{serviceName}
        public Task<_order_cart.Item> PostV1OrderCartServiceOptionMicrosoftServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("cartId", cartId);
            _body.Add("duration", duration);
            _body.Add("planCode", planCode);
            _body.Add("pricingMode", pricingMode);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/cartServiceOption/microsoft/{serviceName}";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cartServiceOption/microsoftExchange
        public Task<System.String[]> GetV1OrderCartServiceOptionMicrosoftExchangeAsync() {
            string uri = $"/v1/order/cartServiceOption/microsoftExchange";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/microsoftExchange/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartServiceOptionMicrosoftExchangeServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/cartServiceOption/microsoftExchange/{serviceName}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/microsoftExchange/{serviceName}
        public Task<_order_cart.Item> PostV1OrderCartServiceOptionMicrosoftExchangeServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("cartId", cartId);
            _body.Add("duration", duration);
            _body.Add("planCode", planCode);
            _body.Add("pricingMode", pricingMode);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/cartServiceOption/microsoftExchange/{serviceName}";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cartServiceOption/nutanix
        public Task<System.String[]> GetV1OrderCartServiceOptionNutanixAsync() {
            string uri = $"/v1/order/cartServiceOption/nutanix";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/nutanix/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartServiceOptionNutanixServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/cartServiceOption/nutanix/{serviceName}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/nutanix/{serviceName}
        public Task<_order_cart.Item> PostV1OrderCartServiceOptionNutanixServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("cartId", cartId);
            _body.Add("duration", duration);
            _body.Add("planCode", planCode);
            _body.Add("pricingMode", pricingMode);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/cartServiceOption/nutanix/{serviceName}";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cartServiceOption/office365Prepaid
        public Task<System.String[]> GetV1OrderCartServiceOptionOffice365PrepaidAsync() {
            string uri = $"/v1/order/cartServiceOption/office365Prepaid";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/office365Prepaid/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartServiceOptionOffice365PrepaidServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/cartServiceOption/office365Prepaid/{serviceName}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/office365Prepaid/{serviceName}
        public Task<_order_cart.Item> PostV1OrderCartServiceOptionOffice365PrepaidServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("cartId", cartId);
            _body.Add("duration", duration);
            _body.Add("planCode", planCode);
            _body.Add("pricingMode", pricingMode);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/cartServiceOption/office365Prepaid/{serviceName}";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cartServiceOption/officePrepaid
        public Task<System.String[]> GetV1OrderCartServiceOptionOfficePrepaidAsync() {
            string uri = $"/v1/order/cartServiceOption/officePrepaid";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/officePrepaid/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartServiceOptionOfficePrepaidServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/cartServiceOption/officePrepaid/{serviceName}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/officePrepaid/{serviceName}
        public Task<_order_cart.Item> PostV1OrderCartServiceOptionOfficePrepaidServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("cartId", cartId);
            _body.Add("duration", duration);
            _body.Add("planCode", planCode);
            _body.Add("pricingMode", pricingMode);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/cartServiceOption/officePrepaid/{serviceName}";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cartServiceOption/privateCloud
        public Task<System.String[]> GetV1OrderCartServiceOptionPrivateCloudAsync() {
            string uri = $"/v1/order/cartServiceOption/privateCloud";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/privateCloud/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartServiceOptionPrivateCloudServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/cartServiceOption/privateCloud/{serviceName}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/privateCloud/{serviceName}
        public Task<_order_cart.Item> PostV1OrderCartServiceOptionPrivateCloudServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("cartId", cartId);
            _body.Add("duration", duration);
            _body.Add("planCode", planCode);
            _body.Add("pricingMode", pricingMode);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/cartServiceOption/privateCloud/{serviceName}";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cartServiceOption/privateCloudEnterprise
        public Task<System.String[]> GetV1OrderCartServiceOptionPrivateCloudEnterpriseAsync() {
            string uri = $"/v1/order/cartServiceOption/privateCloudEnterprise";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/privateCloudEnterprise/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartServiceOptionPrivateCloudEnterpriseServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/cartServiceOption/privateCloudEnterprise/{serviceName}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/privateCloudEnterprise/{serviceName}
        public Task<_order_cart.Item> PostV1OrderCartServiceOptionPrivateCloudEnterpriseServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("cartId", cartId);
            _body.Add("duration", duration);
            _body.Add("planCode", planCode);
            _body.Add("pricingMode", pricingMode);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/cartServiceOption/privateCloudEnterprise/{serviceName}";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cartServiceOption/privateCloudReseller
        public Task<System.String[]> GetV1OrderCartServiceOptionPrivateCloudResellerAsync() {
            string uri = $"/v1/order/cartServiceOption/privateCloudReseller";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/privateCloudReseller/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartServiceOptionPrivateCloudResellerServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/cartServiceOption/privateCloudReseller/{serviceName}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/privateCloudReseller/{serviceName}
        public Task<_order_cart.Item> PostV1OrderCartServiceOptionPrivateCloudResellerServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("cartId", cartId);
            _body.Add("duration", duration);
            _body.Add("planCode", planCode);
            _body.Add("pricingMode", pricingMode);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/cartServiceOption/privateCloudReseller/{serviceName}";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cartServiceOption/privateCloudResellerEnterprise
        public Task<System.String[]> GetV1OrderCartServiceOptionPrivateCloudResellerEnterpriseAsync() {
            string uri = $"/v1/order/cartServiceOption/privateCloudResellerEnterprise";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/privateCloudResellerEnterprise/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartServiceOptionPrivateCloudResellerEnterpriseServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/cartServiceOption/privateCloudResellerEnterprise/{serviceName}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/privateCloudResellerEnterprise/{serviceName}
        public Task<_order_cart.Item> PostV1OrderCartServiceOptionPrivateCloudResellerEnterpriseServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("cartId", cartId);
            _body.Add("duration", duration);
            _body.Add("planCode", planCode);
            _body.Add("pricingMode", pricingMode);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/cartServiceOption/privateCloudResellerEnterprise/{serviceName}";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cartServiceOption/sharepoint
        public Task<System.String[]> GetV1OrderCartServiceOptionSharepointAsync() {
            string uri = $"/v1/order/cartServiceOption/sharepoint";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/sharepoint/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartServiceOptionSharepointServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/cartServiceOption/sharepoint/{serviceName}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/sharepoint/{serviceName}
        public Task<_order_cart.Item> PostV1OrderCartServiceOptionSharepointServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("cartId", cartId);
            _body.Add("duration", duration);
            _body.Add("planCode", planCode);
            _body.Add("pricingMode", pricingMode);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/cartServiceOption/sharepoint/{serviceName}";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cartServiceOption/sms
        public Task<System.String[]> GetV1OrderCartServiceOptionSmsAsync() {
            string uri = $"/v1/order/cartServiceOption/sms";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/sms/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartServiceOptionSmsServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/cartServiceOption/sms/{serviceName}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/sms/{serviceName}
        public Task<_order_cart.Item> PostV1OrderCartServiceOptionSmsServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("cartId", cartId);
            _body.Add("duration", duration);
            _body.Add("planCode", planCode);
            _body.Add("pricingMode", pricingMode);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/cartServiceOption/sms/{serviceName}";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cartServiceOption/sslGateway
        public Task<System.String[]> GetV1OrderCartServiceOptionSslGatewayAsync() {
            string uri = $"/v1/order/cartServiceOption/sslGateway";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/sslGateway/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartServiceOptionSslGatewayServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/cartServiceOption/sslGateway/{serviceName}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/sslGateway/{serviceName}
        public Task<_order_cart.Item> PostV1OrderCartServiceOptionSslGatewayServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("cartId", cartId);
            _body.Add("duration", duration);
            _body.Add("planCode", planCode);
            _body.Add("pricingMode", pricingMode);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/cartServiceOption/sslGateway/{serviceName}";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cartServiceOption/vdi
        public Task<System.String[]> GetV1OrderCartServiceOptionVdiAsync() {
            string uri = $"/v1/order/cartServiceOption/vdi";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/vdi/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartServiceOptionVdiServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/cartServiceOption/vdi/{serviceName}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/vdi/{serviceName}
        public Task<_order_cart.Item> PostV1OrderCartServiceOptionVdiServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("cartId", cartId);
            _body.Add("duration", duration);
            _body.Add("planCode", planCode);
            _body.Add("pricingMode", pricingMode);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/cartServiceOption/vdi/{serviceName}";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cartServiceOption/vmwareCloudDirector
        public Task<System.String[]> GetV1OrderCartServiceOptionVmwareCloudDirectorAsync() {
            string uri = $"/v1/order/cartServiceOption/vmwareCloudDirector";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/vmwareCloudDirector/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartServiceOptionVmwareCloudDirectorServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/cartServiceOption/vmwareCloudDirector/{serviceName}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/vmwareCloudDirector/{serviceName}
        public Task<_order_cart.Item> PostV1OrderCartServiceOptionVmwareCloudDirectorServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("cartId", cartId);
            _body.Add("duration", duration);
            _body.Add("planCode", planCode);
            _body.Add("pricingMode", pricingMode);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/cartServiceOption/vmwareCloudDirector/{serviceName}";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cartServiceOption/vmwareCloudDirectorBackup
        public Task<System.String[]> GetV1OrderCartServiceOptionVmwareCloudDirectorBackupAsync() {
            string uri = $"/v1/order/cartServiceOption/vmwareCloudDirectorBackup";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/vmwareCloudDirectorBackup/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartServiceOptionVmwareCloudDirectorBackupServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/cartServiceOption/vmwareCloudDirectorBackup/{serviceName}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/vps
        public Task<System.String[]> GetV1OrderCartServiceOptionVpsAsync() {
            string uri = $"/v1/order/cartServiceOption/vps";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/vps/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartServiceOptionVpsServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/cartServiceOption/vps/{serviceName}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/vps/{serviceName}
        public Task<_order_cart.Item> PostV1OrderCartServiceOptionVpsServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("cartId", cartId);
            _body.Add("duration", duration);
            _body.Add("planCode", planCode);
            _body.Add("pricingMode", pricingMode);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/cartServiceOption/vps/{serviceName}";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cartServiceOption/webHosting
        public Task<System.String[]> GetV1OrderCartServiceOptionWebHostingAsync() {
            string uri = $"/v1/order/cartServiceOption/webHosting";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/webHosting/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartServiceOptionWebHostingServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/cartServiceOption/webHosting/{serviceName}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/webHosting/{serviceName}
        public Task<_order_cart.Item> PostV1OrderCartServiceOptionWebHostingServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("cartId", cartId);
            _body.Add("duration", duration);
            _body.Add("planCode", planCode);
            _body.Add("pricingMode", pricingMode);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/cartServiceOption/webHosting/{serviceName}";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cartServiceOption/webPaaS
        public Task<System.String[]> GetV1OrderCartServiceOptionWebPaaSAsync() {
            string uri = $"/v1/order/cartServiceOption/webPaaS";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/webPaaS/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetV1OrderCartServiceOptionWebPaaSServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/cartServiceOption/webPaaS/{serviceName}";
            return this.SendAsync<_order_cart.GenericOptionDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cartServiceOption/webPaaS/{serviceName}
        public Task<_order_cart.Item> PostV1OrderCartServiceOptionWebPaaSServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("cartId", cartId);
            _body.Add("duration", duration);
            _body.Add("planCode", planCode);
            _body.Add("pricingMode", pricingMode);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/cartServiceOption/webPaaS/{serviceName}";
            return this.SendAsync<_order_cart.Item>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/catalog/formatted
        public Task<System.String[]> GetV1OrderCatalogFormattedAsync() {
            string uri = $"/v1/order/catalog/formatted";
            return this.SendAsync<string[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/formatted/bringYourOwnIp
        public Task<_order_catalog.Catalog> GetV1OrderCatalogFormattedBringYourOwnIpAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/formatted/bringYourOwnIp{queryParameters}";
            return this.SendAsync<_order_catalog.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/formatted/cloud
        public Task<_order_catalog.Catalog> GetV1OrderCatalogFormattedCloudAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/formatted/cloud{queryParameters}";
            return this.SendAsync<_order_catalog.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/formatted/dedicated
        public Task<_order_catalog_dedicated.Catalog> GetV1OrderCatalogFormattedDedicatedAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/formatted/dedicated{queryParameters}";
            return this.SendAsync<_order_catalog_dedicated.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/formatted/discover
        public Task<_order_catalog_dedicated.Catalog> GetV1OrderCatalogFormattedDiscoverAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/formatted/discover{queryParameters}";
            return this.SendAsync<_order_catalog_dedicated.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/formatted/ip
        public Task<_order_catalog.Catalog> GetV1OrderCatalogFormattedIpAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/formatted/ip{queryParameters}";
            return this.SendAsync<_order_catalog.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/formatted/licenseCloudLinux
        public Task<_order_catalog.Catalog> GetV1OrderCatalogFormattedLicenseCloudLinuxAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/formatted/licenseCloudLinux{queryParameters}";
            return this.SendAsync<_order_catalog.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/formatted/licenseDirectadmin
        public Task<_order_catalog.Catalog> GetV1OrderCatalogFormattedLicenseDirectadminAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/formatted/licenseDirectadmin{queryParameters}";
            return this.SendAsync<_order_catalog.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/formatted/licensePlesk
        public Task<_order_catalog.Catalog> GetV1OrderCatalogFormattedLicensePleskAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/formatted/licensePlesk{queryParameters}";
            return this.SendAsync<_order_catalog.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/formatted/licenseSqlServer
        public Task<_order_catalog.Catalog> GetV1OrderCatalogFormattedLicenseSqlServerAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/formatted/licenseSqlServer{queryParameters}";
            return this.SendAsync<_order_catalog.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/formatted/licenseVirtuozzo
        public Task<_order_catalog.Catalog> GetV1OrderCatalogFormattedLicenseVirtuozzoAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/formatted/licenseVirtuozzo{queryParameters}";
            return this.SendAsync<_order_catalog.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/formatted/licenseWindows
        public Task<_order_catalog.Catalog> GetV1OrderCatalogFormattedLicenseWindowsAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/formatted/licenseWindows{queryParameters}";
            return this.SendAsync<_order_catalog.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/formatted/licenseWorklight
        public Task<_order_catalog.Catalog> GetV1OrderCatalogFormattedLicenseWorklightAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/formatted/licenseWorklight{queryParameters}";
            return this.SendAsync<_order_catalog.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/formatted/licensecPanel
        public Task<_order_catalog.Catalog> GetV1OrderCatalogFormattedLicensecPanelAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/formatted/licensecPanel{queryParameters}";
            return this.SendAsync<_order_catalog.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/formatted/logs
        public Task<_order_catalog.Catalog> GetV1OrderCatalogFormattedLogsAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/formatted/logs{queryParameters}";
            return this.SendAsync<_order_catalog.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/formatted/privateCloud
        public Task<_order_catalog_pcc.Catalog> GetV1OrderCatalogFormattedPrivateCloudAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/formatted/privateCloud{queryParameters}";
            return this.SendAsync<_order_catalog_pcc.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/formatted/privateCloudCDI
        public Task<_order_catalog_privateCloud.Catalog> GetV1OrderCatalogFormattedPrivateCloudCDIAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/formatted/privateCloudCDI{queryParameters}";
            return this.SendAsync<_order_catalog_privateCloud.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/formatted/privateCloudDC
        public Task<_order_catalog_privateCloud.Catalog> GetV1OrderCatalogFormattedPrivateCloudDCAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/formatted/privateCloudDC{queryParameters}";
            return this.SendAsync<_order_catalog_privateCloud.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/formatted/privateCloudEnterprise
        public Task<_order_catalog_pcc.Catalog> GetV1OrderCatalogFormattedPrivateCloudEnterpriseAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/formatted/privateCloudEnterprise{queryParameters}";
            return this.SendAsync<_order_catalog_pcc.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/formatted/privateCloudReseller
        public Task<_order_catalog_pcc.Catalog> GetV1OrderCatalogFormattedPrivateCloudResellerAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/formatted/privateCloudReseller{queryParameters}";
            return this.SendAsync<_order_catalog_pcc.Catalog>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/catalog/formatted/privateCloudResellerEnterprise
        public Task<_order_catalog_pcc.Catalog> GetV1OrderCatalogFormattedPrivateCloudResellerEnterpriseAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/formatted/privateCloudResellerEnterprise{queryParameters}";
            return this.SendAsync<_order_catalog_pcc.Catalog>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/catalog/formatted/privateCloudSDDC
        public Task<_order_catalog_privateCloud.Catalog> GetV1OrderCatalogFormattedPrivateCloudSDDCAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/formatted/privateCloudSDDC{queryParameters}";
            return this.SendAsync<_order_catalog_privateCloud.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/formatted/reseller
        public Task<_order_catalog.Catalog> GetV1OrderCatalogFormattedResellerAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/formatted/reseller{queryParameters}";
            return this.SendAsync<_order_catalog.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/formatted/vps
        public Task<_order_catalog.Catalog> GetV1OrderCatalogFormattedVpsAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/formatted/vps{queryParameters}";
            return this.SendAsync<_order_catalog.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/private/privateCloud
        public Task<_order_catalog_pcc.Catalog> GetV1OrderCatalogPrivatePrivateCloudAsync(string catalogName, _nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("catalogName", catalogName);
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/private/privateCloud{queryParameters}";
            return this.SendAsync<_order_catalog_pcc.Catalog>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/catalog/public/advisoryServicesHostingWeb
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicAdvisoryServicesHostingWebAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/advisoryServicesHostingWeb{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/catalog/public/advisoryServicesPublicCloud
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicAdvisoryServicesPublicCloudAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/advisoryServicesPublicCloud{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/catalog/public/advisoryServicesTelecom
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicAdvisoryServicesTelecomAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/advisoryServicesTelecom{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/catalog/public/baremetalServers
        public Task<_order_catalog_public.DedicatedServerCatalog> GetV1OrderCatalogPublicBaremetalServersAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/baremetalServers{queryParameters}";
            return this.SendAsync<_order_catalog_public.DedicatedServerCatalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/public/cloud
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicCloudAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/cloud{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/public/cloudDB
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicCloudDBAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/cloudDB{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/public/dns
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicDnsAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/dns{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/public/domain
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicDomainAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/domain{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/public/eco
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicEcoAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/eco{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/public/emailDomain
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicEmailDomainAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/emailDomain{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/public/emailpro
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicEmailproAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/emailpro{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/public/exchange
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicExchangeAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/exchange{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/public/ipLoadbalancing
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicIpLoadbalancingAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/ipLoadbalancing{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/public/licensecPanel
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicLicensecPanelAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/licensecPanel{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/public/logs
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicLogsAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/logs{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/public/nasha
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicNashaAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/nasha{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/public/netapp
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicNetappAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/netapp{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/public/nutanix
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicNutanixAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/nutanix{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/public/office365Prepaid
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicOffice365PrepaidAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/office365Prepaid{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/public/officePrepaid
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicOfficePrepaidAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/officePrepaid{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/public/okms
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicOkmsAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/okms{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/public/ovhCloudConnect
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicOvhCloudConnectAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/ovhCloudConnect{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/public/packsProfessionalServices
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicPacksProfessionalServicesAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/packsProfessionalServices{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/public/privateCloud
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicPrivateCloudAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/privateCloud{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/public/privateCloudEnterprise
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicPrivateCloudEnterpriseAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/privateCloudEnterprise{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/public/privateSQL
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicPrivateSQLAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/privateSQL{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/public/sslGateway
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicSslGatewayAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/sslGateway{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/public/telephony
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicTelephonyAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/telephony{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/public/vmwareCloudDirector
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicVmwareCloudDirectorAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/vmwareCloudDirector{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/public/vmwareCloudDirectorBackup
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicVmwareCloudDirectorBackupAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/vmwareCloudDirectorBackup{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/public/vps
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicVpsAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/vps{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/public/webHosting
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicWebHostingAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/webHosting{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/public/webPaaS
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicWebPaaSAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/webPaaS{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/catalog/public/zimbra
        public Task<_order_catalog_public.Catalog> GetV1OrderCatalogPublicZimbraAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/catalog/public/zimbra{queryParameters}";
            return this.SendAsync<_order_catalog_public.Catalog>("GET", uri, null, null, false);
        }
        
        // Path: /v1/order/cdn/dedicated
        public Task<System.String[]> GetV1OrderCdnDedicatedAsync() {
            string uri = $"/v1/order/cdn/dedicated";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cdn/dedicated/new
        public Task<System.String[]> GetV1OrderCdnDedicatedNewAsync() {
            string uri = $"/v1/order/cdn/dedicated/new";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cdn/dedicated/new/{duration}
        public Task<_order.Order> GetV1OrderCdnDedicatedNewDurationAsync(string duration) {
            string uri = $"/v1/order/cdn/dedicated/new/{duration}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cdn/dedicated/new/{duration}
        public Task<_order.Order> PostV1OrderCdnDedicatedNewDurationAsync(string duration) {
            string uri = $"/v1/order/cdn/dedicated/new/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, null, true);
        }
        
        // Path: /v1/order/cdn/dedicated/{serviceName}
        public Task<System.String[]> GetV1OrderCdnDedicatedServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/cdn/dedicated/{serviceName}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cdn/dedicated/{serviceName}/backend
        public Task<System.String[]> GetV1OrderCdnDedicatedServiceNameBackendAsync(long backend, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("backend", backend);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cdn/dedicated/{serviceName}/backend{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cdn/dedicated/{serviceName}/backend/{duration}
        public Task<_order.Order> GetV1OrderCdnDedicatedServiceNameBackendDurationAsync(long backend, string duration, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("backend", backend);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cdn/dedicated/{serviceName}/backend/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cdn/dedicated/{serviceName}/backend/{duration}
        public Task<_order.Order> PostV1OrderCdnDedicatedServiceNameBackendDurationAsync(long backend, string duration, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("backend", backend);
            string uri = $"/v1/order/cdn/dedicated/{serviceName}/backend/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cdn/dedicated/{serviceName}/cacheRule
        public Task<System.String[]> GetV1OrderCdnDedicatedServiceNameCacheRuleAsync(_cdnanycast.OrderCacheRuleEnum cacheRule, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("cacheRule", cacheRule);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cdn/dedicated/{serviceName}/cacheRule{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cdn/dedicated/{serviceName}/cacheRule/{duration}
        public Task<_order.Order> GetV1OrderCdnDedicatedServiceNameCacheRuleDurationAsync(_cdnanycast.OrderCacheRuleEnum cacheRule, string duration, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("cacheRule", cacheRule);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cdn/dedicated/{serviceName}/cacheRule/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cdn/dedicated/{serviceName}/cacheRule/{duration}
        public Task<_order.Order> PostV1OrderCdnDedicatedServiceNameCacheRuleDurationAsync(_cdnanycast.OrderCacheRuleEnum cacheRule, string duration, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("cacheRule", cacheRule);
            string uri = $"/v1/order/cdn/dedicated/{serviceName}/cacheRule/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cdn/dedicated/{serviceName}/quota
        public Task<System.String[]> GetV1OrderCdnDedicatedServiceNameQuotaAsync(_cdnanycast.OrderQuotaEnum quota, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("quota", quota);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cdn/dedicated/{serviceName}/quota{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cdn/dedicated/{serviceName}/quota/{duration}
        public Task<_order.Order> GetV1OrderCdnDedicatedServiceNameQuotaDurationAsync(string duration, _cdnanycast.OrderQuotaEnum quota, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("quota", quota);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cdn/dedicated/{serviceName}/quota/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cdn/dedicated/{serviceName}/quota/{duration}
        public Task<_order.Order> PostV1OrderCdnDedicatedServiceNameQuotaDurationAsync(string duration, _cdnanycast.OrderQuotaEnum quota, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("quota", quota);
            string uri = $"/v1/order/cdn/dedicated/{serviceName}/quota/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/cloud/project
        public Task<System.String[]> GetV1OrderCloudProjectAsync() {
            string uri = $"/v1/order/cloud/project";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cloud/project/{serviceName}
        public Task<System.String[]> GetV1OrderCloudProjectServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/cloud/project/{serviceName}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cloud/project/{serviceName}/credit
        public Task<_order.Order> GetV1OrderCloudProjectServiceNameCreditAsync(long amount, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("amount", amount);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/cloud/project/{serviceName}/credit{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/cloud/project/{serviceName}/credit
        public Task<_order.Order> PostV1OrderCloudProjectServiceNameCreditAsync(long amount, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("amount", amount);
            string uri = $"/v1/order/cloud/project/{serviceName}/credit";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/dedicated/housing
        public Task<System.String[]> GetV1OrderDedicatedHousingAsync() {
            string uri = $"/v1/order/dedicated/housing";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/housing/{serviceName}
        public Task<System.String[]> GetV1OrderDedicatedHousingServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/dedicated/housing/{serviceName}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/housing/{serviceName}/APC
        public Task<System.String[]> GetV1OrderDedicatedHousingServiceNameAPCAsync(string serviceName) {
            string uri = $"/v1/order/dedicated/housing/{serviceName}/APC";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/housing/{serviceName}/APC/{duration}
        public Task<_order.Order> GetV1OrderDedicatedHousingServiceNameAPCDurationAsync(string duration, string serviceName) {
            string uri = $"/v1/order/dedicated/housing/{serviceName}/APC/{duration}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/housing/{serviceName}/APC/{duration}
        public Task<_order.Order> PostV1OrderDedicatedHousingServiceNameAPCDurationAsync(string duration, string serviceName) {
            string uri = $"/v1/order/dedicated/housing/{serviceName}/APC/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/server
        public Task<System.String[]> GetV1OrderDedicatedServerAsync() {
            string uri = $"/v1/order/dedicated/server";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}
        public Task<System.String[]> GetV1OrderDedicatedServerServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/dedicated/server/{serviceName}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/backupStorage
        public Task<System.String[]> GetV1OrderDedicatedServerServiceNameBackupStorageAsync(_dedicated_server.BackupStorageCapacityEnum capacity, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("capacity", capacity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/dedicated/server/{serviceName}/backupStorage{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/backupStorage/{duration}
        public Task<_order.Order> GetV1OrderDedicatedServerServiceNameBackupStorageDurationAsync(_dedicated_server.BackupStorageCapacityEnum capacity, string duration, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("capacity", capacity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/dedicated/server/{serviceName}/backupStorage/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/backupStorage/{duration}
        public Task<_order.Order> PostV1OrderDedicatedServerServiceNameBackupStorageDurationAsync(_dedicated_server.BackupStorageCapacityEnum capacity, string duration, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("capacity", capacity);
            string uri = $"/v1/order/dedicated/server/{serviceName}/backupStorage/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/bandwidth
        public Task<System.String[]> GetV1OrderDedicatedServerServiceNameBandwidthAsync(_dedicated_server.BandwidthOrderEnum bandwidth, string serviceName, _dedicated_server.BandwidthOrderTypeEnum type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("bandwidth", bandwidth);
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/dedicated/server/{serviceName}/bandwidth{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/bandwidth/{duration}
        public Task<_order.Order> GetV1OrderDedicatedServerServiceNameBandwidthDurationAsync(_dedicated_server.BandwidthOrderEnum bandwidth, string duration, string serviceName, _dedicated_server.BandwidthOrderTypeEnum type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("bandwidth", bandwidth);
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/dedicated/server/{serviceName}/bandwidth/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/bandwidth/{duration}
        public Task<_order.Order> PostV1OrderDedicatedServerServiceNameBandwidthDurationAsync(_dedicated_server.BandwidthOrderEnum bandwidth, string duration, string serviceName, _dedicated_server.BandwidthOrderTypeEnum type) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("bandwidth", bandwidth);
            _body.Add("type", type);
            string uri = $"/v1/order/dedicated/server/{serviceName}/bandwidth/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/bandwidthvRack
        public Task<System.String[]> GetV1OrderDedicatedServerServiceNameBandwidthvRackAsync(_dedicated_server.BandwidthvRackOrderEnum bandwidth, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("bandwidth", bandwidth);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/dedicated/server/{serviceName}/bandwidthvRack{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/bandwidthvRack/{duration}
        public Task<_order.Order> GetV1OrderDedicatedServerServiceNameBandwidthvRackDurationAsync(_dedicated_server.BandwidthvRackOrderEnum bandwidth, string duration, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("bandwidth", bandwidth);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/dedicated/server/{serviceName}/bandwidthvRack/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/bandwidthvRack/{duration}
        public Task<_order.Order> PostV1OrderDedicatedServerServiceNameBandwidthvRackDurationAsync(_dedicated_server.BandwidthvRackOrderEnum bandwidth, string duration, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("bandwidth", bandwidth);
            string uri = $"/v1/order/dedicated/server/{serviceName}/bandwidthvRack/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/feature
        public Task<System.String[]> GetV1OrderDedicatedServerServiceNameFeatureAsync(_dedicated_server.OrderableSysFeatureEnum feature, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("feature", feature);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/dedicated/server/{serviceName}/feature{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/feature/{duration}
        public Task<_order.Order> GetV1OrderDedicatedServerServiceNameFeatureDurationAsync(string duration, _dedicated_server.OrderableSysFeatureEnum feature, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("feature", feature);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/dedicated/server/{serviceName}/feature/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/feature/{duration}
        public Task<_order.Order> PostV1OrderDedicatedServerServiceNameFeatureDurationAsync(string duration, _dedicated_server.OrderableSysFeatureEnum feature, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("feature", feature);
            string uri = $"/v1/order/dedicated/server/{serviceName}/feature/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/firewall
        public Task<System.String[]> GetV1OrderDedicatedServerServiceNameFirewallAsync(_dedicated_server.FirewallModelEnum firewallModel, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("firewallModel", firewallModel);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/dedicated/server/{serviceName}/firewall{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/firewall/{duration}
        public Task<_order.Order> GetV1OrderDedicatedServerServiceNameFirewallDurationAsync(string duration, _dedicated_server.FirewallModelEnum firewallModel, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("firewallModel", firewallModel);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/dedicated/server/{serviceName}/firewall/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/firewall/{duration}
        public Task<_order.Order> PostV1OrderDedicatedServerServiceNameFirewallDurationAsync(string duration, _dedicated_server.FirewallModelEnum firewallModel, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("firewallModel", firewallModel);
            string uri = $"/v1/order/dedicated/server/{serviceName}/firewall/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/ipMigration
        public Task<System.String[]> GetV1OrderDedicatedServerServiceNameIpMigrationAsync(string ip, string serviceName, string token) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ip", ip);
            queryParametersTemp.Add("token", token);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/dedicated/server/{serviceName}/ipMigration{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/ipMigration/{duration}
        public Task<_order.Order> GetV1OrderDedicatedServerServiceNameIpMigrationDurationAsync(string duration, string ip, string serviceName, string token) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ip", ip);
            queryParametersTemp.Add("token", token);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/dedicated/server/{serviceName}/ipMigration/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/ipMigration/{duration}
        public Task<_order.Order> PostV1OrderDedicatedServerServiceNameIpMigrationDurationAsync(string duration, string ip, string serviceName, string token) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("ip", ip);
            _body.Add("token", token);
            string uri = $"/v1/order/dedicated/server/{serviceName}/ipMigration/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/kvm
        public Task<System.String[]> GetV1OrderDedicatedServerServiceNameKvmAsync(string serviceName) {
            string uri = $"/v1/order/dedicated/server/{serviceName}/kvm";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/kvm/{duration}
        public Task<_order.Order> GetV1OrderDedicatedServerServiceNameKvmDurationAsync(string duration, string serviceName) {
            string uri = $"/v1/order/dedicated/server/{serviceName}/kvm/{duration}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/kvm/{duration}
        public Task<_order.Order> PostV1OrderDedicatedServerServiceNameKvmDurationAsync(string duration, string serviceName) {
            string uri = $"/v1/order/dedicated/server/{serviceName}/kvm/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/kvmExpress
        public Task<System.String[]> GetV1OrderDedicatedServerServiceNameKvmExpressAsync(string serviceName) {
            string uri = $"/v1/order/dedicated/server/{serviceName}/kvmExpress";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/kvmExpress/{duration}
        public Task<_order.Order> GetV1OrderDedicatedServerServiceNameKvmExpressDurationAsync(string duration, string serviceName) {
            string uri = $"/v1/order/dedicated/server/{serviceName}/kvmExpress/{duration}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/kvmExpress/{duration}
        public Task<_order.Order> PostV1OrderDedicatedServerServiceNameKvmExpressDurationAsync(string duration, string serviceName) {
            string uri = $"/v1/order/dedicated/server/{serviceName}/kvmExpress/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/professionalUse
        public Task<System.String[]> GetV1OrderDedicatedServerServiceNameProfessionalUseAsync(string serviceName) {
            string uri = $"/v1/order/dedicated/server/{serviceName}/professionalUse";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/professionalUse/{duration}
        public Task<_order.Order> GetV1OrderDedicatedServerServiceNameProfessionalUseDurationAsync(string duration, string serviceName) {
            string uri = $"/v1/order/dedicated/server/{serviceName}/professionalUse/{duration}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/professionalUse/{duration}
        public Task<_order.Order> PostV1OrderDedicatedServerServiceNameProfessionalUseDurationAsync(string duration, string serviceName) {
            string uri = $"/v1/order/dedicated/server/{serviceName}/professionalUse/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/traffic
        public Task<System.String[]> GetV1OrderDedicatedServerServiceNameTrafficAsync(string serviceName, _dedicated_server.TrafficOrderEnum traffic) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("traffic", traffic);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/dedicated/server/{serviceName}/traffic{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/traffic/{duration}
        public Task<_order.Order> GetV1OrderDedicatedServerServiceNameTrafficDurationAsync(string duration, string serviceName, _dedicated_server.TrafficOrderEnum traffic) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("traffic", traffic);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/dedicated/server/{serviceName}/traffic/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/traffic/{duration}
        public Task<_order.Order> PostV1OrderDedicatedServerServiceNameTrafficDurationAsync(string duration, string serviceName, _dedicated_server.TrafficOrderEnum traffic) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("traffic", traffic);
            string uri = $"/v1/order/dedicated/server/{serviceName}/traffic/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/usbKey
        public Task<System.String[]> GetV1OrderDedicatedServerServiceNameUsbKeyAsync(_dedicated_server.UsbKeyCapacityEnum capacity, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("capacity", capacity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/dedicated/server/{serviceName}/usbKey{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/usbKey/{duration}
        public Task<_order.Order> GetV1OrderDedicatedServerServiceNameUsbKeyDurationAsync(_dedicated_server.UsbKeyCapacityEnum capacity, string duration, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("capacity", capacity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/dedicated/server/{serviceName}/usbKey/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicated/server/{serviceName}/usbKey/{duration}
        public Task<_order.Order> PostV1OrderDedicatedServerServiceNameUsbKeyDurationAsync(_dedicated_server.UsbKeyCapacityEnum capacity, string duration, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("capacity", capacity);
            string uri = $"/v1/order/dedicated/server/{serviceName}/usbKey/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/dedicatedCloud
        public Task<System.String[]> GetV1OrderDedicatedCloudAsync() {
            string uri = $"/v1/order/dedicatedCloud";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicatedCloud/{serviceName}
        public Task<System.String[]> GetV1OrderDedicatedCloudServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/dedicatedCloud/{serviceName}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicatedCloud/{serviceName}/additionalBandwidth
        public Task<System.String[]> GetV1OrderDedicatedCloudServiceNameAdditionalBandwidthAsync(_dedicatedCloud.AdditionalBandwidthEnum bandwidth, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("bandwidth", bandwidth);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/dedicatedCloud/{serviceName}/additionalBandwidth{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicatedCloud/{serviceName}/additionalBandwidth/{duration}
        public Task<_order.Order> GetV1OrderDedicatedCloudServiceNameAdditionalBandwidthDurationAsync(_dedicatedCloud.AdditionalBandwidthEnum bandwidth, string duration, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("bandwidth", bandwidth);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/dedicatedCloud/{serviceName}/additionalBandwidth/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicatedCloud/{serviceName}/additionalBandwidth/{duration}
        public Task<_order.Order> PostV1OrderDedicatedCloudServiceNameAdditionalBandwidthDurationAsync(_dedicatedCloud.AdditionalBandwidthEnum bandwidth, string duration, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("bandwidth", bandwidth);
            string uri = $"/v1/order/dedicatedCloud/{serviceName}/additionalBandwidth/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/dedicatedCloud/{serviceName}/filer
        public Task<System.String[]> GetV1OrderDedicatedCloudServiceNameFilerAsync(string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? datacenterId, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? quantity) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("datacenterId", datacenterId);
            queryParametersTemp.Add("name", name);
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/dedicatedCloud/{serviceName}/filer{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicatedCloud/{serviceName}/filer/{duration}
        public Task<_order.Order> GetV1OrderDedicatedCloudServiceNameFilerDurationAsync(string duration, string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? datacenterId, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? quantity) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("datacenterId", datacenterId);
            queryParametersTemp.Add("name", name);
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/dedicatedCloud/{serviceName}/filer/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicatedCloud/{serviceName}/filer/{duration}
        public Task<_order.Order> PostV1OrderDedicatedCloudServiceNameFilerDurationAsync(string duration, string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? datacenterId, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? quantity) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("datacenterId", datacenterId);
            _body.Add("name", name);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/dedicatedCloud/{serviceName}/filer/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/dedicatedCloud/{serviceName}/host
        public Task<System.String[]> GetV1OrderDedicatedCloudServiceNameHostAsync(long datacenterId, string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? quantity) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("datacenterId", datacenterId);
            queryParametersTemp.Add("name", name);
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/dedicatedCloud/{serviceName}/host{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicatedCloud/{serviceName}/host/{duration}
        public Task<_order.Order> GetV1OrderDedicatedCloudServiceNameHostDurationAsync(long datacenterId, string duration, string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? quantity) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("datacenterId", datacenterId);
            queryParametersTemp.Add("name", name);
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/dedicatedCloud/{serviceName}/host/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicatedCloud/{serviceName}/host/{duration}
        public Task<_order.Order> PostV1OrderDedicatedCloudServiceNameHostDurationAsync(long datacenterId, string duration, string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? quantity) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("datacenterId", datacenterId);
            _body.Add("name", name);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/dedicatedCloud/{serviceName}/host/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/dedicatedCloud/{serviceName}/ip
        public Task<System.String[]> GetV1OrderDedicatedCloudServiceNameIpAsync(_dedicatedCloud.IpCountriesEnum country, string description, long estimatedClientsNumber, string networkName, string serviceName, _dedicatedCloud.OrderableIpBlockRangeEnum size, string usage) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("country", country);
            queryParametersTemp.Add("description", description);
            queryParametersTemp.Add("estimatedClientsNumber", estimatedClientsNumber);
            queryParametersTemp.Add("networkName", networkName);
            queryParametersTemp.Add("size", size);
            queryParametersTemp.Add("usage", usage);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/dedicatedCloud/{serviceName}/ip{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicatedCloud/{serviceName}/ip/{duration}
        public Task<_order.Order> GetV1OrderDedicatedCloudServiceNameIpDurationAsync(_dedicatedCloud.IpCountriesEnum country, string description, string duration, long estimatedClientsNumber, string networkName, string serviceName, _dedicatedCloud.OrderableIpBlockRangeEnum size, string usage) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("country", country);
            queryParametersTemp.Add("description", description);
            queryParametersTemp.Add("estimatedClientsNumber", estimatedClientsNumber);
            queryParametersTemp.Add("networkName", networkName);
            queryParametersTemp.Add("size", size);
            queryParametersTemp.Add("usage", usage);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/dedicatedCloud/{serviceName}/ip/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicatedCloud/{serviceName}/ip/{duration}
        public Task<_order.Order> PostV1OrderDedicatedCloudServiceNameIpDurationAsync(_dedicatedCloud.IpCountriesEnum country, string description, string duration, long estimatedClientsNumber, string networkName, string serviceName, _dedicatedCloud.OrderableIpBlockRangeEnum size, string usage) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("country", country);
            _body.Add("description", description);
            _body.Add("estimatedClientsNumber", estimatedClientsNumber);
            _body.Add("networkName", networkName);
            _body.Add("size", size);
            _body.Add("usage", usage);
            string uri = $"/v1/order/dedicatedCloud/{serviceName}/ip/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/dedicatedCloud/{serviceName}/spla
        public Task<_order.Order> GetV1OrderDedicatedCloudServiceNameSplaAsync(string serviceName) {
            string uri = $"/v1/order/dedicatedCloud/{serviceName}/spla";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicatedCloud/{serviceName}/spla
        public Task<_order.Order> PostV1OrderDedicatedCloudServiceNameSplaAsync(string serviceName) {
            string uri = $"/v1/order/dedicatedCloud/{serviceName}/spla";
            return this.SendAsync<_order.Order>("POST", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicatedCloud/{serviceName}/upgradeRessource
        public Task<System.String[]> GetV1OrderDedicatedCloudServiceNameUpgradeRessourceAsync(string serviceName, _dedicatedCloud_ressources.UpgradeTypeEnum upgradeType, _dedicatedCloud_ressources.UpgradeRessourceTypeEnum upgradedRessourceType, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? upgradedRessourceId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("upgradeType", upgradeType);
            queryParametersTemp.Add("upgradedRessourceId", upgradedRessourceId);
            queryParametersTemp.Add("upgradedRessourceType", upgradedRessourceType);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/dedicatedCloud/{serviceName}/upgradeRessource{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicatedCloud/{serviceName}/upgradeRessource/{duration}
        public Task<_order.Order> GetV1OrderDedicatedCloudServiceNameUpgradeRessourceDurationAsync(string duration, string serviceName, _dedicatedCloud_ressources.UpgradeTypeEnum upgradeType, _dedicatedCloud_ressources.UpgradeRessourceTypeEnum upgradedRessourceType, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? upgradedRessourceId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("upgradeType", upgradeType);
            queryParametersTemp.Add("upgradedRessourceId", upgradedRessourceId);
            queryParametersTemp.Add("upgradedRessourceType", upgradedRessourceType);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/dedicatedCloud/{serviceName}/upgradeRessource/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicatedCloud/{serviceName}/upgradeRessource/{duration}
        public Task<_order.Order> PostV1OrderDedicatedCloudServiceNameUpgradeRessourceDurationAsync(string duration, string serviceName, _dedicatedCloud_ressources.UpgradeTypeEnum upgradeType, _dedicatedCloud_ressources.UpgradeRessourceTypeEnum upgradedRessourceType, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? upgradedRessourceId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("upgradeType", upgradeType);
            _body.Add("upgradedRessourceId", upgradedRessourceId);
            _body.Add("upgradedRessourceType", upgradedRessourceType);
            string uri = $"/v1/order/dedicatedCloud/{serviceName}/upgradeRessource/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/dedicatedCloud/{serviceName}/vdi
        public Task<_order.Order> GetV1OrderDedicatedCloudServiceNameVdiAsync(long datacenterId, string firstPublicIpAddress, string secondPublicIpAddress, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("datacenterId", datacenterId);
            queryParametersTemp.Add("firstPublicIpAddress", firstPublicIpAddress);
            queryParametersTemp.Add("secondPublicIpAddress", secondPublicIpAddress);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/dedicatedCloud/{serviceName}/vdi{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/dedicatedCloud/{serviceName}/vdi
        public Task<_order.Order> PostV1OrderDedicatedCloudServiceNameVdiAsync(long datacenterId, string firstPublicIpAddress, string secondPublicIpAddress, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("datacenterId", datacenterId);
            _body.Add("firstPublicIpAddress", firstPublicIpAddress);
            _body.Add("secondPublicIpAddress", secondPublicIpAddress);
            string uri = $"/v1/order/dedicatedCloud/{serviceName}/vdi";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/domain/zone
        public Task<System.String[]> GetV1OrderDomainZoneAsync() {
            string uri = $"/v1/order/domain/zone";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/domain/zone/new
        public Task<_order.Order> GetV1OrderDomainZoneNewAsync(string zoneName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? minimized) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("minimized", minimized);
            queryParametersTemp.Add("zoneName", zoneName);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/domain/zone/new{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/domain/zone/new
        public Task<_order.Order> PostV1OrderDomainZoneNewAsync(string zoneName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? minimized) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("minimized", minimized);
            _body.Add("zoneName", zoneName);
            string uri = $"/v1/order/domain/zone/new";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/domain/zone/{zoneName}
        public Task<System.String[]> GetV1OrderDomainZoneZoneNameAsync(string zoneName) {
            string uri = $"/v1/order/domain/zone/{zoneName}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/domain/zone/{zoneName}/dnsAnycast
        public Task<System.String[]> GetV1OrderDomainZoneZoneNameDnsAnycastAsync(string zoneName) {
            string uri = $"/v1/order/domain/zone/{zoneName}/dnsAnycast";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/domain/zone/{zoneName}/dnsAnycast/{duration}
        public Task<_order.Order> GetV1OrderDomainZoneZoneNameDnsAnycastDurationAsync(string duration, string zoneName) {
            string uri = $"/v1/order/domain/zone/{zoneName}/dnsAnycast/{duration}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/domain/zone/{zoneName}/dnsAnycast/{duration}
        public Task<_order.Order> PostV1OrderDomainZoneZoneNameDnsAnycastDurationAsync(string duration, string zoneName) {
            string uri = $"/v1/order/domain/zone/{zoneName}/dnsAnycast/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, null, true);
        }
        
        // Path: /v1/order/email/domain
        public Task<System.String[]> GetV1OrderEmailDomainAsync() {
            string uri = $"/v1/order/email/domain";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/email/domain/new
        public Task<System.String[]> GetV1OrderEmailDomainNewAsync(string domain, _email_domain.OfferEnum offer) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("domain", domain);
            queryParametersTemp.Add("offer", offer);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/email/domain/new{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/email/domain/new/{duration}
        public Task<_order.Order> GetV1OrderEmailDomainNewDurationAsync(string domain, string duration, _email_domain.OfferEnum offer) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("domain", domain);
            queryParametersTemp.Add("offer", offer);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/email/domain/new/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/email/domain/new/{duration}
        public Task<_order.Order> PostV1OrderEmailDomainNewDurationAsync(string domain, string duration, _email_domain.OfferEnum offer) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("domain", domain);
            _body.Add("offer", offer);
            string uri = $"/v1/order/email/domain/new/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/email/domain/{domain}
        public Task<System.String[]> GetV1OrderEmailDomainDomainAsync(string domain) {
            string uri = $"/v1/order/email/domain/{domain}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/email/domain/{domain}/upgrade
        public Task<System.String[]> GetV1OrderEmailDomainDomainUpgradeAsync(string domain, _email_domain.OfferEnum offer) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("offer", offer);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/email/domain/{domain}/upgrade{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/email/domain/{domain}/upgrade/{duration}
        public Task<_order.Order> GetV1OrderEmailDomainDomainUpgradeDurationAsync(string domain, string duration, _email_domain.OfferEnum offer) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("offer", offer);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/email/domain/{domain}/upgrade/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/email/domain/{domain}/upgrade/{duration}
        public Task<_order.Order> PostV1OrderEmailDomainDomainUpgradeDurationAsync(string domain, string duration, _email_domain.OfferEnum offer) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("offer", offer);
            string uri = $"/v1/order/email/domain/{domain}/upgrade/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/email/exchange
        public Task<System.String[]> GetV1OrderEmailExchangeAsync() {
            string uri = $"/v1/order/email/exchange";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/email/exchange/{organizationName}/service
        public Task<System.String[]> GetV1OrderEmailExchangeOrganizationNameServiceAsync(string organizationName) {
            string uri = $"/v1/order/email/exchange/{organizationName}/service";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/email/exchange/{organizationName}/service/{exchangeService}
        public Task<System.String[]> GetV1OrderEmailExchangeOrganizationNameServiceExchangeServiceAsync(string exchangeService, string organizationName) {
            string uri = $"/v1/order/email/exchange/{organizationName}/service/{exchangeService}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/email/exchange/{organizationName}/service/{exchangeService}/account
        public Task<System.String[]> GetV1OrderEmailExchangeOrganizationNameServiceExchangeServiceAccountAsync(string exchangeService, _email_exchange.OvhLicenceEnum licence, long number, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.accountQuotaEnum? storageQuota) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("licence", licence);
            queryParametersTemp.Add("number", number);
            queryParametersTemp.Add("storageQuota", storageQuota);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/email/exchange/{organizationName}/service/{exchangeService}/account{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/email/exchange/{organizationName}/service/{exchangeService}/account/{duration}
        public Task<_order.Order> GetV1OrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationAsync(string duration, string exchangeService, _email_exchange.OvhLicenceEnum licence, long number, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.accountQuotaEnum? storageQuota) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("licence", licence);
            queryParametersTemp.Add("number", number);
            queryParametersTemp.Add("storageQuota", storageQuota);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/email/exchange/{organizationName}/service/{exchangeService}/account/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/email/exchange/{organizationName}/service/{exchangeService}/account/{duration}
        public Task<_order.Order> PostV1OrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationAsync(string duration, string exchangeService, _email_exchange.OvhLicenceEnum licence, long number, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.accountQuotaEnum? storageQuota) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("licence", licence);
            _body.Add("number", number);
            _body.Add("storageQuota", storageQuota);
            string uri = $"/v1/order/email/exchange/{organizationName}/service/{exchangeService}/account/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/email/exchange/{organizationName}/service/{exchangeService}/accountUpgrade
        public Task<System.String[]> GetV1OrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeAsync(string exchangeService, _email_exchange.accountQuotaEnum newQuota, string organizationName, string primaryEmailAddress) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("newQuota", newQuota);
            queryParametersTemp.Add("primaryEmailAddress", primaryEmailAddress);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/email/exchange/{organizationName}/service/{exchangeService}/accountUpgrade{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/email/exchange/{organizationName}/service/{exchangeService}/accountUpgrade/{duration}
        public Task<_order.Order> GetV1OrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationAsync(string duration, string exchangeService, _email_exchange.accountQuotaEnum newQuota, string organizationName, string primaryEmailAddress) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("newQuota", newQuota);
            queryParametersTemp.Add("primaryEmailAddress", primaryEmailAddress);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/email/exchange/{organizationName}/service/{exchangeService}/accountUpgrade/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/email/exchange/{organizationName}/service/{exchangeService}/accountUpgrade/{duration}
        public Task<_order.Order> PostV1OrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationAsync(string duration, string exchangeService, _email_exchange.accountQuotaEnum newQuota, string organizationName, string primaryEmailAddress) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("newQuota", newQuota);
            _body.Add("primaryEmailAddress", primaryEmailAddress);
            string uri = $"/v1/order/email/exchange/{organizationName}/service/{exchangeService}/accountUpgrade/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/email/exchange/{organizationName}/service/{exchangeService}/diskSpace
        public Task<_order.Order> GetV1OrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpaceAsync(string exchangeService, string organizationName) {
            string uri = $"/v1/order/email/exchange/{organizationName}/service/{exchangeService}/diskSpace";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/email/exchange/{organizationName}/service/{exchangeService}/diskSpace
        public Task<_order.Order> PostV1OrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpaceAsync(string exchangeService, string organizationName) {
            string uri = $"/v1/order/email/exchange/{organizationName}/service/{exchangeService}/diskSpace";
            return this.SendAsync<_order.Order>("POST", uri, null, null, true);
        }
        
        // Path: /v1/order/email/exchange/{organizationName}/service/{exchangeService}/outlook
        public Task<System.String[]> GetV1OrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookAsync(string exchangeService, _email_exchange.OutlookVersionEnum licence, string organizationName, string primaryEmailAddress) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("licence", licence);
            queryParametersTemp.Add("primaryEmailAddress", primaryEmailAddress);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/email/exchange/{organizationName}/service/{exchangeService}/outlook{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/email/exchange/{organizationName}/service/{exchangeService}/outlook/{duration}
        public Task<_order.Order> GetV1OrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationAsync(string duration, string exchangeService, _email_exchange.OutlookVersionEnum licence, string organizationName, string primaryEmailAddress) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("licence", licence);
            queryParametersTemp.Add("primaryEmailAddress", primaryEmailAddress);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/email/exchange/{organizationName}/service/{exchangeService}/outlook/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/email/exchange/{organizationName}/service/{exchangeService}/outlook/{duration}
        public Task<_order.Order> PostV1OrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationAsync(string duration, string exchangeService, _email_exchange.OutlookVersionEnum licence, string organizationName, string primaryEmailAddress) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("licence", licence);
            _body.Add("primaryEmailAddress", primaryEmailAddress);
            string uri = $"/v1/order/email/exchange/{organizationName}/service/{exchangeService}/outlook/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/email/exchange/{organizationName}/service/{exchangeService}/upgrade
        public Task<_order.Order> GetV1OrderEmailExchangeOrganizationNameServiceExchangeServiceUpgradeAsync(string exchangeService, string organizationName) {
            string uri = $"/v1/order/email/exchange/{organizationName}/service/{exchangeService}/upgrade";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/email/exchange/{organizationName}/service/{exchangeService}/upgrade
        public Task<_order.Order> PostV1OrderEmailExchangeOrganizationNameServiceExchangeServiceUpgradeAsync(string exchangeService, string organizationName) {
            string uri = $"/v1/order/email/exchange/{organizationName}/service/{exchangeService}/upgrade";
            return this.SendAsync<_order.Order>("POST", uri, null, null, true);
        }
        
        // Path: /v1/order/email/pro
        public Task<System.String[]> GetV1OrderEmailProAsync() {
            string uri = $"/v1/order/email/pro";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/email/pro/{service}
        public Task<System.String[]> GetV1OrderEmailProServiceAsync(string service) {
            string uri = $"/v1/order/email/pro/{service}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/email/pro/{service}/account
        public Task<System.String[]> GetV1OrderEmailProServiceAccountAsync(long number, string service) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("number", number);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/email/pro/{service}/account{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/email/pro/{service}/account/{duration}
        public Task<_order.Order> GetV1OrderEmailProServiceAccountDurationAsync(string duration, long number, string service) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("number", number);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/email/pro/{service}/account/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/email/pro/{service}/account/{duration}
        public Task<_order.Order> PostV1OrderEmailProServiceAccountDurationAsync(string duration, long number, string service) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("number", number);
            string uri = $"/v1/order/email/pro/{service}/account/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/freefax
        public Task<System.String[]> GetV1OrderFreefaxAsync() {
            string uri = $"/v1/order/freefax";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/freefax/new
        public Task<_order.Order> GetV1OrderFreefaxNewAsync(_freefax.QuantityEnum quantity) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/freefax/new{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/freefax/new
        public Task<_order.Order> PostV1OrderFreefaxNewAsync(_freefax.QuantityEnum quantity) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/freefax/new";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/freefax/{serviceName}
        public Task<System.String[]> GetV1OrderFreefaxServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/freefax/{serviceName}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/freefax/{serviceName}/convertToVoicefax
        public Task<_order.Order> GetV1OrderFreefaxServiceNameConvertToVoicefaxAsync(string billingAccount, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("billingAccount", billingAccount);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/freefax/{serviceName}/convertToVoicefax{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/freefax/{serviceName}/convertToVoicefax
        public Task<_order.Order> PostV1OrderFreefaxServiceNameConvertToVoicefaxAsync(string billingAccount, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("billingAccount", billingAccount);
            string uri = $"/v1/order/freefax/{serviceName}/convertToVoicefax";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/hosting/web
        public Task<System.String[]> GetV1OrderHostingWebAsync() {
            string uri = $"/v1/order/hosting/web";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/hosting/web/{serviceName}
        public Task<System.String[]> GetV1OrderHostingWebServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/hosting/web/{serviceName}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/hosting/web/{serviceName}/upgrade
        public Task<System.String[]> GetV1OrderHostingWebServiceNameUpgradeAsync(_hosting_web.OfferEnum offer, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.TimeOnly? startTime, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? waiveRetractationPeriod) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("offer", offer);
            queryParametersTemp.Add("startTime", startTime);
            queryParametersTemp.Add("waiveRetractationPeriod", waiveRetractationPeriod);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/hosting/web/{serviceName}/upgrade{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/hosting/web/{serviceName}/upgrade/{duration}
        public Task<_order.Order> GetV1OrderHostingWebServiceNameUpgradeDurationAsync(string duration, _hosting_web.OfferEnum offer, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.TimeOnly? startTime, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? waiveRetractationPeriod) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("offer", offer);
            queryParametersTemp.Add("startTime", startTime);
            queryParametersTemp.Add("waiveRetractationPeriod", waiveRetractationPeriod);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/hosting/web/{serviceName}/upgrade/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/hosting/web/{serviceName}/upgrade/{duration}
        public Task<_order.Order> PostV1OrderHostingWebServiceNameUpgradeDurationAsync(string duration, _hosting_web.OfferEnum offer, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.TimeOnly? startTime, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? waiveRetractationPeriod) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("offer", offer);
            _body.Add("startTime", startTime);
            _body.Add("waiveRetractationPeriod", waiveRetractationPeriod);
            string uri = $"/v1/order/hosting/web/{serviceName}/upgrade/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/license/cloudLinux/new
        public Task<System.String[]> GetV1OrderLicenseCloudLinuxNewAsync(string ip, _license.CloudLinuxVersionEnum version) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ip", ip);
            queryParametersTemp.Add("version", version);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/license/cloudLinux/new{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/cloudLinux/new/{duration}
        public Task<_order.Order> GetV1OrderLicenseCloudLinuxNewDurationAsync(string duration, string ip, _license.CloudLinuxVersionEnum version) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ip", ip);
            queryParametersTemp.Add("version", version);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/license/cloudLinux/new/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/cloudLinux/new/{duration}
        public Task<_order.Order> PostV1OrderLicenseCloudLinuxNewDurationAsync(string duration, string ip, _license.CloudLinuxVersionEnum version) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("ip", ip);
            _body.Add("version", version);
            string uri = $"/v1/order/license/cloudLinux/new/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/license/cpanel
        public Task<System.String[]> GetV1OrderLicenseCpanelAsync() {
            string uri = $"/v1/order/license/cpanel";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/cpanel/new
        public Task<System.String[]> GetV1OrderLicenseCpanelNewAsync(string ip, _license.OrderableCpanelVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] _license.LicenseTypeEnum? serviceType) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ip", ip);
            queryParametersTemp.Add("serviceType", serviceType);
            queryParametersTemp.Add("version", version);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/license/cpanel/new{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/cpanel/new/{duration}
        public Task<_order.Order> GetV1OrderLicenseCpanelNewDurationAsync(string duration, string ip, _license.OrderableCpanelVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] _license.LicenseTypeEnum? serviceType) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ip", ip);
            queryParametersTemp.Add("serviceType", serviceType);
            queryParametersTemp.Add("version", version);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/license/cpanel/new/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/cpanel/new/{duration}
        public Task<_order.Order> PostV1OrderLicenseCpanelNewDurationAsync(string duration, string ip, _license.OrderableCpanelVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] _license.LicenseTypeEnum? serviceType) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("ip", ip);
            _body.Add("serviceType", serviceType);
            _body.Add("version", version);
            string uri = $"/v1/order/license/cpanel/new/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/license/cpanel/{serviceName}
        public Task<System.String[]> GetV1OrderLicenseCpanelServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/license/cpanel/{serviceName}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/cpanel/{serviceName}/upgrade
        public Task<System.String[]> GetV1OrderLicenseCpanelServiceNameUpgradeAsync(string serviceName, _license.OrderableCpanelVersionEnum version) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("version", version);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/license/cpanel/{serviceName}/upgrade{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/cpanel/{serviceName}/upgrade/{duration}
        public Task<_order.Order> GetV1OrderLicenseCpanelServiceNameUpgradeDurationAsync(string duration, string serviceName, _license.OrderableCpanelVersionEnum version) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("version", version);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/license/cpanel/{serviceName}/upgrade/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/cpanel/{serviceName}/upgrade/{duration}
        public Task<_order.Order> PostV1OrderLicenseCpanelServiceNameUpgradeDurationAsync(string duration, string serviceName, _license.OrderableCpanelVersionEnum version) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("version", version);
            string uri = $"/v1/order/license/cpanel/{serviceName}/upgrade/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/license/directadmin/new
        public Task<System.String[]> GetV1OrderLicenseDirectadminNewAsync(string ip, _license.OrderableDirectAdminVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] _license.LicenseTypeEnum? serviceType) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ip", ip);
            queryParametersTemp.Add("serviceType", serviceType);
            queryParametersTemp.Add("version", version);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/license/directadmin/new{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/directadmin/new/{duration}
        public Task<_order.Order> GetV1OrderLicenseDirectadminNewDurationAsync(string duration, string ip, _license.OrderableDirectAdminVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] _license.LicenseTypeEnum? serviceType) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ip", ip);
            queryParametersTemp.Add("serviceType", serviceType);
            queryParametersTemp.Add("version", version);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/license/directadmin/new/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/directadmin/new/{duration}
        public Task<_order.Order> PostV1OrderLicenseDirectadminNewDurationAsync(string duration, string ip, _license.OrderableDirectAdminVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] _license.LicenseTypeEnum? serviceType) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("ip", ip);
            _body.Add("serviceType", serviceType);
            _body.Add("version", version);
            string uri = $"/v1/order/license/directadmin/new/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/license/office/new
        public Task<System.String[]> GetV1OrderLicenseOfficeNewAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? giftCode, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? officeBusinessQuantity, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? officeProPlusQuantity) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("giftCode", giftCode);
            queryParametersTemp.Add("officeBusinessQuantity", officeBusinessQuantity);
            queryParametersTemp.Add("officeProPlusQuantity", officeProPlusQuantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/license/office/new{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/office/new/{duration}
        public Task<_order.Order> GetV1OrderLicenseOfficeNewDurationAsync(string duration, [System.Runtime.InteropServices.OptionalAttribute()] System.String? giftCode, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? officeBusinessQuantity, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? officeProPlusQuantity) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("giftCode", giftCode);
            queryParametersTemp.Add("officeBusinessQuantity", officeBusinessQuantity);
            queryParametersTemp.Add("officeProPlusQuantity", officeProPlusQuantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/license/office/new/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/office/new/{duration}
        public Task<_order.Order> PostV1OrderLicenseOfficeNewDurationAsync(string duration, [System.Runtime.InteropServices.OptionalAttribute()] System.String? giftCode, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? officeBusinessQuantity, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? officeProPlusQuantity) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("giftCode", giftCode);
            _body.Add("officeBusinessQuantity", officeBusinessQuantity);
            _body.Add("officeProPlusQuantity", officeProPlusQuantity);
            string uri = $"/v1/order/license/office/new/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/license/plesk
        public Task<System.String[]> GetV1OrderLicensePleskAsync() {
            string uri = $"/v1/order/license/plesk";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/plesk/new
        public Task<System.String[]> GetV1OrderLicensePleskNewAsync(string ip, _license.PleskVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderableAntivirusEnum? antivirus, [System.Runtime.InteropServices.OptionalAttribute()] _license.PleskApplicationSetEnum? applicationSet, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderablePleskDomainNumberEnum? domainNumber, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderablePleskLanguagePackEnum? languagePackNumber, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? powerpack, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? resellerManagement, [System.Runtime.InteropServices.OptionalAttribute()] _license.LicenseTypeEnum? serviceType, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? wordpressToolkit) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("antivirus", antivirus);
            queryParametersTemp.Add("applicationSet", applicationSet);
            queryParametersTemp.Add("domainNumber", domainNumber);
            queryParametersTemp.Add("ip", ip);
            queryParametersTemp.Add("languagePackNumber", languagePackNumber);
            queryParametersTemp.Add("powerpack", powerpack);
            queryParametersTemp.Add("resellerManagement", resellerManagement);
            queryParametersTemp.Add("serviceType", serviceType);
            queryParametersTemp.Add("version", version);
            queryParametersTemp.Add("wordpressToolkit", wordpressToolkit);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/license/plesk/new{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/plesk/new/{duration}
        public Task<_order.Order> GetV1OrderLicensePleskNewDurationAsync(string duration, string ip, _license.PleskVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderableAntivirusEnum? antivirus, [System.Runtime.InteropServices.OptionalAttribute()] _license.PleskApplicationSetEnum? applicationSet, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderablePleskDomainNumberEnum? domainNumber, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderablePleskLanguagePackEnum? languagePackNumber, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? powerpack, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? resellerManagement, [System.Runtime.InteropServices.OptionalAttribute()] _license.LicenseTypeEnum? serviceType, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? wordpressToolkit) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("antivirus", antivirus);
            queryParametersTemp.Add("applicationSet", applicationSet);
            queryParametersTemp.Add("domainNumber", domainNumber);
            queryParametersTemp.Add("ip", ip);
            queryParametersTemp.Add("languagePackNumber", languagePackNumber);
            queryParametersTemp.Add("powerpack", powerpack);
            queryParametersTemp.Add("resellerManagement", resellerManagement);
            queryParametersTemp.Add("serviceType", serviceType);
            queryParametersTemp.Add("version", version);
            queryParametersTemp.Add("wordpressToolkit", wordpressToolkit);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/license/plesk/new/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/plesk/new/{duration}
        public Task<_order.Order> PostV1OrderLicensePleskNewDurationAsync(string duration, string ip, _license.PleskVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderableAntivirusEnum? antivirus, [System.Runtime.InteropServices.OptionalAttribute()] _license.PleskApplicationSetEnum? applicationSet, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderablePleskDomainNumberEnum? domainNumber, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderablePleskLanguagePackEnum? languagePackNumber, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? powerpack, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? resellerManagement, [System.Runtime.InteropServices.OptionalAttribute()] _license.LicenseTypeEnum? serviceType, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? wordpressToolkit) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("antivirus", antivirus);
            _body.Add("applicationSet", applicationSet);
            _body.Add("domainNumber", domainNumber);
            _body.Add("ip", ip);
            _body.Add("languagePackNumber", languagePackNumber);
            _body.Add("powerpack", powerpack);
            _body.Add("resellerManagement", resellerManagement);
            _body.Add("serviceType", serviceType);
            _body.Add("version", version);
            _body.Add("wordpressToolkit", wordpressToolkit);
            string uri = $"/v1/order/license/plesk/new/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/license/plesk/{serviceName}
        public Task<System.String[]> GetV1OrderLicensePleskServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/license/plesk/{serviceName}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/plesk/{serviceName}/upgrade
        public Task<System.String[]> GetV1OrderLicensePleskServiceNameUpgradeAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderableAntispamEnum? antispam, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderableAntivirusEnum? antivirus, [System.Runtime.InteropServices.OptionalAttribute()] _license.PleskApplicationSetEnum? applicationSet, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderablePleskDomainNumberEnum? domainNumber, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderablePleskLanguagePackEnum? languagePackNumber, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? powerpack, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? resellerManagement, [System.Runtime.InteropServices.OptionalAttribute()] _license.PleskVersionEnum? version, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? wordpressToolkit) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("antispam", antispam);
            queryParametersTemp.Add("antivirus", antivirus);
            queryParametersTemp.Add("applicationSet", applicationSet);
            queryParametersTemp.Add("domainNumber", domainNumber);
            queryParametersTemp.Add("languagePackNumber", languagePackNumber);
            queryParametersTemp.Add("powerpack", powerpack);
            queryParametersTemp.Add("resellerManagement", resellerManagement);
            queryParametersTemp.Add("version", version);
            queryParametersTemp.Add("wordpressToolkit", wordpressToolkit);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/license/plesk/{serviceName}/upgrade{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/plesk/{serviceName}/upgrade/{duration}
        public Task<_order.Order> GetV1OrderLicensePleskServiceNameUpgradeDurationAsync(string duration, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderableAntispamEnum? antispam, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderableAntivirusEnum? antivirus, [System.Runtime.InteropServices.OptionalAttribute()] _license.PleskApplicationSetEnum? applicationSet, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderablePleskDomainNumberEnum? domainNumber, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderablePleskLanguagePackEnum? languagePackNumber, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? powerpack, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? resellerManagement, [System.Runtime.InteropServices.OptionalAttribute()] _license.PleskVersionEnum? version, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? wordpressToolkit) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("antispam", antispam);
            queryParametersTemp.Add("antivirus", antivirus);
            queryParametersTemp.Add("applicationSet", applicationSet);
            queryParametersTemp.Add("domainNumber", domainNumber);
            queryParametersTemp.Add("languagePackNumber", languagePackNumber);
            queryParametersTemp.Add("powerpack", powerpack);
            queryParametersTemp.Add("resellerManagement", resellerManagement);
            queryParametersTemp.Add("version", version);
            queryParametersTemp.Add("wordpressToolkit", wordpressToolkit);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/license/plesk/{serviceName}/upgrade/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/plesk/{serviceName}/upgrade/{duration}
        public Task<_order.Order> PostV1OrderLicensePleskServiceNameUpgradeDurationAsync(string duration, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderableAntispamEnum? antispam, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderableAntivirusEnum? antivirus, [System.Runtime.InteropServices.OptionalAttribute()] _license.PleskApplicationSetEnum? applicationSet, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderablePleskDomainNumberEnum? domainNumber, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderablePleskLanguagePackEnum? languagePackNumber, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? powerpack, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? resellerManagement, [System.Runtime.InteropServices.OptionalAttribute()] _license.PleskVersionEnum? version, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? wordpressToolkit) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("antispam", antispam);
            _body.Add("antivirus", antivirus);
            _body.Add("applicationSet", applicationSet);
            _body.Add("domainNumber", domainNumber);
            _body.Add("languagePackNumber", languagePackNumber);
            _body.Add("powerpack", powerpack);
            _body.Add("resellerManagement", resellerManagement);
            _body.Add("version", version);
            _body.Add("wordpressToolkit", wordpressToolkit);
            string uri = $"/v1/order/license/plesk/{serviceName}/upgrade/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/license/sqlserver
        public Task<System.String[]> GetV1OrderLicenseSqlserverAsync() {
            string uri = $"/v1/order/license/sqlserver";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/sqlserver/new
        public Task<System.String[]> GetV1OrderLicenseSqlserverNewAsync(string ip, _license.SqlServerVersionEnum version) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ip", ip);
            queryParametersTemp.Add("version", version);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/license/sqlserver/new{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/sqlserver/new/{duration}
        public Task<_order.Order> GetV1OrderLicenseSqlserverNewDurationAsync(string duration, string ip, _license.SqlServerVersionEnum version) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ip", ip);
            queryParametersTemp.Add("version", version);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/license/sqlserver/new/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/sqlserver/new/{duration}
        public Task<_order.Order> PostV1OrderLicenseSqlserverNewDurationAsync(string duration, string ip, _license.SqlServerVersionEnum version) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("ip", ip);
            _body.Add("version", version);
            string uri = $"/v1/order/license/sqlserver/new/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/license/sqlserver/{serviceName}
        public Task<System.String[]> GetV1OrderLicenseSqlserverServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/license/sqlserver/{serviceName}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/sqlserver/{serviceName}/upgrade
        public Task<System.String[]> GetV1OrderLicenseSqlserverServiceNameUpgradeAsync(string serviceName, _license.SqlServerVersionEnum version) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("version", version);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/license/sqlserver/{serviceName}/upgrade{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/sqlserver/{serviceName}/upgrade/{duration}
        public Task<_order.Order> GetV1OrderLicenseSqlserverServiceNameUpgradeDurationAsync(string duration, string serviceName, _license.SqlServerVersionEnum version) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("version", version);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/license/sqlserver/{serviceName}/upgrade/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/sqlserver/{serviceName}/upgrade/{duration}
        public Task<_order.Order> PostV1OrderLicenseSqlserverServiceNameUpgradeDurationAsync(string duration, string serviceName, _license.SqlServerVersionEnum version) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("version", version);
            string uri = $"/v1/order/license/sqlserver/{serviceName}/upgrade/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/license/virtuozzo
        public Task<System.String[]> GetV1OrderLicenseVirtuozzoAsync() {
            string uri = $"/v1/order/license/virtuozzo";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/virtuozzo/new
        public Task<System.String[]> GetV1OrderLicenseVirtuozzoNewAsync(_license.OrderableVirtuozzoContainerNumberEnum containerNumber, string ip, _license.OrderableVirtuozzoVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] _license.LicenseTypeEnum? serviceType) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("containerNumber", containerNumber);
            queryParametersTemp.Add("ip", ip);
            queryParametersTemp.Add("serviceType", serviceType);
            queryParametersTemp.Add("version", version);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/license/virtuozzo/new{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/virtuozzo/new/{duration}
        public Task<_order.Order> GetV1OrderLicenseVirtuozzoNewDurationAsync(_license.OrderableVirtuozzoContainerNumberEnum containerNumber, string duration, string ip, _license.OrderableVirtuozzoVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] _license.LicenseTypeEnum? serviceType) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("containerNumber", containerNumber);
            queryParametersTemp.Add("ip", ip);
            queryParametersTemp.Add("serviceType", serviceType);
            queryParametersTemp.Add("version", version);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/license/virtuozzo/new/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/virtuozzo/new/{duration}
        public Task<_order.Order> PostV1OrderLicenseVirtuozzoNewDurationAsync(_license.OrderableVirtuozzoContainerNumberEnum containerNumber, string duration, string ip, _license.OrderableVirtuozzoVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] _license.LicenseTypeEnum? serviceType) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("containerNumber", containerNumber);
            _body.Add("ip", ip);
            _body.Add("serviceType", serviceType);
            _body.Add("version", version);
            string uri = $"/v1/order/license/virtuozzo/new/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/license/virtuozzo/{serviceName}
        public Task<System.String[]> GetV1OrderLicenseVirtuozzoServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/license/virtuozzo/{serviceName}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/virtuozzo/{serviceName}/upgrade
        public Task<System.String[]> GetV1OrderLicenseVirtuozzoServiceNameUpgradeAsync(_license.OrderableVirtuozzoContainerNumberEnum containerNumber, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("containerNumber", containerNumber);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/license/virtuozzo/{serviceName}/upgrade{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/virtuozzo/{serviceName}/upgrade/{duration}
        public Task<_order.Order> GetV1OrderLicenseVirtuozzoServiceNameUpgradeDurationAsync(_license.OrderableVirtuozzoContainerNumberEnum containerNumber, string duration, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("containerNumber", containerNumber);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/license/virtuozzo/{serviceName}/upgrade/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/virtuozzo/{serviceName}/upgrade/{duration}
        public Task<_order.Order> PostV1OrderLicenseVirtuozzoServiceNameUpgradeDurationAsync(_license.OrderableVirtuozzoContainerNumberEnum containerNumber, string duration, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("containerNumber", containerNumber);
            string uri = $"/v1/order/license/virtuozzo/{serviceName}/upgrade/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/license/windows
        public Task<System.String[]> GetV1OrderLicenseWindowsAsync() {
            string uri = $"/v1/order/license/windows";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/windows/new
        public Task<System.String[]> GetV1OrderLicenseWindowsNewAsync(string ip, _license.WindowsOsVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] _license.LicenseTypeEnum? serviceType, [System.Runtime.InteropServices.OptionalAttribute()] _license.WindowsSqlVersionEnum? sqlVersion) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ip", ip);
            queryParametersTemp.Add("serviceType", serviceType);
            queryParametersTemp.Add("sqlVersion", sqlVersion);
            queryParametersTemp.Add("version", version);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/license/windows/new{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/windows/new/{duration}
        public Task<_order.Order> GetV1OrderLicenseWindowsNewDurationAsync(string duration, string ip, _license.WindowsOsVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] _license.LicenseTypeEnum? serviceType, [System.Runtime.InteropServices.OptionalAttribute()] _license.WindowsSqlVersionEnum? sqlVersion) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ip", ip);
            queryParametersTemp.Add("serviceType", serviceType);
            queryParametersTemp.Add("sqlVersion", sqlVersion);
            queryParametersTemp.Add("version", version);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/license/windows/new/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/windows/new/{duration}
        public Task<_order.Order> PostV1OrderLicenseWindowsNewDurationAsync(string duration, string ip, _license.WindowsOsVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] _license.LicenseTypeEnum? serviceType, [System.Runtime.InteropServices.OptionalAttribute()] _license.WindowsSqlVersionEnum? sqlVersion) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("ip", ip);
            _body.Add("serviceType", serviceType);
            _body.Add("sqlVersion", sqlVersion);
            _body.Add("version", version);
            string uri = $"/v1/order/license/windows/new/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/license/windows/{serviceName}
        public Task<System.String[]> GetV1OrderLicenseWindowsServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/license/windows/{serviceName}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/windows/{serviceName}/upgrade
        public Task<System.String[]> GetV1OrderLicenseWindowsServiceNameUpgradeAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.WindowsSqlVersionEnum? sqlVersion, [System.Runtime.InteropServices.OptionalAttribute()] _license.WindowsOsVersionEnum? version) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("sqlVersion", sqlVersion);
            queryParametersTemp.Add("version", version);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/license/windows/{serviceName}/upgrade{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/windows/{serviceName}/upgrade/{duration}
        public Task<_order.Order> GetV1OrderLicenseWindowsServiceNameUpgradeDurationAsync(string duration, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.WindowsSqlVersionEnum? sqlVersion, [System.Runtime.InteropServices.OptionalAttribute()] _license.WindowsOsVersionEnum? version) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("sqlVersion", sqlVersion);
            queryParametersTemp.Add("version", version);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/license/windows/{serviceName}/upgrade/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/windows/{serviceName}/upgrade/{duration}
        public Task<_order.Order> PostV1OrderLicenseWindowsServiceNameUpgradeDurationAsync(string duration, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.WindowsSqlVersionEnum? sqlVersion, [System.Runtime.InteropServices.OptionalAttribute()] _license.WindowsOsVersionEnum? version) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("sqlVersion", sqlVersion);
            _body.Add("version", version);
            string uri = $"/v1/order/license/windows/{serviceName}/upgrade/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/license/worklight
        public Task<System.String[]> GetV1OrderLicenseWorklightAsync() {
            string uri = $"/v1/order/license/worklight";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/worklight/new
        public Task<System.String[]> GetV1OrderLicenseWorklightNewAsync(string ip, bool lessThan1000Users, _license.WorkLightVersionEnum version) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ip", ip);
            queryParametersTemp.Add("lessThan1000Users", lessThan1000Users);
            queryParametersTemp.Add("version", version);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/license/worklight/new{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/worklight/new/{duration}
        public Task<_order.Order> GetV1OrderLicenseWorklightNewDurationAsync(string duration, string ip, bool lessThan1000Users, _license.WorkLightVersionEnum version) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ip", ip);
            queryParametersTemp.Add("lessThan1000Users", lessThan1000Users);
            queryParametersTemp.Add("version", version);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/license/worklight/new/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/worklight/new/{duration}
        public Task<_order.Order> PostV1OrderLicenseWorklightNewDurationAsync(string duration, string ip, bool lessThan1000Users, _license.WorkLightVersionEnum version) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("ip", ip);
            _body.Add("lessThan1000Users", lessThan1000Users);
            _body.Add("version", version);
            string uri = $"/v1/order/license/worklight/new/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/license/worklight/{serviceName}
        public Task<System.String[]> GetV1OrderLicenseWorklightServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/license/worklight/{serviceName}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/worklight/{serviceName}/upgrade
        public Task<System.String[]> GetV1OrderLicenseWorklightServiceNameUpgradeAsync(string serviceName, _license.WorkLightVersionEnum version) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("version", version);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/license/worklight/{serviceName}/upgrade{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/worklight/{serviceName}/upgrade/{duration}
        public Task<_order.Order> GetV1OrderLicenseWorklightServiceNameUpgradeDurationAsync(string duration, string serviceName, _license.WorkLightVersionEnum version) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("version", version);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/license/worklight/{serviceName}/upgrade/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/license/worklight/{serviceName}/upgrade/{duration}
        public Task<_order.Order> PostV1OrderLicenseWorklightServiceNameUpgradeDurationAsync(string duration, string serviceName, _license.WorkLightVersionEnum version) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("version", version);
            string uri = $"/v1/order/license/worklight/{serviceName}/upgrade/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/overTheBox
        public Task<System.String[]> GetV1OrderOverTheBoxAsync() {
            string uri = $"/v1/order/overTheBox";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/overTheBox/new
        public Task<System.String[]> GetV1OrderOverTheBoxNewAsync(string offer, [System.Runtime.InteropServices.OptionalAttribute()] System.String? deviceId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? voucher) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("deviceId", deviceId);
            queryParametersTemp.Add("offer", offer);
            queryParametersTemp.Add("voucher", voucher);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/overTheBox/new{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/overTheBox/new/{duration}
        public Task<_order.Order> GetV1OrderOverTheBoxNewDurationAsync(string duration, string offer, [System.Runtime.InteropServices.OptionalAttribute()] System.String? deviceId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? voucher) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("deviceId", deviceId);
            queryParametersTemp.Add("offer", offer);
            queryParametersTemp.Add("voucher", voucher);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/overTheBox/new/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/overTheBox/new/{duration}
        public Task<_order.Order> PostV1OrderOverTheBoxNewDurationAsync(string duration, string offer, [System.Runtime.InteropServices.OptionalAttribute()] System.String? deviceId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? voucher) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("deviceId", deviceId);
            _body.Add("offer", offer);
            _body.Add("voucher", voucher);
            string uri = $"/v1/order/overTheBox/new/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/overTheBox/{serviceName}
        public Task<System.String[]> GetV1OrderOverTheBoxServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/overTheBox/{serviceName}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/overTheBox/{serviceName}/migrate
        public Task<_order.Order> GetV1OrderOverTheBoxServiceNameMigrateAsync(bool hardware, string offer, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? shippingContactID, [System.Runtime.InteropServices.OptionalAttribute()] _overTheBox.ShippingMethodEnum? shippingMethod, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? shippingRelayID) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("hardware", hardware);
            queryParametersTemp.Add("offer", offer);
            queryParametersTemp.Add("shippingContactID", shippingContactID);
            queryParametersTemp.Add("shippingMethod", shippingMethod);
            queryParametersTemp.Add("shippingRelayID", shippingRelayID);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/overTheBox/{serviceName}/migrate{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/overTheBox/{serviceName}/migrate
        public Task<_order.Order> PostV1OrderOverTheBoxServiceNameMigrateAsync(bool hardware, string offer, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? shippingContactID, [System.Runtime.InteropServices.OptionalAttribute()] _overTheBox.ShippingMethodEnum? shippingMethod, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? shippingRelayID) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("hardware", hardware);
            _body.Add("offer", offer);
            _body.Add("shippingContactID", shippingContactID);
            _body.Add("shippingMethod", shippingMethod);
            _body.Add("shippingRelayID", shippingRelayID);
            string uri = $"/v1/order/overTheBox/{serviceName}/migrate";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/saas/csp2/new
        public Task<System.String[]> GetV1OrderSaasCsp2NewAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? giftCode, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? officeBusinessQuantity, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? officeProPlusQuantity) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("giftCode", giftCode);
            queryParametersTemp.Add("officeBusinessQuantity", officeBusinessQuantity);
            queryParametersTemp.Add("officeProPlusQuantity", officeProPlusQuantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/saas/csp2/new{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/saas/csp2/new/{duration}
        public Task<_order.Order> GetV1OrderSaasCsp2NewDurationAsync(string duration, [System.Runtime.InteropServices.OptionalAttribute()] System.String? giftCode, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? officeBusinessQuantity, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? officeProPlusQuantity) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("giftCode", giftCode);
            queryParametersTemp.Add("officeBusinessQuantity", officeBusinessQuantity);
            queryParametersTemp.Add("officeProPlusQuantity", officeProPlusQuantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/saas/csp2/new/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/saas/csp2/new/{duration}
        public Task<_order.Order> PostV1OrderSaasCsp2NewDurationAsync(string duration, [System.Runtime.InteropServices.OptionalAttribute()] System.String? giftCode, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? officeBusinessQuantity, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? officeProPlusQuantity) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("giftCode", giftCode);
            _body.Add("officeBusinessQuantity", officeBusinessQuantity);
            _body.Add("officeProPlusQuantity", officeProPlusQuantity);
            string uri = $"/v1/order/saas/csp2/new/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/sms
        public Task<System.String[]> GetV1OrderSmsAsync() {
            string uri = $"/v1/order/sms";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/sms/new
        public Task<_order.Order> GetV1OrderSmsNewAsync(long quantity, [System.Runtime.InteropServices.OptionalAttribute()] _sms.ChannelEnum? channel, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? smpp) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("channel", channel);
            queryParametersTemp.Add("quantity", quantity);
            queryParametersTemp.Add("smpp", smpp);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/sms/new{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/sms/new
        public Task<_order.Order> PostV1OrderSmsNewAsync(long quantity, [System.Runtime.InteropServices.OptionalAttribute()] _sms.ChannelEnum? channel, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? smpp) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("channel", channel);
            _body.Add("quantity", quantity);
            _body.Add("smpp", smpp);
            string uri = $"/v1/order/sms/new";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/sms/{serviceName}
        public Task<System.String[]> GetV1OrderSmsServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/sms/{serviceName}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/sms/{serviceName}/credits
        public Task<_order.Order> GetV1OrderSmsServiceNameCreditsAsync(long quantity, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/sms/{serviceName}/credits{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/sms/{serviceName}/credits
        public Task<_order.Order> PostV1OrderSmsServiceNameCreditsAsync(long quantity, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/sms/{serviceName}/credits";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/telephony
        public Task<System.String[]> GetV1OrderTelephonyAsync() {
            string uri = $"/v1/order/telephony";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/telephony/lines
        public Task<System.String[]> GetV1OrderTelephonyLinesAsync() {
            string uri = $"/v1/order/telephony/lines";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/telephony/lines/{serviceName}
        public Task<System.String[]> GetV1OrderTelephonyLinesServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/telephony/lines/{serviceName}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/telephony/lines/{serviceName}/addSimultaneousLines
        public Task<_order.Order> GetV1OrderTelephonyLinesServiceNameAddSimultaneousLinesAsync(string billingAccount, long quantity, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("billingAccount", billingAccount);
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/telephony/lines/{serviceName}/addSimultaneousLines{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/telephony/lines/{serviceName}/addSimultaneousLines
        public Task<_order.Order> PostV1OrderTelephonyLinesServiceNameAddSimultaneousLinesAsync(string billingAccount, long quantity, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("billingAccount", billingAccount);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/telephony/lines/{serviceName}/addSimultaneousLines";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/telephony/lines/{serviceName}/hardware
        public Task<_order.Order> GetV1OrderTelephonyLinesServiceNameHardwareAsync(string hardware, bool retractation, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? mondialRelayId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? shippingContactId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("hardware", hardware);
            queryParametersTemp.Add("mondialRelayId", mondialRelayId);
            queryParametersTemp.Add("retractation", retractation);
            queryParametersTemp.Add("shippingContactId", shippingContactId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/telephony/lines/{serviceName}/hardware{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/telephony/lines/{serviceName}/hardware
        public Task<_order.Order> PostV1OrderTelephonyLinesServiceNameHardwareAsync(string hardware, bool retractation, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? mondialRelayId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? shippingContactId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("hardware", hardware);
            _body.Add("mondialRelayId", mondialRelayId);
            _body.Add("retractation", retractation);
            _body.Add("shippingContactId", shippingContactId);
            string uri = $"/v1/order/telephony/lines/{serviceName}/hardware";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/telephony/lines/{serviceName}/updateSimultaneousChannels
        public Task<_order.Order> GetV1OrderTelephonyLinesServiceNameUpdateSimultaneousChannelsAsync(long quantity, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/telephony/lines/{serviceName}/updateSimultaneousChannels{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/telephony/lines/{serviceName}/updateSimultaneousChannels
        public Task<_order.Order> PostV1OrderTelephonyLinesServiceNameUpdateSimultaneousChannelsAsync(long quantity, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/telephony/lines/{serviceName}/updateSimultaneousChannels";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/telephony/new
        public Task<_order.Order> GetV1OrderTelephonyNewAsync() {
            string uri = $"/v1/order/telephony/new";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/telephony/new
        public Task<_order.Order> PostV1OrderTelephonyNewAsync() {
            string uri = $"/v1/order/telephony/new";
            return this.SendAsync<_order.Order>("POST", uri, null, null, true);
        }
        
        // Path: /v1/order/telephony/spare/new
        public Task<_order.Order> GetV1OrderTelephonySpareNewAsync(string brand, long quantity, long shippingContactId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? mondialRelayId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("brand", brand);
            queryParametersTemp.Add("mondialRelayId", mondialRelayId);
            queryParametersTemp.Add("quantity", quantity);
            queryParametersTemp.Add("shippingContactId", shippingContactId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/telephony/spare/new{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/telephony/spare/new
        public Task<_order.Order> PostV1OrderTelephonySpareNewAsync(string brand, long quantity, long shippingContactId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? mondialRelayId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("brand", brand);
            _body.Add("mondialRelayId", mondialRelayId);
            _body.Add("quantity", quantity);
            _body.Add("shippingContactId", shippingContactId);
            string uri = $"/v1/order/telephony/spare/new";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/telephony/trunks
        public Task<System.String[]> GetV1OrderTelephonyTrunksAsync() {
            string uri = $"/v1/order/telephony/trunks";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/telephony/trunks/{serviceName}
        public Task<System.String[]> GetV1OrderTelephonyTrunksServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/telephony/trunks/{serviceName}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/telephony/trunks/{serviceName}/addSimultaneousLines
        public Task<_order.Order> GetV1OrderTelephonyTrunksServiceNameAddSimultaneousLinesAsync(string billingAccount, long quantity, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("billingAccount", billingAccount);
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/telephony/trunks/{serviceName}/addSimultaneousLines{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/telephony/trunks/{serviceName}/addSimultaneousLines
        public Task<_order.Order> PostV1OrderTelephonyTrunksServiceNameAddSimultaneousLinesAsync(string billingAccount, long quantity, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("billingAccount", billingAccount);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/telephony/trunks/{serviceName}/addSimultaneousLines";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/telephony/trunks/{serviceName}/hardware
        public Task<_order.Order> GetV1OrderTelephonyTrunksServiceNameHardwareAsync(string hardware, bool retractation, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? mondialRelayId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? shippingContactId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("hardware", hardware);
            queryParametersTemp.Add("mondialRelayId", mondialRelayId);
            queryParametersTemp.Add("retractation", retractation);
            queryParametersTemp.Add("shippingContactId", shippingContactId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/telephony/trunks/{serviceName}/hardware{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/telephony/trunks/{serviceName}/hardware
        public Task<_order.Order> PostV1OrderTelephonyTrunksServiceNameHardwareAsync(string hardware, bool retractation, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? mondialRelayId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? shippingContactId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("hardware", hardware);
            _body.Add("mondialRelayId", mondialRelayId);
            _body.Add("retractation", retractation);
            _body.Add("shippingContactId", shippingContactId);
            string uri = $"/v1/order/telephony/trunks/{serviceName}/hardware";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/telephony/trunks/{serviceName}/updateSimultaneousChannels
        public Task<_order.Order> GetV1OrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsAsync(long quantity, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/telephony/trunks/{serviceName}/updateSimultaneousChannels{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/telephony/trunks/{serviceName}/updateSimultaneousChannels
        public Task<_order.Order> PostV1OrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsAsync(long quantity, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/telephony/trunks/{serviceName}/updateSimultaneousChannels";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/telephony/{billingAccount}
        public Task<System.String[]> GetV1OrderTelephonyBillingAccountAsync(string billingAccount) {
            string uri = $"/v1/order/telephony/{billingAccount}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/telephony/{billingAccount}/accessories
        public Task<_order.Order> GetV1OrderTelephonyBillingAccountAccessoriesAsync(string[] accessories, string billingAccount, bool retractation, long shippingContactId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? mondialRelayId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("accessories", accessories);
            queryParametersTemp.Add("mondialRelayId", mondialRelayId);
            queryParametersTemp.Add("retractation", retractation);
            queryParametersTemp.Add("shippingContactId", shippingContactId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/telephony/{billingAccount}/accessories{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/telephony/{billingAccount}/accessories
        public Task<_order.Order> PostV1OrderTelephonyBillingAccountAccessoriesAsync(string[] accessories, string billingAccount, bool retractation, long shippingContactId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? mondialRelayId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("accessories", accessories);
            _body.Add("mondialRelayId", mondialRelayId);
            _body.Add("retractation", retractation);
            _body.Add("shippingContactId", shippingContactId);
            string uri = $"/v1/order/telephony/{billingAccount}/accessories";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/telephony/{billingAccount}/line
        public Task<_order.Order> GetV1OrderTelephonyBillingAccountLineAsync(string billingAccount, bool[] displayUniversalDirectories, long[] extraSimultaneousLines, string[] offers, long[] ownerContactIds, long quantity, bool retractation, long shippingContactId, _telephony.LineTypeEnum[] types, [System.Runtime.InteropServices.OptionalAttribute()] System.String? brand, [System.Runtime.InteropServices.OptionalAttribute()] System.String? mondialRelayId, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? zones) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("brand", brand);
            queryParametersTemp.Add("displayUniversalDirectories", displayUniversalDirectories);
            queryParametersTemp.Add("extraSimultaneousLines", extraSimultaneousLines);
            queryParametersTemp.Add("mondialRelayId", mondialRelayId);
            queryParametersTemp.Add("offers", offers);
            queryParametersTemp.Add("ownerContactIds", ownerContactIds);
            queryParametersTemp.Add("quantity", quantity);
            queryParametersTemp.Add("retractation", retractation);
            queryParametersTemp.Add("shippingContactId", shippingContactId);
            queryParametersTemp.Add("types", types);
            queryParametersTemp.Add("zones", zones);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/telephony/{billingAccount}/line{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/telephony/{billingAccount}/line
        public Task<_order.Order> PostV1OrderTelephonyBillingAccountLineAsync(string billingAccount, bool[] displayUniversalDirectories, long[] extraSimultaneousLines, string[] offers, long[] ownerContactIds, long quantity, bool retractation, long shippingContactId, _telephony.LineTypeEnum[] types, [System.Runtime.InteropServices.OptionalAttribute()] System.String? brand, [System.Runtime.InteropServices.OptionalAttribute()] System.String? mondialRelayId, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? zones) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("brand", brand);
            _body.Add("displayUniversalDirectories", displayUniversalDirectories);
            _body.Add("extraSimultaneousLines", extraSimultaneousLines);
            _body.Add("mondialRelayId", mondialRelayId);
            _body.Add("offers", offers);
            _body.Add("ownerContactIds", ownerContactIds);
            _body.Add("quantity", quantity);
            _body.Add("retractation", retractation);
            _body.Add("shippingContactId", shippingContactId);
            _body.Add("types", types);
            _body.Add("zones", zones);
            string uri = $"/v1/order/telephony/{billingAccount}/line";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/telephony/{billingAccount}/numberGeographic
        public Task<_order.Order> GetV1OrderTelephonyBillingAccountNumberGeographicAsync(
                    string billingAccount, 
                    string city, 
                    _telephony.NumberCountryEnum country, 
                    bool displayUniversalDirectory, 
                    _nichandle.LegalFormEnum legalform, 
                    _telephony.NumberOffer offer, 
                    bool retractation, 
                    string zone, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? ape, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? email, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? firstname, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? name, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? organisation, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? phone, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _telephony.NumberPoolEnum? pool, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? siret, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? socialNomination, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? specificNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? streetName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? streetNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? zip) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ape", ape);
            queryParametersTemp.Add("city", city);
            queryParametersTemp.Add("country", country);
            queryParametersTemp.Add("displayUniversalDirectory", displayUniversalDirectory);
            queryParametersTemp.Add("email", email);
            queryParametersTemp.Add("firstname", firstname);
            queryParametersTemp.Add("legalform", legalform);
            queryParametersTemp.Add("name", name);
            queryParametersTemp.Add("offer", offer);
            queryParametersTemp.Add("organisation", organisation);
            queryParametersTemp.Add("phone", phone);
            queryParametersTemp.Add("pool", pool);
            queryParametersTemp.Add("retractation", retractation);
            queryParametersTemp.Add("siret", siret);
            queryParametersTemp.Add("socialNomination", socialNomination);
            queryParametersTemp.Add("specificNumber", specificNumber);
            queryParametersTemp.Add("streetName", streetName);
            queryParametersTemp.Add("streetNumber", streetNumber);
            queryParametersTemp.Add("zip", zip);
            queryParametersTemp.Add("zone", zone);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/telephony/{billingAccount}/numberGeographic{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/telephony/{billingAccount}/numberGeographic
        public Task<_order.Order> PostV1OrderTelephonyBillingAccountNumberGeographicAsync(
                    string billingAccount, 
                    string city, 
                    _telephony.NumberCountryEnum country, 
                    bool displayUniversalDirectory, 
                    _nichandle.LegalFormEnum legalform, 
                    _telephony.NumberOffer offer, 
                    bool retractation, 
                    string zone, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? ape, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? email, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? firstname, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? name, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? organisation, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? phone, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _telephony.NumberPoolEnum? pool, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? siret, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? socialNomination, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? specificNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? streetName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? streetNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? zip) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("ape", ape);
            _body.Add("city", city);
            _body.Add("country", country);
            _body.Add("displayUniversalDirectory", displayUniversalDirectory);
            _body.Add("email", email);
            _body.Add("firstname", firstname);
            _body.Add("legalform", legalform);
            _body.Add("name", name);
            _body.Add("offer", offer);
            _body.Add("organisation", organisation);
            _body.Add("phone", phone);
            _body.Add("pool", pool);
            _body.Add("retractation", retractation);
            _body.Add("siret", siret);
            _body.Add("socialNomination", socialNomination);
            _body.Add("specificNumber", specificNumber);
            _body.Add("streetName", streetName);
            _body.Add("streetNumber", streetNumber);
            _body.Add("zip", zip);
            _body.Add("zone", zone);
            string uri = $"/v1/order/telephony/{billingAccount}/numberGeographic";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/telephony/{billingAccount}/numberNogeographic
        public Task<_order.Order> GetV1OrderTelephonyBillingAccountNumberNogeographicAsync(
                    string billingAccount, 
                    _telephony.NumberCountryEnum country, 
                    bool displayUniversalDirectory, 
                    _nichandle.LegalFormEnum legalform, 
                    _telephony.NumberOffer offer, 
                    bool retractation, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? ape, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? city, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? email, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? firstname, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? name, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? organisation, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? phone, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _telephony.NumberPoolEnum? pool, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? siret, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? socialNomination, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? specificNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? streetName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? streetNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? zip) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ape", ape);
            queryParametersTemp.Add("city", city);
            queryParametersTemp.Add("country", country);
            queryParametersTemp.Add("displayUniversalDirectory", displayUniversalDirectory);
            queryParametersTemp.Add("email", email);
            queryParametersTemp.Add("firstname", firstname);
            queryParametersTemp.Add("legalform", legalform);
            queryParametersTemp.Add("name", name);
            queryParametersTemp.Add("offer", offer);
            queryParametersTemp.Add("organisation", organisation);
            queryParametersTemp.Add("phone", phone);
            queryParametersTemp.Add("pool", pool);
            queryParametersTemp.Add("retractation", retractation);
            queryParametersTemp.Add("siret", siret);
            queryParametersTemp.Add("socialNomination", socialNomination);
            queryParametersTemp.Add("specificNumber", specificNumber);
            queryParametersTemp.Add("streetName", streetName);
            queryParametersTemp.Add("streetNumber", streetNumber);
            queryParametersTemp.Add("zip", zip);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/telephony/{billingAccount}/numberNogeographic{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/telephony/{billingAccount}/numberNogeographic
        public Task<_order.Order> PostV1OrderTelephonyBillingAccountNumberNogeographicAsync(
                    string billingAccount, 
                    _telephony.NumberCountryEnum country, 
                    bool displayUniversalDirectory, 
                    _nichandle.LegalFormEnum legalform, 
                    _telephony.NumberOffer offer, 
                    bool retractation, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? ape, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? city, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? email, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? firstname, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? name, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? organisation, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? phone, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _telephony.NumberPoolEnum? pool, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? siret, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? socialNomination, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? specificNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? streetName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? streetNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? zip) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("ape", ape);
            _body.Add("city", city);
            _body.Add("country", country);
            _body.Add("displayUniversalDirectory", displayUniversalDirectory);
            _body.Add("email", email);
            _body.Add("firstname", firstname);
            _body.Add("legalform", legalform);
            _body.Add("name", name);
            _body.Add("offer", offer);
            _body.Add("organisation", organisation);
            _body.Add("phone", phone);
            _body.Add("pool", pool);
            _body.Add("retractation", retractation);
            _body.Add("siret", siret);
            _body.Add("socialNomination", socialNomination);
            _body.Add("specificNumber", specificNumber);
            _body.Add("streetName", streetName);
            _body.Add("streetNumber", streetNumber);
            _body.Add("zip", zip);
            string uri = $"/v1/order/telephony/{billingAccount}/numberNogeographic";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/telephony/{billingAccount}/numberSpecial
        public Task<_order.Order> GetV1OrderTelephonyBillingAccountNumberSpecialAsync(
                    string billingAccount, 
                    _telephony.SpecialNumberCountryEnum country, 
                    bool displayUniversalDirectory, 
                    _nichandle.LegalFormEnum legalform, 
                    string range, 
                    bool retractation, 
                    string siret, 
                    string socialNomination, 
                    _telephony.NumberSpecialTypologyEnum typology, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? addressExtra, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? ape, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? cedex, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? city, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? description, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? displaySearchReverse, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? email, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? firstname, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? name, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? organisation, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? phone, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _telephony.NumberPoolEnum? pool, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? postBox, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? specificNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? streetName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? streetNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? streetNumberExtra, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? streetType, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? urbanDistrict, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? zip) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("addressExtra", addressExtra);
            queryParametersTemp.Add("ape", ape);
            queryParametersTemp.Add("cedex", cedex);
            queryParametersTemp.Add("city", city);
            queryParametersTemp.Add("country", country);
            queryParametersTemp.Add("description", description);
            queryParametersTemp.Add("displaySearchReverse", displaySearchReverse);
            queryParametersTemp.Add("displayUniversalDirectory", displayUniversalDirectory);
            queryParametersTemp.Add("email", email);
            queryParametersTemp.Add("firstname", firstname);
            queryParametersTemp.Add("legalform", legalform);
            queryParametersTemp.Add("name", name);
            queryParametersTemp.Add("organisation", organisation);
            queryParametersTemp.Add("phone", phone);
            queryParametersTemp.Add("pool", pool);
            queryParametersTemp.Add("postBox", postBox);
            queryParametersTemp.Add("range", range);
            queryParametersTemp.Add("retractation", retractation);
            queryParametersTemp.Add("siret", siret);
            queryParametersTemp.Add("socialNomination", socialNomination);
            queryParametersTemp.Add("specificNumber", specificNumber);
            queryParametersTemp.Add("streetName", streetName);
            queryParametersTemp.Add("streetNumber", streetNumber);
            queryParametersTemp.Add("streetNumberExtra", streetNumberExtra);
            queryParametersTemp.Add("streetType", streetType);
            queryParametersTemp.Add("typology", typology);
            queryParametersTemp.Add("urbanDistrict", urbanDistrict);
            queryParametersTemp.Add("zip", zip);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/telephony/{billingAccount}/numberSpecial{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/telephony/{billingAccount}/numberSpecial
        public Task<_order.Order> PostV1OrderTelephonyBillingAccountNumberSpecialAsync(
                    string billingAccount, 
                    _telephony.SpecialNumberCountryEnum country, 
                    bool displayUniversalDirectory, 
                    _nichandle.LegalFormEnum legalform, 
                    string range, 
                    bool retractation, 
                    string siret, 
                    string socialNomination, 
                    _telephony.NumberSpecialTypologyEnum typology, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? addressExtra, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? ape, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? cedex, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? city, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? description, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? displaySearchReverse, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? email, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? firstname, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? name, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? organisation, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? phone, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _telephony.NumberPoolEnum? pool, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? postBox, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? specificNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? streetName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? streetNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? streetNumberExtra, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? streetType, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? urbanDistrict, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? zip) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("addressExtra", addressExtra);
            _body.Add("ape", ape);
            _body.Add("cedex", cedex);
            _body.Add("city", city);
            _body.Add("country", country);
            _body.Add("description", description);
            _body.Add("displaySearchReverse", displaySearchReverse);
            _body.Add("displayUniversalDirectory", displayUniversalDirectory);
            _body.Add("email", email);
            _body.Add("firstname", firstname);
            _body.Add("legalform", legalform);
            _body.Add("name", name);
            _body.Add("organisation", organisation);
            _body.Add("phone", phone);
            _body.Add("pool", pool);
            _body.Add("postBox", postBox);
            _body.Add("range", range);
            _body.Add("retractation", retractation);
            _body.Add("siret", siret);
            _body.Add("socialNomination", socialNomination);
            _body.Add("specificNumber", specificNumber);
            _body.Add("streetName", streetName);
            _body.Add("streetNumber", streetNumber);
            _body.Add("streetNumberExtra", streetNumberExtra);
            _body.Add("streetType", streetType);
            _body.Add("typology", typology);
            _body.Add("urbanDistrict", urbanDistrict);
            _body.Add("zip", zip);
            string uri = $"/v1/order/telephony/{billingAccount}/numberSpecial";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/telephony/{billingAccount}/portability
        public Task<_order.Order> GetV1OrderTelephonyBillingAccountPortabilityAsync(
                    string billingAccount, 
                    string callNumber, 
                    string city, 
                    _telephony_portability.CountriesAvailable country, 
                    bool displayUniversalDirectory, 
                    string name, 
                    _telephony_portability.OfferType offer, 
                    _telephony_portability.SocialReason socialReason, 
                    string streetName, 
                    double streetNumber, 
                    string zip, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? building, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.DateOnly? desireDate, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? door, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? executeAsSoonAsPossible, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? fiabilisation, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? firstName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Double? floor, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? lineToRedirectAliasTo, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? listNumbers, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? mobilePhone, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? rio, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? siret, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _telephony_portability.SpecialNumberCategoryEnum? specialNumberCategory, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Double? stair, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? streetNumberExtra, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? streetType, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _telephony_portability.NumberType? type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("building", building);
            queryParametersTemp.Add("callNumber", callNumber);
            queryParametersTemp.Add("city", city);
            queryParametersTemp.Add("contactName", contactName);
            queryParametersTemp.Add("contactNumber", contactNumber);
            queryParametersTemp.Add("country", country);
            queryParametersTemp.Add("desireDate", desireDate);
            queryParametersTemp.Add("displayUniversalDirectory", displayUniversalDirectory);
            queryParametersTemp.Add("door", door);
            queryParametersTemp.Add("executeAsSoonAsPossible", executeAsSoonAsPossible);
            queryParametersTemp.Add("fiabilisation", fiabilisation);
            queryParametersTemp.Add("firstName", firstName);
            queryParametersTemp.Add("floor", floor);
            queryParametersTemp.Add("lineToRedirectAliasTo", lineToRedirectAliasTo);
            queryParametersTemp.Add("listNumbers", listNumbers);
            queryParametersTemp.Add("mobilePhone", mobilePhone);
            queryParametersTemp.Add("name", name);
            queryParametersTemp.Add("offer", offer);
            queryParametersTemp.Add("rio", rio);
            queryParametersTemp.Add("siret", siret);
            queryParametersTemp.Add("socialReason", socialReason);
            queryParametersTemp.Add("specialNumberCategory", specialNumberCategory);
            queryParametersTemp.Add("stair", stair);
            queryParametersTemp.Add("streetName", streetName);
            queryParametersTemp.Add("streetNumber", streetNumber);
            queryParametersTemp.Add("streetNumberExtra", streetNumberExtra);
            queryParametersTemp.Add("streetType", streetType);
            queryParametersTemp.Add("type", type);
            queryParametersTemp.Add("zip", zip);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/telephony/{billingAccount}/portability{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/telephony/{billingAccount}/portability
        public Task<_order.Order> PostV1OrderTelephonyBillingAccountPortabilityAsync(
                    string billingAccount, 
                    string callNumber, 
                    string city, 
                    _telephony_portability.CountriesAvailable country, 
                    bool displayUniversalDirectory, 
                    string name, 
                    _telephony_portability.OfferType offer, 
                    _telephony_portability.SocialReason socialReason, 
                    string streetName, 
                    double streetNumber, 
                    string zip, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? building, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.DateOnly? desireDate, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? door, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? executeAsSoonAsPossible, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? fiabilisation, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? firstName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Double? floor, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? lineToRedirectAliasTo, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? listNumbers, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? mobilePhone, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? rio, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? siret, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _telephony_portability.SpecialNumberCategoryEnum? specialNumberCategory, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Double? stair, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? streetNumberExtra, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? streetType, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _telephony_portability.NumberType? type) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("building", building);
            _body.Add("callNumber", callNumber);
            _body.Add("city", city);
            _body.Add("contactName", contactName);
            _body.Add("contactNumber", contactNumber);
            _body.Add("country", country);
            _body.Add("desireDate", desireDate);
            _body.Add("displayUniversalDirectory", displayUniversalDirectory);
            _body.Add("door", door);
            _body.Add("executeAsSoonAsPossible", executeAsSoonAsPossible);
            _body.Add("fiabilisation", fiabilisation);
            _body.Add("firstName", firstName);
            _body.Add("floor", floor);
            _body.Add("lineToRedirectAliasTo", lineToRedirectAliasTo);
            _body.Add("listNumbers", listNumbers);
            _body.Add("mobilePhone", mobilePhone);
            _body.Add("name", name);
            _body.Add("offer", offer);
            _body.Add("rio", rio);
            _body.Add("siret", siret);
            _body.Add("socialReason", socialReason);
            _body.Add("specialNumberCategory", specialNumberCategory);
            _body.Add("stair", stair);
            _body.Add("streetName", streetName);
            _body.Add("streetNumber", streetNumber);
            _body.Add("streetNumberExtra", streetNumberExtra);
            _body.Add("streetType", streetType);
            _body.Add("type", type);
            _body.Add("zip", zip);
            string uri = $"/v1/order/telephony/{billingAccount}/portability";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/telephony/{billingAccount}/securityDeposit
        public Task<_order.Order> GetV1OrderTelephonyBillingAccountSecurityDepositAsync(_telephony.SecurityDepositAmountsEnum amount, string billingAccount) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("amount", amount);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/telephony/{billingAccount}/securityDeposit{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/telephony/{billingAccount}/securityDeposit
        public Task<_order.Order> PostV1OrderTelephonyBillingAccountSecurityDepositAsync(_telephony.SecurityDepositAmountsEnum amount, string billingAccount) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("amount", amount);
            string uri = $"/v1/order/telephony/{billingAccount}/securityDeposit";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/upgrade/baremetalPrivateBandwidth
        public Task<System.String[]> GetV1OrderUpgradeBaremetalPrivateBandwidthAsync() {
            string uri = $"/v1/order/upgrade/baremetalPrivateBandwidth";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/baremetalPrivateBandwidth/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderUpgradeBaremetalPrivateBandwidthServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/upgrade/baremetalPrivateBandwidth/{serviceName}";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/baremetalPrivateBandwidth/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetV1OrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/upgrade/baremetalPrivateBandwidth/{serviceName}/{planCode}{queryParameters}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/baremetalPrivateBandwidth/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostV1OrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? autoPayWithPreferredPaymentMethod) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("autoPayWithPreferredPaymentMethod", autoPayWithPreferredPaymentMethod);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/upgrade/baremetalPrivateBandwidth/{serviceName}/{planCode}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/upgrade/baremetalPublicBandwidth
        public Task<System.String[]> GetV1OrderUpgradeBaremetalPublicBandwidthAsync() {
            string uri = $"/v1/order/upgrade/baremetalPublicBandwidth";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/baremetalPublicBandwidth/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderUpgradeBaremetalPublicBandwidthServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/upgrade/baremetalPublicBandwidth/{serviceName}";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/baremetalPublicBandwidth/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetV1OrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/upgrade/baremetalPublicBandwidth/{serviceName}/{planCode}{queryParameters}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/baremetalPublicBandwidth/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostV1OrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? autoPayWithPreferredPaymentMethod) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("autoPayWithPreferredPaymentMethod", autoPayWithPreferredPaymentMethod);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/upgrade/baremetalPublicBandwidth/{serviceName}/{planCode}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/upgrade/cephaas
        public Task<System.String[]> GetV1OrderUpgradeCephaasAsync() {
            string uri = $"/v1/order/upgrade/cephaas";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/cephaas/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderUpgradeCephaasServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/upgrade/cephaas/{serviceName}";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/cephaas/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetV1OrderUpgradeCephaasServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/upgrade/cephaas/{serviceName}/{planCode}{queryParameters}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/cephaas/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostV1OrderUpgradeCephaasServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? autoPayWithPreferredPaymentMethod) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("autoPayWithPreferredPaymentMethod", autoPayWithPreferredPaymentMethod);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/upgrade/cephaas/{serviceName}/{planCode}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/upgrade/cloudDB
        public Task<System.String[]> GetV1OrderUpgradeCloudDBAsync() {
            string uri = $"/v1/order/upgrade/cloudDB";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/cloudDB/{domain}
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderUpgradeCloudDBDomainAsync(string domain) {
            string uri = $"/v1/order/upgrade/cloudDB/{domain}";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/cloudDB/{domain}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetV1OrderUpgradeCloudDBDomainPlanCodeAsync(string domain, string planCode, long quantity) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/upgrade/cloudDB/{domain}/{planCode}{queryParameters}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/cloudDB/{domain}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostV1OrderUpgradeCloudDBDomainPlanCodeAsync(string domain, string planCode, long quantity, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? autoPayWithPreferredPaymentMethod) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("autoPayWithPreferredPaymentMethod", autoPayWithPreferredPaymentMethod);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/upgrade/cloudDB/{domain}/{planCode}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/upgrade/emailDomain
        public Task<System.String[]> GetV1OrderUpgradeEmailDomainAsync() {
            string uri = $"/v1/order/upgrade/emailDomain";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/emailDomain/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderUpgradeEmailDomainServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/upgrade/emailDomain/{serviceName}";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/emailDomain/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetV1OrderUpgradeEmailDomainServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/upgrade/emailDomain/{serviceName}/{planCode}{queryParameters}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/emailDomain/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostV1OrderUpgradeEmailDomainServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? autoPayWithPreferredPaymentMethod) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("autoPayWithPreferredPaymentMethod", autoPayWithPreferredPaymentMethod);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/upgrade/emailDomain/{serviceName}/{planCode}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/upgrade/ipLoadbalancing
        public Task<System.String[]> GetV1OrderUpgradeIpLoadbalancingAsync() {
            string uri = $"/v1/order/upgrade/ipLoadbalancing";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/ipLoadbalancing/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderUpgradeIpLoadbalancingServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/upgrade/ipLoadbalancing/{serviceName}";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/ipLoadbalancing/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetV1OrderUpgradeIpLoadbalancingServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/upgrade/ipLoadbalancing/{serviceName}/{planCode}{queryParameters}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/ipLoadbalancing/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostV1OrderUpgradeIpLoadbalancingServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? autoPayWithPreferredPaymentMethod) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("autoPayWithPreferredPaymentMethod", autoPayWithPreferredPaymentMethod);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/upgrade/ipLoadbalancing/{serviceName}/{planCode}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/upgrade/licensePlesk
        public Task<System.String[]> GetV1OrderUpgradeLicensePleskAsync() {
            string uri = $"/v1/order/upgrade/licensePlesk";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/licensePlesk/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderUpgradeLicensePleskServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/upgrade/licensePlesk/{serviceName}";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/licensePlesk/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetV1OrderUpgradeLicensePleskServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/upgrade/licensePlesk/{serviceName}/{planCode}{queryParameters}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/licensePlesk/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostV1OrderUpgradeLicensePleskServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? autoPayWithPreferredPaymentMethod) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("autoPayWithPreferredPaymentMethod", autoPayWithPreferredPaymentMethod);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/upgrade/licensePlesk/{serviceName}/{planCode}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/upgrade/licensecPanel
        public Task<System.String[]> GetV1OrderUpgradeLicensecPanelAsync() {
            string uri = $"/v1/order/upgrade/licensecPanel";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/licensecPanel/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderUpgradeLicensecPanelServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/upgrade/licensecPanel/{serviceName}";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/licensecPanel/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetV1OrderUpgradeLicensecPanelServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/upgrade/licensecPanel/{serviceName}/{planCode}{queryParameters}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/licensecPanel/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostV1OrderUpgradeLicensecPanelServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? autoPayWithPreferredPaymentMethod) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("autoPayWithPreferredPaymentMethod", autoPayWithPreferredPaymentMethod);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/upgrade/licensecPanel/{serviceName}/{planCode}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/upgrade/logs
        public Task<System.String[]> GetV1OrderUpgradeLogsAsync() {
            string uri = $"/v1/order/upgrade/logs";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/logs/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderUpgradeLogsServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/upgrade/logs/{serviceName}";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/logs/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetV1OrderUpgradeLogsServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/upgrade/logs/{serviceName}/{planCode}{queryParameters}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/logs/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostV1OrderUpgradeLogsServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? autoPayWithPreferredPaymentMethod) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("autoPayWithPreferredPaymentMethod", autoPayWithPreferredPaymentMethod);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/upgrade/logs/{serviceName}/{planCode}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/upgrade/metrics
        public Task<System.String[]> GetV1OrderUpgradeMetricsAsync() {
            string uri = $"/v1/order/upgrade/metrics";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/metrics/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderUpgradeMetricsServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/upgrade/metrics/{serviceName}";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/metrics/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetV1OrderUpgradeMetricsServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/upgrade/metrics/{serviceName}/{planCode}{queryParameters}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/metrics/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostV1OrderUpgradeMetricsServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? autoPayWithPreferredPaymentMethod) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("autoPayWithPreferredPaymentMethod", autoPayWithPreferredPaymentMethod);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/upgrade/metrics/{serviceName}/{planCode}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/upgrade/microsoftExchange
        public Task<System.String[]> GetV1OrderUpgradeMicrosoftExchangeAsync() {
            string uri = $"/v1/order/upgrade/microsoftExchange";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/microsoftExchange/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderUpgradeMicrosoftExchangeServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/upgrade/microsoftExchange/{serviceName}";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/microsoftExchange/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetV1OrderUpgradeMicrosoftExchangeServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/upgrade/microsoftExchange/{serviceName}/{planCode}{queryParameters}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/microsoftExchange/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostV1OrderUpgradeMicrosoftExchangeServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? autoPayWithPreferredPaymentMethod) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("autoPayWithPreferredPaymentMethod", autoPayWithPreferredPaymentMethod);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/upgrade/microsoftExchange/{serviceName}/{planCode}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/upgrade/privateCloud
        public Task<System.String[]> GetV1OrderUpgradePrivateCloudAsync() {
            string uri = $"/v1/order/upgrade/privateCloud";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/privateCloud/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderUpgradePrivateCloudServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/upgrade/privateCloud/{serviceName}";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/privateCloud/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetV1OrderUpgradePrivateCloudServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/upgrade/privateCloud/{serviceName}/{planCode}{queryParameters}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/privateCloud/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostV1OrderUpgradePrivateCloudServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? autoPayWithPreferredPaymentMethod) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("autoPayWithPreferredPaymentMethod", autoPayWithPreferredPaymentMethod);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/upgrade/privateCloud/{serviceName}/{planCode}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/upgrade/privateCloudManagementFee
        public Task<System.String[]> GetV1OrderUpgradePrivateCloudManagementFeeAsync() {
            string uri = $"/v1/order/upgrade/privateCloudManagementFee";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/privateCloudManagementFee/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderUpgradePrivateCloudManagementFeeServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/upgrade/privateCloudManagementFee/{serviceName}";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/privateCloudManagementFee/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetV1OrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/upgrade/privateCloudManagementFee/{serviceName}/{planCode}{queryParameters}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/privateCloudManagementFee/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostV1OrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? autoPayWithPreferredPaymentMethod) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("autoPayWithPreferredPaymentMethod", autoPayWithPreferredPaymentMethod);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/upgrade/privateCloudManagementFee/{serviceName}/{planCode}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/upgrade/privateSQL
        public Task<System.String[]> GetV1OrderUpgradePrivateSQLAsync() {
            string uri = $"/v1/order/upgrade/privateSQL";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/privateSQL/{domain}
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderUpgradePrivateSQLDomainAsync(string domain) {
            string uri = $"/v1/order/upgrade/privateSQL/{domain}";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/privateSQL/{domain}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetV1OrderUpgradePrivateSQLDomainPlanCodeAsync(string domain, string planCode, long quantity) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/upgrade/privateSQL/{domain}/{planCode}{queryParameters}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/privateSQL/{domain}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostV1OrderUpgradePrivateSQLDomainPlanCodeAsync(string domain, string planCode, long quantity, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? autoPayWithPreferredPaymentMethod) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("autoPayWithPreferredPaymentMethod", autoPayWithPreferredPaymentMethod);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/upgrade/privateSQL/{domain}/{planCode}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/upgrade/sslGateway
        public Task<System.String[]> GetV1OrderUpgradeSslGatewayAsync() {
            string uri = $"/v1/order/upgrade/sslGateway";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/sslGateway/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderUpgradeSslGatewayServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/upgrade/sslGateway/{serviceName}";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/sslGateway/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetV1OrderUpgradeSslGatewayServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/upgrade/sslGateway/{serviceName}/{planCode}{queryParameters}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/sslGateway/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostV1OrderUpgradeSslGatewayServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? autoPayWithPreferredPaymentMethod) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("autoPayWithPreferredPaymentMethod", autoPayWithPreferredPaymentMethod);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/upgrade/sslGateway/{serviceName}/{planCode}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/upgrade/vps
        public Task<System.String[]> GetV1OrderUpgradeVpsAsync() {
            string uri = $"/v1/order/upgrade/vps";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/vps/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderUpgradeVpsServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/upgrade/vps/{serviceName}";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/vps/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetV1OrderUpgradeVpsServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/upgrade/vps/{serviceName}/{planCode}{queryParameters}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/vps/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostV1OrderUpgradeVpsServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? autoPayWithPreferredPaymentMethod) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("autoPayWithPreferredPaymentMethod", autoPayWithPreferredPaymentMethod);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/upgrade/vps/{serviceName}/{planCode}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/upgrade/vpsAdditionalDisk
        public Task<System.String[]> GetV1OrderUpgradeVpsAdditionalDiskAsync() {
            string uri = $"/v1/order/upgrade/vpsAdditionalDisk";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/vpsAdditionalDisk/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderUpgradeVpsAdditionalDiskServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/upgrade/vpsAdditionalDisk/{serviceName}";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/vpsAdditionalDisk/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetV1OrderUpgradeVpsAdditionalDiskServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/upgrade/vpsAdditionalDisk/{serviceName}/{planCode}{queryParameters}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/vpsAdditionalDisk/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostV1OrderUpgradeVpsAdditionalDiskServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? autoPayWithPreferredPaymentMethod) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("autoPayWithPreferredPaymentMethod", autoPayWithPreferredPaymentMethod);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/upgrade/vpsAdditionalDisk/{serviceName}/{planCode}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/upgrade/webHosting
        public Task<System.String[]> GetV1OrderUpgradeWebHostingAsync() {
            string uri = $"/v1/order/upgrade/webHosting";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/webHosting/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderUpgradeWebHostingServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/upgrade/webHosting/{serviceName}";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/webHosting/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetV1OrderUpgradeWebHostingServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/upgrade/webHosting/{serviceName}/{planCode}{queryParameters}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/webHosting/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostV1OrderUpgradeWebHostingServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? autoPayWithPreferredPaymentMethod) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("autoPayWithPreferredPaymentMethod", autoPayWithPreferredPaymentMethod);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/upgrade/webHosting/{serviceName}/{planCode}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/upgrade/webPaaS
        public Task<System.String[]> GetV1OrderUpgradeWebPaaSAsync() {
            string uri = $"/v1/order/upgrade/webPaaS";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/webPaaS/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetV1OrderUpgradeWebPaaSServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/upgrade/webPaaS/{serviceName}";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/webPaaS/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetV1OrderUpgradeWebPaaSServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/upgrade/webPaaS/{serviceName}/{planCode}{queryParameters}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/upgrade/webPaaS/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostV1OrderUpgradeWebPaaSServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? autoPayWithPreferredPaymentMethod) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("autoPayWithPreferredPaymentMethod", autoPayWithPreferredPaymentMethod);
            _body.Add("quantity", quantity);
            string uri = $"/v1/order/upgrade/webPaaS/{serviceName}/{planCode}";
            return this.SendAsync<_order_upgrade.OperationAndOrder>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/veeamCloudConnect
        public Task<System.String[]> GetV1OrderVeeamCloudConnectAsync() {
            string uri = $"/v1/order/veeamCloudConnect";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/veeamCloudConnect/{serviceName}
        public Task<System.String[]> GetV1OrderVeeamCloudConnectServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/veeamCloudConnect/{serviceName}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/veeamCloudConnect/{serviceName}/upgrade
        public Task<System.String[]> GetV1OrderVeeamCloudConnectServiceNameUpgradeAsync(_veeamCloudConnect.Offer offer, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("offer", offer);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/veeamCloudConnect/{serviceName}/upgrade{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/veeamCloudConnect/{serviceName}/upgrade/{duration}
        public Task<_order.Order> GetV1OrderVeeamCloudConnectServiceNameUpgradeDurationAsync(string duration, _veeamCloudConnect.Offer offer, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("offer", offer);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/veeamCloudConnect/{serviceName}/upgrade/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/veeamCloudConnect/{serviceName}/upgrade/{duration}
        public Task<_order.Order> PostV1OrderVeeamCloudConnectServiceNameUpgradeDurationAsync(string duration, _veeamCloudConnect.Offer offer, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("offer", offer);
            string uri = $"/v1/order/veeamCloudConnect/{serviceName}/upgrade/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/vps
        public Task<System.String[]> GetV1OrderVpsAsync() {
            string uri = $"/v1/order/vps";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/vps/{serviceName}
        public Task<System.String[]> GetV1OrderVpsServiceNameAsync(string serviceName) {
            string uri = $"/v1/order/vps/{serviceName}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/vps/{serviceName}/additionalDisk
        public Task<System.String[]> GetV1OrderVpsServiceNameAdditionalDiskAsync(_vps_additionalDisk.AdditionalDiskSizeEnum additionalDiskSize, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("additionalDiskSize", additionalDiskSize);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/vps/{serviceName}/additionalDisk{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/vps/{serviceName}/additionalDisk/{duration}
        public Task<_order.Order> GetV1OrderVpsServiceNameAdditionalDiskDurationAsync(_vps_additionalDisk.AdditionalDiskSizeEnum additionalDiskSize, string duration, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("additionalDiskSize", additionalDiskSize);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/vps/{serviceName}/additionalDisk/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/vps/{serviceName}/additionalDisk/{duration}
        public Task<_order.Order> PostV1OrderVpsServiceNameAdditionalDiskDurationAsync(_vps_additionalDisk.AdditionalDiskSizeEnum additionalDiskSize, string duration, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("additionalDiskSize", additionalDiskSize);
            string uri = $"/v1/order/vps/{serviceName}/additionalDisk/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/vps/{serviceName}/automatedBackup
        public Task<System.String[]> GetV1OrderVpsServiceNameAutomatedBackupAsync(string serviceName) {
            string uri = $"/v1/order/vps/{serviceName}/automatedBackup";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/vps/{serviceName}/automatedBackup/{duration}
        public Task<_order.Order> GetV1OrderVpsServiceNameAutomatedBackupDurationAsync(string duration, string serviceName) {
            string uri = $"/v1/order/vps/{serviceName}/automatedBackup/{duration}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/vps/{serviceName}/automatedBackup/{duration}
        public Task<_order.Order> PostV1OrderVpsServiceNameAutomatedBackupDurationAsync(string duration, string serviceName) {
            string uri = $"/v1/order/vps/{serviceName}/automatedBackup/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, null, true);
        }
        
        // Path: /v1/order/vps/{serviceName}/cpanel
        public Task<System.String[]> GetV1OrderVpsServiceNameCpanelAsync(string serviceName) {
            string uri = $"/v1/order/vps/{serviceName}/cpanel";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/vps/{serviceName}/cpanel/{duration}
        public Task<_order.Order> GetV1OrderVpsServiceNameCpanelDurationAsync(string duration, string serviceName) {
            string uri = $"/v1/order/vps/{serviceName}/cpanel/{duration}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/vps/{serviceName}/cpanel/{duration}
        public Task<_order.Order> PostV1OrderVpsServiceNameCpanelDurationAsync(string duration, string serviceName) {
            string uri = $"/v1/order/vps/{serviceName}/cpanel/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, null, true);
        }
        
        // Path: /v1/order/vps/{serviceName}/ftpbackup
        public Task<System.String[]> GetV1OrderVpsServiceNameFtpbackupAsync(string serviceName) {
            string uri = $"/v1/order/vps/{serviceName}/ftpbackup";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/vps/{serviceName}/ftpbackup/{duration}
        public Task<_order.Order> GetV1OrderVpsServiceNameFtpbackupDurationAsync(string duration, string serviceName) {
            string uri = $"/v1/order/vps/{serviceName}/ftpbackup/{duration}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/vps/{serviceName}/ftpbackup/{duration}
        public Task<_order.Order> PostV1OrderVpsServiceNameFtpbackupDurationAsync(string duration, string serviceName) {
            string uri = $"/v1/order/vps/{serviceName}/ftpbackup/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, null, true);
        }
        
        // Path: /v1/order/vps/{serviceName}/plesk
        public Task<System.String[]> GetV1OrderVpsServiceNamePleskAsync(_vps.PleskLicenseDomainNumberEnum domainNumber, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("domainNumber", domainNumber);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/vps/{serviceName}/plesk{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/vps/{serviceName}/plesk/{duration}
        public Task<_order.Order> GetV1OrderVpsServiceNamePleskDurationAsync(_vps.PleskLicenseDomainNumberEnum domainNumber, string duration, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("domainNumber", domainNumber);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/vps/{serviceName}/plesk/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/vps/{serviceName}/plesk/{duration}
        public Task<_order.Order> PostV1OrderVpsServiceNamePleskDurationAsync(_vps.PleskLicenseDomainNumberEnum domainNumber, string duration, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("domainNumber", domainNumber);
            string uri = $"/v1/order/vps/{serviceName}/plesk/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/vps/{serviceName}/snapshot
        public Task<System.String[]> GetV1OrderVpsServiceNameSnapshotAsync(string serviceName) {
            string uri = $"/v1/order/vps/{serviceName}/snapshot";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/vps/{serviceName}/snapshot/{duration}
        public Task<_order.Order> GetV1OrderVpsServiceNameSnapshotDurationAsync(string duration, string serviceName) {
            string uri = $"/v1/order/vps/{serviceName}/snapshot/{duration}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/vps/{serviceName}/snapshot/{duration}
        public Task<_order.Order> PostV1OrderVpsServiceNameSnapshotDurationAsync(string duration, string serviceName) {
            string uri = $"/v1/order/vps/{serviceName}/snapshot/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, null, true);
        }
        
        // Path: /v1/order/vps/{serviceName}/upgrade
        public Task<System.String[]> GetV1OrderVpsServiceNameUpgradeAsync(string model, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("model", model);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/vps/{serviceName}/upgrade{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/vps/{serviceName}/upgrade/{duration}
        public Task<_order.Order> GetV1OrderVpsServiceNameUpgradeDurationAsync(string duration, string model, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("model", model);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/vps/{serviceName}/upgrade/{duration}{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/vps/{serviceName}/upgrade/{duration}
        public Task<_order.Order> PostV1OrderVpsServiceNameUpgradeDurationAsync(string duration, string model, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("model", model);
            string uri = $"/v1/order/vps/{serviceName}/upgrade/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/order/vps/{serviceName}/veeam
        public Task<System.String[]> GetV1OrderVpsServiceNameVeeamAsync(string serviceName) {
            string uri = $"/v1/order/vps/{serviceName}/veeam";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/vps/{serviceName}/veeam/{duration}
        public Task<_order.Order> GetV1OrderVpsServiceNameVeeamDurationAsync(string duration, string serviceName) {
            string uri = $"/v1/order/vps/{serviceName}/veeam/{duration}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/vps/{serviceName}/veeam/{duration}
        public Task<_order.Order> PostV1OrderVpsServiceNameVeeamDurationAsync(string duration, string serviceName) {
            string uri = $"/v1/order/vps/{serviceName}/veeam/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, null, true);
        }
        
        // Path: /v1/order/vps/{serviceName}/windows
        public Task<System.String[]> GetV1OrderVpsServiceNameWindowsAsync(string serviceName) {
            string uri = $"/v1/order/vps/{serviceName}/windows";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/vps/{serviceName}/windows/{duration}
        public Task<_order.Order> GetV1OrderVpsServiceNameWindowsDurationAsync(string duration, string serviceName) {
            string uri = $"/v1/order/vps/{serviceName}/windows/{duration}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/vps/{serviceName}/windows/{duration}
        public Task<_order.Order> PostV1OrderVpsServiceNameWindowsDurationAsync(string duration, string serviceName) {
            string uri = $"/v1/order/vps/{serviceName}/windows/{duration}";
            return this.SendAsync<_order.Order>("POST", uri, null, null, true);
        }
        
        // Path: /v1/order/xdsl/spare/new
        public Task<_order.Order> GetV1OrderXdslSpareNewAsync(string brand, long quantity, long shippingContactId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? mondialRelayId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("brand", brand);
            queryParametersTemp.Add("mondialRelayId", mondialRelayId);
            queryParametersTemp.Add("quantity", quantity);
            queryParametersTemp.Add("shippingContactId", shippingContactId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/order/xdsl/spare/new{queryParameters}";
            return this.SendAsync<_order.Order>("GET", uri, null, null, true);
        }
        
        // Path: /v1/order/xdsl/spare/new
        public Task<_order.Order> PostV1OrderXdslSpareNewAsync(string brand, long quantity, long shippingContactId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? mondialRelayId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("brand", brand);
            _body.Add("mondialRelayId", mondialRelayId);
            _body.Add("quantity", quantity);
            _body.Add("shippingContactId", shippingContactId);
            string uri = $"/v1/order/xdsl/spare/new";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/overTheBox
        public Task<System.String[]> GetV1OverTheBoxAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/overTheBox{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/overTheBox/availableOffers
        public Task<_price_OverTheBox.OfferEnum[]> GetV1OverTheBoxAvailableOffersAsync() {
            string uri = $"/v1/overTheBox/availableOffers";
            return this.SendAsync<_price_OverTheBox.OfferEnum[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/overTheBox/devices
        public Task<_overTheBox.DeviceForRegistration[]> PostV1OverTheBoxDevicesAsync() {
            string uri = $"/v1/overTheBox/devices";
            return this.SendAsync<_overTheBox.DeviceForRegistration[]>("POST", uri, null, null, true);
        }
        
        // Path: /v1/overTheBox/hardware
        public Task<System.String[]> GetV1OverTheBoxHardwareAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/overTheBox/hardware{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/overTheBox/hardware/available
        public Task<System.String[]> GetV1OverTheBoxHardwareAvailableAsync() {
            string uri = $"/v1/overTheBox/hardware/available";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/overTheBox/hardware/{hardwareName}
        public Task<_overTheBox.HardwareWithIAM> GetV1OverTheBoxHardwareHardwareNameAsync(string hardwareName) {
            string uri = $"/v1/overTheBox/hardware/{hardwareName}";
            return this.SendAsync<_overTheBox.HardwareWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}
        public Task DeleteV1OverTheBoxServiceNameAsync(string serviceName) {
            string uri = $"/v1/overTheBox/{serviceName}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}
        public Task<_overTheBox.ServiceWithIAM> GetV1OverTheBoxServiceNameAsync(string serviceName) {
            string uri = $"/v1/overTheBox/{serviceName}";
            return this.SendAsync<_overTheBox.ServiceWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}
        public Task PutV1OverTheBoxServiceNameAsync(_overTheBox.Service _body, string serviceName) {
            string uri = $"/v1/overTheBox/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/autoMTU
        public Task PutV1OverTheBoxServiceNameAutoMTUAsync(_overTheBox.AvailableStatusEnum mtuAuto, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("mtuAuto", mtuAuto);
            string uri = $"/v1/overTheBox/{serviceName}/autoMTU";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/availableReleaseChannels
        public Task<System.String[]> GetV1OverTheBoxServiceNameAvailableReleaseChannelsAsync(string serviceName) {
            string uri = $"/v1/overTheBox/{serviceName}/availableReleaseChannels";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/backups
        public Task<System.String[]> GetV1OverTheBoxServiceNameBackupsAsync(string serviceName) {
            string uri = $"/v1/overTheBox/{serviceName}/backups";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/backups/{backupId}
        public Task DeleteV1OverTheBoxServiceNameBackupsBackupIdAsync(string backupId, string serviceName) {
            string uri = $"/v1/overTheBox/{serviceName}/backups/{backupId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/backups/{backupId}
        public Task<_overTheBox.Backup> GetV1OverTheBoxServiceNameBackupsBackupIdAsync(string backupId, string serviceName) {
            string uri = $"/v1/overTheBox/{serviceName}/backups/{backupId}";
            return this.SendAsync<_overTheBox.Backup>("GET", uri, null, null, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/cancelResiliation
        public Task PostV1OverTheBoxServiceNameCancelResiliationAsync(string serviceName) {
            string uri = $"/v1/overTheBox/{serviceName}/cancelResiliation";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/changeContact
        public Task<System.Int64[]> PostV1OverTheBoxServiceNameChangeContactAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactTech) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("contactAdmin", contactAdmin);
            _body.Add("contactBilling", contactBilling);
            _body.Add("contactTech", contactTech);
            string uri = $"/v1/overTheBox/{serviceName}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/device
        public Task DeleteV1OverTheBoxServiceNameDeviceAsync(string serviceName) {
            string uri = $"/v1/overTheBox/{serviceName}/device";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/device
        public Task<_overTheBox.Device> GetV1OverTheBoxServiceNameDeviceAsync(string serviceName) {
            string uri = $"/v1/overTheBox/{serviceName}/device";
            return this.SendAsync<_overTheBox.Device>("GET", uri, null, null, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/device/actions
        public Task<System.String[]> GetV1OverTheBoxServiceNameDeviceActionsAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? name, [System.Runtime.InteropServices.OptionalAttribute()] _overTheBox.ActionStatusEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("name", name);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/overTheBox/{serviceName}/device/actions{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/device/actions
        public Task<_overTheBox.DeviceAction> PostV1OverTheBoxServiceNameDeviceActionsAsync(string name, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("name", name);
            string uri = $"/v1/overTheBox/{serviceName}/device/actions";
            return this.SendAsync<_overTheBox.DeviceAction>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/device/actions/{actionId}
        public Task<_overTheBox.DeviceAction> GetV1OverTheBoxServiceNameDeviceActionsActionIdAsync(string actionId, string serviceName) {
            string uri = $"/v1/overTheBox/{serviceName}/device/actions/{actionId}";
            return this.SendAsync<_overTheBox.DeviceAction>("GET", uri, null, null, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/device/availableActions
        public Task<_overTheBox.AvailableDeviceAction[]> GetV1OverTheBoxServiceNameDeviceAvailableActionsAsync(string serviceName) {
            string uri = $"/v1/overTheBox/{serviceName}/device/availableActions";
            return this.SendAsync<_overTheBox.AvailableDeviceAction[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/device/backup
        public Task<_overTheBox.DeviceAction> PostV1OverTheBoxServiceNameDeviceBackupAsync(string serviceName) {
            string uri = $"/v1/overTheBox/{serviceName}/device/backup";
            return this.SendAsync<_overTheBox.DeviceAction>("POST", uri, null, null, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/device/hardware
        public Task<_overTheBox.Hardware> GetV1OverTheBoxServiceNameDeviceHardwareAsync(string serviceName) {
            string uri = $"/v1/overTheBox/{serviceName}/device/hardware";
            return this.SendAsync<_overTheBox.Hardware>("GET", uri, null, null, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/device/logs
        public Task<_overTheBox.TemporaryLogsLink> PostV1OverTheBoxServiceNameDeviceLogsAsync(string serviceName) {
            string uri = $"/v1/overTheBox/{serviceName}/device/logs";
            return this.SendAsync<_overTheBox.TemporaryLogsLink>("POST", uri, null, null, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/device/restoreBackup
        public Task<_overTheBox.DeviceAction[]> PostV1OverTheBoxServiceNameDeviceRestoreBackupAsync(string backupId, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("backupId", backupId);
            string uri = $"/v1/overTheBox/{serviceName}/device/restoreBackup";
            return this.SendAsync<_overTheBox.DeviceAction[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/linkDevice
        public Task PostV1OverTheBoxServiceNameLinkDeviceAsync(string deviceId, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("deviceId", deviceId);
            string uri = $"/v1/overTheBox/{serviceName}/linkDevice";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/linkHardware
        public Task PostV1OverTheBoxServiceNameLinkHardwareAsync(string hardwareName, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("hardwareName", hardwareName);
            string uri = $"/v1/overTheBox/{serviceName}/linkHardware";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/migration/changeOffers
        public Task<_overTheBox.OrderMigration> PostV1OverTheBoxServiceNameMigrationChangeOffersAsync(string offer, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? hardwareName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? shippingContactID) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("hardwareName", hardwareName);
            _body.Add("offer", offer);
            _body.Add("shippingContactID", shippingContactID);
            string uri = $"/v1/overTheBox/{serviceName}/migration/changeOffers";
            return this.SendAsync<_overTheBox.OrderMigration>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/migration/offers
        public Task<_overTheBox.AvailableMigrationOffer[]> GetV1OverTheBoxServiceNameMigrationOffersAsync(string serviceName) {
            string uri = $"/v1/overTheBox/{serviceName}/migration/offers";
            return this.SendAsync<_overTheBox.AvailableMigrationOffer[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/remoteAccesses
        public Task<System.String[]> GetV1OverTheBoxServiceNameRemoteAccessesAsync(string serviceName) {
            string uri = $"/v1/overTheBox/{serviceName}/remoteAccesses";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/remoteAccesses
        public Task<_overTheBox.RemoteAccess> PostV1OverTheBoxServiceNameRemoteAccessesAsync(long exposedPort, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? allowedIp, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? expirationDate, [System.Runtime.InteropServices.OptionalAttribute()] System.String? publicKey) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("allowedIp", allowedIp);
            _body.Add("expirationDate", expirationDate);
            _body.Add("exposedPort", exposedPort);
            _body.Add("publicKey", publicKey);
            string uri = $"/v1/overTheBox/{serviceName}/remoteAccesses";
            return this.SendAsync<_overTheBox.RemoteAccess>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/remoteAccesses/{remoteAccessId}
        public Task DeleteV1OverTheBoxServiceNameRemoteAccessesRemoteAccessIdAsync(string remoteAccessId, string serviceName) {
            string uri = $"/v1/overTheBox/{serviceName}/remoteAccesses/{remoteAccessId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/remoteAccesses/{remoteAccessId}
        public Task<_overTheBox.RemoteAccess> GetV1OverTheBoxServiceNameRemoteAccessesRemoteAccessIdAsync(string remoteAccessId, string serviceName) {
            string uri = $"/v1/overTheBox/{serviceName}/remoteAccesses/{remoteAccessId}";
            return this.SendAsync<_overTheBox.RemoteAccess>("GET", uri, null, null, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/remoteAccesses/{remoteAccessId}/authorize
        public Task PostV1OverTheBoxServiceNameRemoteAccessesRemoteAccessIdAuthorizeAsync(string remoteAccessId, string serviceName) {
            string uri = $"/v1/overTheBox/{serviceName}/remoteAccesses/{remoteAccessId}/authorize";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1OverTheBoxServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/overTheBox/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/serviceInfos
        public Task PutV1OverTheBoxServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/overTheBox/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/statistics
        public Task<_otb_device.statistics[]> GetV1OverTheBoxServiceNameStatisticsAsync(string serviceName, _otb.DeviceStatisticsTypeEnum metricsType, [System.Runtime.InteropServices.OptionalAttribute()] _otb.DeviceStatisticsPeriodEnum? period) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("metricsType", metricsType);
            queryParametersTemp.Add("period", period);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/overTheBox/{serviceName}/statistics{queryParameters}";
            return this.SendAsync<_otb_device.statistics[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/tasks
        public Task<System.String[]> GetV1OverTheBoxServiceNameTasksAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? name, [System.Runtime.InteropServices.OptionalAttribute()] _overTheBox.TaskStatusEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("name", name);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/overTheBox/{serviceName}/tasks{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/overTheBox/{serviceName}/tasks/{taskId}
        public Task<_overTheBox.Task> GetV1OverTheBoxServiceNameTasksTaskIdAsync(string serviceName, string taskId) {
            string uri = $"/v1/overTheBox/{serviceName}/tasks/{taskId}";
            return this.SendAsync<_overTheBox.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect
        public Task<System.Guid[]> GetV1OvhCloudConnectAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ovhCloudConnect{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}
        public Task<_ovhcloudconnect.ServiceWithIAM> GetV1OvhCloudConnectServiceNameAsync(System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}";
            return this.SendAsync<_ovhcloudconnect.ServiceWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}
        public Task PutV1OvhCloudConnectServiceNameAsync(_ovhcloudconnect.Update _body, System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/changeContact
        public Task<System.Int64[]> PostV1OvhCloudConnectServiceNameChangeContactAsync(_services.changeContact _body, System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/config/pop
        public Task<System.Int64[]> GetV1OvhCloudConnectServiceNameConfigPopAsync(System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/config/pop";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/config/pop
        public Task<_ovhcloudconnect.Task> PostV1OvhCloudConnectServiceNameConfigPopAsync(_ovhcloudconnect.PopConfig _body, System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/config/pop";
            return this.SendAsync<_ovhcloudconnect.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/config/pop/{popId}
        public Task<_ovhcloudconnect.Task> DeleteV1OvhCloudConnectServiceNameConfigPopPopIdAsync(long popId, System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/config/pop/{popId}";
            return this.SendAsync<_ovhcloudconnect.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/config/pop/{popId}
        public Task<_ovhcloudconnect.PopConfig> GetV1OvhCloudConnectServiceNameConfigPopPopIdAsync(long popId, System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/config/pop/{popId}";
            return this.SendAsync<_ovhcloudconnect.PopConfig>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter
        public Task<System.Int64[]> GetV1OvhCloudConnectServiceNameConfigPopPopIdDatacenterAsync(long popId, System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter
        public Task<_ovhcloudconnect.Task> PostV1OvhCloudConnectServiceNameConfigPopPopIdDatacenterAsync(_ovhcloudconnect.DatacenterConfig _body, long popId, System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter";
            return this.SendAsync<_ovhcloudconnect.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter/{datacenterId}
        public Task<_ovhcloudconnect.Task> DeleteV1OvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdAsync(long datacenterId, long popId, System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter/{datacenterId}";
            return this.SendAsync<_ovhcloudconnect.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter/{datacenterId}
        public Task<_ovhcloudconnect.DatacenterConfig> GetV1OvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdAsync(long datacenterId, long popId, System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter/{datacenterId}";
            return this.SendAsync<_ovhcloudconnect.DatacenterConfig>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter/{datacenterId}/extra
        public Task<System.Int64[]> GetV1OvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraAsync(long datacenterId, long popId, System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter/{datacenterId}/extra";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter/{datacenterId}/extra
        public Task<_ovhcloudconnect.Task> PostV1OvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraAsync(_ovhcloudconnect.DatacenterExtraConfig _body, long datacenterId, long popId, System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter/{datacenterId}/extra";
            return this.SendAsync<_ovhcloudconnect.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter/{datacenterId}/extra/{extraId}
        public Task<_ovhcloudconnect.Task> DeleteV1OvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraIdAsync(long datacenterId, long extraId, long popId, System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter/{datacenterId}/extra/{extraId}";
            return this.SendAsync<_ovhcloudconnect.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter/{datacenterId}/extra/{extraId}
        public Task<_ovhcloudconnect.DatacenterExtraConfig> GetV1OvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraIdAsync(long datacenterId, long extraId, long popId, System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter/{datacenterId}/extra/{extraId}";
            return this.SendAsync<_ovhcloudconnect.DatacenterExtraConfig>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/confirmTermination
        public Task<System.String> PostV1OvhCloudConnectServiceNameConfirmTerminationAsync(_services.confirmTermination _body, System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/datacenter
        public Task<System.Int64[]> GetV1OvhCloudConnectServiceNameDatacenterAsync(System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/datacenter";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/datacenter/{id}
        public Task<_ovhcloudconnect.Datacenter> GetV1OvhCloudConnectServiceNameDatacenterIdAsync(long id, System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/datacenter/{id}";
            return this.SendAsync<_ovhcloudconnect.Datacenter>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/diagnostic
        public Task<System.Int64[]> GetV1OvhCloudConnectServiceNameDiagnosticAsync(System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/diagnostic";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/diagnostic
        public Task<_ovhcloudconnect.Diagnostic> PostV1OvhCloudConnectServiceNameDiagnosticAsync(_ovhcloudconnect.DiagnosticConfiguration _body, System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/diagnostic";
            return this.SendAsync<_ovhcloudconnect.Diagnostic>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/diagnostic/{id}
        public Task<_ovhcloudconnect.Diagnostic> GetV1OvhCloudConnectServiceNameDiagnosticIdAsync(long id, System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/diagnostic/{id}";
            return this.SendAsync<_ovhcloudconnect.Diagnostic>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/incident
        public Task<System.Int64[]> GetV1OvhCloudConnectServiceNameIncidentAsync(System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/incident";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/incident/{id}
        public Task<_ovhcloudconnect.Incident> GetV1OvhCloudConnectServiceNameIncidentIdAsync(long id, System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/incident/{id}";
            return this.SendAsync<_ovhcloudconnect.Incident>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/interface
        public Task<System.Int64[]> GetV1OvhCloudConnectServiceNameInterfaceAsync(System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/interface";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/interface/{id}
        public Task<_ovhcloudconnect.Interface> GetV1OvhCloudConnectServiceNameInterfaceIdAsync(long id, System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/interface/{id}";
            return this.SendAsync<_ovhcloudconnect.Interface>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/interface/{id}/lock
        public Task<_ovhcloudconnect.Task> PostV1OvhCloudConnectServiceNameInterfaceIdLockAsync(long id, System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/interface/{id}/lock";
            return this.SendAsync<_ovhcloudconnect.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/interface/{id}/statistics
        public Task<_ovhcloudconnect.Metrics[]> GetV1OvhCloudConnectServiceNameInterfaceIdStatisticsAsync(long id, _ovhcloudconnect_interface.MetricsPeriodEnum period, System.Guid serviceName, _ovhcloudconnect_interface.MetricsTypeEnum type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("period", period);
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ovhCloudConnect/{serviceName}/interface/{id}/statistics{queryParameters}";
            return this.SendAsync<_ovhcloudconnect.Metrics[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/interface/{id}/unlock
        public Task<_ovhcloudconnect.Task> PostV1OvhCloudConnectServiceNameInterfaceIdUnlockAsync(long id, System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/interface/{id}/unlock";
            return this.SendAsync<_ovhcloudconnect.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/loa
        public Task<System.String> PostV1OvhCloudConnectServiceNameLoaAsync(System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/loa";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/monitoring
        public Task DeleteV1OvhCloudConnectServiceNameMonitoringAsync(System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/monitoring";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/monitoring
        public Task<_ovhcloudconnect.Monitoring[]> GetV1OvhCloudConnectServiceNameMonitoringAsync(System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/monitoring";
            return this.SendAsync<_ovhcloudconnect.Monitoring[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/monitoring
        public Task PostV1OvhCloudConnectServiceNameMonitoringAsync(_ovhcloudconnect.Subscriptions _body, System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/monitoring";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1OvhCloudConnectServiceNameServiceInfosAsync(System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/serviceInfos
        public Task PutV1OvhCloudConnectServiceNameServiceInfosAsync(_services.Service _body, System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/serviceKey
        public Task<System.Int64[]> GetV1OvhCloudConnectServiceNameServiceKeyAsync(System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/serviceKey";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/serviceKey/{serviceKeyId}
        public Task<_ovhcloudconnect.Key> GetV1OvhCloudConnectServiceNameServiceKeyServiceKeyIdAsync(long serviceKeyId, System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/serviceKey/{serviceKeyId}";
            return this.SendAsync<_ovhcloudconnect.Key>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/serviceKey/{serviceKeyId}/regenerate
        public Task<_ovhcloudconnect.Key> PostV1OvhCloudConnectServiceNameServiceKeyServiceKeyIdRegenerateAsync(long serviceKeyId, System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/serviceKey/{serviceKeyId}/regenerate";
            return this.SendAsync<_ovhcloudconnect.Key>("POST", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/serviceKey/{serviceKeyId}/send
        public Task<_ovhcloudconnect.SendKeyAnswer> PostV1OvhCloudConnectServiceNameServiceKeyServiceKeyIdSendAsync(_ovhcloudconnect.To _body, long serviceKeyId, System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/serviceKey/{serviceKeyId}/send";
            return this.SendAsync<_ovhcloudconnect.SendKeyAnswer>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/task
        public Task<System.Int64[]> GetV1OvhCloudConnectServiceNameTaskAsync(System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/task";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/task/{id}
        public Task<_ovhcloudconnect.Task> GetV1OvhCloudConnectServiceNameTaskIdAsync(long id, System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/task/{id}";
            return this.SendAsync<_ovhcloudconnect.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ovhCloudConnect/{serviceName}/terminate
        public Task<System.String> PostV1OvhCloudConnectServiceNameTerminateAsync(System.Guid serviceName) {
            string uri = $"/v1/ovhCloudConnect/{serviceName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/pack/siptrunk
        public Task<System.String[]> GetV1PackSiptrunkAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/pack/siptrunk{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/siptrunk/{packName}
        public Task<_pack_siptrunk.PackSipTrunkWithIAM> GetV1PackSiptrunkPackNameAsync(string packName) {
            string uri = $"/v1/pack/siptrunk/{packName}";
            return this.SendAsync<_pack_siptrunk.PackSipTrunkWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/siptrunk/{packName}/changeContact
        public Task<System.Int64[]> PostV1PackSiptrunkPackNameChangeContactAsync(string packName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactTech) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("contactAdmin", contactAdmin);
            _body.Add("contactBilling", contactBilling);
            _body.Add("contactTech", contactTech);
            string uri = $"/v1/pack/siptrunk/{packName}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/pack/siptrunk/{packName}/serviceInfos
        public Task<_services.Service> GetV1PackSiptrunkPackNameServiceInfosAsync(string packName) {
            string uri = $"/v1/pack/siptrunk/{packName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/siptrunk/{packName}/serviceInfos
        public Task PutV1PackSiptrunkPackNameServiceInfosAsync(_services.Service _body, string packName) {
            string uri = $"/v1/pack/siptrunk/{packName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/pack/xdsl
        public Task<System.String[]> GetV1PackXdslAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/pack/xdsl{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}
        public Task<_pack_xdsl.PackAdslWithIAM> GetV1PackXdslPackNameAsync(string packName) {
            string uri = $"/v1/pack/xdsl/{packName}";
            return this.SendAsync<_pack_xdsl.PackAdslWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}
        public Task PutV1PackXdslPackNameAsync(_pack_xdsl.PackAdsl _body, string packName) {
            string uri = $"/v1/pack/xdsl/{packName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/addressMove/moveOffer
        public Task<_pack_xdsl.AsyncTask<long>> PostV1PackXdslPackNameAddressMoveMoveOfferAsync(
                    bool acceptContracts, 
                    string eligibilityReference, 
                    bool keepCurrentNumber, 
                    _pack_xdsl.ModemOptionEnum modem, 
                    string offerName, 
                    bool otp, 
                    string packName, 
                    string productCode, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? building, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? buildingReference, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactPhone, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? door, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? engageMonths, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? floor, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _connectivity_eligibility.InstallationTypeEnum? installationType, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _xdsl_eligibility.BookMeetingSlot? meeting, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? mondialRelayId, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? moveOutDate, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? nicShipping, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? ontShippingContact, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _pack_xdsl_migration.OfferOption[]? options, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? otpReference, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? residence, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? stair, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _pack_xdsl_migration.OfferServiceToDelete[]? subServicesToDelete, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _pack_xdsl_migration.OfferServiceToKeep[]? subServicesToKeep) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("acceptContracts", acceptContracts);
            _body.Add("building", building);
            _body.Add("buildingReference", buildingReference);
            _body.Add("contactPhone", contactPhone);
            _body.Add("door", door);
            _body.Add("eligibilityReference", eligibilityReference);
            _body.Add("engageMonths", engageMonths);
            _body.Add("floor", floor);
            _body.Add("installationType", installationType);
            _body.Add("keepCurrentNumber", keepCurrentNumber);
            _body.Add("meeting", meeting);
            _body.Add("modem", modem);
            _body.Add("mondialRelayId", mondialRelayId);
            _body.Add("moveOutDate", moveOutDate);
            _body.Add("nicShipping", nicShipping);
            _body.Add("offerName", offerName);
            _body.Add("ontShippingContact", ontShippingContact);
            _body.Add("options", options);
            _body.Add("otp", otp);
            _body.Add("otpReference", otpReference);
            _body.Add("productCode", productCode);
            _body.Add("residence", residence);
            _body.Add("stair", stair);
            _body.Add("subServicesToDelete", subServicesToDelete);
            _body.Add("subServicesToKeep", subServicesToKeep);
            string uri = $"/v1/pack/xdsl/{packName}/addressMove/moveOffer";
            return this.SendAsync<_pack_xdsl.AsyncTask<long>>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/addressMove/offers
        public Task<_pack_xdsl.AsyncTask<_pack_xdsl_addressMove.MoveOfferResponse>> PostV1PackXdslPackNameAddressMoveOffersAsync(string eligibilityReference, string packName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("eligibilityReference", eligibilityReference);
            string uri = $"/v1/pack/xdsl/{packName}/addressMove/offers";
            return this.SendAsync<_pack_xdsl.AsyncTask<_pack_xdsl_addressMove.MoveOfferResponse>>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/addressMove/servicesToDeleteUnpackTerms
        public Task<_pack_xdsl_migration.SubServicesDetailsToDelete[]> PostV1PackXdslPackNameAddressMoveServicesToDeleteUnpackTermsAsync(string eligibilityReference, string offerName, string packName, [System.Runtime.InteropServices.OptionalAttribute()] _pack_xdsl_migration.OfferOption[]? options) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("eligibilityReference", eligibilityReference);
            _body.Add("offerName", offerName);
            _body.Add("options", options);
            string uri = $"/v1/pack/xdsl/{packName}/addressMove/servicesToDeleteUnpackTerms";
            return this.SendAsync<_pack_xdsl_migration.SubServicesDetailsToDelete[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/canCancelResiliation
        public Task<System.Boolean> GetV1PackXdslPackNameCanCancelResiliationAsync(string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/canCancelResiliation";
            return this.SendAsync<bool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/cancelResiliation
        public Task PostV1PackXdslPackNameCancelResiliationAsync(string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/cancelResiliation";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/changeContact
        public Task<System.Int64[]> PostV1PackXdslPackNameChangeContactAsync(string packName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactTech) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("contactAdmin", contactAdmin);
            _body.Add("contactBilling", contactBilling);
            _body.Add("contactTech", contactTech);
            string uri = $"/v1/pack/xdsl/{packName}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/contactOwner
        public Task<_pack_xdsl.ContactInfos> GetV1PackXdslPackNameContactOwnerAsync(string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/contactOwner";
            return this.SendAsync<_pack_xdsl.ContactInfos>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/domain/options/tlds
        public Task<System.String[]> GetV1PackXdslPackNameDomainOptionsTldsAsync(string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/domain/options/tlds";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/domain/services
        public Task<System.String[]> GetV1PackXdslPackNameDomainServicesAsync(string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/domain/services";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/domain/services
        public Task<_pack_xdsl.Task> PostV1PackXdslPackNameDomainServicesAsync(_pack_xdsl.DomainActionEnum action, string domain, string packName, string tld, [System.Runtime.InteropServices.OptionalAttribute()] System.String? authInfo) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("action", action);
            _body.Add("authInfo", authInfo);
            _body.Add("domain", domain);
            _body.Add("tld", tld);
            string uri = $"/v1/pack/xdsl/{packName}/domain/services";
            return this.SendAsync<_pack_xdsl.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/emailPro/options/domains
        public Task<System.String[]> GetV1PackXdslPackNameEmailProOptionsDomainsAsync(string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/emailPro/options/domains";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/emailPro/options/isEmailAvailable
        public Task<System.Boolean> GetV1PackXdslPackNameEmailProOptionsIsEmailAvailableAsync(string email, string packName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("email", email);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/pack/xdsl/{packName}/emailPro/options/isEmailAvailable{queryParameters}";
            return this.SendAsync<bool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/emailPro/services
        public Task<System.String[]> GetV1PackXdslPackNameEmailProServicesAsync(string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/emailPro/services";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/emailPro/services
        public Task<_pack_xdsl.Task> PostV1PackXdslPackNameEmailProServicesAsync(string email, string packName, string password) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("email", email);
            _body.Add("password", password);
            string uri = $"/v1/pack/xdsl/{packName}/emailPro/services";
            return this.SendAsync<_pack_xdsl.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/exchangeAccount/services
        public Task<System.String[]> GetV1PackXdslPackNameExchangeAccountServicesAsync(string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/exchangeAccount/services";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/exchangeAccount/services/{domain}
        public Task<_pack_xdsl.ExchangeAccountService> GetV1PackXdslPackNameExchangeAccountServicesDomainAsync(string domain, string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/exchangeAccount/services/{domain}";
            return this.SendAsync<_pack_xdsl.ExchangeAccountService>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/exchangeIndividual/options/domains
        public Task<System.String[]> GetV1PackXdslPackNameExchangeIndividualOptionsDomainsAsync(string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/exchangeIndividual/options/domains";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/exchangeIndividual/options/isEmailAvailable
        public Task<System.Boolean> GetV1PackXdslPackNameExchangeIndividualOptionsIsEmailAvailableAsync(string email, string packName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("email", email);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/pack/xdsl/{packName}/exchangeIndividual/options/isEmailAvailable{queryParameters}";
            return this.SendAsync<bool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/exchangeOrganization/services
        public Task<System.String[]> GetV1PackXdslPackNameExchangeOrganizationServicesAsync(string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/exchangeOrganization/services";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/hostedEmail/options/domains
        public Task<System.String[]> GetV1PackXdslPackNameHostedEmailOptionsDomainsAsync(string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/hostedEmail/options/domains";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/hostedEmail/services
        public Task<System.String[]> GetV1PackXdslPackNameHostedEmailServicesAsync(string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/hostedEmail/services";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/hostedEmail/services
        public Task<_pack_xdsl.Task> PostV1PackXdslPackNameHostedEmailServicesAsync(string email, string packName, string password) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("email", email);
            _body.Add("password", password);
            string uri = $"/v1/pack/xdsl/{packName}/hostedEmail/services";
            return this.SendAsync<_pack_xdsl.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/hostedEmail/services/{domain}
        public Task DeleteV1PackXdslPackNameHostedEmailServicesDomainAsync(string domain, string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/hostedEmail/services/{domain}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/hostedEmail/services/{domain}
        public Task<_pack_xdsl.HostedEmailService> GetV1PackXdslPackNameHostedEmailServicesDomainAsync(string domain, string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/hostedEmail/services/{domain}";
            return this.SendAsync<_pack_xdsl.HostedEmailService>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/hostedEmail/services/{domain}/account
        public Task<_pack_xdsl_HostedEmail.Account> GetV1PackXdslPackNameHostedEmailServicesDomainAccountAsync(string domain, string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/hostedEmail/services/{domain}/account";
            return this.SendAsync<_pack_xdsl_HostedEmail.Account>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/hostedEmail/services/{domain}/changePassword
        public Task PostV1PackXdslPackNameHostedEmailServicesDomainChangePasswordAsync(string domain, string packName, string password) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("password", password);
            string uri = $"/v1/pack/xdsl/{packName}/hostedEmail/services/{domain}/changePassword";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/hostedEmail/services/{domain}/configuration
        public Task<_pack_xdsl_HostedEmail.Configuration> GetV1PackXdslPackNameHostedEmailServicesDomainConfigurationAsync(string domain, string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/hostedEmail/services/{domain}/configuration";
            return this.SendAsync<_pack_xdsl_HostedEmail.Configuration>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/migration/migrate
        public Task<_pack_xdsl.Task> PostV1PackXdslPackNameMigrationMigrateAsync(
                    bool acceptContracts, 
                    _pack_xdsl.ModemOptionEnum modem, 
                    string offerName, 
                    string packName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? buildingReference, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactPhone, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? engageMonths, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? floor, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _connectivity_eligibility.InstallationTypeEnum? installationType, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _xdsl_eligibility.BookMeetingSlot? meeting, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? mondialRelayId, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? nicShipping, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? ontShippingContact, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _pack_xdsl_migration.OfferOption[]? options, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? otp, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? otpReference, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? productCode, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? stair, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _pack_xdsl_migration.OfferServiceToDelete[]? subServicesToDelete, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _pack_xdsl_migration.OfferServiceToKeep[]? subServicesToKeep) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("acceptContracts", acceptContracts);
            _body.Add("buildingReference", buildingReference);
            _body.Add("contactPhone", contactPhone);
            _body.Add("engageMonths", engageMonths);
            _body.Add("floor", floor);
            _body.Add("installationType", installationType);
            _body.Add("meeting", meeting);
            _body.Add("modem", modem);
            _body.Add("mondialRelayId", mondialRelayId);
            _body.Add("nicShipping", nicShipping);
            _body.Add("offerName", offerName);
            _body.Add("ontShippingContact", ontShippingContact);
            _body.Add("options", options);
            _body.Add("otp", otp);
            _body.Add("otpReference", otpReference);
            _body.Add("productCode", productCode);
            _body.Add("stair", stair);
            _body.Add("subServicesToDelete", subServicesToDelete);
            _body.Add("subServicesToKeep", subServicesToKeep);
            string uri = $"/v1/pack/xdsl/{packName}/migration/migrate";
            return this.SendAsync<_pack_xdsl.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/migration/offers
        public Task<_pack_xdsl.AsyncTask<_pack_xdsl_migration.MigrationOfferResponse>> PostV1PackXdslPackNameMigrationOffersAsync(string packName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? buildingReference) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("buildingReference", buildingReference);
            string uri = $"/v1/pack/xdsl/{packName}/migration/offers";
            return this.SendAsync<_pack_xdsl.AsyncTask<_pack_xdsl_migration.MigrationOfferResponse>>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/migration/servicesToDeleteUnpackTerms
        public Task<_pack_xdsl_migration.SubServicesDetailsToDelete[]> PostV1PackXdslPackNameMigrationServicesToDeleteUnpackTermsAsync(string offerName, string packName, [System.Runtime.InteropServices.OptionalAttribute()] _pack_xdsl_migration.OfferOption[]? options) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("offerName", offerName);
            _body.Add("options", options);
            string uri = $"/v1/pack/xdsl/{packName}/migration/servicesToDeleteUnpackTerms";
            return this.SendAsync<_pack_xdsl_migration.SubServicesDetailsToDelete[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/promotionCode/capabilities
        public Task<_pack_xdsl_promotionCode.Capabilities> GetV1PackXdslPackNamePromotionCodeCapabilitiesAsync(string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/promotionCode/capabilities";
            return this.SendAsync<_pack_xdsl_promotionCode.Capabilities>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/promotionCode/generate
        public Task<_pack_xdsl.Task> PostV1PackXdslPackNamePromotionCodeGenerateAsync(string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/promotionCode/generate";
            return this.SendAsync<_pack_xdsl.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/resiliate
        public Task<_pack_xdsl.ResiliationFollowUpDetail> PostV1PackXdslPackNameResiliateAsync(string packName, _pack_xdsl.ResiliationSurvey resiliationSurvey, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? resiliationDate, [System.Runtime.InteropServices.OptionalAttribute()] System.Double[]? servicesToKeep) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("resiliationDate", resiliationDate);
            _body.Add("resiliationSurvey", resiliationSurvey);
            _body.Add("servicesToKeep", servicesToKeep);
            string uri = $"/v1/pack/xdsl/{packName}/resiliate";
            return this.SendAsync<_pack_xdsl.ResiliationFollowUpDetail>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/resiliationFollowUp
        public Task<_pack_xdsl.ResiliationFollowUpDetail> GetV1PackXdslPackNameResiliationFollowUpAsync(string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/resiliationFollowUp";
            return this.SendAsync<_pack_xdsl.ResiliationFollowUpDetail>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/resiliationTerms
        public Task<_pack_xdsl.ResiliationTerms> GetV1PackXdslPackNameResiliationTermsAsync(string packName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? resiliationDate) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("resiliationDate", resiliationDate);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/pack/xdsl/{packName}/resiliationTerms{queryParameters}";
            return this.SendAsync<_pack_xdsl.ResiliationTerms>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/serviceInfos
        public Task<_services.Service> GetV1PackXdslPackNameServiceInfosAsync(string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/serviceInfos
        public Task PutV1PackXdslPackNameServiceInfosAsync(_services.Service _body, string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/services
        public Task<_pack_xdsl.ServiceInformation[]> GetV1PackXdslPackNameServicesAsync(string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/services";
            return this.SendAsync<_pack_xdsl.ServiceInformation[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/shippingAddresses
        public Task<_pack_xdsl.ShippingAddress[]> GetV1PackXdslPackNameShippingAddressesAsync(_pack_xdsl.ShippingAddressContextEnum context, string packName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("context", context);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/pack/xdsl/{packName}/shippingAddresses{queryParameters}";
            return this.SendAsync<_pack_xdsl.ShippingAddress[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/subServices
        public Task<System.String[]> GetV1PackXdslPackNameSubServicesAsync(string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/subServices";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/subServices/{domain}
        public Task<_pack_xdsl.Service> GetV1PackXdslPackNameSubServicesDomainAsync(string domain, string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/subServices/{domain}";
            return this.SendAsync<_pack_xdsl.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/subServices/{domain}/keepServiceTerms
        public Task<_pack_xdsl.UnpackTerms> GetV1PackXdslPackNameSubServicesDomainKeepServiceTermsAsync(string domain, string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/subServices/{domain}/keepServiceTerms";
            return this.SendAsync<_pack_xdsl.UnpackTerms>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/tasks
        public Task<System.Int64[]> GetV1PackXdslPackNameTasksAsync(string packName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? function, [System.Runtime.InteropServices.OptionalAttribute()] _pack_xdsl.TaskStatusEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("function", function);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/pack/xdsl/{packName}/tasks{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/tasks/{id}
        public Task<_pack_xdsl.Task> GetV1PackXdslPackNameTasksIdAsync(long id, string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/tasks/{id}";
            return this.SendAsync<_pack_xdsl.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/voipBillingAccount/services
        public Task<System.String[]> GetV1PackXdslPackNameVoipBillingAccountServicesAsync(string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/voipBillingAccount/services";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/voipEcofax/services
        public Task<System.String[]> GetV1PackXdslPackNameVoipEcofaxServicesAsync(string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/voipEcofax/services";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/voipEcofax/services
        public Task<_pack_xdsl.Task> PostV1PackXdslPackNameVoipEcofaxServicesAsync(string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/voipEcofax/services";
            return this.SendAsync<_pack_xdsl.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/voipLine/options/customShippingAddress
        public Task<System.Int64> PostV1PackXdslPackNameVoipLineOptionsCustomShippingAddressAsync(string address, string cityName, string firstName, string lastName, string packName, string zipCode) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("address", address);
            _body.Add("cityName", cityName);
            _body.Add("firstName", firstName);
            _body.Add("lastName", lastName);
            _body.Add("zipCode", zipCode);
            string uri = $"/v1/pack/xdsl/{packName}/voipLine/options/customShippingAddress";
            return this.SendAsync<long>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/voipLine/options/hardwares
        public Task<_pack_xdsl.VoIPHardware[]> GetV1PackXdslPackNameVoipLineOptionsHardwaresAsync(string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/voipLine/options/hardwares";
            return this.SendAsync<_pack_xdsl.VoIPHardware[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/voipLine/options/shippingAddresses
        public Task<_pack_xdsl.ShippingAddress[]> GetV1PackXdslPackNameVoipLineOptionsShippingAddressesAsync(string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/voipLine/options/shippingAddresses";
            return this.SendAsync<_pack_xdsl.ShippingAddress[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/voipLine/services
        public Task<System.String[]> GetV1PackXdslPackNameVoipLineServicesAsync(string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/voipLine/services";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/voipLine/services
        public Task<_pack_xdsl.VoIPLineOrder> PostV1PackXdslPackNameVoipLineServicesAsync(string[] hardwareNames, string packName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? mondialRelayId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? shippingId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("hardwareNames", hardwareNames);
            _body.Add("mondialRelayId", mondialRelayId);
            _body.Add("shippingId", shippingId);
            string uri = $"/v1/pack/xdsl/{packName}/voipLine/services";
            return this.SendAsync<_pack_xdsl.VoIPLineOrder>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/voipLine/services/{domain}
        public Task<_pack_xdsl.VoipLineService> GetV1PackXdslPackNameVoipLineServicesDomainAsync(string domain, string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/voipLine/services/{domain}";
            return this.SendAsync<_pack_xdsl.VoipLineService>("GET", uri, null, null, true);
        }
        
        // Path: /v1/pack/xdsl/{packName}/xdslAccess/services
        public Task<System.String[]> GetV1PackXdslPackNameXdslAccessServicesAsync(string packName) {
            string uri = $"/v1/pack/xdsl/{packName}/xdslAccess/services";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/partner
        public Task<_partner2.Partner> GetV1PartnerAsync() {
            string uri = $"/v1/partner";
            return this.SendAsync<_partner2.Partner>("GET", uri, null, null, true);
        }
        
        // Path: /v1/partner
        public Task PostV1PartnerAsync(_partner2.Partner _body) {
            string uri = $"/v1/partner";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/price/dedicated/server/antiDDoSPro/{commercialRange}
        public Task<_order.Price> GetV1PriceDedicatedServerAntiDDoSProCommercialRangeAsync(_price_Dedicated_Server.AntiDDoSProEnum commercialRange) {
            string uri = $"/v1/price/dedicated/server/antiDDoSPro/{commercialRange}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicated/server/backupStorage/{capacity}
        public Task<_order.Price> GetV1PriceDedicatedServerBackupStorageCapacityAsync(_price_Dedicated_Server.BackupStorageEnum capacity) {
            string uri = $"/v1/price/dedicated/server/backupStorage/{capacity}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicated/server/firewall/{firewallModel}
        public Task<_order.Price> GetV1PriceDedicatedServerFirewallFirewallModelAsync(_price_Dedicated_Server.FirewallEnum firewallModel) {
            string uri = $"/v1/price/dedicated/server/firewall/{firewallModel}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicated/server/ip/{routedTo}
        public Task<_order.Price> GetV1PriceDedicatedServerIpRoutedToAsync(_price_Dedicated_Server.IpEnum routedTo) {
            string uri = $"/v1/price/dedicated/server/ip/{routedTo}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2013v1/bhs1a/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2013v1Bhs1aFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2013v1_Bhs1a_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2013v1/bhs1a/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2013v1/bhs1a/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2013v1Bhs1aFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2013v1_Bhs1a_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2013v1/bhs1a/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2013v1/bhs1a/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2013v1Bhs1aHostHourlyHostProfileAsync(_price_DedicatedCloud__2013v1_Bhs1a_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2013v1/bhs1a/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2013v1/bhs1a/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2013v1Bhs1aHostMonthlyHostProfileAsync(_price_DedicatedCloud__2013v1_Bhs1a_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2013v1/bhs1a/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2013v1/rbx2a/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2013v1Rbx2aFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2013v1_Rbx2a_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2013v1/rbx2a/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2013v1/rbx2a/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2013v1Rbx2aFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2013v1_Rbx2a_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2013v1/rbx2a/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2013v1/rbx2a/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2013v1Rbx2aHostHourlyHostProfileAsync(_price_DedicatedCloud__2013v1_Rbx2a_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2013v1/rbx2a/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2013v1/rbx2a/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2013v1Rbx2aHostMonthlyHostProfileAsync(_price_DedicatedCloud__2013v1_Rbx2a_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2013v1/rbx2a/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2013v1/sbg1a/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2013v1Sbg1aFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2013v1_Sbg1a_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2013v1/sbg1a/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2013v1/sbg1a/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2013v1Sbg1aFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2013v1_Sbg1a_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2013v1/sbg1a/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2013v1/sbg1a/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2013v1Sbg1aHostHourlyHostProfileAsync(_price_DedicatedCloud__2013v1_Sbg1a_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2013v1/sbg1a/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2013v1/sbg1a/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2013v1Sbg1aHostMonthlyHostProfileAsync(_price_DedicatedCloud__2013v1_Sbg1a_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2013v1/sbg1a/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/bhs1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Bhs1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Bhs1a_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/bhs1a/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/bhs1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Bhs1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Bhs1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/bhs1a/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/bhs1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Bhs1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v1_Bhs1a_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/bhs1a/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/bhs1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Bhs1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v1_Bhs1a_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/bhs1a/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/bhs1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/bhs1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v1_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/bhs1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v1_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/bhs1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/rbx2a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Rbx2aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Rbx2a_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/rbx2a/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/rbx2a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Rbx2aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Rbx2a_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/rbx2a/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/rbx2a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Rbx2aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v1_Rbx2a_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/rbx2a/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/rbx2a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Rbx2aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v1_Rbx2a_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/rbx2a/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/rbx2a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/rbx2a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v1_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/rbx2a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v1_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/rbx2a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/rbx2b/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Rbx2bEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Rbx2b_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/rbx2b/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/rbx2b/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Rbx2bEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Rbx2b_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/rbx2b/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/rbx2b/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Rbx2bEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v1_Rbx2b_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/rbx2b/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/rbx2b/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Rbx2bEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v1_Rbx2b_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/rbx2b/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/rbx2b/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/rbx2b/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v1_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/rbx2b/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v1_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/rbx2b/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/sbg1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Sbg1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Sbg1a_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/sbg1a/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/sbg1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Sbg1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Sbg1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/sbg1a/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/sbg1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Sbg1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v1_Sbg1a_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/sbg1a/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/sbg1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Sbg1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v1_Sbg1a_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/sbg1a/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/sbg1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/sbg1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v1_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/sbg1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v1/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v1Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v1_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v1/sbg1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/bhs1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Bhs1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Bhs1a_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/bhs1a/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/bhs1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Bhs1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Bhs1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/bhs1a/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/bhs1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Bhs1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v2_Bhs1a_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/bhs1a/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/bhs1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Bhs1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v2_Bhs1a_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/bhs1a/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/bhs1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/bhs1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v2_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/bhs1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v2_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/bhs1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/rbx2a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Rbx2aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Rbx2a_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/rbx2a/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/rbx2a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Rbx2aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Rbx2a_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/rbx2a/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/rbx2a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Rbx2aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v2_Rbx2a_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/rbx2a/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/rbx2a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Rbx2aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v2_Rbx2a_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/rbx2a/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/rbx2a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/rbx2a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v2_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/rbx2a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v2_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/rbx2a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/rbx2b/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Rbx2bEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Rbx2b_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/rbx2b/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/rbx2b/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Rbx2bEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Rbx2b_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/rbx2b/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/rbx2b/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Rbx2bEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v2_Rbx2b_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/rbx2b/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/rbx2b/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Rbx2bEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v2_Rbx2b_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/rbx2b/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/rbx2b/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/rbx2b/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v2_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/rbx2b/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v2_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/rbx2b/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/sbg1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Sbg1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Sbg1a_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/sbg1a/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/sbg1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Sbg1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Sbg1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/sbg1a/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/sbg1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Sbg1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v2_Sbg1a_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/sbg1a/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/sbg1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Sbg1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v2_Sbg1a_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/sbg1a/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/sbg1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/sbg1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v2_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/sbg1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2014v2/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2014v2Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v2_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2014v2/sbg1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/bhs1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Bhs1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Bhs1a_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/bhs1a/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/bhs1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Bhs1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Bhs1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/bhs1a/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/bhs1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Bhs1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v1_Bhs1a_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/bhs1a/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/bhs1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Bhs1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v1_Bhs1a_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/bhs1a/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/bhs1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/bhs1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v1_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/bhs1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v1_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/bhs1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/rbx2a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Rbx2aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Rbx2a_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/rbx2a/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/rbx2a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Rbx2aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Rbx2a_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/rbx2a/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/rbx2a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Rbx2aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v1_Rbx2a_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/rbx2a/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/rbx2a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Rbx2aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v1_Rbx2a_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/rbx2a/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/rbx2a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/rbx2a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v1_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/rbx2a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v1_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/rbx2a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/rbx2b/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Rbx2bEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Rbx2b_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/rbx2b/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/rbx2b/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Rbx2bEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Rbx2b_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/rbx2b/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/rbx2b/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Rbx2bEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v1_Rbx2b_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/rbx2b/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/rbx2b/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Rbx2bEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v1_Rbx2b_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/rbx2b/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/rbx2b/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/rbx2b/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v1_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/rbx2b/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v1_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/rbx2b/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/sbg1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Sbg1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Sbg1a_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/sbg1a/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/sbg1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Sbg1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Sbg1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/sbg1a/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/sbg1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Sbg1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v1_Sbg1a_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/sbg1a/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/sbg1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Sbg1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v1_Sbg1a_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/sbg1a/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/sbg1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/sbg1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v1_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/sbg1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v1/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v1Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v1_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v1/sbg1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/bhs1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Bhs1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Bhs1a_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/bhs1a/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/bhs1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Bhs1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Bhs1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/bhs1a/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/bhs1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Bhs1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v2_Bhs1a_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/bhs1a/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/bhs1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Bhs1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v2_Bhs1a_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/bhs1a/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/bhs1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/bhs1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v2_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/bhs1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v2_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/bhs1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/rbx2a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Rbx2aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Rbx2a_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/rbx2a/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/rbx2a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Rbx2aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Rbx2a_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/rbx2a/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/rbx2a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Rbx2aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v2_Rbx2a_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/rbx2a/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/rbx2a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Rbx2aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v2_Rbx2a_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/rbx2a/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/rbx2a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/rbx2a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v2_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/rbx2a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v2_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/rbx2a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/rbx2b/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Rbx2bEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Rbx2b_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/rbx2b/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/rbx2b/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Rbx2bEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Rbx2b_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/rbx2b/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/rbx2b/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Rbx2bEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v2_Rbx2b_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/rbx2b/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/rbx2b/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Rbx2bEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v2_Rbx2b_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/rbx2b/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/rbx2b/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/rbx2b/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v2_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/rbx2b/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v2_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/rbx2b/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/sbg1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Sbg1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Sbg1a_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/sbg1a/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/sbg1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Sbg1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Sbg1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/sbg1a/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/sbg1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Sbg1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v2_Sbg1a_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/sbg1a/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/sbg1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Sbg1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v2_Sbg1a_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/sbg1a/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/sbg1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/sbg1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v2_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/sbg1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v2/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v2Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v2_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v2/sbg1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/bhs1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Bhs1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Bhs1a_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/bhs1a/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/bhs1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Bhs1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Bhs1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/bhs1a/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/bhs1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Bhs1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v3_Bhs1a_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/bhs1a/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/bhs1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Bhs1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v3_Bhs1a_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/bhs1a/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/bhs1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/bhs1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v3_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/bhs1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v3_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/bhs1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/rbx2a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Rbx2aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Rbx2a_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/rbx2a/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/rbx2a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Rbx2aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Rbx2a_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/rbx2a/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/rbx2a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Rbx2aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v3_Rbx2a_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/rbx2a/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/rbx2a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Rbx2aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v3_Rbx2a_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/rbx2a/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/rbx2a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/rbx2a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v3_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/rbx2a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v3_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/rbx2a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/rbx2b/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Rbx2bEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Rbx2b_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/rbx2b/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/rbx2b/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Rbx2bEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Rbx2b_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/rbx2b/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/rbx2b/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Rbx2bEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v3_Rbx2b_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/rbx2b/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/rbx2b/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Rbx2bEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v3_Rbx2b_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/rbx2b/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/rbx2b/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/rbx2b/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v3_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/rbx2b/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v3_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/rbx2b/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/sbg1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Sbg1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Sbg1a_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/sbg1a/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/sbg1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Sbg1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Sbg1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/sbg1a/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/sbg1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Sbg1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v3_Sbg1a_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/sbg1a/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/sbg1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Sbg1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v3_Sbg1a_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/sbg1a/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/sbg1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/sbg1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v3_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/sbg1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v3/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v3Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v3_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v3/sbg1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/bhs1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Bhs1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Bhs1a_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/bhs1a/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/bhs1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Bhs1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Bhs1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/bhs1a/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/bhs1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Bhs1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v4_Bhs1a_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/bhs1a/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/bhs1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Bhs1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v4_Bhs1a_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/bhs1a/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/bhs1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/bhs1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v4_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/bhs1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v4_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/bhs1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/rbx2a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Rbx2aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Rbx2a_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/rbx2a/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/rbx2a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Rbx2aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Rbx2a_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/rbx2a/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/rbx2a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Rbx2aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v4_Rbx2a_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/rbx2a/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/rbx2a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Rbx2aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v4_Rbx2a_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/rbx2a/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/rbx2a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/rbx2a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v4_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/rbx2a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v4_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/rbx2a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/rbx2b/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Rbx2bEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Rbx2b_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/rbx2b/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/rbx2b/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Rbx2bEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Rbx2b_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/rbx2b/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/rbx2b/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Rbx2bEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v4_Rbx2b_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/rbx2b/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/rbx2b/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Rbx2bEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v4_Rbx2b_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/rbx2b/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/rbx2b/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/rbx2b/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v4_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/rbx2b/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v4_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/rbx2b/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/sbg1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Sbg1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Sbg1a_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/sbg1a/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/sbg1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Sbg1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Sbg1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/sbg1a/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/sbg1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Sbg1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v4_Sbg1a_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/sbg1a/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/sbg1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Sbg1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v4_Sbg1a_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/sbg1a/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/sbg1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/sbg1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v4_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/sbg1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v4/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v4Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v4_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v4/sbg1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/bhs1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Bhs1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Bhs1a_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/bhs1a/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/bhs1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Bhs1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Bhs1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/bhs1a/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/bhs1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Bhs1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v5_Bhs1a_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/bhs1a/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/bhs1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Bhs1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v5_Bhs1a_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/bhs1a/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/bhs1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/bhs1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v5_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/bhs1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v5_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/bhs1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/rbx2a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Rbx2aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Rbx2a_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/rbx2a/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/rbx2a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Rbx2aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Rbx2a_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/rbx2a/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/rbx2a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Rbx2aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v5_Rbx2a_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/rbx2a/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/rbx2a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Rbx2aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v5_Rbx2a_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/rbx2a/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/rbx2a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/rbx2a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v5_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/rbx2a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v5_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/rbx2a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/rbx2b/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Rbx2bEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Rbx2b_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/rbx2b/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/rbx2b/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Rbx2bEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Rbx2b_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/rbx2b/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/rbx2b/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Rbx2bEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v5_Rbx2b_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/rbx2b/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/rbx2b/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Rbx2bEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v5_Rbx2b_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/rbx2b/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/rbx2b/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/rbx2b/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v5_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/rbx2b/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v5_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/rbx2b/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/sbg1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Sbg1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Sbg1a_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/sbg1a/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/sbg1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Sbg1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Sbg1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/sbg1a/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/sbg1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Sbg1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v5_Sbg1a_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/sbg1a/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/sbg1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Sbg1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v5_Sbg1a_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/sbg1a/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/sbg1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/sbg1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v5_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/sbg1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v5/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v5Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v5_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v5/sbg1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/bhs1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Bhs1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Bhs1a_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/bhs1a/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/bhs1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Bhs1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Bhs1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/bhs1a/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/bhs1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Bhs1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v6_Bhs1a_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/bhs1a/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/bhs1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Bhs1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v6_Bhs1a_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/bhs1a/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/bhs1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/bhs1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v6_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/bhs1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v6_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/bhs1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/rbx2a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Rbx2aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Rbx2a_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/rbx2a/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/rbx2a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Rbx2aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Rbx2a_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/rbx2a/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/rbx2a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Rbx2aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v6_Rbx2a_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/rbx2a/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/rbx2a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Rbx2aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v6_Rbx2a_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/rbx2a/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/rbx2a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/rbx2a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v6_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/rbx2a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v6_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/rbx2a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/rbx2b/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Rbx2bEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Rbx2b_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/rbx2b/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/rbx2b/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Rbx2bEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Rbx2b_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/rbx2b/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/rbx2b/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Rbx2bEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v6_Rbx2b_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/rbx2b/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/rbx2b/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Rbx2bEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v6_Rbx2b_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/rbx2b/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/rbx2b/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/rbx2b/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v6_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/rbx2b/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v6_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/rbx2b/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/sbg1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Sbg1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Sbg1a_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/sbg1a/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/sbg1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Sbg1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Sbg1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/sbg1a/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/sbg1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Sbg1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v6_Sbg1a_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/sbg1a/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/sbg1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Sbg1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v6_Sbg1a_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/sbg1a/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/sbg1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/sbg1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v6_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/sbg1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v6/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v6Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v6_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v6/sbg1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/bhs1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Bhs1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Bhs1a_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/bhs1a/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/bhs1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Bhs1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Bhs1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/bhs1a/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/bhs1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Bhs1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v7_Bhs1a_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/bhs1a/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/bhs1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Bhs1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v7_Bhs1a_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/bhs1a/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/bhs1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/bhs1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v7_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/bhs1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v7_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/bhs1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/rbx2a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Rbx2aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Rbx2a_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/rbx2a/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/rbx2a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Rbx2aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Rbx2a_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/rbx2a/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/rbx2a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Rbx2aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v7_Rbx2a_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/rbx2a/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/rbx2a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Rbx2aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v7_Rbx2a_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/rbx2a/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/rbx2a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/rbx2a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v7_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/rbx2a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v7_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/rbx2a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/rbx2b/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Rbx2bEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Rbx2b_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/rbx2b/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/rbx2b/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Rbx2bEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Rbx2b_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/rbx2b/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/rbx2b/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Rbx2bEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v7_Rbx2b_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/rbx2b/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/rbx2b/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Rbx2bEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v7_Rbx2b_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/rbx2b/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/rbx2b/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/rbx2b/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v7_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/rbx2b/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v7_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/rbx2b/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/sbg1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Sbg1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Sbg1a_Enterprise_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/sbg1a/enterprise/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/sbg1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Sbg1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Sbg1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/sbg1a/enterprise/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/sbg1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Sbg1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v7_Sbg1a_Enterprise_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/sbg1a/enterprise/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/sbg1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Sbg1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v7_Sbg1a_Enterprise_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/sbg1a/enterprise/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/sbg1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/sbg1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v7_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/sbg1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2016v7/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2016v7Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v7_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2016v7/sbg1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/bhs1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/bhs1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v1_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/bhs1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v1_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/bhs1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/eri1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Eri1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Eri1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/eri1c/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/eri1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Eri1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Eri1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/eri1c/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/eri1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Eri1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v1_Eri1c_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/eri1c/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/eri1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Eri1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v1_Eri1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/eri1c/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/lim1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Lim1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Lim1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/lim1c/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/lim1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Lim1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Lim1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/lim1c/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/lim1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Lim1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v1_Lim1c_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/lim1c/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/lim1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Lim1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v1_Lim1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/lim1c/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/rbx2a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/rbx2a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v1_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/rbx2a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v1_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/rbx2a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/rbx2b/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/rbx2b/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v1_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/rbx2b/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v1_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/rbx2b/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/rbx2d/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Rbx2dInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Rbx2d_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/rbx2d/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/rbx2d/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Rbx2dInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Rbx2d_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/rbx2d/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/rbx2d/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Rbx2dInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v1_Rbx2d_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/rbx2d/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/rbx2d/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Rbx2dInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v1_Rbx2d_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/rbx2d/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/sbg1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/sbg1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v1_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/sbg1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v1_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/sbg1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/waw1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Waw1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Waw1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/waw1c/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/waw1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Waw1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Waw1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/waw1c/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/waw1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Waw1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v1_Waw1c_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/waw1c/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v1/waw1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v1Waw1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v1_Waw1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v1/waw1c/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/bhs1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/bhs1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v2_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/bhs1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v2_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/bhs1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/eri1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Eri1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Eri1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/eri1c/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/eri1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Eri1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Eri1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/eri1c/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/eri1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Eri1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v2_Eri1c_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/eri1c/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/eri1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Eri1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v2_Eri1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/eri1c/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/lim1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Lim1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Lim1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/lim1c/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/lim1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Lim1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Lim1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/lim1c/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/lim1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Lim1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v2_Lim1c_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/lim1c/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/lim1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Lim1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v2_Lim1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/lim1c/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/rbx2a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/rbx2a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v2_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/rbx2a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v2_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/rbx2a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/rbx2b/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/rbx2b/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v2_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/rbx2b/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v2_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/rbx2b/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/rbx2d/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Rbx2dInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Rbx2d_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/rbx2d/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/rbx2d/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Rbx2dInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Rbx2d_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/rbx2d/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/rbx2d/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Rbx2dInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v2_Rbx2d_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/rbx2d/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/rbx2d/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Rbx2dInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v2_Rbx2d_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/rbx2d/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/sbg1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/sbg1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v2_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/sbg1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v2_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/sbg1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/waw1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Waw1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Waw1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/waw1c/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/waw1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Waw1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Waw1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/waw1c/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/waw1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Waw1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v2_Waw1c_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/waw1c/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v2/waw1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v2Waw1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v2_Waw1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v2/waw1c/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/bhs1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/bhs1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v3_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/bhs1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v3_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/bhs1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/eri1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Eri1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Eri1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/eri1c/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/eri1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Eri1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Eri1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/eri1c/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/eri1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Eri1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v3_Eri1c_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/eri1c/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/eri1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Eri1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v3_Eri1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/eri1c/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/lim1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Lim1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Lim1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/lim1c/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/lim1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Lim1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Lim1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/lim1c/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/lim1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Lim1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v3_Lim1c_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/lim1c/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/lim1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Lim1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v3_Lim1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/lim1c/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/rbx2a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/rbx2a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v3_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/rbx2a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v3_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/rbx2a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/rbx2b/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/rbx2b/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v3_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/rbx2b/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v3_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/rbx2b/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/rbx2d/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Rbx2dInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Rbx2d_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/rbx2d/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/rbx2d/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Rbx2dInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Rbx2d_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/rbx2d/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/rbx2d/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Rbx2dInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v3_Rbx2d_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/rbx2d/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/rbx2d/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Rbx2dInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v3_Rbx2d_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/rbx2d/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/sbg1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/sbg1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v3_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/sbg1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v3_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/sbg1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/waw1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Waw1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Waw1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/waw1c/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/waw1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Waw1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Waw1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/waw1c/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/waw1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Waw1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v3_Waw1c_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/waw1c/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v3/waw1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v3Waw1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v3_Waw1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v3/waw1c/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/bhs1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/bhs1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v4_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/bhs1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v4_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/bhs1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/eri1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Eri1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Eri1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/eri1c/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/eri1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Eri1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Eri1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/eri1c/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/eri1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Eri1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v4_Eri1c_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/eri1c/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/eri1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Eri1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v4_Eri1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/eri1c/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/lim1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Lim1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Lim1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/lim1c/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/lim1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Lim1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Lim1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/lim1c/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/lim1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Lim1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v4_Lim1c_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/lim1c/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/lim1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Lim1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v4_Lim1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/lim1c/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/rbx2a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/rbx2a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v4_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/rbx2a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v4_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/rbx2a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/rbx2b/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/rbx2b/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v4_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/rbx2b/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v4_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/rbx2b/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/rbx2d/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Rbx2dInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Rbx2d_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/rbx2d/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/rbx2d/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Rbx2dInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Rbx2d_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/rbx2d/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/rbx2d/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Rbx2dInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v4_Rbx2d_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/rbx2d/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/rbx2d/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Rbx2dInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v4_Rbx2d_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/rbx2d/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/sbg1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/sbg1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v4_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/sbg1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v4_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/sbg1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/waw1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Waw1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Waw1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/waw1c/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/waw1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Waw1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Waw1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/waw1c/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/waw1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Waw1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v4_Waw1c_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/waw1c/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v4/waw1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v4Waw1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v4_Waw1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v4/waw1c/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/bhs1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/bhs1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v5_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/bhs1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v5_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/bhs1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/eri1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Eri1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Eri1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/eri1c/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/eri1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Eri1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Eri1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/eri1c/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/eri1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Eri1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v5_Eri1c_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/eri1c/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/eri1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Eri1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v5_Eri1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/eri1c/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/lim1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Lim1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Lim1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/lim1c/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/lim1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Lim1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Lim1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/lim1c/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/lim1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Lim1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v5_Lim1c_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/lim1c/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/lim1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Lim1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v5_Lim1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/lim1c/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/rbx2a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/rbx2a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v5_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/rbx2a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v5_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/rbx2a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/rbx2b/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/rbx2b/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v5_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/rbx2b/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v5_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/rbx2b/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/rbx2d/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Rbx2dInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Rbx2d_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/rbx2d/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/rbx2d/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Rbx2dInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Rbx2d_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/rbx2d/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/rbx2d/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Rbx2dInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v5_Rbx2d_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/rbx2d/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/rbx2d/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Rbx2dInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v5_Rbx2d_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/rbx2d/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/sbg1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/sbg1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v5_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/sbg1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v5_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/sbg1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/waw1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Waw1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Waw1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/waw1c/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/waw1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Waw1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Waw1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/waw1c/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/waw1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Waw1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v5_Waw1c_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/waw1c/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v5/waw1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v5Waw1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v5_Waw1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v5/waw1c/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/bhs1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/bhs1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v6_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/bhs1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v6_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/bhs1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/eri1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Eri1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Eri1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/eri1c/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/eri1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Eri1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Eri1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/eri1c/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/eri1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Eri1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v6_Eri1c_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/eri1c/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/eri1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Eri1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v6_Eri1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/eri1c/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/lim1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Lim1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Lim1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/lim1c/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/lim1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Lim1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Lim1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/lim1c/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/lim1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Lim1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v6_Lim1c_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/lim1c/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/lim1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Lim1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v6_Lim1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/lim1c/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/rbx2a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/rbx2a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v6_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/rbx2a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v6_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/rbx2a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/rbx2b/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/rbx2b/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v6_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/rbx2b/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v6_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/rbx2b/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/rbx2d/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Rbx2dInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Rbx2d_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/rbx2d/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/rbx2d/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Rbx2dInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Rbx2d_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/rbx2d/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/rbx2d/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Rbx2dInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v6_Rbx2d_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/rbx2d/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/rbx2d/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Rbx2dInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v6_Rbx2d_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/rbx2d/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/sbg1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/sbg1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v6_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/sbg1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v6_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/sbg1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/waw1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Waw1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Waw1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/waw1c/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/waw1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Waw1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Waw1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/waw1c/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/waw1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Waw1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v6_Waw1c_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/waw1c/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v6/waw1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v6Waw1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v6_Waw1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v6/waw1c/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/bhs1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/bhs1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v7_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/bhs1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v7_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/bhs1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/eri1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Eri1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Eri1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/eri1c/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/eri1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Eri1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Eri1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/eri1c/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/eri1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Eri1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v7_Eri1c_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/eri1c/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/eri1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Eri1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v7_Eri1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/eri1c/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/lim1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Lim1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Lim1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/lim1c/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/lim1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Lim1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Lim1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/lim1c/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/lim1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Lim1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v7_Lim1c_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/lim1c/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/lim1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Lim1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v7_Lim1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/lim1c/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/rbx2a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/rbx2a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v7_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/rbx2a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v7_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/rbx2a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/rbx2b/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/rbx2b/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v7_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/rbx2b/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v7_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/rbx2b/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/rbx2d/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Rbx2dInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Rbx2d_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/rbx2d/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/rbx2d/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Rbx2dInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Rbx2d_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/rbx2d/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/rbx2d/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Rbx2dInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v7_Rbx2d_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/rbx2d/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/rbx2d/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Rbx2dInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v7_Rbx2d_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/rbx2d/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/sbg1a/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/sbg1a/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v7_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/sbg1a/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v7_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/sbg1a/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/waw1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Waw1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Waw1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/waw1c/infrastructure/filer/hourly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/waw1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Waw1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Waw1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/waw1c/infrastructure/filer/monthly/{filerProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/waw1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Waw1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v7_Waw1c_Infrastructure_Host.HourlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/waw1c/infrastructure/host/hourly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/dedicatedCloud/2018v7/waw1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetV1PriceDedicatedCloud2018v7Waw1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v7_Waw1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            string uri = $"/v1/price/dedicatedCloud/2018v7/waw1c/infrastructure/host/monthly/{hostProfile}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/domain/zone/option/{optionName}
        public Task<_order.Price> GetV1PriceDomainZoneOptionOptionNameAsync(_price_Domain_Zone.OptionEnum optionName) {
            string uri = $"/v1/price/domain/zone/option/{optionName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/hosting/privateDatabase/{privateDatabaseName}
        public Task<_order.Price> GetV1PriceHostingPrivateDatabasePrivateDatabaseNameAsync(_price_Hosting.PrivateDatabaseEnum privateDatabaseName) {
            string uri = $"/v1/price/hosting/privateDatabase/{privateDatabaseName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/hosting/web/cdn/{cdnName}
        public Task<_order.Price> GetV1PriceHostingWebCdnCdnNameAsync(_price_Hosting_Web.CdnEnum cdnName) {
            string uri = $"/v1/price/hosting/web/cdn/{cdnName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/hosting/web/extraSqlPerso/{extraSqlPersoName}
        public Task<_order.Price> GetV1PriceHostingWebExtraSqlPersoExtraSqlPersoNameAsync(_price_Hosting_Web.ExtraSqlPersoEnum extraSqlPersoName) {
            string uri = $"/v1/price/hosting/web/extraSqlPerso/{extraSqlPersoName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/hosting/web/ssl/{sslName}
        public Task<_order.Price> GetV1PriceHostingWebSslSslNameAsync(_price_Hosting_Web.SslEnum sslName) {
            string uri = $"/v1/price/hosting/web/ssl/{sslName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/license/office/{officeName}
        public Task<_order.Price> GetV1PriceLicenseOfficeOfficeNameAsync(_price_License.OfficeEnum officeName) {
            string uri = $"/v1/price/license/office/{officeName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/overTheBox/offer/{offerName}
        public Task<_order.Price> GetV1PriceOverTheBoxOfferOfferNameAsync(_price_OverTheBox.OfferEnum offerName) {
            string uri = $"/v1/price/overTheBox/offer/{offerName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/saas/csp2/license/{licenseName}
        public Task<_order.Price> GetV1PriceSaasCsp2LicenseLicenseNameAsync(_price_Saas_Csp2.LicenseEnum licenseName) {
            string uri = $"/v1/price/saas/csp2/license/{licenseName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2013v1/classic/model/{modelName}
        public Task<_order.Price> GetV1PriceVps2013v1ClassicModelModelNameAsync(_price_Vps__2013v1_Classic.ModelEnum modelName) {
            string uri = $"/v1/price/vps/2013v1/classic/model/{modelName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2013v1/cloud/model/{modelName}
        public Task<_order.Price> GetV1PriceVps2013v1CloudModelModelNameAsync(_price_Vps__2013v1_Cloud.ModelEnum modelName) {
            string uri = $"/v1/price/vps/2013v1/cloud/model/{modelName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2013v1/cloud/option/{optionName}
        public Task<_order.Price> GetV1PriceVps2013v1CloudOptionOptionNameAsync(_price_Vps__2013v1_Cloud.OptionEnum optionName) {
            string uri = $"/v1/price/vps/2013v1/cloud/option/{optionName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2013v1/lowlat/model/{modelName}
        public Task<_order.Price> GetV1PriceVps2013v1LowlatModelModelNameAsync(_price_Vps__2013v1_Lowlat.ModelEnum modelName) {
            string uri = $"/v1/price/vps/2013v1/lowlat/model/{modelName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2014v1/classic/model/{modelName}
        public Task<_order.Price> GetV1PriceVps2014v1ClassicModelModelNameAsync(_price_Vps__2014v1_Classic.ModelEnum modelName) {
            string uri = $"/v1/price/vps/2014v1/classic/model/{modelName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2014v1/cloud/model/{modelName}
        public Task<_order.Price> GetV1PriceVps2014v1CloudModelModelNameAsync(_price_Vps__2014v1_Cloud.ModelEnum modelName) {
            string uri = $"/v1/price/vps/2014v1/cloud/model/{modelName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2014v1/cloud/option/{optionName}
        public Task<_order.Price> GetV1PriceVps2014v1CloudOptionOptionNameAsync(_price_Vps__2014v1_Cloud.OptionEnum optionName) {
            string uri = $"/v1/price/vps/2014v1/cloud/option/{optionName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2015v1/cloud/model/{modelName}
        public Task<_order.Price> GetV1PriceVps2015v1CloudModelModelNameAsync(_price_Vps__2015v1_Cloud.ModelEnum modelName) {
            string uri = $"/v1/price/vps/2015v1/cloud/model/{modelName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2015v1/cloud/option/{optionName}
        public Task<_order.Price> GetV1PriceVps2015v1CloudOptionOptionNameAsync(_price_Vps__2015v1_Cloud.OptionEnum optionName) {
            string uri = $"/v1/price/vps/2015v1/cloud/option/{optionName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2015v1/cloudram/model/{modelName}
        public Task<_order.Price> GetV1PriceVps2015v1CloudramModelModelNameAsync(_price_Vps__2015v1_Cloudram.ModelEnum modelName) {
            string uri = $"/v1/price/vps/2015v1/cloudram/model/{modelName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2015v1/cloudram/option/{optionName}
        public Task<_order.Price> GetV1PriceVps2015v1CloudramOptionOptionNameAsync(_price_Vps__2015v1_Cloudram.OptionEnum optionName) {
            string uri = $"/v1/price/vps/2015v1/cloudram/option/{optionName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2015v1/ssd/model/{modelName}
        public Task<_order.Price> GetV1PriceVps2015v1SsdModelModelNameAsync(_price_Vps__2015v1_Ssd.ModelEnum modelName) {
            string uri = $"/v1/price/vps/2015v1/ssd/model/{modelName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2015v1/ssd/option/{optionName}
        public Task<_order.Price> GetV1PriceVps2015v1SsdOptionOptionNameAsync(_price_Vps__2015v1_Ssd.OptionEnum optionName) {
            string uri = $"/v1/price/vps/2015v1/ssd/option/{optionName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2017v1/ssd/model/{modelName}
        public Task<_order.Price> GetV1PriceVps2017v1SsdModelModelNameAsync(_price_Vps__2017v1_Ssd.ModelEnum modelName) {
            string uri = $"/v1/price/vps/2017v1/ssd/model/{modelName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2017v1/ssd/option/{optionName}
        public Task<_order.Price> GetV1PriceVps2017v1SsdOptionOptionNameAsync(_price_Vps__2017v1_Ssd.OptionEnum optionName) {
            string uri = $"/v1/price/vps/2017v1/ssd/option/{optionName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2017v2/cloud/model/{modelName}
        public Task<_order.Price> GetV1PriceVps2017v2CloudModelModelNameAsync(_price_Vps__2017v2_Cloud.ModelEnum modelName) {
            string uri = $"/v1/price/vps/2017v2/cloud/model/{modelName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2017v2/cloud/option/{optionName}
        public Task<_order.Price> GetV1PriceVps2017v2CloudOptionOptionNameAsync(_price_Vps__2017v2_Cloud.OptionEnum optionName) {
            string uri = $"/v1/price/vps/2017v2/cloud/option/{optionName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2017v2/cloudram/model/{modelName}
        public Task<_order.Price> GetV1PriceVps2017v2CloudramModelModelNameAsync(_price_Vps__2017v2_Cloudram.ModelEnum modelName) {
            string uri = $"/v1/price/vps/2017v2/cloudram/model/{modelName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2017v2/cloudram/option/{optionName}
        public Task<_order.Price> GetV1PriceVps2017v2CloudramOptionOptionNameAsync(_price_Vps__2017v2_Cloudram.OptionEnum optionName) {
            string uri = $"/v1/price/vps/2017v2/cloudram/option/{optionName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2017v2/ssd/model/{modelName}
        public Task<_order.Price> GetV1PriceVps2017v2SsdModelModelNameAsync(_price_Vps__2017v2_Ssd.ModelEnum modelName) {
            string uri = $"/v1/price/vps/2017v2/ssd/model/{modelName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2017v2/ssd/option/{optionName}
        public Task<_order.Price> GetV1PriceVps2017v2SsdOptionOptionNameAsync(_price_Vps__2017v2_Ssd.OptionEnum optionName) {
            string uri = $"/v1/price/vps/2017v2/ssd/option/{optionName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2017v3/cloud/model/{modelName}
        public Task<_order.Price> GetV1PriceVps2017v3CloudModelModelNameAsync(_price_Vps__2017v3_Cloud.ModelEnum modelName) {
            string uri = $"/v1/price/vps/2017v3/cloud/model/{modelName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2017v3/cloud/option/{optionName}
        public Task<_order.Price> GetV1PriceVps2017v3CloudOptionOptionNameAsync(_price_Vps__2017v3_Cloud.OptionEnum optionName) {
            string uri = $"/v1/price/vps/2017v3/cloud/option/{optionName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2017v3/cloudram/model/{modelName}
        public Task<_order.Price> GetV1PriceVps2017v3CloudramModelModelNameAsync(_price_Vps__2017v3_Cloudram.ModelEnum modelName) {
            string uri = $"/v1/price/vps/2017v3/cloudram/model/{modelName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2017v3/cloudram/option/{optionName}
        public Task<_order.Price> GetV1PriceVps2017v3CloudramOptionOptionNameAsync(_price_Vps__2017v3_Cloudram.OptionEnum optionName) {
            string uri = $"/v1/price/vps/2017v3/cloudram/option/{optionName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2017v3/ssd/model/{modelName}
        public Task<_order.Price> GetV1PriceVps2017v3SsdModelModelNameAsync(_price_Vps__2017v3_Ssd.ModelEnum modelName) {
            string uri = $"/v1/price/vps/2017v3/ssd/model/{modelName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2017v3/ssd/option/{optionName}
        public Task<_order.Price> GetV1PriceVps2017v3SsdOptionOptionNameAsync(_price_Vps__2017v3_Ssd.OptionEnum optionName) {
            string uri = $"/v1/price/vps/2017v3/ssd/option/{optionName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2018v1/cloud/model/{modelName}
        public Task<_order.Price> GetV1PriceVps2018v1CloudModelModelNameAsync(_price_Vps__2018v1_Cloud.ModelEnum modelName) {
            string uri = $"/v1/price/vps/2018v1/cloud/model/{modelName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2018v1/cloud/option/{optionName}
        public Task<_order.Price> GetV1PriceVps2018v1CloudOptionOptionNameAsync(_price_Vps__2018v1_Cloud.OptionEnum optionName) {
            string uri = $"/v1/price/vps/2018v1/cloud/option/{optionName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2018v1/cloudram/model/{modelName}
        public Task<_order.Price> GetV1PriceVps2018v1CloudramModelModelNameAsync(_price_Vps__2018v1_Cloudram.ModelEnum modelName) {
            string uri = $"/v1/price/vps/2018v1/cloudram/model/{modelName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2018v1/cloudram/option/{optionName}
        public Task<_order.Price> GetV1PriceVps2018v1CloudramOptionOptionNameAsync(_price_Vps__2018v1_Cloudram.OptionEnum optionName) {
            string uri = $"/v1/price/vps/2018v1/cloudram/option/{optionName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2018v1/ssd/model/{modelName}
        public Task<_order.Price> GetV1PriceVps2018v1SsdModelModelNameAsync(_price_Vps__2018v1_Ssd.ModelEnum modelName) {
            string uri = $"/v1/price/vps/2018v1/ssd/model/{modelName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2018v1/ssd/option/{optionName}
        public Task<_order.Price> GetV1PriceVps2018v1SsdOptionOptionNameAsync(_price_Vps__2018v1_Ssd.OptionEnum optionName) {
            string uri = $"/v1/price/vps/2018v1/ssd/option/{optionName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2018v2/ssd/model/{modelName}
        public Task<_order.Price> GetV1PriceVps2018v2SsdModelModelNameAsync(_price_Vps__2018v2_Ssd.ModelEnum modelName) {
            string uri = $"/v1/price/vps/2018v2/ssd/model/{modelName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/2018v2/ssd/option/{optionName}
        public Task<_order.Price> GetV1PriceVps2018v2SsdOptionOptionNameAsync(_price_Vps__2018v2_Ssd.OptionEnum optionName) {
            string uri = $"/v1/price/vps/2018v2/ssd/option/{optionName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/classic/model/{modelName}
        public Task<_order.Price> GetV1PriceVpsClassicModelModelNameAsync(_price_Vps_Classic.ModelEnum modelName) {
            string uri = $"/v1/price/vps/classic/model/{modelName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/cloud/model/{modelName}
        public Task<_order.Price> GetV1PriceVpsCloudModelModelNameAsync(_price_Vps_Cloud.ModelEnum modelName) {
            string uri = $"/v1/price/vps/cloud/model/{modelName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/cloud/option/{optionName}
        public Task<_order.Price> GetV1PriceVpsCloudOptionOptionNameAsync(_price_Vps_Cloud.OptionEnum optionName) {
            string uri = $"/v1/price/vps/cloud/option/{optionName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/vps/lowlat/model/{modelName}
        public Task<_order.Price> GetV1PriceVpsLowlatModelModelNameAsync(_price_Vps_Lowlat.ModelEnum modelName) {
            string uri = $"/v1/price/vps/lowlat/model/{modelName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/xdsl/addressMove/fee/{option}
        public Task<_order.Price> GetV1PriceXdslAddressMoveFeeOptionAsync(_price_Xdsl_AddressMove.FeeEnum option) {
            string uri = $"/v1/price/xdsl/addressMove/fee/{option}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/xdsl/installation/{offer}
        public Task<_order.Price> GetV1PriceXdslInstallationOfferAsync(_price_Xdsl.InstallationEnum offer) {
            string uri = $"/v1/price/xdsl/installation/{offer}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/xdsl/offers/{offersName}
        public Task<_order.Price> GetV1PriceXdslOffersOffersNameAsync(_price_Xdsl.OffersEnum offersName) {
            string uri = $"/v1/price/xdsl/offers/{offersName}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/xdsl/options/installation/{option}
        public Task<_order.Price> GetV1PriceXdslOptionsInstallationOptionAsync(_price_Xdsl_Options.InstallationEnum option) {
            string uri = $"/v1/price/xdsl/options/installation/{option}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/xdsl/options/ipv4/{ipRange}
        public Task<_order.Price> GetV1PriceXdslOptionsIpv4IpRangeAsync(_price_Xdsl_Options.Ipv4Enum ipRange) {
            string uri = $"/v1/price/xdsl/options/ipv4/{ipRange}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/price/xdsl/options/line/{lineAction}
        public Task<_order.Price> GetV1PriceXdslOptionsLineLineActionAsync(_price_Xdsl_Options.LineEnum lineAction) {
            string uri = $"/v1/price/xdsl/options/line/{lineAction}";
            return this.SendAsync<_order.Price>("GET", uri, null, null, true);
        }
        
        // Path: /v1/saas/csp2
        public Task<System.String[]> GetV1SaasCsp2Async([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/saas/csp2{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/saas/csp2/{serviceName}
        public Task<_saas_csp2.OfficeTenantWithIAM> GetV1SaasCsp2ServiceNameAsync(string serviceName) {
            string uri = $"/v1/saas/csp2/{serviceName}";
            return this.SendAsync<_saas_csp2.OfficeTenantWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/saas/csp2/{serviceName}
        public Task PutV1SaasCsp2ServiceNameAsync(_saas_csp2.OfficeTenant _body, string serviceName) {
            string uri = $"/v1/saas/csp2/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/saas/csp2/{serviceName}/billingPeriodPeaks
        public Task<_saas_csp2.BillingStatistics> GetV1SaasCsp2ServiceNameBillingPeriodPeaksAsync(string serviceName) {
            string uri = $"/v1/saas/csp2/{serviceName}/billingPeriodPeaks";
            return this.SendAsync<_saas_csp2.BillingStatistics>("GET", uri, null, null, true);
        }
        
        // Path: /v1/saas/csp2/{serviceName}/orderableLicenses
        public Task<System.Int64[]> GetV1SaasCsp2ServiceNameOrderableLicensesAsync(string serviceName) {
            string uri = $"/v1/saas/csp2/{serviceName}/orderableLicenses";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/saas/csp2/{serviceName}/orderableLicenses/{id}
        public Task<_saas_csp2.OfficeLicence> GetV1SaasCsp2ServiceNameOrderableLicensesIdAsync(string serviceName, long id) {
            string uri = $"/v1/saas/csp2/{serviceName}/orderableLicenses/{id}";
            return this.SendAsync<_saas_csp2.OfficeLicence>("GET", uri, null, null, true);
        }
        
        // Path: /v1/saas/csp2/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1SaasCsp2ServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/saas/csp2/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/saas/csp2/{serviceName}/serviceInfos
        public Task PutV1SaasCsp2ServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/saas/csp2/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/saas/csp2/{serviceName}/subscription
        public Task<System.Int64[]> GetV1SaasCsp2ServiceNameSubscriptionAsync(string serviceName) {
            string uri = $"/v1/saas/csp2/{serviceName}/subscription";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/saas/csp2/{serviceName}/subscription
        public Task<_saas_csp2.OfficeTask> PostV1SaasCsp2ServiceNameSubscriptionAsync(string serviceName, _saas_csp2.SubscriptionCreation _body) {
            string uri = $"/v1/saas/csp2/{serviceName}/subscription";
            return this.SendAsync<_saas_csp2.OfficeTask>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/saas/csp2/{serviceName}/subscription/{id}
        public Task<_saas_csp2.OfficeTask> DeleteV1SaasCsp2ServiceNameSubscriptionIdAsync(string serviceName, long id) {
            string uri = $"/v1/saas/csp2/{serviceName}/subscription/{id}";
            return this.SendAsync<_saas_csp2.OfficeTask>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/saas/csp2/{serviceName}/subscription/{id}
        public Task<_saas_csp2.OfficeSubscription> GetV1SaasCsp2ServiceNameSubscriptionIdAsync(string serviceName, long id) {
            string uri = $"/v1/saas/csp2/{serviceName}/subscription/{id}";
            return this.SendAsync<_saas_csp2.OfficeSubscription>("GET", uri, null, null, true);
        }
        
        // Path: /v1/saas/csp2/{serviceName}/subscription/{id}/addonsSubscriptionIds
        public Task<System.Int64[]> GetV1SaasCsp2ServiceNameSubscriptionIdAddonsSubscriptionIdsAsync(string serviceName, long id) {
            string uri = $"/v1/saas/csp2/{serviceName}/subscription/{id}/addonsSubscriptionIds";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/saas/csp2/{serviceName}/subscription/{id}/availableAddonLicenses
        public Task<System.Int64[]> GetV1SaasCsp2ServiceNameSubscriptionIdAvailableAddonLicensesAsync(string serviceName, long id) {
            string uri = $"/v1/saas/csp2/{serviceName}/subscription/{id}/availableAddonLicenses";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/saas/csp2/{serviceName}/subscription/{id}/changeQuantity
        public Task<_saas_csp2.OfficeTask> PostV1SaasCsp2ServiceNameSubscriptionIdChangeQuantityAsync(string serviceName, _saas_csp2.SubscriptionChangeQuantityCreation _body, long id) {
            string uri = $"/v1/saas/csp2/{serviceName}/subscription/{id}/changeQuantity";
            return this.SendAsync<_saas_csp2.OfficeTask>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/saas/csp2/{serviceName}/subscription/{id}/orderAddon
        public Task<_saas_csp2.OfficeTask> PostV1SaasCsp2ServiceNameSubscriptionIdOrderAddonAsync(string serviceName, _saas_csp2.SubscriptionOrderAddonCreation _body, long id) {
            string uri = $"/v1/saas/csp2/{serviceName}/subscription/{id}/orderAddon";
            return this.SendAsync<_saas_csp2.OfficeTask>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/saas/csp2/{serviceName}/task
        public Task<System.Int64[]> GetV1SaasCsp2ServiceNameTaskAsync(string serviceName) {
            string uri = $"/v1/saas/csp2/{serviceName}/task";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/saas/csp2/{serviceName}/task/{id}
        public Task<_saas_csp2.OfficeTask> GetV1SaasCsp2ServiceNameTaskIdAsync(string serviceName, long id) {
            string uri = $"/v1/saas/csp2/{serviceName}/task/{id}";
            return this.SendAsync<_saas_csp2.OfficeTask>("GET", uri, null, null, true);
        }
        
        // Path: /v1/saas/csp2/{serviceName}/usageStatistics
        public Task<_saas_csp2.Statistics[]> GetV1SaasCsp2ServiceNameUsageStatisticsAsync(string serviceName, _msServices.LicensePeriodEnum timePeriod) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("timePeriod", timePeriod);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/saas/csp2/{serviceName}/usageStatistics{queryParameters}";
            return this.SendAsync<_saas_csp2.Statistics[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/secret/retrieve
        public Task<_secret.Secret> PostV1SecretRetrieveAsync(string id) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("id", id);
            string uri = $"/v1/secret/retrieve";
            return this.SendAsync<_secret.Secret>("POST", uri, null, _body, false);
        }
        
        // Path: /v1/service
        public Task<System.Int64[]> GetV1ServiceAsync() {
            string uri = $"/v1/service";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/service/{serviceId}
        public Task<_serviceList.Service> GetV1ServiceServiceIdAsync(long serviceId) {
            string uri = $"/v1/service/{serviceId}";
            return this.SendAsync<_serviceList.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/service/{serviceId}
        public Task PutV1ServiceServiceIdAsync(_serviceList.Service _body, long serviceId) {
            string uri = $"/v1/service/{serviceId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/service/{serviceId}/renew
        public Task<_service_renew.RenewDescription[]> GetV1ServiceServiceIdRenewAsync(string serviceId, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? includeOptions) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("includeOptions", includeOptions);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/service/{serviceId}/renew{queryParameters}";
            return this.SendAsync<_service_renew.RenewDescription[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/service/{serviceId}/renew
        public Task<_service_renew.RenewOrder> PostV1ServiceServiceIdRenewAsync(string duration, string serviceId, long[] services, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? dryRun) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("dryRun", dryRun);
            _body.Add("duration", duration);
            _body.Add("services", services);
            string uri = $"/v1/service/{serviceId}/renew";
            return this.SendAsync<_service_renew.RenewOrder>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/service/{serviceId}/reopen
        public Task PostV1ServiceServiceIdReopenAsync(long serviceId) {
            string uri = $"/v1/service/{serviceId}/reopen";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/service/{serviceId}/suspend
        public Task PostV1ServiceServiceIdSuspendAsync(long serviceId) {
            string uri = $"/v1/service/{serviceId}/suspend";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/service/{serviceId}/terminate
        public Task PostV1ServiceServiceIdTerminateAsync(long serviceId) {
            string uri = $"/v1/service/{serviceId}/terminate";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/services
        public Task<System.Int64[]> GetV1ServicesAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? orderBy, [System.Runtime.InteropServices.OptionalAttribute()] System.String? resourceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? routes, [System.Runtime.InteropServices.OptionalAttribute()] System.String? sort) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("orderBy", orderBy);
            queryParametersTemp.Add("resourceName", resourceName);
            queryParametersTemp.Add("routes", routes);
            queryParametersTemp.Add("sort", sort);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/services{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/services/{serviceId}
        public Task<_services_expanded.Service> GetV1ServicesServiceIdAsync(long serviceId) {
            string uri = $"/v1/services/{serviceId}";
            return this.SendAsync<_services_expanded.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/services/{serviceId}
        public Task PutV1ServicesServiceIdAsync(_services_update.Service _body, long serviceId) {
            string uri = $"/v1/services/{serviceId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/services/{serviceId}/billing/engagement
        public Task<_services_billing_engagement.Engagement> GetV1ServicesServiceIdBillingEngagementAsync(long serviceId) {
            string uri = $"/v1/services/{serviceId}/billing/engagement";
            return this.SendAsync<_services_billing_engagement.Engagement>("GET", uri, null, null, true);
        }
        
        // Path: /v1/services/{serviceId}/billing/engagement/available
        public Task<_services_billing.Pricing[]> GetV1ServicesServiceIdBillingEngagementAvailableAsync(long serviceId) {
            string uri = $"/v1/services/{serviceId}/billing/engagement/available";
            return this.SendAsync<_services_billing.Pricing[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/services/{serviceId}/billing/engagement/endRule
        public Task PutV1ServicesServiceIdBillingEngagementEndRuleAsync(_services_billing_engagement.UpdateEndRuleRequest _body, long serviceId) {
            string uri = $"/v1/services/{serviceId}/billing/engagement/endRule";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/services/{serviceId}/billing/engagement/flush
        public Task<_services_billing_engagement.EngagementFlushOrder> PostV1ServicesServiceIdBillingEngagementFlushAsync(_services_billing_engagement.EngagementFlushRequest _body, long serviceId) {
            string uri = $"/v1/services/{serviceId}/billing/engagement/flush";
            return this.SendAsync<_services_billing_engagement.EngagementFlushOrder>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/services/{serviceId}/billing/engagement/request
        public Task DeleteV1ServicesServiceIdBillingEngagementRequestAsync(long serviceId) {
            string uri = $"/v1/services/{serviceId}/billing/engagement/request";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/services/{serviceId}/billing/engagement/request
        public Task<_services_billing_engagement.EngagementRequest> GetV1ServicesServiceIdBillingEngagementRequestAsync(long serviceId) {
            string uri = $"/v1/services/{serviceId}/billing/engagement/request";
            return this.SendAsync<_services_billing_engagement.EngagementRequest>("GET", uri, null, null, true);
        }
        
        // Path: /v1/services/{serviceId}/billing/engagement/request
        public Task<_services_billing_engagement.EngagementRequest> PostV1ServicesServiceIdBillingEngagementRequestAsync(_services_billing_engagement.EngagementRequestCreation _body, long serviceId) {
            string uri = $"/v1/services/{serviceId}/billing/engagement/request";
            return this.SendAsync<_services_billing_engagement.EngagementRequest>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/services/{serviceId}/consumption
        public Task<_services_consumption.Summary> GetV1ServicesServiceIdConsumptionAsync(long serviceId) {
            string uri = $"/v1/services/{serviceId}/consumption";
            return this.SendAsync<_services_consumption.Summary>("GET", uri, null, null, true);
        }
        
        // Path: /v1/services/{serviceId}/consumption/element
        public Task<_services_consumption.Element[]> GetV1ServicesServiceIdConsumptionElementAsync(long serviceId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? planFamily, [System.Runtime.InteropServices.OptionalAttribute()] System.String? uniqueId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planFamily", planFamily);
            queryParametersTemp.Add("uniqueId", uniqueId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/services/{serviceId}/consumption/element{queryParameters}";
            return this.SendAsync<_services_consumption.Element[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/services/{serviceId}/consumption/forecast
        public Task<_services_consumption.Summary> GetV1ServicesServiceIdConsumptionForecastAsync(long serviceId) {
            string uri = $"/v1/services/{serviceId}/consumption/forecast";
            return this.SendAsync<_services_consumption.Summary>("GET", uri, null, null, true);
        }
        
        // Path: /v1/services/{serviceId}/consumption/forecast/element
        public Task<_services_consumption.Element[]> GetV1ServicesServiceIdConsumptionForecastElementAsync(long serviceId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? planFamily, [System.Runtime.InteropServices.OptionalAttribute()] System.String? uniqueId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planFamily", planFamily);
            queryParametersTemp.Add("uniqueId", uniqueId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/services/{serviceId}/consumption/forecast/element{queryParameters}";
            return this.SendAsync<_services_consumption.Element[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/services/{serviceId}/consumption/history
        public Task<System.Int64[]> GetV1ServicesServiceIdConsumptionHistoryAsync(long serviceId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? planFamily, [System.Runtime.InteropServices.OptionalAttribute()] System.String? uniqueId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planFamily", planFamily);
            queryParametersTemp.Add("uniqueId", uniqueId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/services/{serviceId}/consumption/history{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/services/{serviceId}/consumption/history/{id}
        public Task<_services_consumption.Summary> GetV1ServicesServiceIdConsumptionHistoryIdAsync(long id, long serviceId) {
            string uri = $"/v1/services/{serviceId}/consumption/history/{id}";
            return this.SendAsync<_services_consumption.Summary>("GET", uri, null, null, true);
        }
        
        // Path: /v1/services/{serviceId}/consumption/history/{id}/element
        public Task<_services_consumption.Element[]> GetV1ServicesServiceIdConsumptionHistoryIdElementAsync(long id, long serviceId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? planFamily, [System.Runtime.InteropServices.OptionalAttribute()] System.String? uniqueId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planFamily", planFamily);
            queryParametersTemp.Add("uniqueId", uniqueId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/services/{serviceId}/consumption/history/{id}/element{queryParameters}";
            return this.SendAsync<_services_consumption.Element[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/services/{serviceId}/detach
        public Task<_order_cart.GenericProductDefinition[]> GetV1ServicesServiceIdDetachAsync(long serviceId) {
            string uri = $"/v1/services/{serviceId}/detach";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/services/{serviceId}/detach/{planCode}
        public Task<_order_cart.GenericProductDefinition> GetV1ServicesServiceIdDetachPlanCodeAsync(string planCode, long serviceId) {
            string uri = $"/v1/services/{serviceId}/detach/{planCode}";
            return this.SendAsync<_order_cart.GenericProductDefinition>("GET", uri, null, null, true);
        }
        
        // Path: /v1/services/{serviceId}/detach/{planCode}/execute
        public Task<_services_operation.Order> PostV1ServicesServiceIdDetachPlanCodeExecuteAsync(_services_operation.DetachExecutionRequest _body, string planCode, long serviceId) {
            string uri = $"/v1/services/{serviceId}/detach/{planCode}/execute";
            return this.SendAsync<_services_operation.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/services/{serviceId}/detach/{planCode}/options
        public Task<_services_operation.DetachOptionsDefinition[]> GetV1ServicesServiceIdDetachPlanCodeOptionsAsync(string planCode, long serviceId) {
            string uri = $"/v1/services/{serviceId}/detach/{planCode}/options";
            return this.SendAsync<_services_operation.DetachOptionsDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/services/{serviceId}/detach/{planCode}/simulate
        public Task<_services_operation.Order> PostV1ServicesServiceIdDetachPlanCodeSimulateAsync(_services_operation.DetachExecutionRequest _body, string planCode, long serviceId) {
            string uri = $"/v1/services/{serviceId}/detach/{planCode}/simulate";
            return this.SendAsync<_services_operation.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/services/{serviceId}/form
        public Task<_services_form.Description[]> GetV1ServicesServiceIdFormAsync(long serviceId) {
            string uri = $"/v1/services/{serviceId}/form";
            return this.SendAsync<_services_form.Description[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/services/{serviceId}/form/{formName}
        public Task<_services_form.Description> GetV1ServicesServiceIdFormFormNameAsync(string formName, long serviceId) {
            string uri = $"/v1/services/{serviceId}/form/{formName}";
            return this.SendAsync<_services_form.Description>("GET", uri, null, null, true);
        }
        
        // Path: /v1/services/{serviceId}/form/{formName}/answer
        public Task<_services_form.Response> PostV1ServicesServiceIdFormFormNameAnswerAsync(_services_form.Form _body, string formName, long serviceId) {
            string uri = $"/v1/services/{serviceId}/form/{formName}/answer";
            return this.SendAsync<_services_form.Response>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/services/{serviceId}/options
        public Task<_services_expanded.Service[]> GetV1ServicesServiceIdOptionsAsync(long serviceId) {
            string uri = $"/v1/services/{serviceId}/options";
            return this.SendAsync<_services_expanded.Service[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/services/{serviceId}/renewPeriodCapacities
        public Task<System.TimeSpan[]> GetV1ServicesServiceIdRenewPeriodCapacitiesAsync(long serviceId) {
            string uri = $"/v1/services/{serviceId}/renewPeriodCapacities";
            return this.SendAsync<System.TimeSpan[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/services/{serviceId}/savingsPlans/contracts
        public Task<_order.Contract[]> GetV1ServicesServiceIdSavingsPlansContractsAsync(long serviceId) {
            string uri = $"/v1/services/{serviceId}/savingsPlans/contracts";
            return this.SendAsync<_order.Contract[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/services/{serviceId}/savingsPlans/subscribable
        public Task<_services_savingsPlans.SubscribableSavingsPlanOffer[]> GetV1ServicesServiceIdSavingsPlansSubscribableAsync(long serviceId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? productCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("productCode", productCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/services/{serviceId}/savingsPlans/subscribable{queryParameters}";
            return this.SendAsync<_services_savingsPlans.SubscribableSavingsPlanOffer[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/services/{serviceId}/savingsPlans/subscribe/execute
        public Task<_services_savingsPlans.SavingsPlan> PostV1ServicesServiceIdSavingsPlansSubscribeExecuteAsync(_services_savingsPlans.Subscribe _body, long serviceId) {
            string uri = $"/v1/services/{serviceId}/savingsPlans/subscribe/execute";
            return this.SendAsync<_services_savingsPlans.SavingsPlan>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/services/{serviceId}/savingsPlans/subscribe/simulate
        public Task<_services_savingsPlans.SimulatedSavingsPlan> PostV1ServicesServiceIdSavingsPlansSubscribeSimulateAsync(_services_savingsPlans.Subscribe _body, long serviceId) {
            string uri = $"/v1/services/{serviceId}/savingsPlans/subscribe/simulate";
            return this.SendAsync<_services_savingsPlans.SimulatedSavingsPlan>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/services/{serviceId}/savingsPlans/subscribed
        public Task<_services_savingsPlans.SavingsPlan[]> GetV1ServicesServiceIdSavingsPlansSubscribedAsync(long serviceId) {
            string uri = $"/v1/services/{serviceId}/savingsPlans/subscribed";
            return this.SendAsync<_services_savingsPlans.SavingsPlan[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/services/{serviceId}/savingsPlans/subscribed/{savingsPlanId}
        public Task<_services_savingsPlans.SavingsPlan> GetV1ServicesServiceIdSavingsPlansSubscribedSavingsPlanIdAsync(System.Guid savingsPlanId, long serviceId) {
            string uri = $"/v1/services/{serviceId}/savingsPlans/subscribed/{savingsPlanId}";
            return this.SendAsync<_services_savingsPlans.SavingsPlan>("GET", uri, null, null, true);
        }
        
        // Path: /v1/services/{serviceId}/savingsPlans/subscribed/{savingsPlanId}
        public Task<_services_savingsPlans.SavingsPlan> PutV1ServicesServiceIdSavingsPlansSubscribedSavingsPlanIdAsync(_services_savingsPlans.SavingsPlan _body, System.Guid savingsPlanId, long serviceId) {
            string uri = $"/v1/services/{serviceId}/savingsPlans/subscribed/{savingsPlanId}";
            return this.SendAsync<_services_savingsPlans.SavingsPlan>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/services/{serviceId}/savingsPlans/subscribed/{savingsPlanId}/changePeriodEndAction
        public Task<_services_savingsPlans.SavingsPlan> PostV1ServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangePeriodEndActionAsync(_services_savingsPlans.ChangePeriodEndAction _body, System.Guid savingsPlanId, long serviceId) {
            string uri = $"/v1/services/{serviceId}/savingsPlans/subscribed/{savingsPlanId}/changePeriodEndAction";
            return this.SendAsync<_services_savingsPlans.SavingsPlan>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/services/{serviceId}/savingsPlans/subscribed/{savingsPlanId}/changeSize
        public Task<_services_savingsPlans.SavingsPlan> PostV1ServicesServiceIdSavingsPlansSubscribedSavingsPlanIdChangeSizeAsync(_services_savingsPlans.ChangeSize _body, System.Guid savingsPlanId, long serviceId) {
            string uri = $"/v1/services/{serviceId}/savingsPlans/subscribed/{savingsPlanId}/changeSize";
            return this.SendAsync<_services_savingsPlans.SavingsPlan>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/services/{serviceId}/savingsPlans/subscribed/{savingsPlanId}/periods
        public Task<_services_savingsPlans_SavingsPlan.Period[]> GetV1ServicesServiceIdSavingsPlansSubscribedSavingsPlanIdPeriodsAsync(System.Guid savingsPlanId, long serviceId) {
            string uri = $"/v1/services/{serviceId}/savingsPlans/subscribed/{savingsPlanId}/periods";
            return this.SendAsync<_services_savingsPlans_SavingsPlan.Period[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/services/{serviceId}/technicalDetails
        public Task<_services_expanded.TechnicalDetails> GetV1ServicesServiceIdTechnicalDetailsAsync(long serviceId) {
            string uri = $"/v1/services/{serviceId}/technicalDetails";
            return this.SendAsync<_services_expanded.TechnicalDetails>("GET", uri, null, null, true);
        }
        
        // Path: /v1/services/{serviceId}/terminate
        public Task<_services_terminate.TerminationAnswer> PostV1ServicesServiceIdTerminateAsync(long serviceId) {
            string uri = $"/v1/services/{serviceId}/terminate";
            return this.SendAsync<_services_terminate.TerminationAnswer>("POST", uri, null, null, true);
        }
        
        // Path: /v1/services/{serviceId}/terminate/confirm
        public Task<_services_terminate.TerminationAnswer> PostV1ServicesServiceIdTerminateConfirmAsync(_services_terminate.ConfirmServiceTerminationRequest _body, long serviceId) {
            string uri = $"/v1/services/{serviceId}/terminate/confirm";
            return this.SendAsync<_services_terminate.TerminationAnswer>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/services/{serviceId}/upgrade
        public Task<_order_cart.GenericProductDefinition[]> GetV1ServicesServiceIdUpgradeAsync(long serviceId) {
            string uri = $"/v1/services/{serviceId}/upgrade";
            return this.SendAsync<_order_cart.GenericProductDefinition[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/services/{serviceId}/upgrade/{planCode}
        public Task<_order_cart.GenericProductDefinition> GetV1ServicesServiceIdUpgradePlanCodeAsync(string planCode, long serviceId) {
            string uri = $"/v1/services/{serviceId}/upgrade/{planCode}";
            return this.SendAsync<_order_cart.GenericProductDefinition>("GET", uri, null, null, true);
        }
        
        // Path: /v1/services/{serviceId}/upgrade/{planCode}/execute
        public Task<_services_operation.Order> PostV1ServicesServiceIdUpgradePlanCodeExecuteAsync(_services_operation.ExecutionRequest _body, string planCode, long serviceId) {
            string uri = $"/v1/services/{serviceId}/upgrade/{planCode}/execute";
            return this.SendAsync<_services_operation.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/services/{serviceId}/upgrade/{planCode}/simulate
        public Task<_services_operation.Order> PostV1ServicesServiceIdUpgradePlanCodeSimulateAsync(_services_operation.ExecutionRequest _body, string planCode, long serviceId) {
            string uri = $"/v1/services/{serviceId}/upgrade/{planCode}/simulate";
            return this.SendAsync<_services_operation.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/sms
        public Task<System.String[]> GetV1SmsAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/sms{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/estimate
        public Task<_sms.JobEstimate> PostV1SmsEstimateAsync(string message, bool noStopClause, _sms.TypeSenderEnum senderType) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("message", message);
            _body.Add("noStopClause", noStopClause);
            _body.Add("senderType", senderType);
            string uri = $"/v1/sms/estimate";
            return this.SendAsync<_sms.JobEstimate>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/sms/ptts
        public Task<_sms.PttDetails> GetV1SmsPttsAsync(long ptt) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("ptt", ptt);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/sms/ptts{queryParameters}";
            return this.SendAsync<_sms.PttDetails>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/rates/destinations
        public Task<_sms.DestinationRates> GetV1SmsRatesDestinationsAsync(_sms.CountryEnum country, [System.Runtime.InteropServices.OptionalAttribute()] _sms.BillingCountryEnum? billingCountry) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("billingCountry", billingCountry);
            queryParametersTemp.Add("country", country);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/sms/rates/destinations{queryParameters}";
            return this.SendAsync<_sms.DestinationRates>("GET", uri, null, null, false);
        }
        
        // Path: /v1/sms/rates/packs
        public Task<_sms.PackDetails[]> GetV1SmsRatesPacksAsync(_sms.CountryEnum country, [System.Runtime.InteropServices.OptionalAttribute()] _sms.BillingCountryEnum? billingCountry) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("billingCountry", billingCountry);
            queryParametersTemp.Add("country", country);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/sms/rates/packs{queryParameters}";
            return this.SendAsync<_sms.PackDetails[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/sms/virtualNumbers
        public Task<System.String[]> GetV1SmsVirtualNumbersAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/sms/virtualNumbers{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/virtualNumbers/{number}
        public Task<_sms.VirtualNumberGenericServiceWithIAM> GetV1SmsVirtualNumbersNumberAsync(string number) {
            string uri = $"/v1/sms/virtualNumbers/{number}";
            return this.SendAsync<_sms.VirtualNumberGenericServiceWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/virtualNumbers/{number}/serviceInfos
        public Task<_services.Service> GetV1SmsVirtualNumbersNumberServiceInfosAsync(string number) {
            string uri = $"/v1/sms/virtualNumbers/{number}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/virtualNumbers/{number}/serviceInfos
        public Task PutV1SmsVirtualNumbersNumberServiceInfosAsync(_services.Service _body, string number) {
            string uri = $"/v1/sms/virtualNumbers/{number}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}
        public Task<_sms.AccountWithIAM> GetV1SmsServiceNameAsync(string serviceName) {
            string uri = $"/v1/sms/{serviceName}";
            return this.SendAsync<_sms.AccountWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}
        public Task PutV1SmsServiceNameAsync(_sms.Account _body, string serviceName) {
            string uri = $"/v1/sms/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/batches
        public Task<_sms.Batch[]> GetV1SmsServiceNameBatchesAsync(string serviceName) {
            string uri = $"/v1/sms/{serviceName}/batches";
            return this.SendAsync<_sms.Batch[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/batches
        public Task<_sms.Batch> PostV1SmsServiceNameBatchesAsync(string serviceName, _sms.BatchParams _body) {
            string uri = $"/v1/sms/{serviceName}/batches";
            return this.SendAsync<_sms.Batch>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/batches/{id}
        public Task DeleteV1SmsServiceNameBatchesIdAsync(string serviceName, System.Guid id) {
            string uri = $"/v1/sms/{serviceName}/batches/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/batches/{id}
        public Task<_sms.Batch> GetV1SmsServiceNameBatchesIdAsync(string serviceName, System.Guid id) {
            string uri = $"/v1/sms/{serviceName}/batches/{id}";
            return this.SendAsync<_sms.Batch>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/batches/{id}
        public Task<_sms.Batch> PutV1SmsServiceNameBatchesIdAsync(string serviceName, _sms.BatchUpdateParams _body, System.Guid id) {
            string uri = $"/v1/sms/{serviceName}/batches/{id}";
            return this.SendAsync<_sms.Batch>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/batches/{id}/cancel
        public Task<_sms.Batch> PostV1SmsServiceNameBatchesIdCancelAsync(string serviceName, System.Guid id) {
            string uri = $"/v1/sms/{serviceName}/batches/{id}/cancel";
            return this.SendAsync<_sms.Batch>("POST", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/batches/{id}/statistics
        public Task<_sms.BatchStatistics> GetV1SmsServiceNameBatchesIdStatisticsAsync(string serviceName, System.Guid id) {
            string uri = $"/v1/sms/{serviceName}/batches/{id}/statistics";
            return this.SendAsync<_sms.BatchStatistics>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/blacklists
        public Task<System.String[]> GetV1SmsServiceNameBlacklistsAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Guid? batchID, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? smsOutgoingID) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("batchID", batchID);
            queryParametersTemp.Add("smsOutgoingID", smsOutgoingID);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/sms/{serviceName}/blacklists{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/blacklists/{number}
        public Task DeleteV1SmsServiceNameBlacklistsNumberAsync(string number, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/blacklists/{number}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/blacklists/{number}
        public Task<_sms.Blacklist> GetV1SmsServiceNameBlacklistsNumberAsync(string number, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/blacklists/{number}";
            return this.SendAsync<_sms.Blacklist>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/document
        public Task<System.String> GetV1SmsServiceNameDocumentAsync(string serviceName, _sms.DocumentWayTypeEnum wayType, [System.Runtime.InteropServices.OptionalAttribute()] System.Guid? batchID, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDatetimeFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDatetimeTo, [System.Runtime.InteropServices.OptionalAttribute()] System.String? tag) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("batchID", batchID);
            queryParametersTemp.Add("creationDatetime.from", creationDatetimeFrom);
            queryParametersTemp.Add("creationDatetime.to", creationDatetimeTo);
            queryParametersTemp.Add("tag", tag);
            queryParametersTemp.Add("wayType", wayType);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/sms/{serviceName}/document{queryParameters}";
            return this.SendAsync<string>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/exceptions
        public Task<_sms.Exception[]> GetV1SmsServiceNameExceptionsAsync(string receiver, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("receiver", receiver);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/sms/{serviceName}/exceptions{queryParameters}";
            return this.SendAsync<_sms.Exception[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/hlr
        public Task<System.Int64[]> GetV1SmsServiceNameHlrAsync(string serviceName) {
            string uri = $"/v1/sms/{serviceName}/hlr";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/hlr
        public Task<_sms.SmsSendingReport> PostV1SmsServiceNameHlrAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? receivers, [System.Runtime.InteropServices.OptionalAttribute()] System.String? receiversDocumentUrl) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("receivers", receivers);
            _body.Add("receiversDocumentUrl", receiversDocumentUrl);
            string uri = $"/v1/sms/{serviceName}/hlr";
            return this.SendAsync<_sms.SmsSendingReport>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/hlr/{id}
        public Task<_sms.HlrLookupNumber> GetV1SmsServiceNameHlrIdAsync(long id, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/hlr/{id}";
            return this.SendAsync<_sms.HlrLookupNumber>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/hlr/{id}/operator
        public Task<_sms.Hlr> GetV1SmsServiceNameHlrIdOperatorAsync(long id, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/hlr/{id}/operator";
            return this.SendAsync<_sms.Hlr>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/incoming
        public Task<System.Int64[]> GetV1SmsServiceNameIncomingAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDatetimeFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDatetimeTo, [System.Runtime.InteropServices.OptionalAttribute()] System.String? sender, [System.Runtime.InteropServices.OptionalAttribute()] System.String? tag) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("creationDatetime.from", creationDatetimeFrom);
            queryParametersTemp.Add("creationDatetime.to", creationDatetimeTo);
            queryParametersTemp.Add("sender", sender);
            queryParametersTemp.Add("tag", tag);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/sms/{serviceName}/incoming{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/incoming/{id}
        public Task DeleteV1SmsServiceNameIncomingIdAsync(long id, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/incoming/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/incoming/{id}
        public Task<_sms.Incoming> GetV1SmsServiceNameIncomingIdAsync(long id, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/incoming/{id}";
            return this.SendAsync<_sms.Incoming>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/jobs
        public Task<System.Int64[]> GetV1SmsServiceNameJobsAsync(string serviceName) {
            string uri = $"/v1/sms/{serviceName}/jobs";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/jobs
        public Task<_sms.SmsSendingReport> PostV1SmsServiceNameJobsAsync(string message, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _sms.CharsetEnum? charset, [System.Runtime.InteropServices.OptionalAttribute()] _sms.ClassEnum? @class, [System.Runtime.InteropServices.OptionalAttribute()] _sms.CodingEnum? coding, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? differedPeriod, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? noStopClause, [System.Runtime.InteropServices.OptionalAttribute()] _sms.PriorityEnum? priority, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? receivers, [System.Runtime.InteropServices.OptionalAttribute()] System.String? receiversDocumentUrl, [System.Runtime.InteropServices.OptionalAttribute()] System.String? receiversSlotId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? sender, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? senderForResponse, [System.Runtime.InteropServices.OptionalAttribute()] System.String? tag, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? validityPeriod) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("charset", charset);
            _body.Add("class", @class);
            _body.Add("coding", coding);
            _body.Add("differedPeriod", differedPeriod);
            _body.Add("message", message);
            _body.Add("noStopClause", noStopClause);
            _body.Add("priority", priority);
            _body.Add("receivers", receivers);
            _body.Add("receiversDocumentUrl", receiversDocumentUrl);
            _body.Add("receiversSlotId", receiversSlotId);
            _body.Add("sender", sender);
            _body.Add("senderForResponse", senderForResponse);
            _body.Add("tag", tag);
            _body.Add("validityPeriod", validityPeriod);
            string uri = $"/v1/sms/{serviceName}/jobs";
            return this.SendAsync<_sms.SmsSendingReport>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/jobs/{id}
        public Task DeleteV1SmsServiceNameJobsIdAsync(long id, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/jobs/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/jobs/{id}
        public Task<_sms.Job> GetV1SmsServiceNameJobsIdAsync(long id, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/jobs/{id}";
            return this.SendAsync<_sms.Job>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/outgoing
        public Task<System.Int64[]> GetV1SmsServiceNameOutgoingAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Guid? batchID, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDatetimeFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDatetimeTo, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? deliveryReceipt, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? differedDelivery, [System.Runtime.InteropServices.OptionalAttribute()] System.Guid? messageID, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? ptt, [System.Runtime.InteropServices.OptionalAttribute()] System.String? receiver, [System.Runtime.InteropServices.OptionalAttribute()] System.String? sender, [System.Runtime.InteropServices.OptionalAttribute()] System.String? tag) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("batchID", batchID);
            queryParametersTemp.Add("creationDatetime.from", creationDatetimeFrom);
            queryParametersTemp.Add("creationDatetime.to", creationDatetimeTo);
            queryParametersTemp.Add("deliveryReceipt", deliveryReceipt);
            queryParametersTemp.Add("differedDelivery", differedDelivery);
            queryParametersTemp.Add("messageID", messageID);
            queryParametersTemp.Add("ptt", ptt);
            queryParametersTemp.Add("receiver", receiver);
            queryParametersTemp.Add("sender", sender);
            queryParametersTemp.Add("tag", tag);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/sms/{serviceName}/outgoing{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/outgoing/{id}
        public Task DeleteV1SmsServiceNameOutgoingIdAsync(string serviceName, long id) {
            string uri = $"/v1/sms/{serviceName}/outgoing/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/outgoing/{id}
        public Task<_sms.Outgoing> GetV1SmsServiceNameOutgoingIdAsync(string serviceName, long id) {
            string uri = $"/v1/sms/{serviceName}/outgoing/{id}";
            return this.SendAsync<_sms.Outgoing>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/outgoing/{id}/hlr
        public Task<_sms.Hlr> GetV1SmsServiceNameOutgoingIdHlrAsync(long id, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/outgoing/{id}/hlr";
            return this.SendAsync<_sms.Hlr>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/phonebooks
        public Task<System.String[]> GetV1SmsServiceNamePhonebooksAsync(string serviceName) {
            string uri = $"/v1/sms/{serviceName}/phonebooks";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/phonebooks
        public Task<System.String> PostV1SmsServiceNamePhonebooksAsync(string name, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("name", name);
            string uri = $"/v1/sms/{serviceName}/phonebooks";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/phonebooks/{bookKey}
        public Task DeleteV1SmsServiceNamePhonebooksBookKeyAsync(string bookKey, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/phonebooks/{bookKey}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/phonebooks/{bookKey}
        public Task<_sms.Phonebook> GetV1SmsServiceNamePhonebooksBookKeyAsync(string bookKey, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/phonebooks/{bookKey}";
            return this.SendAsync<_sms.Phonebook>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/phonebooks/{bookKey}
        public Task PutV1SmsServiceNamePhonebooksBookKeyAsync(_sms.Phonebook _body, string bookKey, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/phonebooks/{bookKey}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/phonebooks/{bookKey}/export
        public Task<_telephony.PcsFile> GetV1SmsServiceNamePhonebooksBookKeyExportAsync(string bookKey, _telephony.ContactsExportFormatsEnum format, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("format", format);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/sms/{serviceName}/phonebooks/{bookKey}/export{queryParameters}";
            return this.SendAsync<_telephony.PcsFile>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/phonebooks/{bookKey}/import
        public Task<_telephony.Task> PostV1SmsServiceNamePhonebooksBookKeyImportAsync(string bookKey, string documentId, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("documentId", documentId);
            string uri = $"/v1/sms/{serviceName}/phonebooks/{bookKey}/import";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/phonebooks/{bookKey}/phonebookContact
        public Task<System.Int64[]> GetV1SmsServiceNamePhonebooksBookKeyPhonebookContactAsync(string bookKey, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/phonebooks/{bookKey}/phonebookContact";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/phonebooks/{bookKey}/phonebookContact
        public Task<System.Int64> PostV1SmsServiceNamePhonebooksBookKeyPhonebookContactAsync(string bookKey, string group, string name, string serviceName, string surname, [System.Runtime.InteropServices.OptionalAttribute()] System.String? homeMobile, [System.Runtime.InteropServices.OptionalAttribute()] System.String? homePhone, [System.Runtime.InteropServices.OptionalAttribute()] System.String? workMobile, [System.Runtime.InteropServices.OptionalAttribute()] System.String? workPhone) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("group", group);
            _body.Add("homeMobile", homeMobile);
            _body.Add("homePhone", homePhone);
            _body.Add("name", name);
            _body.Add("surname", surname);
            _body.Add("workMobile", workMobile);
            _body.Add("workPhone", workPhone);
            string uri = $"/v1/sms/{serviceName}/phonebooks/{bookKey}/phonebookContact";
            return this.SendAsync<long>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/phonebooks/{bookKey}/phonebookContact/{id}
        public Task DeleteV1SmsServiceNamePhonebooksBookKeyPhonebookContactIdAsync(string bookKey, long id, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/phonebooks/{bookKey}/phonebookContact/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/phonebooks/{bookKey}/phonebookContact/{id}
        public Task<_sms.PhonebookContact> GetV1SmsServiceNamePhonebooksBookKeyPhonebookContactIdAsync(string bookKey, long id, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/phonebooks/{bookKey}/phonebookContact/{id}";
            return this.SendAsync<_sms.PhonebookContact>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/phonebooks/{bookKey}/phonebookContact/{id}
        public Task PutV1SmsServiceNamePhonebooksBookKeyPhonebookContactIdAsync(_sms.PhonebookContact _body, string bookKey, long id, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/phonebooks/{bookKey}/phonebookContact/{id}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/receivers
        public Task<System.Int64[]> GetV1SmsServiceNameReceiversAsync(string serviceName) {
            string uri = $"/v1/sms/{serviceName}/receivers";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/receivers
        public Task<_sms.Receiver> PostV1SmsServiceNameReceiversAsync(bool autoUpdate, string description, string serviceName, long slotId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? csvUrl, [System.Runtime.InteropServices.OptionalAttribute()] System.String? documentId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("autoUpdate", autoUpdate);
            _body.Add("csvUrl", csvUrl);
            _body.Add("description", description);
            _body.Add("documentId", documentId);
            _body.Add("slotId", slotId);
            string uri = $"/v1/sms/{serviceName}/receivers";
            return this.SendAsync<_sms.Receiver>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/receivers/{slotId}
        public Task DeleteV1SmsServiceNameReceiversSlotIdAsync(string serviceName, long slotId) {
            string uri = $"/v1/sms/{serviceName}/receivers/{slotId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/receivers/{slotId}
        public Task<_sms.Receiver> GetV1SmsServiceNameReceiversSlotIdAsync(string serviceName, long slotId) {
            string uri = $"/v1/sms/{serviceName}/receivers/{slotId}";
            return this.SendAsync<_sms.Receiver>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/receivers/{slotId}
        public Task PutV1SmsServiceNameReceiversSlotIdAsync(_sms.Receiver _body, string serviceName, long slotId) {
            string uri = $"/v1/sms/{serviceName}/receivers/{slotId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/receivers/{slotId}/clean
        public Task<_sms.ReceiversAsynchronousCleanReport> PostV1SmsServiceNameReceiversSlotIdCleanAsync(bool freemium, bool priceOnly, string serviceName, long slotId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("freemium", freemium);
            _body.Add("priceOnly", priceOnly);
            string uri = $"/v1/sms/{serviceName}/receivers/{slotId}/clean";
            return this.SendAsync<_sms.ReceiversAsynchronousCleanReport>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/receivers/{slotId}/csv
        public Task<System.String> GetV1SmsServiceNameReceiversSlotIdCsvAsync(string serviceName, long slotId) {
            string uri = $"/v1/sms/{serviceName}/receivers/{slotId}/csv";
            return this.SendAsync<string>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/seeOffers
        public Task<_sms.PackOffer[]> GetV1SmsServiceNameSeeOffersAsync(_reference.CountryEnum countryCurrencyPrice, _sms.CountryEnum countryDestination, _sms.PackQuantityEnum quantity, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("countryCurrencyPrice", countryCurrencyPrice);
            queryParametersTemp.Add("countryDestination", countryDestination);
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/sms/{serviceName}/seeOffers{queryParameters}";
            return this.SendAsync<_sms.PackOffer[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/senders
        public Task<System.String[]> GetV1SmsServiceNameSendersAsync(string serviceName) {
            string uri = $"/v1/sms/{serviceName}/senders";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/senders
        public Task<System.String> PostV1SmsServiceNameSendersAsync(string sender, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? description, [System.Runtime.InteropServices.OptionalAttribute()] System.String? reason) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("description", description);
            _body.Add("reason", reason);
            _body.Add("sender", sender);
            string uri = $"/v1/sms/{serviceName}/senders";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/senders/{sender}
        public Task DeleteV1SmsServiceNameSendersSenderAsync(string sender, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/senders/{sender}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/senders/{sender}
        public Task<_sms.Sender> GetV1SmsServiceNameSendersSenderAsync(string sender, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/senders/{sender}";
            return this.SendAsync<_sms.Sender>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/senders/{sender}
        public Task PutV1SmsServiceNameSendersSenderAsync(_sms.Sender _body, string sender, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/senders/{sender}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/senders/{sender}/documents
        public Task<System.Guid[]> GetV1SmsServiceNameSendersSenderDocumentsAsync(string sender, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/senders/{sender}/documents";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/senders/{sender}/documents
        public Task<_sms.SenderDocument> PostV1SmsServiceNameSendersSenderDocumentsAsync(string name, string sender, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? description) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("description", description);
            _body.Add("name", name);
            string uri = $"/v1/sms/{serviceName}/senders/{sender}/documents";
            return this.SendAsync<_sms.SenderDocument>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/senders/{sender}/documents/{documentID}
        public Task<_sms.SenderDocument> GetV1SmsServiceNameSendersSenderDocumentsDocumentIDAsync(System.Guid documentID, string sender, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/senders/{sender}/documents/{documentID}";
            return this.SendAsync<_sms.SenderDocument>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/senders/{sender}/documents/{documentID}
        public Task PutV1SmsServiceNameSendersSenderDocumentsDocumentIDAsync(_sms.SenderDocument _body, System.Guid documentID, string sender, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/senders/{sender}/documents/{documentID}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/senders/{sender}/validate
        public Task PostV1SmsServiceNameSendersSenderValidateAsync(string code, string sender, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("code", code);
            string uri = $"/v1/sms/{serviceName}/senders/{sender}/validate";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/sendersAvailableForValidation
        public Task<_sms.SenderAvailable[]> GetV1SmsServiceNameSendersAvailableForValidationAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _sms.SenderRefererEnum? referer) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("referer", referer);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/sms/{serviceName}/sendersAvailableForValidation{queryParameters}";
            return this.SendAsync<_sms.SenderAvailable[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1SmsServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/sms/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/serviceInfos
        public Task PutV1SmsServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/smpp/allowedIPs
        public Task<System.String[]> GetV1SmsServiceNameSmppAllowedIPsAsync(string serviceName) {
            string uri = $"/v1/sms/{serviceName}/smpp/allowedIPs";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/smpp/allowedIPs
        public Task<System.String[]> PutV1SmsServiceNameSmppAllowedIPsAsync(string serviceName, _sms.AllowedIPs _body) {
            string uri = $"/v1/sms/{serviceName}/smpp/allowedIPs";
            return this.SendAsync<string[]>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/smpp/password
        public Task PostV1SmsServiceNameSmppPasswordAsync(string serviceName) {
            string uri = $"/v1/sms/{serviceName}/smpp/password";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/smpp/settings
        public Task<_sms.Settings> GetV1SmsServiceNameSmppSettingsAsync(string serviceName) {
            string uri = $"/v1/sms/{serviceName}/smpp/settings";
            return this.SendAsync<_sms.Settings>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/task
        public Task<System.Int64[]> GetV1SmsServiceNameTaskAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.TaskStatusEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/sms/{serviceName}/task{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/task/{taskId}
        public Task<_sms.Task> GetV1SmsServiceNameTaskTaskIdAsync(string serviceName, long taskId) {
            string uri = $"/v1/sms/{serviceName}/task/{taskId}";
            return this.SendAsync<_sms.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/templatesControl
        public Task<System.String[]> GetV1SmsServiceNameTemplatesControlAsync(string serviceName) {
            string uri = $"/v1/sms/{serviceName}/templatesControl";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/templatesControl
        public Task PostV1SmsServiceNameTemplatesControlAsync(_sms.TypeTemplateEnum activity, string message, string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? description, [System.Runtime.InteropServices.OptionalAttribute()] System.String? reason) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("activity", activity);
            _body.Add("description", description);
            _body.Add("message", message);
            _body.Add("name", name);
            _body.Add("reason", reason);
            string uri = $"/v1/sms/{serviceName}/templatesControl";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/templatesControl/{name}
        public Task DeleteV1SmsServiceNameTemplatesControlNameAsync(string name, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/templatesControl/{name}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/templatesControl/{name}
        public Task<_sms.TemplateControl> GetV1SmsServiceNameTemplatesControlNameAsync(string name, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/templatesControl/{name}";
            return this.SendAsync<_sms.TemplateControl>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/templatesControl/{name}
        public Task PutV1SmsServiceNameTemplatesControlNameAsync(_sms.TemplateControl _body, string name, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/templatesControl/{name}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/templatesControl/{name}/relaunchValidation
        public Task PostV1SmsServiceNameTemplatesControlNameRelaunchValidationAsync(string description, string message, string name, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("description", description);
            _body.Add("message", message);
            string uri = $"/v1/sms/{serviceName}/templatesControl/{name}/relaunchValidation";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/transferCredits
        public Task PostV1SmsServiceNameTransferCreditsAsync(double credits, string serviceName, string smsAccountTarget) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("credits", credits);
            _body.Add("smsAccountTarget", smsAccountTarget);
            string uri = $"/v1/sms/{serviceName}/transferCredits";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/users
        public Task<System.String[]> GetV1SmsServiceNameUsersAsync(string serviceName) {
            string uri = $"/v1/sms/{serviceName}/users";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/users
        public Task PostV1SmsServiceNameUsersAsync(string login, string password, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("login", login);
            _body.Add("password", password);
            string uri = $"/v1/sms/{serviceName}/users";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/users/{login}
        public Task DeleteV1SmsServiceNameUsersLoginAsync(string login, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/users/{login}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/users/{login}
        public Task<_sms.User> GetV1SmsServiceNameUsersLoginAsync(string login, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/users/{login}";
            return this.SendAsync<_sms.User>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/users/{login}
        public Task PutV1SmsServiceNameUsersLoginAsync(_sms.User _body, string login, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/users/{login}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/users/{login}/document
        public Task<System.String> GetV1SmsServiceNameUsersLoginDocumentAsync(string login, string serviceName, _sms.DocumentWayTypeEnum wayType, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDatetimeFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDatetimeTo, [System.Runtime.InteropServices.OptionalAttribute()] System.String? tag) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("creationDatetime.from", creationDatetimeFrom);
            queryParametersTemp.Add("creationDatetime.to", creationDatetimeTo);
            queryParametersTemp.Add("tag", tag);
            queryParametersTemp.Add("wayType", wayType);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/sms/{serviceName}/users/{login}/document{queryParameters}";
            return this.SendAsync<string>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/users/{login}/incoming
        public Task<System.Int64[]> GetV1SmsServiceNameUsersLoginIncomingAsync(string login, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? sender, [System.Runtime.InteropServices.OptionalAttribute()] System.String? tag) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("sender", sender);
            queryParametersTemp.Add("tag", tag);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/sms/{serviceName}/users/{login}/incoming{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/users/{login}/incoming/{id}
        public Task DeleteV1SmsServiceNameUsersLoginIncomingIdAsync(long id, string login, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/users/{login}/incoming/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/users/{login}/incoming/{id}
        public Task<_sms.Incoming> GetV1SmsServiceNameUsersLoginIncomingIdAsync(long id, string login, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/users/{login}/incoming/{id}";
            return this.SendAsync<_sms.Incoming>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/users/{login}/jobs
        public Task<System.Int64[]> GetV1SmsServiceNameUsersLoginJobsAsync(string login, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/users/{login}/jobs";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/users/{login}/jobs
        public Task<_sms.SmsSendingReport> PostV1SmsServiceNameUsersLoginJobsAsync(
                    string login, 
                    string message, 
                    string serviceName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _sms.CharsetEnum? charset, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _sms.ClassEnum? @class, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _sms.CodingEnum? coding, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? differedPeriod, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? noStopClause, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _sms.PriorityEnum? priority, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? receivers, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? receiversDocumentUrl, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? receiversSlotId, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? sender, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? senderForResponse, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.String? tag, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? validityPeriod) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("charset", charset);
            _body.Add("class", @class);
            _body.Add("coding", coding);
            _body.Add("differedPeriod", differedPeriod);
            _body.Add("message", message);
            _body.Add("noStopClause", noStopClause);
            _body.Add("priority", priority);
            _body.Add("receivers", receivers);
            _body.Add("receiversDocumentUrl", receiversDocumentUrl);
            _body.Add("receiversSlotId", receiversSlotId);
            _body.Add("sender", sender);
            _body.Add("senderForResponse", senderForResponse);
            _body.Add("tag", tag);
            _body.Add("validityPeriod", validityPeriod);
            string uri = $"/v1/sms/{serviceName}/users/{login}/jobs";
            return this.SendAsync<_sms.SmsSendingReport>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/users/{login}/jobs/{id}
        public Task DeleteV1SmsServiceNameUsersLoginJobsIdAsync(long id, string login, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/users/{login}/jobs/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/users/{login}/jobs/{id}
        public Task<_sms.Job> GetV1SmsServiceNameUsersLoginJobsIdAsync(long id, string login, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/users/{login}/jobs/{id}";
            return this.SendAsync<_sms.Job>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/users/{login}/outgoing
        public Task<System.Int64[]> GetV1SmsServiceNameUsersLoginOutgoingAsync(string login, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? deliveryReceipt, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? differedDelivery, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? ptt, [System.Runtime.InteropServices.OptionalAttribute()] System.String? receiver, [System.Runtime.InteropServices.OptionalAttribute()] System.String? sender, [System.Runtime.InteropServices.OptionalAttribute()] System.String? tag) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("deliveryReceipt", deliveryReceipt);
            queryParametersTemp.Add("differedDelivery", differedDelivery);
            queryParametersTemp.Add("ptt", ptt);
            queryParametersTemp.Add("receiver", receiver);
            queryParametersTemp.Add("sender", sender);
            queryParametersTemp.Add("tag", tag);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/sms/{serviceName}/users/{login}/outgoing{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/users/{login}/outgoing/{id}
        public Task DeleteV1SmsServiceNameUsersLoginOutgoingIdAsync(long id, string login, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/users/{login}/outgoing/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/users/{login}/outgoing/{id}
        public Task<_sms.Outgoing> GetV1SmsServiceNameUsersLoginOutgoingIdAsync(long id, string login, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/users/{login}/outgoing/{id}";
            return this.SendAsync<_sms.Outgoing>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/users/{login}/outgoing/{id}/hlr
        public Task<_sms.Hlr> GetV1SmsServiceNameUsersLoginOutgoingIdHlrAsync(long id, string login, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/users/{login}/outgoing/{id}/hlr";
            return this.SendAsync<_sms.Hlr>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/users/{login}/receivers
        public Task<System.Int64[]> GetV1SmsServiceNameUsersLoginReceiversAsync(string login, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/users/{login}/receivers";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/users/{login}/receivers
        public Task<_sms.Receiver> PostV1SmsServiceNameUsersLoginReceiversAsync(bool autoUpdate, string description, string login, string serviceName, long slotId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? csvUrl, [System.Runtime.InteropServices.OptionalAttribute()] System.String? documentId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("autoUpdate", autoUpdate);
            _body.Add("csvUrl", csvUrl);
            _body.Add("description", description);
            _body.Add("documentId", documentId);
            _body.Add("slotId", slotId);
            string uri = $"/v1/sms/{serviceName}/users/{login}/receivers";
            return this.SendAsync<_sms.Receiver>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/users/{login}/receivers/{slotId}
        public Task DeleteV1SmsServiceNameUsersLoginReceiversSlotIdAsync(string login, string serviceName, long slotId) {
            string uri = $"/v1/sms/{serviceName}/users/{login}/receivers/{slotId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/users/{login}/receivers/{slotId}
        public Task<_sms.Receiver> GetV1SmsServiceNameUsersLoginReceiversSlotIdAsync(string login, string serviceName, long slotId) {
            string uri = $"/v1/sms/{serviceName}/users/{login}/receivers/{slotId}";
            return this.SendAsync<_sms.Receiver>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/users/{login}/receivers/{slotId}
        public Task PutV1SmsServiceNameUsersLoginReceiversSlotIdAsync(_sms.Receiver _body, string login, string serviceName, long slotId) {
            string uri = $"/v1/sms/{serviceName}/users/{login}/receivers/{slotId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/users/{login}/receivers/{slotId}/clean
        public Task<_sms.ReceiversAsynchronousCleanReport> PostV1SmsServiceNameUsersLoginReceiversSlotIdCleanAsync(bool freemium, string login, bool priceOnly, string serviceName, long slotId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("freemium", freemium);
            _body.Add("priceOnly", priceOnly);
            string uri = $"/v1/sms/{serviceName}/users/{login}/receivers/{slotId}/clean";
            return this.SendAsync<_sms.ReceiversAsynchronousCleanReport>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/users/{login}/receivers/{slotId}/csv
        public Task<System.String> GetV1SmsServiceNameUsersLoginReceiversSlotIdCsvAsync(string login, string serviceName, long slotId) {
            string uri = $"/v1/sms/{serviceName}/users/{login}/receivers/{slotId}/csv";
            return this.SendAsync<string>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/virtualNumbers
        public Task<System.String[]> GetV1SmsServiceNameVirtualNumbersAsync(string serviceName) {
            string uri = $"/v1/sms/{serviceName}/virtualNumbers";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/virtualNumbers/{number}
        public Task<_sms.VirtualNumber> GetV1SmsServiceNameVirtualNumbersNumberAsync(string number, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/virtualNumbers/{number}";
            return this.SendAsync<_sms.VirtualNumber>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/virtualNumbers/{number}/chatAccess
        public Task DeleteV1SmsServiceNameVirtualNumbersNumberChatAccessAsync(string number, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/virtualNumbers/{number}/chatAccess";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/virtualNumbers/{number}/chatAccess
        public Task<_sms.ChatAccess> GetV1SmsServiceNameVirtualNumbersNumberChatAccessAsync(string number, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/virtualNumbers/{number}/chatAccess";
            return this.SendAsync<_sms.ChatAccess>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/virtualNumbers/{number}/chatAccess
        public Task<_sms.ChatAccess> PostV1SmsServiceNameVirtualNumbersNumberChatAccessAsync(string number, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/virtualNumbers/{number}/chatAccess";
            return this.SendAsync<_sms.ChatAccess>("POST", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/virtualNumbers/{number}/incoming
        public Task<System.Int64[]> GetV1SmsServiceNameVirtualNumbersNumberIncomingAsync(string number, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDatetimeFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDatetimeTo, [System.Runtime.InteropServices.OptionalAttribute()] System.String? sender, [System.Runtime.InteropServices.OptionalAttribute()] System.String? tag) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("creationDatetime.from", creationDatetimeFrom);
            queryParametersTemp.Add("creationDatetime.to", creationDatetimeTo);
            queryParametersTemp.Add("sender", sender);
            queryParametersTemp.Add("tag", tag);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/sms/{serviceName}/virtualNumbers/{number}/incoming{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/virtualNumbers/{number}/incoming/{id}
        public Task DeleteV1SmsServiceNameVirtualNumbersNumberIncomingIdAsync(long id, string number, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/virtualNumbers/{number}/incoming/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/virtualNumbers/{number}/incoming/{id}
        public Task<_sms.Incoming> GetV1SmsServiceNameVirtualNumbersNumberIncomingIdAsync(long id, string number, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/virtualNumbers/{number}/incoming/{id}";
            return this.SendAsync<_sms.Incoming>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/virtualNumbers/{number}/jobs
        public Task<System.Int64[]> GetV1SmsServiceNameVirtualNumbersNumberJobsAsync(string number, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/virtualNumbers/{number}/jobs";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/virtualNumbers/{number}/jobs
        public Task<_sms.SmsSendingReport> PostV1SmsServiceNameVirtualNumbersNumberJobsAsync(string message, string number, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _sms.CharsetEnum? charset, [System.Runtime.InteropServices.OptionalAttribute()] _sms.ClassEnum? @class, [System.Runtime.InteropServices.OptionalAttribute()] _sms.CodingEnum? coding, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? differedPeriod, [System.Runtime.InteropServices.OptionalAttribute()] _sms.PriorityEnum? priority, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? receivers, [System.Runtime.InteropServices.OptionalAttribute()] System.String? receiversDocumentUrl, [System.Runtime.InteropServices.OptionalAttribute()] System.String? receiversSlotId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? tag, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? validityPeriod) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("charset", charset);
            _body.Add("class", @class);
            _body.Add("coding", coding);
            _body.Add("differedPeriod", differedPeriod);
            _body.Add("message", message);
            _body.Add("priority", priority);
            _body.Add("receivers", receivers);
            _body.Add("receiversDocumentUrl", receiversDocumentUrl);
            _body.Add("receiversSlotId", receiversSlotId);
            _body.Add("tag", tag);
            _body.Add("validityPeriod", validityPeriod);
            string uri = $"/v1/sms/{serviceName}/virtualNumbers/{number}/jobs";
            return this.SendAsync<_sms.SmsSendingReport>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/sms/{serviceName}/virtualNumbers/{number}/jobs/{id}
        public Task DeleteV1SmsServiceNameVirtualNumbersNumberJobsIdAsync(long id, string number, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/virtualNumbers/{number}/jobs/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/virtualNumbers/{number}/jobs/{id}
        public Task<_sms.VirtualNumberJob> GetV1SmsServiceNameVirtualNumbersNumberJobsIdAsync(long id, string number, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/virtualNumbers/{number}/jobs/{id}";
            return this.SendAsync<_sms.VirtualNumberJob>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/virtualNumbers/{number}/outgoing
        public Task<System.Int64[]> GetV1SmsServiceNameVirtualNumbersNumberOutgoingAsync(string number, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDatetimeFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDatetimeTo, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? deliveryReceipt, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? differedDelivery, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? ptt, [System.Runtime.InteropServices.OptionalAttribute()] System.String? receiver, [System.Runtime.InteropServices.OptionalAttribute()] System.String? sender, [System.Runtime.InteropServices.OptionalAttribute()] System.String? tag) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("creationDatetime.from", creationDatetimeFrom);
            queryParametersTemp.Add("creationDatetime.to", creationDatetimeTo);
            queryParametersTemp.Add("deliveryReceipt", deliveryReceipt);
            queryParametersTemp.Add("differedDelivery", differedDelivery);
            queryParametersTemp.Add("ptt", ptt);
            queryParametersTemp.Add("receiver", receiver);
            queryParametersTemp.Add("sender", sender);
            queryParametersTemp.Add("tag", tag);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/sms/{serviceName}/virtualNumbers/{number}/outgoing{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/virtualNumbers/{number}/outgoing/{id}
        public Task DeleteV1SmsServiceNameVirtualNumbersNumberOutgoingIdAsync(long id, string number, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/virtualNumbers/{number}/outgoing/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/virtualNumbers/{number}/outgoing/{id}
        public Task<_sms.Outgoing> GetV1SmsServiceNameVirtualNumbersNumberOutgoingIdAsync(long id, string number, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/virtualNumbers/{number}/outgoing/{id}";
            return this.SendAsync<_sms.Outgoing>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sms/{serviceName}/virtualNumbers/{number}/outgoing/{id}/hlr
        public Task<_sms.Hlr> GetV1SmsServiceNameVirtualNumbersNumberOutgoingIdHlrAsync(long id, string number, string serviceName) {
            string uri = $"/v1/sms/{serviceName}/virtualNumbers/{number}/outgoing/{id}/hlr";
            return this.SendAsync<_sms.Hlr>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ssl
        public Task<System.String[]> GetV1SslAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/ssl{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ssl/{serviceName}
        public Task<_ssl.CertificateWithIAM> GetV1SslServiceNameAsync(string serviceName) {
            string uri = $"/v1/ssl/{serviceName}";
            return this.SendAsync<_ssl.CertificateWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ssl/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1SslServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/ssl/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ssl/{serviceName}/serviceInfos
        public Task PutV1SslServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/ssl/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/ssl/{serviceName}/tasks
        public Task<System.Int64[]> GetV1SslServiceNameTasksAsync(string serviceName) {
            string uri = $"/v1/ssl/{serviceName}/tasks";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/ssl/{serviceName}/tasks/{taskId}
        public Task<_ssl.Operation> GetV1SslServiceNameTasksTaskIdAsync(string serviceName, long taskId) {
            string uri = $"/v1/ssl/{serviceName}/tasks/{taskId}";
            return this.SendAsync<_ssl.Operation>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sslGateway
        public Task<System.String[]> GetV1SslGatewayAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/sslGateway{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sslGateway/availableZones
        public Task<System.String[]> GetV1SslGatewayAvailableZonesAsync() {
            string uri = $"/v1/sslGateway/availableZones";
            return this.SendAsync<string[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/sslGateway/eligibility
        public Task<_sslGateway.EligibilityStatus> GetV1SslGatewayEligibilityAsync(string domain) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("domain", domain);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/sslGateway/eligibility{queryParameters}";
            return this.SendAsync<_sslGateway.EligibilityStatus>("GET", uri, null, null, false);
        }
        
        // Path: /v1/sslGateway/{serviceName}
        public Task<_sslGateway.SslGatewayWithIAM> GetV1SslGatewayServiceNameAsync(string serviceName) {
            string uri = $"/v1/sslGateway/{serviceName}";
            return this.SendAsync<_sslGateway.SslGatewayWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sslGateway/{serviceName}
        public Task PutV1SslGatewayServiceNameAsync(_sslGateway.SslGateway _body, string serviceName) {
            string uri = $"/v1/sslGateway/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/sslGateway/{serviceName}/changeContact
        public Task<System.Int64[]> PostV1SslGatewayServiceNameChangeContactAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactTech) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("contactAdmin", contactAdmin);
            _body.Add("contactBilling", contactBilling);
            _body.Add("contactTech", contactTech);
            string uri = $"/v1/sslGateway/{serviceName}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/sslGateway/{serviceName}/confirmTermination
        public Task<System.String> PostV1SslGatewayServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] System.String? commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum? futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum? reason) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("commentary", commentary);
            _body.Add("futureUse", futureUse);
            _body.Add("reason", reason);
            _body.Add("token", token);
            string uri = $"/v1/sslGateway/{serviceName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/sslGateway/{serviceName}/domain
        public Task<System.Int64[]> GetV1SslGatewayServiceNameDomainAsync(string serviceName) {
            string uri = $"/v1/sslGateway/{serviceName}/domain";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sslGateway/{serviceName}/domain
        public Task<_sslGateway.Domain> PostV1SslGatewayServiceNameDomainAsync(string domain, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("domain", domain);
            string uri = $"/v1/sslGateway/{serviceName}/domain";
            return this.SendAsync<_sslGateway.Domain>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/sslGateway/{serviceName}/domain/{id}
        public Task DeleteV1SslGatewayServiceNameDomainIdAsync(long id, string serviceName) {
            string uri = $"/v1/sslGateway/{serviceName}/domain/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/sslGateway/{serviceName}/domain/{id}
        public Task<_sslGateway.Domain> GetV1SslGatewayServiceNameDomainIdAsync(long id, string serviceName) {
            string uri = $"/v1/sslGateway/{serviceName}/domain/{id}";
            return this.SendAsync<_sslGateway.Domain>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sslGateway/{serviceName}/natIp
        public Task<_sslGateway.NatIps[]> GetV1SslGatewayServiceNameNatIpAsync(string serviceName) {
            string uri = $"/v1/sslGateway/{serviceName}/natIp";
            return this.SendAsync<_sslGateway.NatIps[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sslGateway/{serviceName}/renewCertificate
        public Task<System.String[]> PostV1SslGatewayServiceNameRenewCertificateAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? domain) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("domain", domain);
            string uri = $"/v1/sslGateway/{serviceName}/renewCertificate";
            return this.SendAsync<string[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/sslGateway/{serviceName}/server
        public Task<System.Int64[]> GetV1SslGatewayServiceNameServerAsync(string serviceName) {
            string uri = $"/v1/sslGateway/{serviceName}/server";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sslGateway/{serviceName}/server
        public Task<_sslGateway.Server> PostV1SslGatewayServiceNameServerAsync(string address, long port, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("address", address);
            _body.Add("port", port);
            string uri = $"/v1/sslGateway/{serviceName}/server";
            return this.SendAsync<_sslGateway.Server>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/sslGateway/{serviceName}/server/{id}
        public Task DeleteV1SslGatewayServiceNameServerIdAsync(long id, string serviceName) {
            string uri = $"/v1/sslGateway/{serviceName}/server/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/sslGateway/{serviceName}/server/{id}
        public Task<_sslGateway.Server> GetV1SslGatewayServiceNameServerIdAsync(long id, string serviceName) {
            string uri = $"/v1/sslGateway/{serviceName}/server/{id}";
            return this.SendAsync<_sslGateway.Server>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sslGateway/{serviceName}/server/{id}
        public Task PutV1SslGatewayServiceNameServerIdAsync(_sslGateway.Server _body, long id, string serviceName) {
            string uri = $"/v1/sslGateway/{serviceName}/server/{id}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/sslGateway/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1SslGatewayServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/sslGateway/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sslGateway/{serviceName}/serviceInfos
        public Task PutV1SslGatewayServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/sslGateway/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/sslGateway/{serviceName}/task
        public Task<System.Int64[]> GetV1SslGatewayServiceNameTaskAsync(string serviceName) {
            string uri = $"/v1/sslGateway/{serviceName}/task";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sslGateway/{serviceName}/task/{id}
        public Task<_sslGateway.Task> GetV1SslGatewayServiceNameTaskIdAsync(long id, string serviceName) {
            string uri = $"/v1/sslGateway/{serviceName}/task/{id}";
            return this.SendAsync<_sslGateway.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/sslGateway/{serviceName}/terminate
        public Task<System.String> PostV1SslGatewayServiceNameTerminateAsync(string serviceName) {
            string uri = $"/v1/sslGateway/{serviceName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/stack/mis
        public Task<System.String[]> GetV1StackMisAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/stack/mis{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/stack/mis/{serviceName}
        public Task<_stack_mis.productWithIAM> GetV1StackMisServiceNameAsync(string serviceName) {
            string uri = $"/v1/stack/mis/{serviceName}";
            return this.SendAsync<_stack_mis.productWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/stack/mis/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1StackMisServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/stack/mis/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/stack/mis/{serviceName}/serviceInfos
        public Task PutV1StackMisServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/stack/mis/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/startup
        public Task<_startup.startup> GetV1StartupAsync() {
            string uri = $"/v1/startup";
            return this.SendAsync<_startup.startup>("GET", uri, null, null, true);
        }
        
        // Path: /v1/startup
        public Task PostV1StartupAsync(_startup.startup _body) {
            string uri = $"/v1/startup";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/storage/netapp
        public Task<_storage.NetAppServiceWithIAM[]> GetV1StorageNetappAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/storage/netapp{queryParameters}";
            return this.SendAsync<_storage.NetAppServiceWithIAM[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}
        public Task<_storage.NetAppServiceWithIAM> GetV1StorageNetappServiceNameAsync(System.Guid serviceName) {
            string uri = $"/v1/storage/netapp/{serviceName}";
            return this.SendAsync<_storage.NetAppServiceWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}
        public Task<_storage.NetAppService> PutV1StorageNetappServiceNameAsync(_storage.NetAppServiceUpdate _body, System.Guid serviceName) {
            string uri = $"/v1/storage/netapp/{serviceName}";
            return this.SendAsync<_storage.NetAppService>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/changeContact
        public Task<System.Int64[]> PostV1StorageNetappServiceNameChangeContactAsync(_services.changeContact _body, System.Guid serviceName) {
            string uri = $"/v1/storage/netapp/{serviceName}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/confirmTermination
        public Task<System.String> PostV1StorageNetappServiceNameConfirmTerminationAsync(_services.confirmTermination _body, System.Guid serviceName) {
            string uri = $"/v1/storage/netapp/{serviceName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/network
        public Task<_storage.NetAppNetwork[]> GetV1StorageNetappServiceNameNetworkAsync(System.Guid serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? detail) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("detail", detail);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/storage/netapp/{serviceName}/network{queryParameters}";
            return this.SendAsync<_storage.NetAppNetwork[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/network/{networkId}
        public Task<_storage.NetAppNetwork> GetV1StorageNetappServiceNameNetworkNetworkIdAsync(System.Guid networkId, System.Guid serviceName) {
            string uri = $"/v1/storage/netapp/{serviceName}/network/{networkId}";
            return this.SendAsync<_storage.NetAppNetwork>("GET", uri, null, null, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1StorageNetappServiceNameServiceInfosAsync(System.Guid serviceName) {
            string uri = $"/v1/storage/netapp/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/serviceInfos
        public Task PutV1StorageNetappServiceNameServiceInfosAsync(_services.Service _body, System.Guid serviceName) {
            string uri = $"/v1/storage/netapp/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/share
        public Task<_storage.NetAppShare[]> GetV1StorageNetappServiceNameShareAsync(System.Guid serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? detail) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("detail", detail);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/storage/netapp/{serviceName}/share{queryParameters}";
            return this.SendAsync<_storage.NetAppShare[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/share
        public Task<_storage.NetAppShare> PostV1StorageNetappServiceNameShareAsync(_storage.NetAppShare _body, System.Guid serviceName) {
            string uri = $"/v1/storage/netapp/{serviceName}/share";
            return this.SendAsync<_storage.NetAppShare>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/share/{shareId}
        public Task DeleteV1StorageNetappServiceNameShareShareIdAsync(System.Guid serviceName, System.Guid shareId) {
            string uri = $"/v1/storage/netapp/{serviceName}/share/{shareId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/share/{shareId}
        public Task<_storage.NetAppShare> GetV1StorageNetappServiceNameShareShareIdAsync(System.Guid serviceName, System.Guid shareId) {
            string uri = $"/v1/storage/netapp/{serviceName}/share/{shareId}";
            return this.SendAsync<_storage.NetAppShare>("GET", uri, null, null, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/share/{shareId}
        public Task<_storage.NetAppShare> PutV1StorageNetappServiceNameShareShareIdAsync(_storage.NetAppShareUpdate _body, System.Guid serviceName, System.Guid shareId) {
            string uri = $"/v1/storage/netapp/{serviceName}/share/{shareId}";
            return this.SendAsync<_storage.NetAppShare>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/share/{shareId}/accessPath
        public Task<_storage.NetAppShareAccessPath[]> GetV1StorageNetappServiceNameShareShareIdAccessPathAsync(System.Guid serviceName, System.Guid shareId) {
            string uri = $"/v1/storage/netapp/{serviceName}/share/{shareId}/accessPath";
            return this.SendAsync<_storage.NetAppShareAccessPath[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/share/{shareId}/accessPath/{accessPathId}
        public Task<_storage.NetAppShareAccessPath> GetV1StorageNetappServiceNameShareShareIdAccessPathAccessPathIdAsync(System.Guid accessPathId, System.Guid serviceName, System.Guid shareId) {
            string uri = $"/v1/storage/netapp/{serviceName}/share/{shareId}/accessPath/{accessPathId}";
            return this.SendAsync<_storage.NetAppShareAccessPath>("GET", uri, null, null, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/share/{shareId}/acl
        public Task<_storage.NetAppShareACLRule[]> GetV1StorageNetappServiceNameShareShareIdAclAsync(System.Guid serviceName, System.Guid shareId) {
            string uri = $"/v1/storage/netapp/{serviceName}/share/{shareId}/acl";
            return this.SendAsync<_storage.NetAppShareACLRule[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/share/{shareId}/acl
        public Task<_storage.NetAppShareACLRule> PostV1StorageNetappServiceNameShareShareIdAclAsync(_storage.NetAppShareACLRule _body, System.Guid serviceName, System.Guid shareId) {
            string uri = $"/v1/storage/netapp/{serviceName}/share/{shareId}/acl";
            return this.SendAsync<_storage.NetAppShareACLRule>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/share/{shareId}/acl/{aclRuleId}
        public Task DeleteV1StorageNetappServiceNameShareShareIdAclAclRuleIdAsync(System.Guid aclRuleId, System.Guid serviceName, System.Guid shareId) {
            string uri = $"/v1/storage/netapp/{serviceName}/share/{shareId}/acl/{aclRuleId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/share/{shareId}/acl/{aclRuleId}
        public Task<_storage.NetAppShareACLRule> GetV1StorageNetappServiceNameShareShareIdAclAclRuleIdAsync(System.Guid aclRuleId, System.Guid serviceName, System.Guid shareId) {
            string uri = $"/v1/storage/netapp/{serviceName}/share/{shareId}/acl/{aclRuleId}";
            return this.SendAsync<_storage.NetAppShareACLRule>("GET", uri, null, null, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/share/{shareId}/extend
        public Task PostV1StorageNetappServiceNameShareShareIdExtendAsync(_storage.NetAppShareExtendOrShrink _body, System.Guid serviceName, System.Guid shareId) {
            string uri = $"/v1/storage/netapp/{serviceName}/share/{shareId}/extend";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/share/{shareId}/revert
        public Task PostV1StorageNetappServiceNameShareShareIdRevertAsync(_storage.NetAppShareRevertToSnapshot _body, System.Guid serviceName, System.Guid shareId) {
            string uri = $"/v1/storage/netapp/{serviceName}/share/{shareId}/revert";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/share/{shareId}/shrink
        public Task PostV1StorageNetappServiceNameShareShareIdShrinkAsync(_storage.NetAppShareExtendOrShrink _body, System.Guid serviceName, System.Guid shareId) {
            string uri = $"/v1/storage/netapp/{serviceName}/share/{shareId}/shrink";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/share/{shareId}/snapshot
        public Task<_storage.NetAppShareSnapshot[]> GetV1StorageNetappServiceNameShareShareIdSnapshotAsync(System.Guid serviceName, System.Guid shareId, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? detail) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("detail", detail);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/storage/netapp/{serviceName}/share/{shareId}/snapshot{queryParameters}";
            return this.SendAsync<_storage.NetAppShareSnapshot[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/share/{shareId}/snapshot
        public Task<_storage.NetAppShareSnapshot> PostV1StorageNetappServiceNameShareShareIdSnapshotAsync(_storage.NetAppShareSnapshot _body, System.Guid serviceName, System.Guid shareId) {
            string uri = $"/v1/storage/netapp/{serviceName}/share/{shareId}/snapshot";
            return this.SendAsync<_storage.NetAppShareSnapshot>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/share/{shareId}/snapshot/{snapshotId}
        public Task DeleteV1StorageNetappServiceNameShareShareIdSnapshotSnapshotIdAsync(System.Guid serviceName, System.Guid shareId, System.Guid snapshotId) {
            string uri = $"/v1/storage/netapp/{serviceName}/share/{shareId}/snapshot/{snapshotId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/share/{shareId}/snapshot/{snapshotId}
        public Task<_storage.NetAppShareSnapshot> GetV1StorageNetappServiceNameShareShareIdSnapshotSnapshotIdAsync(System.Guid serviceName, System.Guid shareId, System.Guid snapshotId) {
            string uri = $"/v1/storage/netapp/{serviceName}/share/{shareId}/snapshot/{snapshotId}";
            return this.SendAsync<_storage.NetAppShareSnapshot>("GET", uri, null, null, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/share/{shareId}/snapshot/{snapshotId}
        public Task<_storage.NetAppShareSnapshot> PutV1StorageNetappServiceNameShareShareIdSnapshotSnapshotIdAsync(_storage.NetAppShareSnapshotUpdate _body, System.Guid serviceName, System.Guid shareId, System.Guid snapshotId) {
            string uri = $"/v1/storage/netapp/{serviceName}/share/{shareId}/snapshot/{snapshotId}";
            return this.SendAsync<_storage.NetAppShareSnapshot>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/share/{shareId}/snapshot/{snapshotId}/hold
        public Task<_storage.NetAppShareSnapshot> PostV1StorageNetappServiceNameShareShareIdSnapshotSnapshotIdHoldAsync(System.Guid serviceName, System.Guid shareId, System.Guid snapshotId) {
            string uri = $"/v1/storage/netapp/{serviceName}/share/{shareId}/snapshot/{snapshotId}/hold";
            return this.SendAsync<_storage.NetAppShareSnapshot>("POST", uri, null, null, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/share/{shareId}/snapshotPolicy
        public Task<_storage.NetAppShareSnapshotPolicy> GetV1StorageNetappServiceNameShareShareIdSnapshotPolicyAsync(System.Guid serviceName, System.Guid shareId) {
            string uri = $"/v1/storage/netapp/{serviceName}/share/{shareId}/snapshotPolicy";
            return this.SendAsync<_storage.NetAppShareSnapshotPolicy>("GET", uri, null, null, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/share/{shareId}/snapshotPolicy
        public Task PutV1StorageNetappServiceNameShareShareIdSnapshotPolicyAsync(_storage.NetAppShareSnapshotPolicyUpdate _body, System.Guid serviceName, System.Guid shareId) {
            string uri = $"/v1/storage/netapp/{serviceName}/share/{shareId}/snapshotPolicy";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/share/{shareId}/snapshotReserve
        public Task<_storage.NetAppShareSnapshotReserve> GetV1StorageNetappServiceNameShareShareIdSnapshotReserveAsync(System.Guid serviceName, System.Guid shareId) {
            string uri = $"/v1/storage/netapp/{serviceName}/share/{shareId}/snapshotReserve";
            return this.SendAsync<_storage.NetAppShareSnapshotReserve>("GET", uri, null, null, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/share/{shareId}/snapshotReserve
        public Task PutV1StorageNetappServiceNameShareShareIdSnapshotReserveAsync(_storage.NetAppShareSnapshotReserveUpdate _body, System.Guid serviceName, System.Guid shareId) {
            string uri = $"/v1/storage/netapp/{serviceName}/share/{shareId}/snapshotReserve";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/snapshotPolicy
        public Task<_storage.NetAppSnapshotPolicy[]> GetV1StorageNetappServiceNameSnapshotPolicyAsync(System.Guid serviceName) {
            string uri = $"/v1/storage/netapp/{serviceName}/snapshotPolicy";
            return this.SendAsync<_storage.NetAppSnapshotPolicy[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/snapshotPolicy
        public Task<_storage.NetAppSnapshotPolicy> PostV1StorageNetappServiceNameSnapshotPolicyAsync(_storage.NetAppSnapshotPolicy _body, System.Guid serviceName) {
            string uri = $"/v1/storage/netapp/{serviceName}/snapshotPolicy";
            return this.SendAsync<_storage.NetAppSnapshotPolicy>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/snapshotPolicy/{snapshotPolicyId}
        public Task DeleteV1StorageNetappServiceNameSnapshotPolicySnapshotPolicyIdAsync(System.Guid serviceName, System.Guid snapshotPolicyId) {
            string uri = $"/v1/storage/netapp/{serviceName}/snapshotPolicy/{snapshotPolicyId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/snapshotPolicy/{snapshotPolicyId}
        public Task<_storage.NetAppSnapshotPolicy> GetV1StorageNetappServiceNameSnapshotPolicySnapshotPolicyIdAsync(System.Guid serviceName, System.Guid snapshotPolicyId) {
            string uri = $"/v1/storage/netapp/{serviceName}/snapshotPolicy/{snapshotPolicyId}";
            return this.SendAsync<_storage.NetAppSnapshotPolicy>("GET", uri, null, null, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/snapshotPolicy/{snapshotPolicyId}
        public Task PutV1StorageNetappServiceNameSnapshotPolicySnapshotPolicyIdAsync(_storage.NetAppSnapshotPolicyUpdate _body, System.Guid serviceName, System.Guid snapshotPolicyId) {
            string uri = $"/v1/storage/netapp/{serviceName}/snapshotPolicy/{snapshotPolicyId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/storage/netapp/{serviceName}/terminate
        public Task<System.String> PostV1StorageNetappServiceNameTerminateAsync(System.Guid serviceName) {
            string uri = $"/v1/storage/netapp/{serviceName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/supply/mondialRelay
        public Task<_supply.MondialRelayReturn> PostV1SupplyMondialRelayAsync(_coreTypes.CountryEnum country, [System.Runtime.InteropServices.OptionalAttribute()] System.String? address, [System.Runtime.InteropServices.OptionalAttribute()] System.String? city, [System.Runtime.InteropServices.OptionalAttribute()] System.String? zipcode) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("address", address);
            _body.Add("city", city);
            _body.Add("country", country);
            _body.Add("zipcode", zipcode);
            string uri = $"/v1/supply/mondialRelay";
            return this.SendAsync<_supply.MondialRelayReturn>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/support/tickets
        public Task<System.Int64[]> GetV1SupportTicketsAsync([System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? archived, [System.Runtime.InteropServices.OptionalAttribute()] _support.TicketCategoryEnum? category, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? customerReplyNeeded, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? excludeAutogenerated, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? maxCreationDate, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? minCreationDate, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? page, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? pageSize, [System.Runtime.InteropServices.OptionalAttribute()] _support.TicketProductEnum? product, [System.Runtime.InteropServices.OptionalAttribute()] System.String? serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _support.TicketStatusEnum? status, [System.Runtime.InteropServices.OptionalAttribute()] System.String? subject, [System.Runtime.InteropServices.OptionalAttribute()] System.String? ticketNumber) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("archived", archived);
            queryParametersTemp.Add("category", category);
            queryParametersTemp.Add("customerReplyNeeded", customerReplyNeeded);
            queryParametersTemp.Add("excludeAutogenerated", excludeAutogenerated);
            queryParametersTemp.Add("maxCreationDate", maxCreationDate);
            queryParametersTemp.Add("minCreationDate", minCreationDate);
            queryParametersTemp.Add("page", page);
            queryParametersTemp.Add("pageSize", pageSize);
            queryParametersTemp.Add("product", product);
            queryParametersTemp.Add("serviceName", serviceName);
            queryParametersTemp.Add("status", status);
            queryParametersTemp.Add("subject", subject);
            queryParametersTemp.Add("ticketNumber", ticketNumber);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/support/tickets{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/support/tickets/create
        public Task<_support.NewMessageInfo> PostV1SupportTicketsCreateAsync(string body, string subject, [System.Runtime.InteropServices.OptionalAttribute()] _support.TicketCategoryEnum? category, [System.Runtime.InteropServices.OptionalAttribute()] _support.TicketImpactUrgencyEnum? impact, [System.Runtime.InteropServices.OptionalAttribute()] _support.TicketProductEnum? product, [System.Runtime.InteropServices.OptionalAttribute()] System.String? serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _support.TicketSubCategoryEnum? subcategory, [System.Runtime.InteropServices.OptionalAttribute()] _support.TicketTypeEnum? type, [System.Runtime.InteropServices.OptionalAttribute()] _support.TicketImpactUrgencyEnum? urgency, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? watchers) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("body", body);
            _body.Add("category", category);
            _body.Add("impact", impact);
            _body.Add("product", product);
            _body.Add("serviceName", serviceName);
            _body.Add("subcategory", subcategory);
            _body.Add("subject", subject);
            _body.Add("type", type);
            _body.Add("urgency", urgency);
            _body.Add("watchers", watchers);
            string uri = $"/v1/support/tickets/create";
            return this.SendAsync<_support.NewMessageInfo>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/support/tickets/{ticketId}
        public Task<_support.Ticket> GetV1SupportTicketsTicketIdAsync(long ticketId) {
            string uri = $"/v1/support/tickets/{ticketId}";
            return this.SendAsync<_support.Ticket>("GET", uri, null, null, true);
        }
        
        // Path: /v1/support/tickets/{ticketId}/canBeScored
        public Task<System.Boolean> GetV1SupportTicketsTicketIdCanBeScoredAsync(long ticketId) {
            string uri = $"/v1/support/tickets/{ticketId}/canBeScored";
            return this.SendAsync<bool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/support/tickets/{ticketId}/close
        public Task PostV1SupportTicketsTicketIdCloseAsync(long ticketId) {
            string uri = $"/v1/support/tickets/{ticketId}/close";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/support/tickets/{ticketId}/messages
        public Task<_support.Message[]> GetV1SupportTicketsTicketIdMessagesAsync(long ticketId) {
            string uri = $"/v1/support/tickets/{ticketId}/messages";
            return this.SendAsync<_support.Message[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/support/tickets/{ticketId}/reopen
        public Task PostV1SupportTicketsTicketIdReopenAsync(string body, long ticketId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("body", body);
            string uri = $"/v1/support/tickets/{ticketId}/reopen";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/support/tickets/{ticketId}/reply
        public Task PostV1SupportTicketsTicketIdReplyAsync(string body, long ticketId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("body", body);
            string uri = $"/v1/support/tickets/{ticketId}/reply";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/support/tickets/{ticketId}/score
        public Task PostV1SupportTicketsTicketIdScoreAsync(string score, long ticketId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? scoreComment) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("score", score);
            _body.Add("scoreComment", scoreComment);
            string uri = $"/v1/support/tickets/{ticketId}/score";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony
        public Task<System.String[]> GetV1TelephonyAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/accessories
        public Task<_telephony.AccessoryOffer[]> GetV1TelephonyAccessoriesAsync(_telephony.ServiceNumberCountryEnum country, [System.Runtime.InteropServices.OptionalAttribute()] System.String? brand) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("brand", brand);
            queryParametersTemp.Add("country", country);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/accessories{queryParameters}";
            return this.SendAsync<_telephony.AccessoryOffer[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/aliases
        public Task<System.String[]> GetV1TelephonyAliasesAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/aliases{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/aliases/{serviceName}
        public Task<_telephony.TelephonyGenericServiceWithIAM> GetV1TelephonyAliasesServiceNameAsync(string serviceName) {
            string uri = $"/v1/telephony/aliases/{serviceName}";
            return this.SendAsync<_telephony.TelephonyGenericServiceWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/aliases/{serviceName}/changeContact
        public Task<System.Int64[]> PostV1TelephonyAliasesServiceNameChangeContactAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactTech) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("contactAdmin", contactAdmin);
            _body.Add("contactBilling", contactBilling);
            _body.Add("contactTech", contactTech);
            string uri = $"/v1/telephony/aliases/{serviceName}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/aliases/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1TelephonyAliasesServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/telephony/aliases/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/aliases/{serviceName}/serviceInfos
        public Task PutV1TelephonyAliasesServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/telephony/aliases/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/availableDefaultSipDomains
        public Task<_telephony.DefaultSipDomains[]> GetV1TelephonyAvailableDefaultSipDomainsAsync(_telephony.SipDomainProductTypeEnum type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/availableDefaultSipDomains{queryParameters}";
            return this.SendAsync<_telephony.DefaultSipDomains[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/currentOrderIds
        public Task<System.Int64[]> GetV1TelephonyCurrentOrderIdsAsync() {
            string uri = $"/v1/telephony/currentOrderIds";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/directories/availableZipCodes
        public Task<System.String[]> GetV1TelephonyDirectoriesAvailableZipCodesAsync(_telephony.ServiceNumberCountryEnum country, string number) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("country", country);
            queryParametersTemp.Add("number", number);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/directories/availableZipCodes{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/telephony/directories/cities
        public Task<_telephony.City[]> GetV1TelephonyDirectoriesCitiesAsync(_telephony.ServiceNumberCountryEnum country, string zipCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("country", country);
            queryParametersTemp.Add("zipCode", zipCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/directories/cities{queryParameters}";
            return this.SendAsync<_telephony.City[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/telephony/fax/offers
        public Task<_telephony.LineOffer[]> GetV1TelephonyFaxOffersAsync(_telephony.NumberCountryEnum country) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("country", country);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/fax/offers{queryParameters}";
            return this.SendAsync<_telephony.LineOffer[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/telephony/line/offer/phones
        public Task<_telephony.LinePhone[]> GetV1TelephonyLineOfferPhonesAsync(_telephony.ServiceNumberCountryEnum country, string offer) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("country", country);
            queryParametersTemp.Add("offer", offer);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/line/offer/phones{queryParameters}";
            return this.SendAsync<_telephony.LinePhone[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/telephony/line/offers
        public Task<_telephony.LineOffer[]> GetV1TelephonyLineOffersAsync(_telephony.NumberCountryEnum country) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("country", country);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/line/offers{queryParameters}";
            return this.SendAsync<_telephony.LineOffer[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/telephony/lines
        public Task<System.String[]> GetV1TelephonyLinesAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/lines{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/lines/{serviceName}
        public Task<_telephony.TelephonyGenericServiceWithIAM> GetV1TelephonyLinesServiceNameAsync(string serviceName) {
            string uri = $"/v1/telephony/lines/{serviceName}";
            return this.SendAsync<_telephony.TelephonyGenericServiceWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/lines/{serviceName}/changeContact
        public Task<System.Int64[]> PostV1TelephonyLinesServiceNameChangeContactAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactTech) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("contactAdmin", contactAdmin);
            _body.Add("contactBilling", contactBilling);
            _body.Add("contactTech", contactTech);
            string uri = $"/v1/telephony/lines/{serviceName}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/lines/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1TelephonyLinesServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/telephony/lines/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/lines/{serviceName}/serviceInfos
        public Task PutV1TelephonyLinesServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/telephony/lines/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/number/detailedZones
        public Task<_telephony.NumberDetailedZone[]> GetV1TelephonyNumberDetailedZonesAsync(_telephony.NumberCountryEnum country, [System.Runtime.InteropServices.OptionalAttribute()] System.String? axiom) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("axiom", axiom);
            queryParametersTemp.Add("country", country);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/number/detailedZones{queryParameters}";
            return this.SendAsync<_telephony.NumberDetailedZone[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/telephony/number/ranges
        public Task<System.String[]> GetV1TelephonyNumberRangesAsync(_telephony.NumberCountryEnum country) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("country", country);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/number/ranges{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/telephony/number/specificNumbers
        public Task<_telephony.SpecificNumber[]> GetV1TelephonyNumberSpecificNumbersAsync(_telephony.NumberCountryEnum country, _telephony.NumberTypeEnum type, [System.Runtime.InteropServices.OptionalAttribute()] System.String? range, [System.Runtime.InteropServices.OptionalAttribute()] System.String? zone) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("country", country);
            queryParametersTemp.Add("range", range);
            queryParametersTemp.Add("type", type);
            queryParametersTemp.Add("zone", zone);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/number/specificNumbers{queryParameters}";
            return this.SendAsync<_telephony.SpecificNumber[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/telephony/number/zones
        public Task<System.String[]> GetV1TelephonyNumberZonesAsync(_telephony.NumberCountryEnum country, [System.Runtime.InteropServices.OptionalAttribute()] System.String? axiom) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("axiom", axiom);
            queryParametersTemp.Add("country", country);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/number/zones{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/telephony/procedure
        public Task<System.Int64[]> GetV1TelephonyProcedureAsync() {
            string uri = $"/v1/telephony/procedure";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/procedure
        public Task<_telephony.Procedure> PostV1TelephonyProcedureAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? bic, [System.Runtime.InteropServices.OptionalAttribute()] System.String? iban, [System.Runtime.InteropServices.OptionalAttribute()] System.String? ownerAddress, [System.Runtime.InteropServices.OptionalAttribute()] System.String? ownerName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? paymentMeanID) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("bic", bic);
            _body.Add("iban", iban);
            _body.Add("ownerAddress", ownerAddress);
            _body.Add("ownerName", ownerName);
            _body.Add("paymentMeanID", paymentMeanID);
            string uri = $"/v1/telephony/procedure";
            return this.SendAsync<_telephony.Procedure>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/procedure/required
        public Task<System.Boolean> GetV1TelephonyProcedureRequiredAsync() {
            string uri = $"/v1/telephony/procedure/required";
            return this.SendAsync<bool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/procedure/{id}
        public Task<_telephony.Procedure> GetV1TelephonyProcedureIdAsync(long id) {
            string uri = $"/v1/telephony/procedure/{id}";
            return this.SendAsync<_telephony.Procedure>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/procedure/{id}/cancel
        public Task PostV1TelephonyProcedureIdCancelAsync(long id) {
            string uri = $"/v1/telephony/procedure/{id}/cancel";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/resellerPanel/generatePassword
        public Task PostV1TelephonyResellerPanelGeneratePasswordAsync() {
            string uri = $"/v1/telephony/resellerPanel/generatePassword";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/resellerPanel/status
        public Task<_telephony.ResellerPanelStatus> GetV1TelephonyResellerPanelStatusAsync() {
            string uri = $"/v1/telephony/resellerPanel/status";
            return this.SendAsync<_telephony.ResellerPanelStatus>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/searchServices
        public Task<_telephony.TelephonySearchService[]> GetV1TelephonySearchServicesAsync(string axiom) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("axiom", axiom);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/searchServices{queryParameters}";
            return this.SendAsync<_telephony.TelephonySearchService[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/setDefaultSipDomain
        public Task PostV1TelephonySetDefaultSipDomainAsync(_telephony.ServiceNumberCountryEnum country, string domain, _telephony.SipDomainProductTypeEnum type) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("country", country);
            _body.Add("domain", domain);
            _body.Add("type", type);
            string uri = $"/v1/telephony/setDefaultSipDomain";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/softphoneBetaEligibility
        public Task<_telephony.SoftphoneBetaEligibility> GetV1TelephonySoftphoneBetaEligibilityAsync() {
            string uri = $"/v1/telephony/softphoneBetaEligibility";
            return this.SendAsync<_telephony.SoftphoneBetaEligibility>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/sounds
        public Task<System.Int64[]> GetV1TelephonySoundsAsync() {
            string uri = $"/v1/telephony/sounds";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/sounds
        public Task<_telephony.Sound> PostV1TelephonySoundsAsync(string filename, [System.Runtime.InteropServices.OptionalAttribute()] System.String? description) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("description", description);
            _body.Add("filename", filename);
            string uri = $"/v1/telephony/sounds";
            return this.SendAsync<_telephony.Sound>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/sounds/{id}
        public Task DeleteV1TelephonySoundsIdAsync(long id) {
            string uri = $"/v1/telephony/sounds/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/sounds/{id}
        public Task<_telephony.Sound> GetV1TelephonySoundsIdAsync(long id) {
            string uri = $"/v1/telephony/sounds/{id}";
            return this.SendAsync<_telephony.Sound>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/sounds/{id}
        public Task PutV1TelephonySoundsIdAsync(_telephony.Sound _body, long id) {
            string uri = $"/v1/telephony/sounds/{id}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/spare
        public Task<System.String[]> GetV1TelephonySpareAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/spare{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/spare/brands
        public Task<System.String[]> GetV1TelephonySpareBrandsAsync() {
            string uri = $"/v1/telephony/spare/brands";
            return this.SendAsync<string[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/telephony/spare/{spare}
        public Task DeleteV1TelephonySpareSpareAsync(string spare) {
            string uri = $"/v1/telephony/spare/{spare}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/spare/{spare}
        public Task<_spare_telephony.TelephonySpareWithIAM> GetV1TelephonySpareSpareAsync(string spare) {
            string uri = $"/v1/telephony/spare/{spare}";
            return this.SendAsync<_spare_telephony.TelephonySpareWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/spare/{spare}/compatibleReplacement
        public Task<System.String[]> GetV1TelephonySpareSpareCompatibleReplacementAsync(string spare) {
            string uri = $"/v1/telephony/spare/{spare}/compatibleReplacement";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/spare/{spare}/replace
        public Task PostV1TelephonySpareSpareReplaceAsync(string domain, string ip, string spare) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("domain", domain);
            _body.Add("ip", ip);
            string uri = $"/v1/telephony/spare/{spare}/replace";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/spare/{spare}/serviceInfos
        public Task<_services.Service> GetV1TelephonySpareSpareServiceInfosAsync(string spare) {
            string uri = $"/v1/telephony/spare/{spare}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/spare/{spare}/serviceInfos
        public Task PutV1TelephonySpareSpareServiceInfosAsync(_services.Service _body, string spare) {
            string uri = $"/v1/telephony/spare/{spare}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/trunks
        public Task<System.String[]> GetV1TelephonyTrunksAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/trunks{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/trunks/{serviceName}
        public Task<_telephony.TelephonyGenericServiceWithIAM> GetV1TelephonyTrunksServiceNameAsync(string serviceName) {
            string uri = $"/v1/telephony/trunks/{serviceName}";
            return this.SendAsync<_telephony.TelephonyGenericServiceWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/trunks/{serviceName}/changeContact
        public Task<System.Int64[]> PostV1TelephonyTrunksServiceNameChangeContactAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactTech) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("contactAdmin", contactAdmin);
            _body.Add("contactBilling", contactBilling);
            _body.Add("contactTech", contactTech);
            string uri = $"/v1/telephony/trunks/{serviceName}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/trunks/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1TelephonyTrunksServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/telephony/trunks/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/trunks/{serviceName}/serviceInfos
        public Task PutV1TelephonyTrunksServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/telephony/trunks/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}
        public Task DeleteV1TelephonyBillingAccountAsync(string billingAccount, _telephony.TerminationReasonEnum reason, [System.Runtime.InteropServices.OptionalAttribute()] System.String? details) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("details", details);
            queryParametersTemp.Add("reason", reason);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/{billingAccount}{queryParameters}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}
        public Task<_telephony.BillingAccountWithIAM> GetV1TelephonyBillingAccountAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}";
            return this.SendAsync<_telephony.BillingAccountWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}
        public Task PutV1TelephonyBillingAccountAsync(_telephony.BillingAccount _body, string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/abbreviatedNumber
        public Task<System.Int64[]> GetV1TelephonyBillingAccountAbbreviatedNumberAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/abbreviatedNumber";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/abbreviatedNumber
        public Task<_telephony.AbbreviatedNumberGroup> PostV1TelephonyBillingAccountAbbreviatedNumberAsync(long abbreviatedNumber, string billingAccount, string destinationNumber, string name, string surname) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("abbreviatedNumber", abbreviatedNumber);
            _body.Add("destinationNumber", destinationNumber);
            _body.Add("name", name);
            _body.Add("surname", surname);
            string uri = $"/v1/telephony/{billingAccount}/abbreviatedNumber";
            return this.SendAsync<_telephony.AbbreviatedNumberGroup>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/abbreviatedNumber/{abbreviatedNumber}
        public Task DeleteV1TelephonyBillingAccountAbbreviatedNumberAbbreviatedNumberAsync(long abbreviatedNumber, string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/abbreviatedNumber/{abbreviatedNumber}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/abbreviatedNumber/{abbreviatedNumber}
        public Task<_telephony.AbbreviatedNumberGroup> GetV1TelephonyBillingAccountAbbreviatedNumberAbbreviatedNumberAsync(long abbreviatedNumber, string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/abbreviatedNumber/{abbreviatedNumber}";
            return this.SendAsync<_telephony.AbbreviatedNumberGroup>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/abbreviatedNumber/{abbreviatedNumber}
        public Task PutV1TelephonyBillingAccountAbbreviatedNumberAbbreviatedNumberAsync(_telephony.AbbreviatedNumberGroup _body, long abbreviatedNumber, string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/abbreviatedNumber/{abbreviatedNumber}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/allowedCreditThreshold
        public Task<_order.Price[]> GetV1TelephonyBillingAccountAllowedCreditThresholdAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/allowedCreditThreshold";
            return this.SendAsync<_order.Price[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/amountSecurityDeposit
        public Task<_order.Price[]> GetV1TelephonyBillingAccountAmountSecurityDepositAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/amountSecurityDeposit";
            return this.SendAsync<_order.Price[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/billingAccountSite
        public Task<System.String> GetV1TelephonyBillingAccountBillingAccountSiteAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/billingAccountSite";
            return this.SendAsync<string>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/billingAccountSite
        public Task PostV1TelephonyBillingAccountBillingAccountSiteAsync(string billingAccount, string billingAccountSite) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("billingAccountSite", billingAccountSite);
            string uri = $"/v1/telephony/{billingAccount}/billingAccountSite";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/canTransferSecurityDeposit
        public Task<System.Boolean> PostV1TelephonyBillingAccountCanTransferSecurityDepositAsync(string billingAccount, string billingAccountDestination) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("billingAccountDestination", billingAccountDestination);
            string uri = $"/v1/telephony/{billingAccount}/canTransferSecurityDeposit";
            return this.SendAsync<bool>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/cancelTermination
        public Task PostV1TelephonyBillingAccountCancelTerminationAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/cancelTermination";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/carrierSip
        public Task<System.String[]> GetV1TelephonyBillingAccountCarrierSipAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/carrierSip";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/carrierSip/{serviceName}
        public Task<_telephony.CarrierSip> GetV1TelephonyBillingAccountCarrierSipServiceNameAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/carrierSip/{serviceName}";
            return this.SendAsync<_telephony.CarrierSip>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/carrierSip/{serviceName}/cdrs
        public Task<_telephony.Document> GetV1TelephonyBillingAccountCarrierSipServiceNameCdrsAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? month) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("month", month);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/{billingAccount}/carrierSip/{serviceName}/cdrs{queryParameters}";
            return this.SendAsync<_telephony.Document>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/carrierSip/{serviceName}/clusterDetails
        public Task<_telephony.CarrierSipClusterInfo> GetV1TelephonyBillingAccountCarrierSipServiceNameClusterDetailsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/carrierSip/{serviceName}/clusterDetails";
            return this.SendAsync<_telephony.CarrierSipClusterInfo>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/carrierSip/{serviceName}/endpoints
        public Task<System.Int64[]> GetV1TelephonyBillingAccountCarrierSipServiceNameEndpointsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/carrierSip/{serviceName}/endpoints";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/carrierSip/{serviceName}/endpoints/{id}
        public Task<_telephony.CarrierSipCustomerEndpoint> GetV1TelephonyBillingAccountCarrierSipServiceNameEndpointsIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/carrierSip/{serviceName}/endpoints/{id}";
            return this.SendAsync<_telephony.CarrierSipCustomerEndpoint>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/carrierSip/{serviceName}/settings
        public Task<_telephony.CarrierSipDetails> GetV1TelephonyBillingAccountCarrierSipServiceNameSettingsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/carrierSip/{serviceName}/settings";
            return this.SendAsync<_telephony.CarrierSipDetails>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/carrierSip/{serviceName}/settings
        public Task PutV1TelephonyBillingAccountCarrierSipServiceNameSettingsAsync(_telephony.CarrierSipDetails _body, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/carrierSip/{serviceName}/settings";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/carrierSip/{serviceName}/vno
        public Task<System.String[]> GetV1TelephonyBillingAccountCarrierSipServiceNameVnoAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/carrierSip/{serviceName}/vno";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/carrierSip/{serviceName}/vno/{contractReference}
        public Task<_telephony.CarrierSipVnoMandate> GetV1TelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceAsync(string billingAccount, string contractReference, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/carrierSip/{serviceName}/vno/{contractReference}";
            return this.SendAsync<_telephony.CarrierSipVnoMandate>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/carrierSip/{serviceName}/vno/{contractReference}/ranges
        public Task<System.String[]> GetV1TelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesAsync(string billingAccount, string contractReference, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/carrierSip/{serviceName}/vno/{contractReference}/ranges";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/carrierSip/{serviceName}/vno/{contractReference}/ranges/{prefix}
        public Task<_telephony.CarrierSipVnoRange> GetV1TelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefixAsync(string billingAccount, string contractReference, string prefix, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/carrierSip/{serviceName}/vno/{contractReference}/ranges/{prefix}";
            return this.SendAsync<_telephony.CarrierSipVnoRange>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/carrierSip/{serviceName}/vno/{contractReference}/ranges/{prefix}
        public Task PutV1TelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefixAsync(_telephony.CarrierSipVnoRange _body, string billingAccount, string contractReference, string prefix, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/carrierSip/{serviceName}/vno/{contractReference}/ranges/{prefix}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/changeContact
        public Task<System.Int64[]> PostV1TelephonyBillingAccountChangeContactAsync(string billingAccount, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] System.String? contactTech) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("contactAdmin", contactAdmin);
            _body.Add("contactBilling", contactBilling);
            _body.Add("contactTech", contactTech);
            string uri = $"/v1/telephony/{billingAccount}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference
        public Task<System.String[]> GetV1TelephonyBillingAccountConferenceAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/conference";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}
        public Task<_telephony.Conference> GetV1TelephonyBillingAccountConferenceServiceNameAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}";
            return this.SendAsync<_telephony.Conference>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/announceUpload
        public Task<_telephony.Task> PostV1TelephonyBillingAccountConferenceServiceNameAnnounceUploadAsync(string billingAccount, string documentId, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("documentId", documentId);
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/announceUpload";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/histories
        public Task<System.Int64[]> GetV1TelephonyBillingAccountConferenceServiceNameHistoriesAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? dateBeginFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? dateBeginTo) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("dateBegin.from", dateBeginFrom);
            queryParametersTemp.Add("dateBegin.to", dateBeginTo);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/histories{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/histories/{id}
        public Task<_telephony.ConferenceHistory> GetV1TelephonyBillingAccountConferenceServiceNameHistoriesIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/histories/{id}";
            return this.SendAsync<_telephony.ConferenceHistory>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/informations
        public Task<_telephony.ConferenceInformations> GetV1TelephonyBillingAccountConferenceServiceNameInformationsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/informations";
            return this.SendAsync<_telephony.ConferenceInformations>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/lock
        public Task<_telephony.Task> PostV1TelephonyBillingAccountConferenceServiceNameLockAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/lock";
            return this.SendAsync<_telephony.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/participants
        public Task<System.Int64[]> GetV1TelephonyBillingAccountConferenceServiceNameParticipantsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/participants";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/participants/{id}
        public Task<_telephony.ConferenceParticipants> GetV1TelephonyBillingAccountConferenceServiceNameParticipantsIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/participants/{id}";
            return this.SendAsync<_telephony.ConferenceParticipants>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/participants/{id}/deaf
        public Task<_telephony.Task> PostV1TelephonyBillingAccountConferenceServiceNameParticipantsIdDeafAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/participants/{id}/deaf";
            return this.SendAsync<_telephony.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/participants/{id}/energy
        public Task<_telephony.Task> PostV1TelephonyBillingAccountConferenceServiceNameParticipantsIdEnergyAsync(string billingAccount, long id, string serviceName, long value) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("value", value);
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/participants/{id}/energy";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/participants/{id}/kick
        public Task<_telephony.Task> PostV1TelephonyBillingAccountConferenceServiceNameParticipantsIdKickAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/participants/{id}/kick";
            return this.SendAsync<_telephony.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/participants/{id}/mute
        public Task<_telephony.Task> PostV1TelephonyBillingAccountConferenceServiceNameParticipantsIdMuteAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/participants/{id}/mute";
            return this.SendAsync<_telephony.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/participants/{id}/undeaf
        public Task<_telephony.Task> PostV1TelephonyBillingAccountConferenceServiceNameParticipantsIdUndeafAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/participants/{id}/undeaf";
            return this.SendAsync<_telephony.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/participants/{id}/unmute
        public Task<_telephony.Task> PostV1TelephonyBillingAccountConferenceServiceNameParticipantsIdUnmuteAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/participants/{id}/unmute";
            return this.SendAsync<_telephony.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/rooms
        public Task<System.Int64[]> GetV1TelephonyBillingAccountConferenceServiceNameRoomsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/rooms";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/rooms
        public Task<_telephony.ConferenceRoom> PostV1TelephonyBillingAccountConferenceServiceNameRoomsAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? roomNumber) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("roomNumber", roomNumber);
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/rooms";
            return this.SendAsync<_telephony.ConferenceRoom>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}
        public Task<_telephony.ConferenceRoom> GetV1TelephonyBillingAccountConferenceServiceNameRoomsRoomNumberAsync(string billingAccount, long roomNumber, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}";
            return this.SendAsync<_telephony.ConferenceRoom>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}
        public Task PutV1TelephonyBillingAccountConferenceServiceNameRoomsRoomNumberAsync(_telephony.ConferenceRoom _body, string billingAccount, long roomNumber, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/histories
        public Task<System.Int64[]> GetV1TelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesAsync(string billingAccount, long roomNumber, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? dateBeginFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? dateBeginTo) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("dateBegin.from", dateBeginFrom);
            queryParametersTemp.Add("dateBegin.to", dateBeginTo);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/histories{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/histories/{id}
        public Task<_telephony.ConferenceHistory> GetV1TelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesIdAsync(string billingAccount, long id, long roomNumber, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/histories/{id}";
            return this.SendAsync<_telephony.ConferenceHistory>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/lock
        public Task<_telephony.Task> PostV1TelephonyBillingAccountConferenceServiceNameRoomsRoomNumberLockAsync(string billingAccount, long roomNumber, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/lock";
            return this.SendAsync<_telephony.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants
        public Task<System.Int64[]> GetV1TelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsAsync(string billingAccount, long roomNumber, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants/{id}
        public Task<_telephony.ConferenceParticipants> GetV1TelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdAsync(string billingAccount, long id, long roomNumber, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants/{id}";
            return this.SendAsync<_telephony.ConferenceParticipants>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants/{id}/deaf
        public Task<_telephony.Task> PostV1TelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdDeafAsync(string billingAccount, long id, long roomNumber, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants/{id}/deaf";
            return this.SendAsync<_telephony.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants/{id}/energy
        public Task<_telephony.Task> PostV1TelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdEnergyAsync(string billingAccount, long id, long roomNumber, string serviceName, long value) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("value", value);
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants/{id}/energy";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants/{id}/kick
        public Task<_telephony.Task> PostV1TelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdKickAsync(string billingAccount, long id, long roomNumber, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants/{id}/kick";
            return this.SendAsync<_telephony.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants/{id}/mute
        public Task<_telephony.Task> PostV1TelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdMuteAsync(string billingAccount, long id, long roomNumber, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants/{id}/mute";
            return this.SendAsync<_telephony.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants/{id}/undeaf
        public Task<_telephony.Task> PostV1TelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUndeafAsync(string billingAccount, long id, long roomNumber, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants/{id}/undeaf";
            return this.SendAsync<_telephony.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants/{id}/unmute
        public Task<_telephony.Task> PostV1TelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUnmuteAsync(string billingAccount, long id, long roomNumber, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants/{id}/unmute";
            return this.SendAsync<_telephony.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/unlock
        public Task<_telephony.Task> PostV1TelephonyBillingAccountConferenceServiceNameRoomsRoomNumberUnlockAsync(string billingAccount, long roomNumber, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/unlock";
            return this.SendAsync<_telephony.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/webAccess
        public Task<System.Int64[]> GetV1TelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessAsync(string billingAccount, long roomNumber, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/webAccess";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/webAccess
        public Task<_telephony.ConferenceWebAccess> PostV1TelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessAsync(string billingAccount, long roomNumber, string serviceName, _telephony.ConferenceWebAccessTypeEnum type) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("type", type);
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/webAccess";
            return this.SendAsync<_telephony.ConferenceWebAccess>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/webAccess/{id}
        public Task DeleteV1TelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessIdAsync(string billingAccount, long id, long roomNumber, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/webAccess/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/webAccess/{id}
        public Task<_telephony.ConferenceWebAccess> GetV1TelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessIdAsync(string billingAccount, long id, long roomNumber, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/webAccess/{id}";
            return this.SendAsync<_telephony.ConferenceWebAccess>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/roomsStats
        public Task<_telephony.ConferenceRoomsStatistics> GetV1TelephonyBillingAccountConferenceServiceNameRoomsStatsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/roomsStats";
            return this.SendAsync<_telephony.ConferenceRoomsStatistics>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/settings
        public Task<_telephony.ConferenceProperties> GetV1TelephonyBillingAccountConferenceServiceNameSettingsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/settings";
            return this.SendAsync<_telephony.ConferenceProperties>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/settings
        public Task PutV1TelephonyBillingAccountConferenceServiceNameSettingsAsync(_telephony.ConferenceProperties _body, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/settings";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/unlock
        public Task<_telephony.Task> PostV1TelephonyBillingAccountConferenceServiceNameUnlockAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/unlock";
            return this.SendAsync<_telephony.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/webAccess
        public Task<System.Int64[]> GetV1TelephonyBillingAccountConferenceServiceNameWebAccessAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/webAccess";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/webAccess
        public Task<_telephony.ConferenceWebAccess> PostV1TelephonyBillingAccountConferenceServiceNameWebAccessAsync(string billingAccount, string serviceName, _telephony.ConferenceWebAccessTypeEnum type) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("type", type);
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/webAccess";
            return this.SendAsync<_telephony.ConferenceWebAccess>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/webAccess/{id}
        public Task DeleteV1TelephonyBillingAccountConferenceServiceNameWebAccessIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/webAccess/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/conference/{serviceName}/webAccess/{id}
        public Task<_telephony.ConferenceWebAccess> GetV1TelephonyBillingAccountConferenceServiceNameWebAccessIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/conference/{serviceName}/webAccess/{id}";
            return this.SendAsync<_telephony.ConferenceWebAccess>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ddi
        public Task<System.String[]> GetV1TelephonyBillingAccountDdiAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/ddi";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ddi/{serviceName}
        public Task<_telephony.Ddi> GetV1TelephonyBillingAccountDdiServiceNameAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ddi/{serviceName}";
            return this.SendAsync<_telephony.Ddi>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ddi/{serviceName}
        public Task PutV1TelephonyBillingAccountDdiServiceNameAsync(_telephony.Ddi _body, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ddi/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ddi/{serviceName}/changeDestination
        public Task<_telephony.Task> PostV1TelephonyBillingAccountDdiServiceNameChangeDestinationAsync(string billingAccount, string destination, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("destination", destination);
            string uri = $"/v1/telephony/{billingAccount}/ddi/{serviceName}/changeDestination";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting
        public Task<System.String[]> GetV1TelephonyBillingAccountEasyHuntingAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}
        public Task<_telephony.EasyHunting> GetV1TelephonyBillingAccountEasyHuntingServiceNameAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}";
            return this.SendAsync<_telephony.EasyHunting>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}
        public Task PutV1TelephonyBillingAccountEasyHuntingServiceNameAsync(_telephony.EasyHunting _body, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting
        public Task<_telephony.OvhPabxHunting> GetV1TelephonyBillingAccountEasyHuntingServiceNameHuntingAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting";
            return this.SendAsync<_telephony.OvhPabxHunting>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting
        public Task PutV1TelephonyBillingAccountEasyHuntingServiceNameHuntingAsync(_telephony.OvhPabxHunting _body, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent
        public Task<System.Int64[]> GetV1TelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent
        public Task<_telephony.OvhPabxHuntingAgent> PostV1TelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAsync(string billingAccount, string number, string serviceName, long simultaneousLines, _telephony.OvhPabxHuntingAgentStatusEnum status, long timeout, long wrapUpTime, [System.Runtime.InteropServices.OptionalAttribute()] System.String? description) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("description", description);
            _body.Add("number", number);
            _body.Add("simultaneousLines", simultaneousLines);
            _body.Add("status", status);
            _body.Add("timeout", timeout);
            _body.Add("wrapUpTime", wrapUpTime);
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent";
            return this.SendAsync<_telephony.OvhPabxHuntingAgent>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}
        public Task DeleteV1TelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdAsync(long agentId, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}
        public Task<_telephony.OvhPabxHuntingAgent> GetV1TelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdAsync(long agentId, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}";
            return this.SendAsync<_telephony.OvhPabxHuntingAgent>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}
        public Task PutV1TelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdAsync(_telephony.OvhPabxHuntingAgent _body, long agentId, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/bannerAccess
        public Task DeleteV1TelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccessAsync(long agentId, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/bannerAccess";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/bannerAccess
        public Task<_telephony.BannerAccess> GetV1TelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccessAsync(long agentId, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/bannerAccess";
            return this.SendAsync<_telephony.BannerAccess>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/bannerAccess
        public Task<_telephony.BannerAccess> PostV1TelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccessAsync(long agentId, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/bannerAccess";
            return this.SendAsync<_telephony.BannerAccess>("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls
        public Task<System.Int64[]> GetV1TelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsAsync(long agentId, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls/{id}
        public Task<_telephony.OvhPabxHuntingQueueLiveCalls> GetV1TelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdAsync(long agentId, string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls/{id}";
            return this.SendAsync<_telephony.OvhPabxHuntingQueueLiveCalls>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls/{id}/eavesdrop
        public Task<_telephony.Task> PostV1TelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdEavesdropAsync(long agentId, string billingAccount, long id, string number, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("number", number);
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls/{id}/eavesdrop";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls/{id}/hangup
        public Task<_telephony.Task> PostV1TelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHangupAsync(long agentId, string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls/{id}/hangup";
            return this.SendAsync<_telephony.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls/{id}/hold
        public Task<_telephony.Task> PostV1TelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHoldAsync(long agentId, string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls/{id}/hold";
            return this.SendAsync<_telephony.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls/{id}/intercept
        public Task<_telephony.Task> PostV1TelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdInterceptAsync(long agentId, string billingAccount, long id, string number, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("number", number);
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls/{id}/intercept";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls/{id}/transfer
        public Task<_telephony.Task> PostV1TelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdTransferAsync(long agentId, string billingAccount, long id, string number, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("number", number);
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls/{id}/transfer";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls/{id}/whisper
        public Task<_telephony.Task> PostV1TelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdWhisperAsync(long agentId, string billingAccount, long id, string number, string serviceName, _telephony.OvhPabxWhisperingModeEnum whisperingMode) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("number", number);
            _body.Add("whisperingMode", whisperingMode);
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls/{id}/whisper";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/eventToken
        public Task DeleteV1TelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenAsync(long agentId, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/eventToken";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/eventToken
        public Task<_telephony.EventToken> GetV1TelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenAsync(long agentId, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/eventToken";
            return this.SendAsync<_telephony.EventToken>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/eventToken
        public Task<System.String> PostV1TelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenAsync(long agentId, string billingAccount, _telephony.TokenExpirationEnum expiration, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("expiration", expiration);
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/eventToken";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/liveStatus
        public Task<_telephony.OvhPabxHuntingAgentLiveStatus> GetV1TelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdLiveStatusAsync(long agentId, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/liveStatus";
            return this.SendAsync<_telephony.OvhPabxHuntingAgentLiveStatus>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/queue
        public Task<System.Int64[]> GetV1TelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueAsync(long agentId, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/queue";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/queue
        public Task<_telephony.OvhPabxHuntingAgentQueue> PostV1TelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueAsync(long agentId, string billingAccount, long position, long queueId, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("position", position);
            _body.Add("queueId", queueId);
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/queue";
            return this.SendAsync<_telephony.OvhPabxHuntingAgentQueue>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/queue/{queueId}
        public Task DeleteV1TelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdAsync(long agentId, string billingAccount, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/queue/{queueId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/queue/{queueId}
        public Task<_telephony.OvhPabxHuntingAgentQueue> GetV1TelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdAsync(long agentId, string billingAccount, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/queue/{queueId}";
            return this.SendAsync<_telephony.OvhPabxHuntingAgentQueue>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/queue/{queueId}
        public Task PutV1TelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdAsync(_telephony.OvhPabxHuntingAgentQueue _body, long agentId, string billingAccount, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/queue/{queueId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/queue/{queueId}/liveStatus
        public Task<_telephony.OvhPabxHuntingAgentLiveStatus> GetV1TelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatusAsync(long agentId, string billingAccount, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/queue/{queueId}/liveStatus";
            return this.SendAsync<_telephony.OvhPabxHuntingAgentLiveStatus>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/customStatus
        public Task<System.Int64[]> GetV1TelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/customStatus";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/customStatus
        public Task<_telephony.OvhPabxCustomStatus> PostV1TelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusAsync(string billingAccount, string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? color, [System.Runtime.InteropServices.OptionalAttribute()] System.String? description) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("color", color);
            _body.Add("description", description);
            _body.Add("name", name);
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/customStatus";
            return this.SendAsync<_telephony.OvhPabxCustomStatus>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/customStatus/{id}
        public Task DeleteV1TelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/customStatus/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/customStatus/{id}
        public Task<_telephony.OvhPabxCustomStatus> GetV1TelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/customStatus/{id}";
            return this.SendAsync<_telephony.OvhPabxCustomStatus>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/eventToken
        public Task DeleteV1TelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/eventToken";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/eventToken
        public Task<_telephony.EventToken> GetV1TelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/eventToken";
            return this.SendAsync<_telephony.EventToken>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/eventToken
        public Task<System.String> PostV1TelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenAsync(string billingAccount, _telephony.TokenExpirationEnum expiration, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("expiration", expiration);
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/eventToken";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue
        public Task<System.Int64[]> GetV1TelephonyBillingAccountEasyHuntingServiceNameHuntingQueueAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue
        public Task<_telephony.OvhPabxHuntingQueue> PostV1TelephonyBillingAccountEasyHuntingServiceNameHuntingQueueAsync(string billingAccount, string serviceName, _telephony.OvhPabxHuntingQueueStrategyEnum strategy, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OvhPabxQueueActionEnum? actionOnClosure, [System.Runtime.InteropServices.OptionalAttribute()] System.String? actionOnClosureParam, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OvhPabxQueueActionEnum? actionOnOverflow, [System.Runtime.InteropServices.OptionalAttribute()] System.String? actionOnOverflowParam, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? askForRecordDisabling, [System.Runtime.InteropServices.OptionalAttribute()] System.String? description, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? maxMember, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? maxWaitTime, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? record, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OvhPabxHuntingQueueRecordDisablingDigitEnum? recordDisablingDigit, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OvhPabxHuntingQueueRecordDisablingLanguageEnum? recordDisablingLanguage, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? soundOnHold) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("actionOnClosure", actionOnClosure);
            _body.Add("actionOnClosureParam", actionOnClosureParam);
            _body.Add("actionOnOverflow", actionOnOverflow);
            _body.Add("actionOnOverflowParam", actionOnOverflowParam);
            _body.Add("askForRecordDisabling", askForRecordDisabling);
            _body.Add("description", description);
            _body.Add("maxMember", maxMember);
            _body.Add("maxWaitTime", maxWaitTime);
            _body.Add("record", record);
            _body.Add("recordDisablingDigit", recordDisablingDigit);
            _body.Add("recordDisablingLanguage", recordDisablingLanguage);
            _body.Add("soundOnHold", soundOnHold);
            _body.Add("strategy", strategy);
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue";
            return this.SendAsync<_telephony.OvhPabxHuntingQueue>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}
        public Task DeleteV1TelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAsync(string billingAccount, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}
        public Task<_telephony.OvhPabxHuntingQueue> GetV1TelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAsync(string billingAccount, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}";
            return this.SendAsync<_telephony.OvhPabxHuntingQueue>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}
        public Task PutV1TelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAsync(_telephony.OvhPabxHuntingQueue _body, string billingAccount, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/agent
        public Task<System.Int64[]> GetV1TelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAsync(string billingAccount, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/agent";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/agent
        public Task<_telephony.OvhPabxHuntingAgentQueue> PostV1TelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAsync(string billingAccount, long position, long queueId, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("position", position);
            _body.Add("queueId", queueId);
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/agent";
            return this.SendAsync<_telephony.OvhPabxHuntingAgentQueue>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/agent/{agentId}
        public Task DeleteV1TelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdAsync(long agentId, string billingAccount, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/agent/{agentId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/agent/{agentId}
        public Task<_telephony.OvhPabxHuntingAgentQueue> GetV1TelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdAsync(long agentId, string billingAccount, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/agent/{agentId}";
            return this.SendAsync<_telephony.OvhPabxHuntingAgentQueue>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/agent/{agentId}
        public Task PutV1TelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdAsync(_telephony.OvhPabxHuntingAgentQueue _body, long agentId, string billingAccount, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/agent/{agentId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/agent/{agentId}/liveStatus
        public Task<_telephony.OvhPabxHuntingAgentLiveStatus> GetV1TelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatusAsync(long agentId, string billingAccount, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/agent/{agentId}/liveStatus";
            return this.SendAsync<_telephony.OvhPabxHuntingAgentLiveStatus>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls
        public Task<System.Int64[]> GetV1TelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsAsync(string billingAccount, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}
        public Task<_telephony.OvhPabxHuntingQueueLiveCalls> GetV1TelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdAsync(string billingAccount, long id, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}";
            return this.SendAsync<_telephony.OvhPabxHuntingQueueLiveCalls>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/eavesdrop
        public Task<_telephony.Task> PostV1TelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropAsync(string billingAccount, long id, string number, long queueId, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("number", number);
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/eavesdrop";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/hangup
        public Task<_telephony.Task> PostV1TelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHangupAsync(string billingAccount, long id, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/hangup";
            return this.SendAsync<_telephony.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/hold
        public Task<_telephony.Task> PostV1TelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHoldAsync(string billingAccount, long id, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/hold";
            return this.SendAsync<_telephony.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/intercept
        public Task<_telephony.Task> PostV1TelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdInterceptAsync(string billingAccount, long id, string number, long queueId, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("number", number);
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/intercept";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/transfer
        public Task<_telephony.Task> PostV1TelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdTransferAsync(string billingAccount, long id, string number, long queueId, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("number", number);
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/transfer";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/whisper
        public Task<_telephony.Task> PostV1TelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdWhisperAsync(string billingAccount, long id, string number, long queueId, string serviceName, _telephony.OvhPabxWhisperingModeEnum whisperingMode) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("number", number);
            _body.Add("whisperingMode", whisperingMode);
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/whisper";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveStatistics
        public Task<_telephony.OvhPabxHuntingQueueLiveStatistics> GetV1TelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveStatisticsAsync(string billingAccount, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveStatistics";
            return this.SendAsync<_telephony.OvhPabxHuntingQueueLiveStatistics>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/records
        public Task<System.Int64[]> GetV1TelephonyBillingAccountEasyHuntingServiceNameRecordsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/records";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/records/{id}
        public Task DeleteV1TelephonyBillingAccountEasyHuntingServiceNameRecordsIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/records/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/records/{id}
        public Task<_telephony.OvhPabxRecord> GetV1TelephonyBillingAccountEasyHuntingServiceNameRecordsIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/records/{id}";
            return this.SendAsync<_telephony.OvhPabxRecord>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions
        public Task<_telephony.EasyHuntingScreenListsConditionsSettings> GetV1TelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions";
            return this.SendAsync<_telephony.EasyHuntingScreenListsConditionsSettings>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions
        public Task PutV1TelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsAsync(_telephony.EasyHuntingScreenListsConditionsSettings _body, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions/conditions
        public Task<System.Int64[]> GetV1TelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OvhPabxDialplanExtensionConditionScreenListTypeEnum? screenListType) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("screenListType", screenListType);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions/conditions{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions/conditions
        public Task<_telephony.EasyHuntingScreenListsConditions> PostV1TelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsAsync(string billingAccount, _telephony.OvhPabxDialplanExtensionConditionScreenListTypeEnum screenListType, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? callerIdNumber, [System.Runtime.InteropServices.OptionalAttribute()] System.String? destinationNumber) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("callerIdNumber", callerIdNumber);
            _body.Add("destinationNumber", destinationNumber);
            _body.Add("screenListType", screenListType);
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions/conditions";
            return this.SendAsync<_telephony.EasyHuntingScreenListsConditions>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions/conditions/{conditionId}
        public Task DeleteV1TelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionIdAsync(string billingAccount, long conditionId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions/conditions/{conditionId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions/conditions/{conditionId}
        public Task<_telephony.EasyHuntingScreenListsConditions> GetV1TelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionIdAsync(string billingAccount, long conditionId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions/conditions/{conditionId}";
            return this.SendAsync<_telephony.EasyHuntingScreenListsConditions>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions/conditions/{conditionId}
        public Task PutV1TelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionIdAsync(_telephony.EasyHuntingScreenListsConditions _body, string billingAccount, long conditionId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions/conditions/{conditionId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/sound
        public Task<System.Int64[]> GetV1TelephonyBillingAccountEasyHuntingServiceNameSoundAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/sound";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/sound/{soundId}
        public Task DeleteV1TelephonyBillingAccountEasyHuntingServiceNameSoundSoundIdAsync(string billingAccount, string serviceName, long soundId) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/sound/{soundId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/sound/{soundId}
        public Task<_telephony.OvhPabxSound> GetV1TelephonyBillingAccountEasyHuntingServiceNameSoundSoundIdAsync(string billingAccount, string serviceName, long soundId) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/sound/{soundId}";
            return this.SendAsync<_telephony.OvhPabxSound>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/soundUpload
        public Task<_telephony.Task> PostV1TelephonyBillingAccountEasyHuntingServiceNameSoundUploadAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? documentId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? name, [System.Runtime.InteropServices.OptionalAttribute()] System.String? url) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("documentId", documentId);
            _body.Add("name", name);
            _body.Add("url", url);
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/soundUpload";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions
        public Task<_telephony.EasyHuntingTimeConditionsSettings> GetV1TelephonyBillingAccountEasyHuntingServiceNameTimeConditionsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions";
            return this.SendAsync<_telephony.EasyHuntingTimeConditionsSettings>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions
        public Task PutV1TelephonyBillingAccountEasyHuntingServiceNameTimeConditionsAsync(_telephony.EasyHuntingTimeConditionsSettings _body, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions/conditions
        public Task<System.Int64[]> GetV1TelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.TimeConditionsPolicyEnum? policy) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("policy", policy);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions/conditions{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions/conditions
        public Task<_telephony.EasyHuntingTimeConditions> PostV1TelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsAsync(string billingAccount, _telephony.TimeConditionsPolicyEnum policy, string serviceName, System.TimeOnly timeFrom, System.TimeOnly timeTo, _telephony.OvhPabxDialplanExtensionConditionTimeWeekDayEnum weekDay) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("policy", policy);
            _body.Add("timeFrom", timeFrom);
            _body.Add("timeTo", timeTo);
            _body.Add("weekDay", weekDay);
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions/conditions";
            return this.SendAsync<_telephony.EasyHuntingTimeConditions>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions/conditions/{conditionId}
        public Task DeleteV1TelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionIdAsync(string billingAccount, long conditionId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions/conditions/{conditionId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions/conditions/{conditionId}
        public Task<_telephony.EasyHuntingTimeConditions> GetV1TelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionIdAsync(string billingAccount, long conditionId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions/conditions/{conditionId}";
            return this.SendAsync<_telephony.EasyHuntingTimeConditions>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions/conditions/{conditionId}
        public Task PutV1TelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionIdAsync(_telephony.EasyHuntingTimeConditions _body, string billingAccount, long conditionId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions/conditions/{conditionId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/eventToken
        public Task DeleteV1TelephonyBillingAccountEventTokenAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/eventToken";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/eventToken
        public Task<_telephony.EventToken> GetV1TelephonyBillingAccountEventTokenAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/eventToken";
            return this.SendAsync<_telephony.EventToken>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/eventToken
        public Task<System.String> PostV1TelephonyBillingAccountEventTokenAsync(string billingAccount, _telephony.TokenExpirationEnum expiration) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("expiration", expiration);
            string uri = $"/v1/telephony/{billingAccount}/eventToken";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/fax
        public Task<System.String[]> GetV1TelephonyBillingAccountFaxAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/fax";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/fax/{serviceName}
        public Task<_telephony.Fax> GetV1TelephonyBillingAccountFaxServiceNameAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/fax/{serviceName}";
            return this.SendAsync<_telephony.Fax>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/fax/{serviceName}
        public Task PutV1TelephonyBillingAccountFaxServiceNameAsync(_telephony.Fax _body, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/fax/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/fax/{serviceName}/campaigns
        public Task<System.Int64[]> GetV1TelephonyBillingAccountFaxServiceNameCampaignsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/fax/{serviceName}/campaigns";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/fax/{serviceName}/campaigns
        public Task<_telephony.FaxCampaign> PostV1TelephonyBillingAccountFaxServiceNameCampaignsAsync(string billingAccount, string documentId, string name, _telephony.FaxCampaignRecipientsTypeEnum recipientsType, _telephony.FaxCampaignSendTypeEnum sendType, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.FaxQualityEnum? faxQuality, [System.Runtime.InteropServices.OptionalAttribute()] System.String? recipientsDocId, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? recipientsList, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? sendDate) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("documentId", documentId);
            _body.Add("faxQuality", faxQuality);
            _body.Add("name", name);
            _body.Add("recipientsDocId", recipientsDocId);
            _body.Add("recipientsList", recipientsList);
            _body.Add("recipientsType", recipientsType);
            _body.Add("sendDate", sendDate);
            _body.Add("sendType", sendType);
            string uri = $"/v1/telephony/{billingAccount}/fax/{serviceName}/campaigns";
            return this.SendAsync<_telephony.FaxCampaign>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/fax/{serviceName}/campaigns/{id}
        public Task DeleteV1TelephonyBillingAccountFaxServiceNameCampaignsIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/fax/{serviceName}/campaigns/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/fax/{serviceName}/campaigns/{id}
        public Task<_telephony.FaxCampaign> GetV1TelephonyBillingAccountFaxServiceNameCampaignsIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/fax/{serviceName}/campaigns/{id}";
            return this.SendAsync<_telephony.FaxCampaign>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/fax/{serviceName}/campaigns/{id}/detail
        public Task<_telephony.FaxCampaignDetail> GetV1TelephonyBillingAccountFaxServiceNameCampaignsIdDetailAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/fax/{serviceName}/campaigns/{id}/detail";
            return this.SendAsync<_telephony.FaxCampaignDetail>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/fax/{serviceName}/campaigns/{id}/start
        public Task PostV1TelephonyBillingAccountFaxServiceNameCampaignsIdStartAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/fax/{serviceName}/campaigns/{id}/start";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/fax/{serviceName}/campaigns/{id}/stop
        public Task PostV1TelephonyBillingAccountFaxServiceNameCampaignsIdStopAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/fax/{serviceName}/campaigns/{id}/stop";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/fax/{serviceName}/screenLists
        public Task DeleteV1TelephonyBillingAccountFaxServiceNameScreenListsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/fax/{serviceName}/screenLists";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/fax/{serviceName}/screenLists
        public Task<_telephony.FaxScreen> GetV1TelephonyBillingAccountFaxServiceNameScreenListsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/fax/{serviceName}/screenLists";
            return this.SendAsync<_telephony.FaxScreen>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/fax/{serviceName}/screenLists
        public Task<_telephony.FaxScreen> PostV1TelephonyBillingAccountFaxServiceNameScreenListsAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? blacklistedNumbers, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? blacklistedTSI, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.FaxScreenListTypeEnum? filteringList, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? whitelistedNumbers, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? whitelistedTSI) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("blacklistedNumbers", blacklistedNumbers);
            _body.Add("blacklistedTSI", blacklistedTSI);
            _body.Add("filteringList", filteringList);
            _body.Add("whitelistedNumbers", whitelistedNumbers);
            _body.Add("whitelistedTSI", whitelistedTSI);
            string uri = $"/v1/telephony/{billingAccount}/fax/{serviceName}/screenLists";
            return this.SendAsync<_telephony.FaxScreen>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/fax/{serviceName}/screenLists
        public Task PutV1TelephonyBillingAccountFaxServiceNameScreenListsAsync(_telephony.FaxScreen _body, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/fax/{serviceName}/screenLists";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/fax/{serviceName}/screenLists/reset
        public Task PostV1TelephonyBillingAccountFaxServiceNameScreenListsResetAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? blacklistedNumbers, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? blacklistedTSI, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? whitelistedNumbers, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? whitelistedTSI) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("blacklistedNumbers", blacklistedNumbers);
            _body.Add("blacklistedTSI", blacklistedTSI);
            _body.Add("whitelistedNumbers", whitelistedNumbers);
            _body.Add("whitelistedTSI", whitelistedTSI);
            string uri = $"/v1/telephony/{billingAccount}/fax/{serviceName}/screenLists/reset";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/fax/{serviceName}/settings
        public Task<_telephony.FaxProperties> GetV1TelephonyBillingAccountFaxServiceNameSettingsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/fax/{serviceName}/settings";
            return this.SendAsync<_telephony.FaxProperties>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/fax/{serviceName}/settings
        public Task PutV1TelephonyBillingAccountFaxServiceNameSettingsAsync(_telephony.FaxProperties _body, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/fax/{serviceName}/settings";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/fax/{serviceName}/settings/changePassword
        public Task<System.String> PostV1TelephonyBillingAccountFaxServiceNameSettingsChangePasswordAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? password) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("password", password);
            string uri = $"/v1/telephony/{billingAccount}/fax/{serviceName}/settings/changePassword";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/fax/{serviceName}/settings/sendFax
        public Task<_telephony.Task> PostV1TelephonyBillingAccountFaxServiceNameSettingsSendFaxAsync(string billingAccount, string pdfUrl, string[] recipients, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? dateSchedule) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("dateSchedule", dateSchedule);
            _body.Add("pdfUrl", pdfUrl);
            _body.Add("recipients", recipients);
            string uri = $"/v1/telephony/{billingAccount}/fax/{serviceName}/settings/sendFax";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/hasSpecialNumbers
        public Task<System.Boolean> GetV1TelephonyBillingAccountHasSpecialNumbersAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/hasSpecialNumbers";
            return this.SendAsync<bool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/historyConsumption
        public Task<System.DateOnly[]> GetV1TelephonyBillingAccountHistoryConsumptionAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/historyConsumption";
            return this.SendAsync<System.DateOnly[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/historyConsumption/{date}
        public Task<_telephony.HistoryConsumption> GetV1TelephonyBillingAccountHistoryConsumptionDateAsync(string billingAccount, System.DateOnly date) {
            string uri = $"/v1/telephony/{billingAccount}/historyConsumption/{date}";
            return this.SendAsync<_telephony.HistoryConsumption>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/historyConsumption/{date}/file
        public Task<_telephony.PcsFile> GetV1TelephonyBillingAccountHistoryConsumptionDateFileAsync(string billingAccount, System.DateOnly date, _telephony.BillDocument extension) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("extension", extension);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/{billingAccount}/historyConsumption/{date}/file{queryParameters}";
            return this.SendAsync<_telephony.PcsFile>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/historyRepaymentConsumption
        public Task<System.DateOnly[]> GetV1TelephonyBillingAccountHistoryRepaymentConsumptionAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/historyRepaymentConsumption";
            return this.SendAsync<System.DateOnly[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/historyRepaymentConsumption
        public Task<_telephony.HistoryRepaymentConsumption> PostV1TelephonyBillingAccountHistoryRepaymentConsumptionAsync(string billingAccount, [System.Runtime.InteropServices.OptionalAttribute()] System.String? billingNumber) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("billingNumber", billingNumber);
            string uri = $"/v1/telephony/{billingAccount}/historyRepaymentConsumption";
            return this.SendAsync<_telephony.HistoryRepaymentConsumption>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/historyRepaymentConsumption/{date}
        public Task<_telephony.HistoryRepaymentConsumption> GetV1TelephonyBillingAccountHistoryRepaymentConsumptionDateAsync(string billingAccount, System.DateOnly date) {
            string uri = $"/v1/telephony/{billingAccount}/historyRepaymentConsumption/{date}";
            return this.SendAsync<_telephony.HistoryRepaymentConsumption>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/historyRepaymentConsumption/{date}/document
        public Task<_telephony.PcsFile> GetV1TelephonyBillingAccountHistoryRepaymentConsumptionDateDocumentAsync(string billingAccount, System.DateOnly date) {
            string uri = $"/v1/telephony/{billingAccount}/historyRepaymentConsumption/{date}/document";
            return this.SendAsync<_telephony.PcsFile>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/historyTollfreeConsumption
        public Task<System.DateOnly[]> GetV1TelephonyBillingAccountHistoryTollfreeConsumptionAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/historyTollfreeConsumption";
            return this.SendAsync<System.DateOnly[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/historyTollfreeConsumption/{date}
        public Task<_telephony.HistoryTollfreeConsumption> GetV1TelephonyBillingAccountHistoryTollfreeConsumptionDateAsync(string billingAccount, System.DateOnly date) {
            string uri = $"/v1/telephony/{billingAccount}/historyTollfreeConsumption/{date}";
            return this.SendAsync<_telephony.HistoryTollfreeConsumption>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/historyTollfreeConsumption/{date}/document
        public Task<_telephony.PcsFile> GetV1TelephonyBillingAccountHistoryTollfreeConsumptionDateDocumentAsync(string billingAccount, System.DateOnly date) {
            string uri = $"/v1/telephony/{billingAccount}/historyTollfreeConsumption/{date}/document";
            return this.SendAsync<_telephony.PcsFile>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line
        public Task<System.String[]> GetV1TelephonyBillingAccountLineAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/line";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}
        public Task<_telephony.Line> GetV1TelephonyBillingAccountLineServiceNameAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}";
            return this.SendAsync<_telephony.Line>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}
        public Task PutV1TelephonyBillingAccountLineServiceNameAsync(_telephony.Line _body, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/abbreviatedNumber
        public Task<System.Int64[]> GetV1TelephonyBillingAccountLineServiceNameAbbreviatedNumberAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/abbreviatedNumber";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/abbreviatedNumber
        public Task<_telephony.AbbreviatedNumber> PostV1TelephonyBillingAccountLineServiceNameAbbreviatedNumberAsync(long abbreviatedNumber, string billingAccount, string destinationNumber, string name, string serviceName, string surname) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("abbreviatedNumber", abbreviatedNumber);
            _body.Add("destinationNumber", destinationNumber);
            _body.Add("name", name);
            _body.Add("surname", surname);
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/abbreviatedNumber";
            return this.SendAsync<_telephony.AbbreviatedNumber>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/abbreviatedNumber/{abbreviatedNumber}
        public Task DeleteV1TelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumberAsync(long abbreviatedNumber, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/abbreviatedNumber/{abbreviatedNumber}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/abbreviatedNumber/{abbreviatedNumber}
        public Task<_telephony.AbbreviatedNumber> GetV1TelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumberAsync(long abbreviatedNumber, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/abbreviatedNumber/{abbreviatedNumber}";
            return this.SendAsync<_telephony.AbbreviatedNumber>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/abbreviatedNumber/{abbreviatedNumber}
        public Task PutV1TelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumberAsync(_telephony.AbbreviatedNumber _body, long abbreviatedNumber, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/abbreviatedNumber/{abbreviatedNumber}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/activateNewPhone
        public Task GetV1TelephonyBillingAccountLineServiceNameActivateNewPhoneAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/activateNewPhone";
            return this.SendAsync("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/activateNewPhone
        public Task PostV1TelephonyBillingAccountLineServiceNameActivateNewPhoneAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/activateNewPhone";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/antihack
        public Task<System.String[]> GetV1TelephonyBillingAccountLineServiceNameAntihackAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/antihack";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/antihack
        public Task PostV1TelephonyBillingAccountLineServiceNameAntihackAsync(_telephony.AntihackActionEnum action, string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? restricted) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("action", action);
            _body.Add("restricted", restricted);
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/antihack";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/associateDevice
        public Task PostV1TelephonyBillingAccountLineServiceNameAssociateDeviceAsync(string billingAccount, string macAddress, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? ipAddress, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? slot) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("ipAddress", ipAddress);
            _body.Add("macAddress", macAddress);
            _body.Add("slot", slot);
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/associateDevice";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/automaticCall
        public Task<System.String[]> GetV1TelephonyBillingAccountLineServiceNameAutomaticCallAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/automaticCall";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/automaticCall
        public Task<System.String> PostV1TelephonyBillingAccountLineServiceNameAutomaticCallAsync(string billingAccount, string calledNumber, _telephony.CallsGeneratorDialplanEnum dialplan, bool isAnonymous, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? bridgeNumberDialplan, [System.Runtime.InteropServices.OptionalAttribute()] System.String? callingNumber, [System.Runtime.InteropServices.OptionalAttribute()] System.String? playbackAudioFileDialplan, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? timeout, [System.Runtime.InteropServices.OptionalAttribute()] System.String? ttsTextDialplan) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("bridgeNumberDialplan", bridgeNumberDialplan);
            _body.Add("calledNumber", calledNumber);
            _body.Add("callingNumber", callingNumber);
            _body.Add("dialplan", dialplan);
            _body.Add("isAnonymous", isAnonymous);
            _body.Add("playbackAudioFileDialplan", playbackAudioFileDialplan);
            _body.Add("timeout", timeout);
            _body.Add("ttsTextDialplan", ttsTextDialplan);
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/automaticCall";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/automaticCall/{identifier}
        public Task<_telephony.CallsGenerated> GetV1TelephonyBillingAccountLineServiceNameAutomaticCallIdentifierAsync(string billingAccount, string identifier, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/automaticCall/{identifier}";
            return this.SendAsync<_telephony.CallsGenerated>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/availableSipDomains
        public Task<System.String[]> GetV1TelephonyBillingAccountLineServiceNameAvailableSipDomainsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/availableSipDomains";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/block
        public Task PostV1TelephonyBillingAccountLineServiceNameBlockAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.LineBlockingMode? mode) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("mode", mode);
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/block";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/calls
        public Task<System.Int64[]> GetV1TelephonyBillingAccountLineServiceNameCallsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/calls";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/calls/{id}
        public Task<_telephony.OvhPabxHuntingQueueLiveCalls> GetV1TelephonyBillingAccountLineServiceNameCallsIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/calls/{id}";
            return this.SendAsync<_telephony.OvhPabxHuntingQueueLiveCalls>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/calls/{id}/eavesdrop
        public Task<_telephony.Task> PostV1TelephonyBillingAccountLineServiceNameCallsIdEavesdropAsync(string billingAccount, long id, string number, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("number", number);
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/calls/{id}/eavesdrop";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/calls/{id}/hangup
        public Task<_telephony.Task> PostV1TelephonyBillingAccountLineServiceNameCallsIdHangupAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/calls/{id}/hangup";
            return this.SendAsync<_telephony.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/calls/{id}/hold
        public Task<_telephony.Task> PostV1TelephonyBillingAccountLineServiceNameCallsIdHoldAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/calls/{id}/hold";
            return this.SendAsync<_telephony.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/calls/{id}/intercept
        public Task<_telephony.Task> PostV1TelephonyBillingAccountLineServiceNameCallsIdInterceptAsync(string billingAccount, long id, string number, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("number", number);
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/calls/{id}/intercept";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/calls/{id}/transfer
        public Task<_telephony.Task> PostV1TelephonyBillingAccountLineServiceNameCallsIdTransferAsync(string billingAccount, long id, string number, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("number", number);
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/calls/{id}/transfer";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/calls/{id}/whisper
        public Task<_telephony.Task> PostV1TelephonyBillingAccountLineServiceNameCallsIdWhisperAsync(string billingAccount, long id, string number, string serviceName, _telephony.OvhPabxWhisperingModeEnum whisperingMode) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("number", number);
            _body.Add("whisperingMode", whisperingMode);
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/calls/{id}/whisper";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/canChangePassword
        public Task<System.Boolean> GetV1TelephonyBillingAccountLineServiceNameCanChangePasswordAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/canChangePassword";
            return this.SendAsync<bool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/cancelConvertToNumber
        public Task PostV1TelephonyBillingAccountLineServiceNameCancelConvertToNumberAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/cancelConvertToNumber";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/changePassword
        public Task PostV1TelephonyBillingAccountLineServiceNameChangePasswordAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? password) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("password", password);
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/changePassword";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/click2Call
        public Task PostV1TelephonyBillingAccountLineServiceNameClick2CallAsync(string billingAccount, string calledNumber, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? callingNumber, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? intercom) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("calledNumber", calledNumber);
            _body.Add("callingNumber", callingNumber);
            _body.Add("intercom", intercom);
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/click2Call";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/click2CallUser
        public Task<System.Int64[]> GetV1TelephonyBillingAccountLineServiceNameClick2CallUserAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/click2CallUser";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/click2CallUser
        public Task<System.Int64> PostV1TelephonyBillingAccountLineServiceNameClick2CallUserAsync(string billingAccount, string login, string password, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("login", login);
            _body.Add("password", password);
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/click2CallUser";
            return this.SendAsync<long>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/click2CallUser/{id}
        public Task DeleteV1TelephonyBillingAccountLineServiceNameClick2CallUserIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/click2CallUser/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/click2CallUser/{id}
        public Task<_telephony.Click2CallUser> GetV1TelephonyBillingAccountLineServiceNameClick2CallUserIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/click2CallUser/{id}";
            return this.SendAsync<_telephony.Click2CallUser>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/click2CallUser/{id}/changePassword
        public Task PostV1TelephonyBillingAccountLineServiceNameClick2CallUserIdChangePasswordAsync(string billingAccount, long id, string password, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("password", password);
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/click2CallUser/{id}/changePassword";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/click2CallUser/{id}/click2Call
        public Task PostV1TelephonyBillingAccountLineServiceNameClick2CallUserIdClick2CallAsync(string billingAccount, string calledNumber, long id, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? callingNumber) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("calledNumber", calledNumber);
            _body.Add("callingNumber", callingNumber);
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/click2CallUser/{id}/click2Call";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/convertToNumber
        public Task<_telephony.OfferTask> PostV1TelephonyBillingAccountLineServiceNameConvertToNumberAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/convertToNumber";
            return this.SendAsync<_telephony.OfferTask>("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/dissociateDevice
        public Task PostV1TelephonyBillingAccountLineServiceNameDissociateDeviceAsync(string billingAccount, string macAddress, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? ipAddress) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("ipAddress", ipAddress);
            _body.Add("macAddress", macAddress);
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/dissociateDevice";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/ips
        public Task<_telephony.DatetimeAndIpvalue[]> GetV1TelephonyBillingAccountLineServiceNameIpsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/ips";
            return this.SendAsync<_telephony.DatetimeAndIpvalue[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/lastRegistrations
        public Task<_telephony.RegistrationInformations[]> GetV1TelephonyBillingAccountLineServiceNameLastRegistrationsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/lastRegistrations";
            return this.SendAsync<_telephony.RegistrationInformations[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/listAssociablePhones
        public Task<_telephony.LinePhoneAssociable[]> GetV1TelephonyBillingAccountLineServiceNameListAssociablePhonesAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/listAssociablePhones";
            return this.SendAsync<_telephony.LinePhoneAssociable[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/maximumAvailableSimultaneousLines
        public Task<System.Int64> GetV1TelephonyBillingAccountLineServiceNameMaximumAvailableSimultaneousLinesAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/maximumAvailableSimultaneousLines";
            return this.SendAsync<long>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/offer
        public Task<_telephony.LineOffer> GetV1TelephonyBillingAccountLineServiceNameOfferAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/offer";
            return this.SendAsync<_telephony.LineOffer>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/options
        public Task<_telephony.LineOptions> GetV1TelephonyBillingAccountLineServiceNameOptionsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/options";
            return this.SendAsync<_telephony.LineOptions>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/options
        public Task PutV1TelephonyBillingAccountLineServiceNameOptionsAsync(_telephony.LineOptions _body, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/options";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/options/availableCodecs
        public Task<System.String[]> GetV1TelephonyBillingAccountLineServiceNameOptionsAvailableCodecsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/options/availableCodecs";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/options/defaultCodecs
        public Task<System.String> GetV1TelephonyBillingAccountLineServiceNameOptionsDefaultCodecsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/options/defaultCodecs";
            return this.SendAsync<string>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone
        public Task<_telephony.Phone> GetV1TelephonyBillingAccountLineServiceNamePhoneAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone";
            return this.SendAsync<_telephony.Phone>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone
        public Task PutV1TelephonyBillingAccountLineServiceNamePhoneAsync(_telephony.Phone _body, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone/adminCredentials
        public Task<_telephony.PhoneCredentials> GetV1TelephonyBillingAccountLineServiceNamePhoneAdminCredentialsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone/adminCredentials";
            return this.SendAsync<_telephony.PhoneCredentials>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone/changePhoneConfiguration
        public Task PostV1TelephonyBillingAccountLineServiceNamePhoneChangePhoneConfigurationAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? autoReboot, [System.Runtime.InteropServices.OptionalAttribute()] _complexType.SafeKeyValue<string>? newConfigurations) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("autoReboot", autoReboot);
            _body.Add("newConfigurations", newConfigurations);
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone/changePhoneConfiguration";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone/functionKey
        public Task<System.Int64[]> GetV1TelephonyBillingAccountLineServiceNamePhoneFunctionKeyAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone/functionKey";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone/functionKey/{keyNum}
        public Task<_telephony.FunctionKey> GetV1TelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAsync(string billingAccount, long keyNum, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone/functionKey/{keyNum}";
            return this.SendAsync<_telephony.FunctionKey>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone/functionKey/{keyNum}
        public Task PutV1TelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAsync(_telephony.FunctionKey _body, string billingAccount, long keyNum, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone/functionKey/{keyNum}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone/functionKey/{keyNum}/availableFunction
        public Task<System.String[]> GetV1TelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAvailableFunctionAsync(string billingAccount, long keyNum, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone/functionKey/{keyNum}/availableFunction";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone/merchandiseAvailable
        public Task<_telephony.HardwareOffer[]> GetV1TelephonyBillingAccountLineServiceNamePhoneMerchandiseAvailableAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone/merchandiseAvailable";
            return this.SendAsync<_telephony.HardwareOffer[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone/phonebook
        public Task<System.String[]> GetV1TelephonyBillingAccountLineServiceNamePhonePhonebookAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone/phonebook";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone/phonebook
        public Task<System.String> PostV1TelephonyBillingAccountLineServiceNamePhonePhonebookAsync(string billingAccount, string name, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("name", name);
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone/phonebook";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}
        public Task DeleteV1TelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyAsync(string billingAccount, string bookKey, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}
        public Task<_telephony.Phonebook> GetV1TelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyAsync(string billingAccount, string bookKey, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}";
            return this.SendAsync<_telephony.Phonebook>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}
        public Task PutV1TelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyAsync(_telephony.Phonebook _body, string billingAccount, string bookKey, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/export
        public Task<_telephony.PcsFile> GetV1TelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExportAsync(string billingAccount, string bookKey, _telephony.ContactsExportFormatsEnum format, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("format", format);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/export{queryParameters}";
            return this.SendAsync<_telephony.PcsFile>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/import
        public Task<_telephony.Task> PostV1TelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyImportAsync(string billingAccount, string bookKey, string documentId, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("documentId", documentId);
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/import";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/phonebookContact
        public Task<System.Int64[]> GetV1TelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactAsync(string billingAccount, string bookKey, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/phonebookContact";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/phonebookContact
        public Task<System.Int64> PostV1TelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactAsync(string billingAccount, string bookKey, string group, string name, string serviceName, string surname, [System.Runtime.InteropServices.OptionalAttribute()] System.String? homeMobile, [System.Runtime.InteropServices.OptionalAttribute()] System.String? homePhone, [System.Runtime.InteropServices.OptionalAttribute()] System.String? workMobile, [System.Runtime.InteropServices.OptionalAttribute()] System.String? workPhone) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("group", group);
            _body.Add("homeMobile", homeMobile);
            _body.Add("homePhone", homePhone);
            _body.Add("name", name);
            _body.Add("surname", surname);
            _body.Add("workMobile", workMobile);
            _body.Add("workPhone", workPhone);
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/phonebookContact";
            return this.SendAsync<long>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/phonebookContact/{id}
        public Task DeleteV1TelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactIdAsync(string billingAccount, string bookKey, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/phonebookContact/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/phonebookContact/{id}
        public Task<_telephony.PhonebookContact> GetV1TelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactIdAsync(string billingAccount, string bookKey, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/phonebookContact/{id}";
            return this.SendAsync<_telephony.PhonebookContact>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/phonebookContact/{id}
        public Task PutV1TelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactIdAsync(_telephony.PhonebookContact _body, string billingAccount, string bookKey, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/phonebookContact/{id}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone/reboot
        public Task<_telephony.Task> PostV1TelephonyBillingAccountLineServiceNamePhoneRebootAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone/reboot";
            return this.SendAsync<_telephony.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone/refreshScreen
        public Task<_telephony.Task> PostV1TelephonyBillingAccountLineServiceNamePhoneRefreshScreenAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone/refreshScreen";
            return this.SendAsync<_telephony.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone/resetConfig
        public Task<_telephony.ResetPhoneInfo> PostV1TelephonyBillingAccountLineServiceNamePhoneResetConfigAsync(string billingAccount, string ip, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("ip", ip);
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone/resetConfig";
            return this.SendAsync<_telephony.ResetPhoneInfo>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone/rma
        public Task<System.String[]> GetV1TelephonyBillingAccountLineServiceNamePhoneRmaAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone/rma";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone/rma
        public Task<_telephony.RmaReturn> PostV1TelephonyBillingAccountLineServiceNamePhoneRmaAsync(string billingAccount, string serviceName, _telephony.RmaPublicTypeEnum type, [System.Runtime.InteropServices.OptionalAttribute()] System.String? mondialRelayId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? newMerchandise, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? shippingContactId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("mondialRelayId", mondialRelayId);
            _body.Add("newMerchandise", newMerchandise);
            _body.Add("shippingContactId", shippingContactId);
            _body.Add("type", type);
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone/rma";
            return this.SendAsync<_telephony.RmaReturn>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone/rma/{id}
        public Task DeleteV1TelephonyBillingAccountLineServiceNamePhoneRmaIdAsync(string billingAccount, string id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone/rma/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone/rma/{id}
        public Task<_telephony.Rma> GetV1TelephonyBillingAccountLineServiceNamePhoneRmaIdAsync(string billingAccount, string id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone/rma/{id}";
            return this.SendAsync<_telephony.Rma>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone/rma/{id}
        public Task PutV1TelephonyBillingAccountLineServiceNamePhoneRmaIdAsync(_telephony.Rma _body, string billingAccount, string id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone/rma/{id}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone/rma/{id}/changeType
        public Task PostV1TelephonyBillingAccountLineServiceNamePhoneRmaIdChangeTypeAsync(string billingAccount, string id, string serviceName, _telephony.RmaChangeTypeEnum type) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("type", type);
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone/rma/{id}/changeType";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phone/supportsPhonebook
        public Task<System.Boolean> GetV1TelephonyBillingAccountLineServiceNamePhoneSupportsPhonebookAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phone/supportsPhonebook";
            return this.SendAsync<bool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/phoneCanBeAssociable
        public Task<_telephony.LinePhone[]> GetV1TelephonyBillingAccountLineServiceNamePhoneCanBeAssociableAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/phoneCanBeAssociable";
            return this.SendAsync<_telephony.LinePhone[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/records
        public Task<System.Int64[]> GetV1TelephonyBillingAccountLineServiceNameRecordsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/records";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/records/{id}
        public Task DeleteV1TelephonyBillingAccountLineServiceNameRecordsIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/records/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/records/{id}
        public Task<_telephony.OvhPabxRecord> GetV1TelephonyBillingAccountLineServiceNameRecordsIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/records/{id}";
            return this.SendAsync<_telephony.OvhPabxRecord>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/removeSimultaneousLines
        public Task PostV1TelephonyBillingAccountLineServiceNameRemoveSimultaneousLinesAsync(string billingAccount, long quantityRemove, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("quantityRemove", quantityRemove);
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/removeSimultaneousLines";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/simultaneousChannelsDetails
        public Task<_telephony.SimultaneousChannelsDetails> GetV1TelephonyBillingAccountLineServiceNameSimultaneousChannelsDetailsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/simultaneousChannelsDetails";
            return this.SendAsync<_telephony.SimultaneousChannelsDetails>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/softphone/beta
        public Task<_telephony.SoftphoneBetaStatus> GetV1TelephonyBillingAccountLineServiceNameSoftphoneBetaAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/softphone/beta";
            return this.SendAsync<_telephony.SoftphoneBetaStatus>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/softphone/beta
        public Task<_telephony.SoftphoneBetaStatus> PutV1TelephonyBillingAccountLineServiceNameSoftphoneBetaAsync(string billingAccount, string serviceName, _telephony.SoftphoneBetaStatus _body) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/softphone/beta";
            return this.SendAsync<_telephony.SoftphoneBetaStatus>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/softphone/beta/regenerateToken
        public Task PostV1TelephonyBillingAccountLineServiceNameSoftphoneBetaRegenerateTokenAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/softphone/beta/regenerateToken";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/statistics
        public Task<_complexType.UnitAndValues<_telephony.TimestampAndValue>> GetV1TelephonyBillingAccountLineServiceNameStatisticsAsync(string billingAccount, string serviceName, _telephony.StatisticsTimeframeEnum timeframe, _telephony.LineStatisticsTypeEnum type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("timeframe", timeframe);
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/statistics{queryParameters}";
            return this.SendAsync<_complexType.UnitAndValues<_telephony.TimestampAndValue>>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/tones
        public Task<_telephony.Tones> GetV1TelephonyBillingAccountLineServiceNameTonesAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/tones";
            return this.SendAsync<_telephony.Tones>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/tones
        public Task PutV1TelephonyBillingAccountLineServiceNameTonesAsync(_telephony.Tones _body, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/tones";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/tones/toneUpload
        public Task<_telephony.Task> PostV1TelephonyBillingAccountLineServiceNameTonesToneUploadAsync(string billingAccount, string serviceName, _telephony.TonesTypeEnum type, [System.Runtime.InteropServices.OptionalAttribute()] System.String? documentId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? url) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("documentId", documentId);
            _body.Add("type", type);
            _body.Add("url", url);
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/tones/toneUpload";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/trafficExtracts
        public Task<System.Int64[]> GetV1TelephonyBillingAccountLineServiceNameTrafficExtractsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/trafficExtracts";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/trafficExtracts
        public Task<_telephony.trafficExtract> PostV1TelephonyBillingAccountLineServiceNameTrafficExtractsAsync(string billingAccount, System.DateTime dateEnd, System.DateTime dateStart, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("dateEnd", dateEnd);
            _body.Add("dateStart", dateStart);
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/trafficExtracts";
            return this.SendAsync<_telephony.trafficExtract>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/trafficExtracts/{id}
        public Task DeleteV1TelephonyBillingAccountLineServiceNameTrafficExtractsIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/trafficExtracts/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/trafficExtracts/{id}
        public Task<_telephony.trafficExtract> GetV1TelephonyBillingAccountLineServiceNameTrafficExtractsIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/trafficExtracts/{id}";
            return this.SendAsync<_telephony.trafficExtract>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/line/{serviceName}/unblock
        public Task PostV1TelephonyBillingAccountLineServiceNameUnblockAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/line/{serviceName}/unblock";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/number
        public Task<System.String[]> GetV1TelephonyBillingAccountNumberAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/number";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/number/{serviceName}
        public Task<_telephony.Number> GetV1TelephonyBillingAccountNumberServiceNameAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/number/{serviceName}";
            return this.SendAsync<_telephony.Number>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/number/{serviceName}
        public Task PutV1TelephonyBillingAccountNumberServiceNameAsync(_telephony.Number _body, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/number/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/number/{serviceName}/cancelConvertToLine
        public Task PostV1TelephonyBillingAccountNumberServiceNameCancelConvertToLineAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/number/{serviceName}/cancelConvertToLine";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/number/{serviceName}/changeFeatureType
        public Task<_telephony.Task> PostV1TelephonyBillingAccountNumberServiceNameChangeFeatureTypeAsync(string billingAccount, _telephony.TypeEnum featureType, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("featureType", featureType);
            string uri = $"/v1/telephony/{billingAccount}/number/{serviceName}/changeFeatureType";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/number/{serviceName}/convertToLine
        public Task<_telephony.OfferTask> PostV1TelephonyBillingAccountNumberServiceNameConvertToLineAsync(string billingAccount, string offer, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("offer", offer);
            string uri = $"/v1/telephony/{billingAccount}/number/{serviceName}/convertToLine";
            return this.SendAsync<_telephony.OfferTask>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/number/{serviceName}/convertToLineAvailableOffers
        public Task<_telephony.LineOffersAndContracts> GetV1TelephonyBillingAccountNumberServiceNameConvertToLineAvailableOffersAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/number/{serviceName}/convertToLineAvailableOffers";
            return this.SendAsync<_telephony.LineOffersAndContracts>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/offerTask
        public Task<System.Int64[]> GetV1TelephonyBillingAccountOfferTaskAsync(string billingAccount, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OfferTaskActionEnum? action, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.TaskStatusEnum? status, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OfferTaskTypeEnum? type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("action", action);
            queryParametersTemp.Add("status", status);
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/{billingAccount}/offerTask{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/offerTask/{taskId}
        public Task<_telephony.OfferTask> GetV1TelephonyBillingAccountOfferTaskTaskIdAsync(string billingAccount, long taskId) {
            string uri = $"/v1/telephony/{billingAccount}/offerTask/{taskId}";
            return this.SendAsync<_telephony.OfferTask>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/offerTask/{taskId}
        public Task PutV1TelephonyBillingAccountOfferTaskTaskIdAsync(_telephony.OfferTask _body, string billingAccount, long taskId) {
            string uri = $"/v1/telephony/{billingAccount}/offerTask/{taskId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/oldPhone
        public Task<_telephony.OldPhone[]> GetV1TelephonyBillingAccountOldPhoneAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/oldPhone";
            return this.SendAsync<_telephony.OldPhone[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/outplanNotification
        public Task<System.Int64[]> GetV1TelephonyBillingAccountOutplanNotificationAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/outplanNotification";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/outplanNotification
        public Task<_telephony.ConsumptionThreshold> PostV1TelephonyBillingAccountOutplanNotificationAsync(string billingAccount, _telephony.OutplanNotificationBlockEnum block, double percentage, [System.Runtime.InteropServices.OptionalAttribute()] System.String? notifyEmail) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("block", block);
            _body.Add("notifyEmail", notifyEmail);
            _body.Add("percentage", percentage);
            string uri = $"/v1/telephony/{billingAccount}/outplanNotification";
            return this.SendAsync<_telephony.ConsumptionThreshold>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/outplanNotification/{id}
        public Task DeleteV1TelephonyBillingAccountOutplanNotificationIdAsync(string billingAccount, long id) {
            string uri = $"/v1/telephony/{billingAccount}/outplanNotification/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/outplanNotification/{id}
        public Task<_telephony.ConsumptionThreshold> GetV1TelephonyBillingAccountOutplanNotificationIdAsync(string billingAccount, long id) {
            string uri = $"/v1/telephony/{billingAccount}/outplanNotification/{id}";
            return this.SendAsync<_telephony.ConsumptionThreshold>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx
        public Task<System.String[]> GetV1TelephonyBillingAccountOvhPabxAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}
        public Task<_telephony.OvhPabx> GetV1TelephonyBillingAccountOvhPabxServiceNameAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}";
            return this.SendAsync<_telephony.OvhPabx>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}
        public Task PutV1TelephonyBillingAccountOvhPabxServiceNameAsync(_telephony.OvhPabx _body, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan
        public Task<System.Int64[]> GetV1TelephonyBillingAccountOvhPabxServiceNameDialplanAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan
        public Task<_telephony.OvhPabxDialplan> PostV1TelephonyBillingAccountOvhPabxServiceNameDialplanAsync(bool anonymousRejection, string billingAccount, string name, string serviceName, _telephony.OvhPabxDialplanNumberPresentationEnum showCallerNumber, long transferTimeout) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("anonymousRejection", anonymousRejection);
            _body.Add("name", name);
            _body.Add("showCallerNumber", showCallerNumber);
            _body.Add("transferTimeout", transferTimeout);
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan";
            return this.SendAsync<_telephony.OvhPabxDialplan>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}
        public Task DeleteV1TelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdAsync(string billingAccount, long dialplanId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}
        public Task<_telephony.OvhPabxDialplan> GetV1TelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdAsync(string billingAccount, long dialplanId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}";
            return this.SendAsync<_telephony.OvhPabxDialplan>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}
        public Task PutV1TelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdAsync(_telephony.OvhPabxDialplan _body, string billingAccount, long dialplanId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension
        public Task<System.Int64[]> GetV1TelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionAsync(string billingAccount, long dialplanId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension
        public Task<_telephony.OvhPabxDialplanExtension> PostV1TelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionAsync(string billingAccount, long dialplanId, bool enable, long position, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.SchedulerCategoryEnum? schedulerCategory, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OvhPabxDialplanExtensionConditionScreenListTypeEnum? screenListType) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("enable", enable);
            _body.Add("position", position);
            _body.Add("schedulerCategory", schedulerCategory);
            _body.Add("screenListType", screenListType);
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension";
            return this.SendAsync<_telephony.OvhPabxDialplanExtension>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}
        public Task DeleteV1TelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdAsync(string billingAccount, long dialplanId, long extensionId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}
        public Task<_telephony.OvhPabxDialplanExtension> GetV1TelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdAsync(string billingAccount, long dialplanId, long extensionId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}";
            return this.SendAsync<_telephony.OvhPabxDialplanExtension>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}
        public Task PutV1TelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdAsync(_telephony.OvhPabxDialplanExtension _body, string billingAccount, long dialplanId, long extensionId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionScreenList
        public Task<System.Int64[]> GetV1TelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListAsync(string billingAccount, long dialplanId, long extensionId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionScreenList";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionScreenList
        public Task<_telephony.OvhPabxDialplanExtensionConditionScreenList> PostV1TelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListAsync(string billingAccount, long dialplanId, long extensionId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? callerIdNumber, [System.Runtime.InteropServices.OptionalAttribute()] System.String? destinationNumber, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OvhPabxDialplanExtensionConditionScreenListTypeEnum? screenListType) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("callerIdNumber", callerIdNumber);
            _body.Add("destinationNumber", destinationNumber);
            _body.Add("screenListType", screenListType);
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionScreenList";
            return this.SendAsync<_telephony.OvhPabxDialplanExtensionConditionScreenList>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionScreenList/{conditionId}
        public Task DeleteV1TelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionIdAsync(string billingAccount, long conditionId, long dialplanId, long extensionId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionScreenList/{conditionId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionScreenList/{conditionId}
        public Task<_telephony.OvhPabxDialplanExtensionConditionScreenList> GetV1TelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionIdAsync(string billingAccount, long conditionId, long dialplanId, long extensionId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionScreenList/{conditionId}";
            return this.SendAsync<_telephony.OvhPabxDialplanExtensionConditionScreenList>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionTime
        public Task<System.Int64[]> GetV1TelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeAsync(string billingAccount, long dialplanId, long extensionId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionTime";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionTime
        public Task<_telephony.OvhPabxDialplanExtensionConditionTime> PostV1TelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeAsync(string billingAccount, long dialplanId, long extensionId, string serviceName, System.TimeOnly timeFrom, System.TimeOnly timeTo, _telephony.OvhPabxDialplanExtensionConditionTimeWeekDayEnum weekDay) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("timeFrom", timeFrom);
            _body.Add("timeTo", timeTo);
            _body.Add("weekDay", weekDay);
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionTime";
            return this.SendAsync<_telephony.OvhPabxDialplanExtensionConditionTime>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionTime/{conditionId}
        public Task DeleteV1TelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionIdAsync(string billingAccount, long conditionId, long dialplanId, long extensionId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionTime/{conditionId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionTime/{conditionId}
        public Task<_telephony.OvhPabxDialplanExtensionConditionTime> GetV1TelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionIdAsync(string billingAccount, long conditionId, long dialplanId, long extensionId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionTime/{conditionId}";
            return this.SendAsync<_telephony.OvhPabxDialplanExtensionConditionTime>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionTime/{conditionId}
        public Task PutV1TelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionIdAsync(_telephony.OvhPabxDialplanExtensionConditionTime _body, string billingAccount, long conditionId, long dialplanId, long extensionId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionTime/{conditionId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/rule
        public Task<System.Int64[]> GetV1TelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleAsync(string billingAccount, long dialplanId, long extensionId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/rule";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/rule
        public Task<_telephony.OvhPabxDialplanExtensionRule> PostV1TelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleAsync(_telephony.OvhPabxDialplanExtensionRuleActionEnum action, string billingAccount, long dialplanId, long extensionId, bool negativeAction, long position, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? actionParam) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("action", action);
            _body.Add("actionParam", actionParam);
            _body.Add("negativeAction", negativeAction);
            _body.Add("position", position);
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/rule";
            return this.SendAsync<_telephony.OvhPabxDialplanExtensionRule>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/rule/{ruleId}
        public Task DeleteV1TelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleIdAsync(string billingAccount, long dialplanId, long extensionId, long ruleId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/rule/{ruleId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/rule/{ruleId}
        public Task<_telephony.OvhPabxDialplanExtensionRule> GetV1TelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleIdAsync(string billingAccount, long dialplanId, long extensionId, long ruleId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/rule/{ruleId}";
            return this.SendAsync<_telephony.OvhPabxDialplanExtensionRule>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/rule/{ruleId}
        public Task PutV1TelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleIdAsync(_telephony.OvhPabxDialplanExtensionRule _body, string billingAccount, long dialplanId, long extensionId, long ruleId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/rule/{ruleId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting
        public Task<_telephony.OvhPabxHunting> GetV1TelephonyBillingAccountOvhPabxServiceNameHuntingAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting";
            return this.SendAsync<_telephony.OvhPabxHunting>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting
        public Task PutV1TelephonyBillingAccountOvhPabxServiceNameHuntingAsync(_telephony.OvhPabxHunting _body, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent
        public Task<System.Int64[]> GetV1TelephonyBillingAccountOvhPabxServiceNameHuntingAgentAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent
        public Task<_telephony.OvhPabxHuntingAgent> PostV1TelephonyBillingAccountOvhPabxServiceNameHuntingAgentAsync(string billingAccount, string number, string serviceName, long simultaneousLines, _telephony.OvhPabxHuntingAgentStatusEnum status, long timeout, long wrapUpTime, [System.Runtime.InteropServices.OptionalAttribute()] System.String? description) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("description", description);
            _body.Add("number", number);
            _body.Add("simultaneousLines", simultaneousLines);
            _body.Add("status", status);
            _body.Add("timeout", timeout);
            _body.Add("wrapUpTime", wrapUpTime);
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent";
            return this.SendAsync<_telephony.OvhPabxHuntingAgent>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}
        public Task DeleteV1TelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdAsync(long agentId, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}
        public Task<_telephony.OvhPabxHuntingAgent> GetV1TelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdAsync(long agentId, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}";
            return this.SendAsync<_telephony.OvhPabxHuntingAgent>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}
        public Task PutV1TelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdAsync(_telephony.OvhPabxHuntingAgent _body, long agentId, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/bannerAccess
        public Task DeleteV1TelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccessAsync(long agentId, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/bannerAccess";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/bannerAccess
        public Task<_telephony.BannerAccess> GetV1TelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccessAsync(long agentId, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/bannerAccess";
            return this.SendAsync<_telephony.BannerAccess>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/bannerAccess
        public Task<_telephony.BannerAccess> PostV1TelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccessAsync(long agentId, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/bannerAccess";
            return this.SendAsync<_telephony.BannerAccess>("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls
        public Task<System.Int64[]> GetV1TelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsAsync(long agentId, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls/{id}
        public Task<_telephony.OvhPabxHuntingQueueLiveCalls> GetV1TelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdAsync(long agentId, string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls/{id}";
            return this.SendAsync<_telephony.OvhPabxHuntingQueueLiveCalls>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls/{id}/eavesdrop
        public Task<_telephony.Task> PostV1TelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdEavesdropAsync(long agentId, string billingAccount, long id, string number, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("number", number);
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls/{id}/eavesdrop";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls/{id}/hangup
        public Task<_telephony.Task> PostV1TelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHangupAsync(long agentId, string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls/{id}/hangup";
            return this.SendAsync<_telephony.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls/{id}/hold
        public Task<_telephony.Task> PostV1TelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHoldAsync(long agentId, string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls/{id}/hold";
            return this.SendAsync<_telephony.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls/{id}/intercept
        public Task<_telephony.Task> PostV1TelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdInterceptAsync(long agentId, string billingAccount, long id, string number, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("number", number);
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls/{id}/intercept";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls/{id}/transfer
        public Task<_telephony.Task> PostV1TelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdTransferAsync(long agentId, string billingAccount, long id, string number, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("number", number);
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls/{id}/transfer";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls/{id}/whisper
        public Task<_telephony.Task> PostV1TelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdWhisperAsync(long agentId, string billingAccount, long id, string number, string serviceName, _telephony.OvhPabxWhisperingModeEnum whisperingMode) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("number", number);
            _body.Add("whisperingMode", whisperingMode);
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls/{id}/whisper";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/eventToken
        public Task DeleteV1TelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenAsync(long agentId, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/eventToken";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/eventToken
        public Task<_telephony.EventToken> GetV1TelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenAsync(long agentId, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/eventToken";
            return this.SendAsync<_telephony.EventToken>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/eventToken
        public Task<System.String> PostV1TelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenAsync(long agentId, string billingAccount, _telephony.TokenExpirationEnum expiration, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("expiration", expiration);
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/eventToken";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/liveStatus
        public Task<_telephony.OvhPabxHuntingAgentLiveStatus> GetV1TelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdLiveStatusAsync(long agentId, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/liveStatus";
            return this.SendAsync<_telephony.OvhPabxHuntingAgentLiveStatus>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/queue
        public Task<System.Int64[]> GetV1TelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueAsync(long agentId, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/queue";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/queue
        public Task<_telephony.OvhPabxHuntingAgentQueue> PostV1TelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueAsync(long agentId, string billingAccount, long position, long queueId, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("position", position);
            _body.Add("queueId", queueId);
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/queue";
            return this.SendAsync<_telephony.OvhPabxHuntingAgentQueue>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/queue/{queueId}
        public Task DeleteV1TelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdAsync(long agentId, string billingAccount, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/queue/{queueId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/queue/{queueId}
        public Task<_telephony.OvhPabxHuntingAgentQueue> GetV1TelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdAsync(long agentId, string billingAccount, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/queue/{queueId}";
            return this.SendAsync<_telephony.OvhPabxHuntingAgentQueue>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/queue/{queueId}
        public Task PutV1TelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdAsync(_telephony.OvhPabxHuntingAgentQueue _body, long agentId, string billingAccount, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/queue/{queueId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/queue/{queueId}/liveStatus
        public Task<_telephony.OvhPabxHuntingAgentLiveStatus> GetV1TelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatusAsync(long agentId, string billingAccount, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/queue/{queueId}/liveStatus";
            return this.SendAsync<_telephony.OvhPabxHuntingAgentLiveStatus>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/customStatus
        public Task<System.Int64[]> GetV1TelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/customStatus";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/customStatus
        public Task<_telephony.OvhPabxCustomStatus> PostV1TelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusAsync(string billingAccount, string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? color, [System.Runtime.InteropServices.OptionalAttribute()] System.String? description) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("color", color);
            _body.Add("description", description);
            _body.Add("name", name);
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/customStatus";
            return this.SendAsync<_telephony.OvhPabxCustomStatus>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/customStatus/{id}
        public Task DeleteV1TelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/customStatus/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/customStatus/{id}
        public Task<_telephony.OvhPabxCustomStatus> GetV1TelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/customStatus/{id}";
            return this.SendAsync<_telephony.OvhPabxCustomStatus>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/eventToken
        public Task DeleteV1TelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/eventToken";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/eventToken
        public Task<_telephony.EventToken> GetV1TelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/eventToken";
            return this.SendAsync<_telephony.EventToken>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/eventToken
        public Task<System.String> PostV1TelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenAsync(string billingAccount, _telephony.TokenExpirationEnum expiration, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("expiration", expiration);
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/eventToken";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue
        public Task<System.Int64[]> GetV1TelephonyBillingAccountOvhPabxServiceNameHuntingQueueAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue
        public Task<_telephony.OvhPabxHuntingQueue> PostV1TelephonyBillingAccountOvhPabxServiceNameHuntingQueueAsync(string billingAccount, string serviceName, _telephony.OvhPabxHuntingQueueStrategyEnum strategy, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OvhPabxQueueActionEnum? actionOnClosure, [System.Runtime.InteropServices.OptionalAttribute()] System.String? actionOnClosureParam, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OvhPabxQueueActionEnum? actionOnOverflow, [System.Runtime.InteropServices.OptionalAttribute()] System.String? actionOnOverflowParam, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? askForRecordDisabling, [System.Runtime.InteropServices.OptionalAttribute()] System.String? description, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? maxMember, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? maxWaitTime, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? record, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OvhPabxHuntingQueueRecordDisablingDigitEnum? recordDisablingDigit, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OvhPabxHuntingQueueRecordDisablingLanguageEnum? recordDisablingLanguage, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? soundOnHold) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("actionOnClosure", actionOnClosure);
            _body.Add("actionOnClosureParam", actionOnClosureParam);
            _body.Add("actionOnOverflow", actionOnOverflow);
            _body.Add("actionOnOverflowParam", actionOnOverflowParam);
            _body.Add("askForRecordDisabling", askForRecordDisabling);
            _body.Add("description", description);
            _body.Add("maxMember", maxMember);
            _body.Add("maxWaitTime", maxWaitTime);
            _body.Add("record", record);
            _body.Add("recordDisablingDigit", recordDisablingDigit);
            _body.Add("recordDisablingLanguage", recordDisablingLanguage);
            _body.Add("soundOnHold", soundOnHold);
            _body.Add("strategy", strategy);
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue";
            return this.SendAsync<_telephony.OvhPabxHuntingQueue>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}
        public Task DeleteV1TelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAsync(string billingAccount, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}
        public Task<_telephony.OvhPabxHuntingQueue> GetV1TelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAsync(string billingAccount, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}";
            return this.SendAsync<_telephony.OvhPabxHuntingQueue>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}
        public Task PutV1TelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAsync(_telephony.OvhPabxHuntingQueue _body, string billingAccount, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/agent
        public Task<System.Int64[]> GetV1TelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAsync(string billingAccount, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/agent";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/agent
        public Task<_telephony.OvhPabxHuntingAgentQueue> PostV1TelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAsync(string billingAccount, long position, long queueId, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("position", position);
            _body.Add("queueId", queueId);
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/agent";
            return this.SendAsync<_telephony.OvhPabxHuntingAgentQueue>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/agent/{agentId}
        public Task DeleteV1TelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdAsync(long agentId, string billingAccount, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/agent/{agentId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/agent/{agentId}
        public Task<_telephony.OvhPabxHuntingAgentQueue> GetV1TelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdAsync(long agentId, string billingAccount, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/agent/{agentId}";
            return this.SendAsync<_telephony.OvhPabxHuntingAgentQueue>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/agent/{agentId}
        public Task PutV1TelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdAsync(_telephony.OvhPabxHuntingAgentQueue _body, long agentId, string billingAccount, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/agent/{agentId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/agent/{agentId}/liveStatus
        public Task<_telephony.OvhPabxHuntingAgentLiveStatus> GetV1TelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatusAsync(long agentId, string billingAccount, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/agent/{agentId}/liveStatus";
            return this.SendAsync<_telephony.OvhPabxHuntingAgentLiveStatus>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls
        public Task<System.Int64[]> GetV1TelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsAsync(string billingAccount, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}
        public Task<_telephony.OvhPabxHuntingQueueLiveCalls> GetV1TelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdAsync(string billingAccount, long id, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}";
            return this.SendAsync<_telephony.OvhPabxHuntingQueueLiveCalls>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/eavesdrop
        public Task<_telephony.Task> PostV1TelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropAsync(string billingAccount, long id, string number, long queueId, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("number", number);
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/eavesdrop";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/hangup
        public Task<_telephony.Task> PostV1TelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHangupAsync(string billingAccount, long id, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/hangup";
            return this.SendAsync<_telephony.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/hold
        public Task<_telephony.Task> PostV1TelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHoldAsync(string billingAccount, long id, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/hold";
            return this.SendAsync<_telephony.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/intercept
        public Task<_telephony.Task> PostV1TelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdInterceptAsync(string billingAccount, long id, string number, long queueId, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("number", number);
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/intercept";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/transfer
        public Task<_telephony.Task> PostV1TelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdTransferAsync(string billingAccount, long id, string number, long queueId, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("number", number);
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/transfer";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/whisper
        public Task<_telephony.Task> PostV1TelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdWhisperAsync(string billingAccount, long id, string number, long queueId, string serviceName, _telephony.OvhPabxWhisperingModeEnum whisperingMode) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("number", number);
            _body.Add("whisperingMode", whisperingMode);
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/whisper";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveStatistics
        public Task<_telephony.OvhPabxHuntingQueueLiveStatistics> GetV1TelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveStatisticsAsync(string billingAccount, long queueId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveStatistics";
            return this.SendAsync<_telephony.OvhPabxHuntingQueueLiveStatistics>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/menu
        public Task<System.Int64[]> GetV1TelephonyBillingAccountOvhPabxServiceNameMenuAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/menu";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/menu
        public Task<_telephony.OvhPabxMenu> PostV1TelephonyBillingAccountOvhPabxServiceNameMenuAsync(string billingAccount, string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? greetSound, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? greetSoundTts, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? interDigitTimeout, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? invalidSound, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? invalidSoundTts, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? timeout) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("greetSound", greetSound);
            _body.Add("greetSoundTts", greetSoundTts);
            _body.Add("interDigitTimeout", interDigitTimeout);
            _body.Add("invalidSound", invalidSound);
            _body.Add("invalidSoundTts", invalidSoundTts);
            _body.Add("name", name);
            _body.Add("timeout", timeout);
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/menu";
            return this.SendAsync<_telephony.OvhPabxMenu>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}
        public Task DeleteV1TelephonyBillingAccountOvhPabxServiceNameMenuMenuIdAsync(string billingAccount, long menuId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}
        public Task<_telephony.OvhPabxMenu> GetV1TelephonyBillingAccountOvhPabxServiceNameMenuMenuIdAsync(string billingAccount, long menuId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}";
            return this.SendAsync<_telephony.OvhPabxMenu>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}
        public Task PutV1TelephonyBillingAccountOvhPabxServiceNameMenuMenuIdAsync(_telephony.OvhPabxMenu _body, string billingAccount, long menuId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}/entry
        public Task<System.Int64[]> GetV1TelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryAsync(string billingAccount, long menuId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}/entry";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}/entry
        public Task<_telephony.OvhPabxMenuEntry> PostV1TelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryAsync(_telephony.OvhPabxIvrMenuEntryActionEnum action, string billingAccount, string dtmf, long menuId, long position, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? actionParam) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("action", action);
            _body.Add("actionParam", actionParam);
            _body.Add("dtmf", dtmf);
            _body.Add("position", position);
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}/entry";
            return this.SendAsync<_telephony.OvhPabxMenuEntry>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}/entry/{entryId}
        public Task DeleteV1TelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryIdAsync(string billingAccount, long entryId, long menuId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}/entry/{entryId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}/entry/{entryId}
        public Task<_telephony.OvhPabxMenuEntry> GetV1TelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryIdAsync(string billingAccount, long entryId, long menuId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}/entry/{entryId}";
            return this.SendAsync<_telephony.OvhPabxMenuEntry>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}/entry/{entryId}
        public Task PutV1TelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryIdAsync(_telephony.OvhPabxMenuEntry _body, string billingAccount, long entryId, long menuId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}/entry/{entryId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/records
        public Task<System.Int64[]> GetV1TelephonyBillingAccountOvhPabxServiceNameRecordsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/records";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/records/{id}
        public Task DeleteV1TelephonyBillingAccountOvhPabxServiceNameRecordsIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/records/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/records/{id}
        public Task<_telephony.OvhPabxRecord> GetV1TelephonyBillingAccountOvhPabxServiceNameRecordsIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/records/{id}";
            return this.SendAsync<_telephony.OvhPabxRecord>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/sound
        public Task<System.Int64[]> GetV1TelephonyBillingAccountOvhPabxServiceNameSoundAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/sound";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/sound/{soundId}
        public Task DeleteV1TelephonyBillingAccountOvhPabxServiceNameSoundSoundIdAsync(string billingAccount, string serviceName, long soundId) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/sound/{soundId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/sound/{soundId}
        public Task<_telephony.OvhPabxSound> GetV1TelephonyBillingAccountOvhPabxServiceNameSoundSoundIdAsync(string billingAccount, string serviceName, long soundId) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/sound/{soundId}";
            return this.SendAsync<_telephony.OvhPabxSound>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/soundUpload
        public Task<_telephony.Task> PostV1TelephonyBillingAccountOvhPabxServiceNameSoundUploadAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? documentId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? name, [System.Runtime.InteropServices.OptionalAttribute()] System.String? url) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("documentId", documentId);
            _body.Add("name", name);
            _body.Add("url", url);
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/soundUpload";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/tts
        public Task<System.Int64[]> GetV1TelephonyBillingAccountOvhPabxServiceNameTtsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/tts";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/tts
        public Task PostV1TelephonyBillingAccountOvhPabxServiceNameTtsAsync(string billingAccount, string serviceName, string text, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OvhPabxTtsVoiceEnum? voice) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("text", text);
            _body.Add("voice", voice);
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/tts";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/tts/{id}
        public Task DeleteV1TelephonyBillingAccountOvhPabxServiceNameTtsIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/tts/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/tts/{id}
        public Task<_telephony.OvhPabxTts> GetV1TelephonyBillingAccountOvhPabxServiceNameTtsIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/tts/{id}";
            return this.SendAsync<_telephony.OvhPabxTts>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/ovhPabx/{serviceName}/tts/{id}
        public Task PutV1TelephonyBillingAccountOvhPabxServiceNameTtsIdAsync(_telephony.OvhPabxTts _body, string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/ovhPabx/{serviceName}/tts/{id}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/phonebook
        public Task<System.String[]> GetV1TelephonyBillingAccountPhonebookAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/phonebook";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/phonebook
        public Task<System.String> PostV1TelephonyBillingAccountPhonebookAsync(string billingAccount, string name) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("name", name);
            string uri = $"/v1/telephony/{billingAccount}/phonebook";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/phonebook/{bookKey}
        public Task DeleteV1TelephonyBillingAccountPhonebookBookKeyAsync(string billingAccount, string bookKey) {
            string uri = $"/v1/telephony/{billingAccount}/phonebook/{bookKey}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/phonebook/{bookKey}
        public Task<_telephony.PhonebookMaster> GetV1TelephonyBillingAccountPhonebookBookKeyAsync(string billingAccount, string bookKey) {
            string uri = $"/v1/telephony/{billingAccount}/phonebook/{bookKey}";
            return this.SendAsync<_telephony.PhonebookMaster>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/phonebook/{bookKey}
        public Task PutV1TelephonyBillingAccountPhonebookBookKeyAsync(_telephony.PhonebookMaster _body, string billingAccount, string bookKey) {
            string uri = $"/v1/telephony/{billingAccount}/phonebook/{bookKey}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/phonebook/{bookKey}/export
        public Task<_telephony.PcsFile> GetV1TelephonyBillingAccountPhonebookBookKeyExportAsync(string billingAccount, string bookKey, _telephony.ContactsExportFormatsEnum format) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("format", format);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/{billingAccount}/phonebook/{bookKey}/export{queryParameters}";
            return this.SendAsync<_telephony.PcsFile>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/phonebook/{bookKey}/import
        public Task<_telephony.Task> PostV1TelephonyBillingAccountPhonebookBookKeyImportAsync(string billingAccount, string bookKey, string documentId) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("documentId", documentId);
            string uri = $"/v1/telephony/{billingAccount}/phonebook/{bookKey}/import";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/phonebook/{bookKey}/phonebookContact
        public Task<System.Int64[]> GetV1TelephonyBillingAccountPhonebookBookKeyPhonebookContactAsync(string billingAccount, string bookKey) {
            string uri = $"/v1/telephony/{billingAccount}/phonebook/{bookKey}/phonebookContact";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/phonebook/{bookKey}/phonebookContact
        public Task<System.Int64> PostV1TelephonyBillingAccountPhonebookBookKeyPhonebookContactAsync(string billingAccount, string bookKey, string group, string name, string surname, [System.Runtime.InteropServices.OptionalAttribute()] System.String? homeMobile, [System.Runtime.InteropServices.OptionalAttribute()] System.String? homePhone, [System.Runtime.InteropServices.OptionalAttribute()] System.String? workMobile, [System.Runtime.InteropServices.OptionalAttribute()] System.String? workPhone) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("group", group);
            _body.Add("homeMobile", homeMobile);
            _body.Add("homePhone", homePhone);
            _body.Add("name", name);
            _body.Add("surname", surname);
            _body.Add("workMobile", workMobile);
            _body.Add("workPhone", workPhone);
            string uri = $"/v1/telephony/{billingAccount}/phonebook/{bookKey}/phonebookContact";
            return this.SendAsync<long>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/phonebook/{bookKey}/phonebookContact/{id}
        public Task DeleteV1TelephonyBillingAccountPhonebookBookKeyPhonebookContactIdAsync(string billingAccount, string bookKey, long id) {
            string uri = $"/v1/telephony/{billingAccount}/phonebook/{bookKey}/phonebookContact/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/phonebook/{bookKey}/phonebookContact/{id}
        public Task<_telephony.PhonebookContact> GetV1TelephonyBillingAccountPhonebookBookKeyPhonebookContactIdAsync(string billingAccount, string bookKey, long id) {
            string uri = $"/v1/telephony/{billingAccount}/phonebook/{bookKey}/phonebookContact/{id}";
            return this.SendAsync<_telephony.PhonebookContact>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/phonebook/{bookKey}/phonebookContact/{id}
        public Task PutV1TelephonyBillingAccountPhonebookBookKeyPhonebookContactIdAsync(_telephony.PhonebookContact _body, string billingAccount, string bookKey, long id) {
            string uri = $"/v1/telephony/{billingAccount}/phonebook/{bookKey}/phonebookContact/{id}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/portability
        public Task<System.Int64[]> GetV1TelephonyBillingAccountPortabilityAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/portability";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/portability/{id}
        public Task<_telephony.Portability> GetV1TelephonyBillingAccountPortabilityIdAsync(string billingAccount, long id) {
            string uri = $"/v1/telephony/{billingAccount}/portability/{id}";
            return this.SendAsync<_telephony.Portability>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/portability/{id}/canBeCancelled
        public Task<System.Boolean> GetV1TelephonyBillingAccountPortabilityIdCanBeCancelledAsync(string billingAccount, long id) {
            string uri = $"/v1/telephony/{billingAccount}/portability/{id}/canBeCancelled";
            return this.SendAsync<bool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/portability/{id}/canBeExecuted
        public Task<System.Boolean> GetV1TelephonyBillingAccountPortabilityIdCanBeExecutedAsync(string billingAccount, long id) {
            string uri = $"/v1/telephony/{billingAccount}/portability/{id}/canBeExecuted";
            return this.SendAsync<bool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/portability/{id}/cancel
        public Task PostV1TelephonyBillingAccountPortabilityIdCancelAsync(string billingAccount, long id, [System.Runtime.InteropServices.OptionalAttribute()] System.String? reason) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("reason", reason);
            string uri = $"/v1/telephony/{billingAccount}/portability/{id}/cancel";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/portability/{id}/changeDate
        public Task PostV1TelephonyBillingAccountPortabilityIdChangeDateAsync(string billingAccount, System.DateTime date, long id) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("date", date);
            string uri = $"/v1/telephony/{billingAccount}/portability/{id}/changeDate";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/portability/{id}/dateCanBeChanged
        public Task<System.Boolean> GetV1TelephonyBillingAccountPortabilityIdDateCanBeChangedAsync(string billingAccount, long id) {
            string uri = $"/v1/telephony/{billingAccount}/portability/{id}/dateCanBeChanged";
            return this.SendAsync<bool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/portability/{id}/document
        public Task<System.Int64[]> GetV1TelephonyBillingAccountPortabilityIdDocumentAsync(string billingAccount, long id) {
            string uri = $"/v1/telephony/{billingAccount}/portability/{id}/document";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/portability/{id}/document
        public Task<_telephony.PortabilityDocument> PostV1TelephonyBillingAccountPortabilityIdDocumentAsync(string billingAccount, long id, string name, [System.Runtime.InteropServices.OptionalAttribute()] System.String? description) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("description", description);
            _body.Add("name", name);
            string uri = $"/v1/telephony/{billingAccount}/portability/{id}/document";
            return this.SendAsync<_telephony.PortabilityDocument>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/portability/{id}/document/{documentId}
        public Task DeleteV1TelephonyBillingAccountPortabilityIdDocumentDocumentIdAsync(string billingAccount, long documentId, long id) {
            string uri = $"/v1/telephony/{billingAccount}/portability/{id}/document/{documentId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/portability/{id}/document/{documentId}
        public Task<_telephony.PortabilityDocument> GetV1TelephonyBillingAccountPortabilityIdDocumentDocumentIdAsync(string billingAccount, long documentId, long id) {
            string uri = $"/v1/telephony/{billingAccount}/portability/{id}/document/{documentId}";
            return this.SendAsync<_telephony.PortabilityDocument>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/portability/{id}/document/{documentId}
        public Task PutV1TelephonyBillingAccountPortabilityIdDocumentDocumentIdAsync(_telephony.PortabilityDocument _body, string billingAccount, long documentId, long id) {
            string uri = $"/v1/telephony/{billingAccount}/portability/{id}/document/{documentId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/portability/{id}/execute
        public Task PostV1TelephonyBillingAccountPortabilityIdExecuteAsync(string billingAccount, long id) {
            string uri = $"/v1/telephony/{billingAccount}/portability/{id}/execute";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/portability/{id}/relaunch
        public Task<_telephony.PortabilityFixErrorPossibleParameters> GetV1TelephonyBillingAccountPortabilityIdRelaunchAsync(string billingAccount, long id) {
            string uri = $"/v1/telephony/{billingAccount}/portability/{id}/relaunch";
            return this.SendAsync<_telephony.PortabilityFixErrorPossibleParameters>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/portability/{id}/relaunch
        public Task PostV1TelephonyBillingAccountPortabilityIdRelaunchAsync(string billingAccount, long id, _complexType.SafeKeyValue<string> parameters) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("parameters", parameters);
            string uri = $"/v1/telephony/{billingAccount}/portability/{id}/relaunch";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/portability/{id}/status
        public Task<_telephony.PortabilityStep[]> GetV1TelephonyBillingAccountPortabilityIdStatusAsync(string billingAccount, long id) {
            string uri = $"/v1/telephony/{billingAccount}/portability/{id}/status";
            return this.SendAsync<_telephony.PortabilityStep[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/redirect
        public Task<System.String[]> GetV1TelephonyBillingAccountRedirectAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/redirect";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/redirect/{serviceName}
        public Task<_telephony.Redirect> GetV1TelephonyBillingAccountRedirectServiceNameAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/redirect/{serviceName}";
            return this.SendAsync<_telephony.Redirect>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/redirect/{serviceName}
        public Task PutV1TelephonyBillingAccountRedirectServiceNameAsync(_telephony.Redirect _body, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/redirect/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/redirect/{serviceName}/changeDestination
        public Task<_telephony.Task> PostV1TelephonyBillingAccountRedirectServiceNameChangeDestinationAsync(string billingAccount, string destination, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("destination", destination);
            string uri = $"/v1/telephony/{billingAccount}/redirect/{serviceName}/changeDestination";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/rsva
        public Task<System.String[]> GetV1TelephonyBillingAccountRsvaAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/rsva";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/rsva/{serviceName}
        public Task<_telephony.Rsva> GetV1TelephonyBillingAccountRsvaServiceNameAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/rsva/{serviceName}";
            return this.SendAsync<_telephony.Rsva>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/rsva/{serviceName}
        public Task PutV1TelephonyBillingAccountRsvaServiceNameAsync(_telephony.Rsva _body, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/rsva/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/rsva/{serviceName}/allowedRateCodes
        public Task<_telephony.RateCodeInformation[]> GetV1TelephonyBillingAccountRsvaServiceNameAllowedRateCodesAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/rsva/{serviceName}/allowedRateCodes";
            return this.SendAsync<_telephony.RateCodeInformation[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/rsva/{serviceName}/cancelScheduledRateCode
        public Task PostV1TelephonyBillingAccountRsvaServiceNameCancelScheduledRateCodeAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/rsva/{serviceName}/cancelScheduledRateCode";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/rsva/{serviceName}/currentRateCode
        public Task<_telephony.DetailedRateCodeInformation> GetV1TelephonyBillingAccountRsvaServiceNameCurrentRateCodeAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/rsva/{serviceName}/currentRateCode";
            return this.SendAsync<_telephony.DetailedRateCodeInformation>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/rsva/{serviceName}/scheduleRateCode
        public Task<_telephony.DetailedRateCodeInformation> PostV1TelephonyBillingAccountRsvaServiceNameScheduleRateCodeAsync(string billingAccount, string rateCode, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("rateCode", rateCode);
            string uri = $"/v1/telephony/{billingAccount}/rsva/{serviceName}/scheduleRateCode";
            return this.SendAsync<_telephony.DetailedRateCodeInformation>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/rsva/{serviceName}/scheduledRateCode
        public Task<_telephony.DetailedRateCodeInformation> GetV1TelephonyBillingAccountRsvaServiceNameScheduledRateCodeAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/rsva/{serviceName}/scheduledRateCode";
            return this.SendAsync<_telephony.DetailedRateCodeInformation>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/scheduler
        public Task<System.String[]> GetV1TelephonyBillingAccountSchedulerAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/scheduler";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/scheduler/{serviceName}
        public Task<_telephony.Scheduler> GetV1TelephonyBillingAccountSchedulerServiceNameAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/scheduler/{serviceName}";
            return this.SendAsync<_telephony.Scheduler>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/scheduler/{serviceName}
        public Task PutV1TelephonyBillingAccountSchedulerServiceNameAsync(_telephony.Scheduler _body, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/scheduler/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/scheduler/{serviceName}/events
        public Task<System.String[]> GetV1TelephonyBillingAccountSchedulerServiceNameEventsAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.SchedulerCategoryEnum? categories, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? dateEndFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? dateEndTo, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? dateStartFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? dateStartTo) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("categories", categories);
            queryParametersTemp.Add("dateEnd.from", dateEndFrom);
            queryParametersTemp.Add("dateEnd.to", dateEndTo);
            queryParametersTemp.Add("dateStart.from", dateStartFrom);
            queryParametersTemp.Add("dateStart.to", dateStartTo);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/{billingAccount}/scheduler/{serviceName}/events{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/scheduler/{serviceName}/events
        public Task PostV1TelephonyBillingAccountSchedulerServiceNameEventsAsync(string billingAccount, _telephony.SchedulerCategoryEnum category, System.DateTime dateEnd, System.DateTime dateStart, string serviceName, string title, [System.Runtime.InteropServices.OptionalAttribute()] System.String? description, [System.Runtime.InteropServices.OptionalAttribute()] System.String? uid) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("category", category);
            _body.Add("dateEnd", dateEnd);
            _body.Add("dateStart", dateStart);
            _body.Add("description", description);
            _body.Add("title", title);
            _body.Add("uid", uid);
            string uri = $"/v1/telephony/{billingAccount}/scheduler/{serviceName}/events";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/scheduler/{serviceName}/events/{uid}
        public Task DeleteV1TelephonyBillingAccountSchedulerServiceNameEventsUidAsync(string billingAccount, string serviceName, string uid) {
            string uri = $"/v1/telephony/{billingAccount}/scheduler/{serviceName}/events/{uid}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/scheduler/{serviceName}/events/{uid}
        public Task<_telephony.SchedulerEvent> GetV1TelephonyBillingAccountSchedulerServiceNameEventsUidAsync(string billingAccount, string serviceName, string uid) {
            string uri = $"/v1/telephony/{billingAccount}/scheduler/{serviceName}/events/{uid}";
            return this.SendAsync<_telephony.SchedulerEvent>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/scheduler/{serviceName}/events/{uid}
        public Task PutV1TelephonyBillingAccountSchedulerServiceNameEventsUidAsync(_telephony.SchedulerEvent _body, string billingAccount, string serviceName, string uid) {
            string uri = $"/v1/telephony/{billingAccount}/scheduler/{serviceName}/events/{uid}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/scheduler/{serviceName}/importIcsCalendar
        public Task<_telephony.Task> PostV1TelephonyBillingAccountSchedulerServiceNameImportIcsCalendarAsync(string billingAccount, string serviceName, string url) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("url", url);
            string uri = $"/v1/telephony/{billingAccount}/scheduler/{serviceName}/importIcsCalendar";
            return this.SendAsync<_telephony.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/screen
        public Task<System.String[]> GetV1TelephonyBillingAccountScreenAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/screen";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/screen/{serviceName}
        public Task<_telephony.Screen> GetV1TelephonyBillingAccountScreenServiceNameAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/screen/{serviceName}";
            return this.SendAsync<_telephony.Screen>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/screen/{serviceName}
        public Task PutV1TelephonyBillingAccountScreenServiceNameAsync(_telephony.Screen _body, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/screen/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/screen/{serviceName}/screenLists
        public Task<System.Int64[]> GetV1TelephonyBillingAccountScreenServiceNameScreenListsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/screen/{serviceName}/screenLists";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/screen/{serviceName}/screenLists
        public Task PostV1TelephonyBillingAccountScreenServiceNameScreenListsAsync(string billingAccount, _telephony.ScreenListNatureEnum nature, string serviceName, _telephony.ScreenListTypeEnum type, [System.Runtime.InteropServices.OptionalAttribute()] System.String? callNumber) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("callNumber", callNumber);
            _body.Add("nature", nature);
            _body.Add("type", type);
            string uri = $"/v1/telephony/{billingAccount}/screen/{serviceName}/screenLists";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/screen/{serviceName}/screenLists/{id}
        public Task DeleteV1TelephonyBillingAccountScreenServiceNameScreenListsIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/screen/{serviceName}/screenLists/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/screen/{serviceName}/screenLists/{id}
        public Task<_telephony.ScreenList> GetV1TelephonyBillingAccountScreenServiceNameScreenListsIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/screen/{serviceName}/screenLists/{id}";
            return this.SendAsync<_telephony.ScreenList>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service
        public Task<System.String[]> GetV1TelephonyBillingAccountServiceAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/service";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}
        public Task DeleteV1TelephonyBillingAccountServiceServiceNameAsync(string billingAccount, _telephony.TerminationReasonEnum reason, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? details) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("details", details);
            queryParametersTemp.Add("reason", reason);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}{queryParameters}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}
        public Task<_telephony.TelephonyService> GetV1TelephonyBillingAccountServiceServiceNameAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}";
            return this.SendAsync<_telephony.TelephonyService>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}
        public Task PutV1TelephonyBillingAccountServiceServiceNameAsync(_telephony.TelephonyService _body, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}/cancelTermination
        public Task PostV1TelephonyBillingAccountServiceServiceNameCancelTerminationAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}/cancelTermination";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}/changeOfBillingAccount
        public Task PostV1TelephonyBillingAccountServiceServiceNameChangeOfBillingAccountAsync(string billingAccount, string billingAccountDestination, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("billingAccountDestination", billingAccountDestination);
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}/changeOfBillingAccount";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}/diagnosticReports
        public Task<_telephony.DiagnosticReport[]> GetV1TelephonyBillingAccountServiceServiceNameDiagnosticReportsAsync(string billingAccount, _telephony.DiagnosticReportIndexEnum dayInterval, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("dayInterval", dayInterval);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}/diagnosticReports{queryParameters}";
            return this.SendAsync<_telephony.DiagnosticReport[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}/directory
        public Task<_telephony.DirectoryInfo> GetV1TelephonyBillingAccountServiceServiceNameDirectoryAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}/directory";
            return this.SendAsync<_telephony.DirectoryInfo>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}/directory
        public Task PutV1TelephonyBillingAccountServiceServiceNameDirectoryAsync(_telephony.DirectoryInfo _body, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}/directory";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}/directory/fetchEntrepriseInformations
        public Task<_telephony.EntrepriseNumberInformationsTask> PostV1TelephonyBillingAccountServiceServiceNameDirectoryFetchEntrepriseInformationsAsync(string billingAccount, string entrepriseNumber, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("entrepriseNumber", entrepriseNumber);
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}/directory/fetchEntrepriseInformations";
            return this.SendAsync<_telephony.EntrepriseNumberInformationsTask>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}/directory/getDirectoryServiceCode
        public Task<_telephony.DirectoryHeadingPJ[]> GetV1TelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCodeAsync(string apeCode, string billingAccount, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("apeCode", apeCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}/directory/getDirectoryServiceCode{queryParameters}";
            return this.SendAsync<_telephony.DirectoryHeadingPJ[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}/directory/getWayTypes
        public Task<_telephony.DirectoryWayType[]> GetV1TelephonyBillingAccountServiceServiceNameDirectoryGetWayTypesAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}/directory/getWayTypes";
            return this.SendAsync<_telephony.DirectoryWayType[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}/eventToken
        public Task DeleteV1TelephonyBillingAccountServiceServiceNameEventTokenAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}/eventToken";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}/eventToken
        public Task<_telephony.EventToken> GetV1TelephonyBillingAccountServiceServiceNameEventTokenAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}/eventToken";
            return this.SendAsync<_telephony.EventToken>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}/eventToken
        public Task<System.String> PostV1TelephonyBillingAccountServiceServiceNameEventTokenAsync(string billingAccount, _telephony.TokenExpirationEnum expiration, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("expiration", expiration);
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}/eventToken";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}/faxConsumption
        public Task<System.Int64[]> GetV1TelephonyBillingAccountServiceServiceNameFaxConsumptionAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDatetimeFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDatetimeTo, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.FaxConsumptionWayTypeEnum? wayType) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("creationDatetime.from", creationDatetimeFrom);
            queryParametersTemp.Add("creationDatetime.to", creationDatetimeTo);
            queryParametersTemp.Add("wayType", wayType);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}/faxConsumption{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}/faxConsumption/{consumptionId}
        public Task<_telephony.FaxConsumption> GetV1TelephonyBillingAccountServiceServiceNameFaxConsumptionConsumptionIdAsync(string billingAccount, long consumptionId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}/faxConsumption/{consumptionId}";
            return this.SendAsync<_telephony.FaxConsumption>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}/offerChange
        public Task DeleteV1TelephonyBillingAccountServiceServiceNameOfferChangeAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}/offerChange";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}/offerChange
        public Task<_telephony.OfferChange> GetV1TelephonyBillingAccountServiceServiceNameOfferChangeAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}/offerChange";
            return this.SendAsync<_telephony.OfferChange>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}/offerChange
        public Task PostV1TelephonyBillingAccountServiceServiceNameOfferChangeAsync(string billingAccount, string offer, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("offer", offer);
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}/offerChange";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}/offerChanges
        public Task<_telephony.LineOffer[]> GetV1TelephonyBillingAccountServiceServiceNameOfferChangesAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}/offerChanges";
            return this.SendAsync<_telephony.LineOffer[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}/offerTask
        public Task<System.Int64[]> GetV1TelephonyBillingAccountServiceServiceNameOfferTaskAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OfferTaskActionEnum? action, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.TaskStatusEnum? status, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OfferTaskTypeEnum? type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("action", action);
            queryParametersTemp.Add("status", status);
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}/offerTask{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}/offerTask/{taskId}
        public Task<_telephony.OfferTask> GetV1TelephonyBillingAccountServiceServiceNameOfferTaskTaskIdAsync(string billingAccount, string serviceName, long taskId) {
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}/offerTask/{taskId}";
            return this.SendAsync<_telephony.OfferTask>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}/offerTask/{taskId}
        public Task PutV1TelephonyBillingAccountServiceServiceNameOfferTaskTaskIdAsync(_telephony.OfferTask _body, string billingAccount, string serviceName, long taskId) {
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}/offerTask/{taskId}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}/previousVoiceConsumption
        public Task<System.Int64[]> GetV1TelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDatetimeFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDatetimeTo, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.VoiceConsumptionDestinationTypeEnum? destinationType, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.VoiceConsumptionPlanTypeEnum? planType, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.VoiceConsumptionWayTypeEnum? wayType) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("creationDatetime.from", creationDatetimeFrom);
            queryParametersTemp.Add("creationDatetime.to", creationDatetimeTo);
            queryParametersTemp.Add("destinationType", destinationType);
            queryParametersTemp.Add("planType", planType);
            queryParametersTemp.Add("wayType", wayType);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}/previousVoiceConsumption{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}/previousVoiceConsumption/{consumptionId}
        public Task<_telephony.PreviousVoiceConsumption> GetV1TelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionConsumptionIdAsync(string billingAccount, long consumptionId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}/previousVoiceConsumption/{consumptionId}";
            return this.SendAsync<_telephony.PreviousVoiceConsumption>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}/repaymentConsumption
        public Task<System.Int64[]> GetV1TelephonyBillingAccountServiceServiceNameRepaymentConsumptionAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDatetimeFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDatetimeTo) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("creationDatetime.from", creationDatetimeFrom);
            queryParametersTemp.Add("creationDatetime.to", creationDatetimeTo);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}/repaymentConsumption{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}/repaymentConsumption/{consumptionId}
        public Task<_telephony.RepaymentConsumption> GetV1TelephonyBillingAccountServiceServiceNameRepaymentConsumptionConsumptionIdAsync(string billingAccount, long consumptionId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}/repaymentConsumption/{consumptionId}";
            return this.SendAsync<_telephony.RepaymentConsumption>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}/task
        public Task<System.Int64[]> GetV1TelephonyBillingAccountServiceServiceNameTaskAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? action, [System.Runtime.InteropServices.OptionalAttribute()] System.String? serviceType, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.TaskStatusEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("action", action);
            queryParametersTemp.Add("serviceType", serviceType);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}/task{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}/task/{taskId}
        public Task<_telephony.Task> GetV1TelephonyBillingAccountServiceServiceNameTaskTaskIdAsync(string billingAccount, string serviceName, long taskId) {
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}/task/{taskId}";
            return this.SendAsync<_telephony.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}/voiceConsumption
        public Task<System.Int64[]> GetV1TelephonyBillingAccountServiceServiceNameVoiceConsumptionAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDatetimeFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDatetimeTo, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.VoiceConsumptionDestinationTypeEnum? destinationType, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.VoiceConsumptionPlanTypeEnum? planType, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.VoiceConsumptionWayTypeEnum? wayType) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("creationDatetime.from", creationDatetimeFrom);
            queryParametersTemp.Add("creationDatetime.to", creationDatetimeTo);
            queryParametersTemp.Add("destinationType", destinationType);
            queryParametersTemp.Add("planType", planType);
            queryParametersTemp.Add("wayType", wayType);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}/voiceConsumption{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/service/{serviceName}/voiceConsumption/{consumptionId}
        public Task<_telephony.VoiceConsumption> GetV1TelephonyBillingAccountServiceServiceNameVoiceConsumptionConsumptionIdAsync(string billingAccount, long consumptionId, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/service/{serviceName}/voiceConsumption/{consumptionId}";
            return this.SendAsync<_telephony.VoiceConsumption>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/serviceInfos
        public Task<_services.Service> GetV1TelephonyBillingAccountServiceInfosAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/serviceInfos
        public Task PutV1TelephonyBillingAccountServiceInfosAsync(_services.Service _body, string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/task
        public Task<System.Int64[]> GetV1TelephonyBillingAccountTaskAsync(string billingAccount, [System.Runtime.InteropServices.OptionalAttribute()] System.String? action, [System.Runtime.InteropServices.OptionalAttribute()] System.String? serviceType, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.TaskStatusEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("action", action);
            queryParametersTemp.Add("serviceType", serviceType);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/{billingAccount}/task{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/task/{taskId}
        public Task<_telephony.Task> GetV1TelephonyBillingAccountTaskTaskIdAsync(string billingAccount, long taskId) {
            string uri = $"/v1/telephony/{billingAccount}/task/{taskId}";
            return this.SendAsync<_telephony.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/timeCondition
        public Task<System.String[]> GetV1TelephonyBillingAccountTimeConditionAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/timeCondition";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/timeCondition/{serviceName}
        public Task<_telephony.GenericScreen> GetV1TelephonyBillingAccountTimeConditionServiceNameAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/timeCondition/{serviceName}";
            return this.SendAsync<_telephony.GenericScreen>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/timeCondition/{serviceName}/condition
        public Task<System.Int64[]> GetV1TelephonyBillingAccountTimeConditionServiceNameConditionAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/timeCondition/{serviceName}/condition";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/timeCondition/{serviceName}/condition
        public Task<_telephony.TimeCondition> PostV1TelephonyBillingAccountTimeConditionServiceNameConditionAsync(string billingAccount, _telephony.TimeConditionsDayEnum day, string hourBegin, string hourEnd, _telephony.TimeConditionsPolicyEnum policy, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("day", day);
            _body.Add("hourBegin", hourBegin);
            _body.Add("hourEnd", hourEnd);
            _body.Add("policy", policy);
            string uri = $"/v1/telephony/{billingAccount}/timeCondition/{serviceName}/condition";
            return this.SendAsync<_telephony.TimeCondition>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/timeCondition/{serviceName}/condition/{id}
        public Task DeleteV1TelephonyBillingAccountTimeConditionServiceNameConditionIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/timeCondition/{serviceName}/condition/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/timeCondition/{serviceName}/condition/{id}
        public Task<_telephony.TimeCondition> GetV1TelephonyBillingAccountTimeConditionServiceNameConditionIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/timeCondition/{serviceName}/condition/{id}";
            return this.SendAsync<_telephony.TimeCondition>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/timeCondition/{serviceName}/condition/{id}
        public Task PutV1TelephonyBillingAccountTimeConditionServiceNameConditionIdAsync(_telephony.TimeCondition _body, string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/timeCondition/{serviceName}/condition/{id}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/timeCondition/{serviceName}/options
        public Task<_telephony.TimeConditionOptions> GetV1TelephonyBillingAccountTimeConditionServiceNameOptionsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/timeCondition/{serviceName}/options";
            return this.SendAsync<_telephony.TimeConditionOptions>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/timeCondition/{serviceName}/options
        public Task PutV1TelephonyBillingAccountTimeConditionServiceNameOptionsAsync(_telephony.TimeConditionOptions _body, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/timeCondition/{serviceName}/options";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/transferSecurityDeposit
        public Task PostV1TelephonyBillingAccountTransferSecurityDepositAsync(long amount, string billingAccount, string billingAccountDestination) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("amount", amount);
            _body.Add("billingAccountDestination", billingAccountDestination);
            string uri = $"/v1/telephony/{billingAccount}/transferSecurityDeposit";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/trunk
        public Task<System.String[]> GetV1TelephonyBillingAccountTrunkAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/trunk";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/trunk/{serviceName}
        public Task<_telephony.Trunk> GetV1TelephonyBillingAccountTrunkServiceNameAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/trunk/{serviceName}";
            return this.SendAsync<_telephony.Trunk>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/trunk/{serviceName}/channelsPacksRepartition
        public Task<_telephony.TrunkSimultaneousPacksRepartition> GetV1TelephonyBillingAccountTrunkServiceNameChannelsPacksRepartitionAsync(string billingAccount, long quantity, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("quantity", quantity);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/{billingAccount}/trunk/{serviceName}/channelsPacksRepartition{queryParameters}";
            return this.SendAsync<_telephony.TrunkSimultaneousPacksRepartition>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/trunk/{serviceName}/externalDisplayedNumber
        public Task<System.String[]> GetV1TelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/trunk/{serviceName}/externalDisplayedNumber";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/trunk/{serviceName}/externalDisplayedNumber
        public Task<_telephony.TrunkExternalDisplayedNumber> PostV1TelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberAsync(string billingAccount, string number, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? autoValidation) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("autoValidation", autoValidation);
            _body.Add("number", number);
            string uri = $"/v1/telephony/{billingAccount}/trunk/{serviceName}/externalDisplayedNumber";
            return this.SendAsync<_telephony.TrunkExternalDisplayedNumber>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/trunk/{serviceName}/externalDisplayedNumber/{number}
        public Task DeleteV1TelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberAsync(string billingAccount, string number, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/trunk/{serviceName}/externalDisplayedNumber/{number}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/trunk/{serviceName}/externalDisplayedNumber/{number}
        public Task<_telephony.TrunkExternalDisplayedNumber> GetV1TelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberAsync(string billingAccount, string number, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/trunk/{serviceName}/externalDisplayedNumber/{number}";
            return this.SendAsync<_telephony.TrunkExternalDisplayedNumber>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/trunk/{serviceName}/externalDisplayedNumber/{number}/validate
        public Task<_telephony.TrunkExternalDisplayedNumberValidation> PostV1TelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberValidateAsync(string billingAccount, string number, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/trunk/{serviceName}/externalDisplayedNumber/{number}/validate";
            return this.SendAsync<_telephony.TrunkExternalDisplayedNumberValidation>("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/voicemail
        public Task<System.String[]> GetV1TelephonyBillingAccountVoicemailAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/voicemail";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/voicemail/{serviceName}
        public Task<_telephony.Voicemail> GetV1TelephonyBillingAccountVoicemailServiceNameAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/voicemail/{serviceName}";
            return this.SendAsync<_telephony.Voicemail>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/voicemail/{serviceName}
        public Task PutV1TelephonyBillingAccountVoicemailServiceNameAsync(_telephony.Voicemail _body, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/voicemail/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/voicemail/{serviceName}/directories
        public Task<System.Int64[]> GetV1TelephonyBillingAccountVoicemailServiceNameDirectoriesAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.VoicemailMessageFolderDirectoryEnum? dir) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("dir", dir);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/{billingAccount}/voicemail/{serviceName}/directories{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/voicemail/{serviceName}/directories/{id}
        public Task DeleteV1TelephonyBillingAccountVoicemailServiceNameDirectoriesIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/voicemail/{serviceName}/directories/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/voicemail/{serviceName}/directories/{id}
        public Task<_telephony.VoicemailMessages> GetV1TelephonyBillingAccountVoicemailServiceNameDirectoriesIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/voicemail/{serviceName}/directories/{id}";
            return this.SendAsync<_telephony.VoicemailMessages>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/voicemail/{serviceName}/directories/{id}/download
        public Task<_telephony.PcsFile> GetV1TelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownloadAsync(string billingAccount, long id, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.ServiceVoicemailAudioFormatEnum? format) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("format", format);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/{billingAccount}/voicemail/{serviceName}/directories/{id}/download{queryParameters}";
            return this.SendAsync<_telephony.PcsFile>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/voicemail/{serviceName}/directories/{id}/move
        public Task PostV1TelephonyBillingAccountVoicemailServiceNameDirectoriesIdMoveAsync(string billingAccount, _telephony.VoicemailMessageFolderDirectoryEnum dir, long id, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("dir", dir);
            string uri = $"/v1/telephony/{billingAccount}/voicemail/{serviceName}/directories/{id}/move";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/voicemail/{serviceName}/greetings
        public Task<System.Int64[]> GetV1TelephonyBillingAccountVoicemailServiceNameGreetingsAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.VoicemailMessageFolderGreetingEnum? dir) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("dir", dir);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/{billingAccount}/voicemail/{serviceName}/greetings{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/voicemail/{serviceName}/greetings
        public Task<System.Int64> PostV1TelephonyBillingAccountVoicemailServiceNameGreetingsAsync(string billingAccount, _telephony.VoicemailMessageFolderGreetingEnum dir, string documentId, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("dir", dir);
            _body.Add("documentId", documentId);
            string uri = $"/v1/telephony/{billingAccount}/voicemail/{serviceName}/greetings";
            return this.SendAsync<long>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/voicemail/{serviceName}/greetings/{id}
        public Task DeleteV1TelephonyBillingAccountVoicemailServiceNameGreetingsIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/voicemail/{serviceName}/greetings/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/voicemail/{serviceName}/greetings/{id}
        public Task<_telephony.VoicemailGreetings> GetV1TelephonyBillingAccountVoicemailServiceNameGreetingsIdAsync(string billingAccount, long id, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/voicemail/{serviceName}/greetings/{id}";
            return this.SendAsync<_telephony.VoicemailGreetings>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/voicemail/{serviceName}/greetings/{id}/download
        public Task<_telephony.PcsFile> GetV1TelephonyBillingAccountVoicemailServiceNameGreetingsIdDownloadAsync(string billingAccount, long id, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.ServiceVoicemailAudioFormatEnum? format) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("format", format);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/telephony/{billingAccount}/voicemail/{serviceName}/greetings/{id}/download{queryParameters}";
            return this.SendAsync<_telephony.PcsFile>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/voicemail/{serviceName}/greetings/{id}/move
        public Task PostV1TelephonyBillingAccountVoicemailServiceNameGreetingsIdMoveAsync(string billingAccount, _telephony.VoicemailMessageFolderGreetingEnum dir, long id, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("dir", dir);
            string uri = $"/v1/telephony/{billingAccount}/voicemail/{serviceName}/greetings/{id}/move";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/voicemail/{serviceName}/migrateOnNewVersion
        public Task PostV1TelephonyBillingAccountVoicemailServiceNameMigrateOnNewVersionAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/voicemail/{serviceName}/migrateOnNewVersion";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/voicemail/{serviceName}/settings
        public Task<_telephony.VoicemailProperties> GetV1TelephonyBillingAccountVoicemailServiceNameSettingsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/voicemail/{serviceName}/settings";
            return this.SendAsync<_telephony.VoicemailProperties>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/voicemail/{serviceName}/settings
        public Task PutV1TelephonyBillingAccountVoicemailServiceNameSettingsAsync(_telephony.VoicemailProperties _body, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/voicemail/{serviceName}/settings";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/voicemail/{serviceName}/settings/changePassword
        public Task PostV1TelephonyBillingAccountVoicemailServiceNameSettingsChangePasswordAsync(string billingAccount, string password, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("password", password);
            string uri = $"/v1/telephony/{billingAccount}/voicemail/{serviceName}/settings/changePassword";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/voicemail/{serviceName}/settings/changeRouting
        public Task PostV1TelephonyBillingAccountVoicemailServiceNameSettingsChangeRoutingAsync(string billingAccount, _telephony.VoicefaxRoutingEnum routing, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("routing", routing);
            string uri = $"/v1/telephony/{billingAccount}/voicemail/{serviceName}/settings/changeRouting";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/voicemail/{serviceName}/settings/routing
        public Task<_telephony.VoicefaxRoutingEnum> GetV1TelephonyBillingAccountVoicemailServiceNameSettingsRoutingAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/voicemail/{serviceName}/settings/routing";
            return this.SendAsync<_telephony.VoicefaxRoutingEnum>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/voicemail/{serviceName}/settings/voicemailNumbers
        public Task<_telephony.VoicemailNumbers> GetV1TelephonyBillingAccountVoicemailServiceNameSettingsVoicemailNumbersAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/voicemail/{serviceName}/settings/voicemailNumbers";
            return this.SendAsync<_telephony.VoicemailNumbers>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/vxml
        public Task<System.String[]> GetV1TelephonyBillingAccountVxmlAsync(string billingAccount) {
            string uri = $"/v1/telephony/{billingAccount}/vxml";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/vxml/{serviceName}
        public Task<_telephony.Vxml> GetV1TelephonyBillingAccountVxmlServiceNameAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/vxml/{serviceName}";
            return this.SendAsync<_telephony.Vxml>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/vxml/{serviceName}/settings
        public Task<_telephony.VxmlProperties> GetV1TelephonyBillingAccountVxmlServiceNameSettingsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/vxml/{serviceName}/settings";
            return this.SendAsync<_telephony.VxmlProperties>("GET", uri, null, null, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/vxml/{serviceName}/settings
        public Task PutV1TelephonyBillingAccountVxmlServiceNameSettingsAsync(_telephony.VxmlProperties _body, string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/vxml/{serviceName}/settings";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/telephony/{billingAccount}/vxml/{serviceName}/settings/logs
        public Task<_telephony.TemporaryLogsLink> PostV1TelephonyBillingAccountVxmlServiceNameSettingsLogsAsync(string billingAccount, string serviceName) {
            string uri = $"/v1/telephony/{billingAccount}/vxml/{serviceName}/settings/logs";
            return this.SendAsync<_telephony.TemporaryLogsLink>("POST", uri, null, null, true);
        }
        
        // Path: /v1/veeam/veeamEnterprise
        public Task<System.String[]> GetV1VeeamVeeamEnterpriseAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/veeam/veeamEnterprise{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/veeam/veeamEnterprise/{serviceName}
        public Task<_veeam_veeamEnterprise.AccountWithIAM> GetV1VeeamVeeamEnterpriseServiceNameAsync(string serviceName) {
            string uri = $"/v1/veeam/veeamEnterprise/{serviceName}";
            return this.SendAsync<_veeam_veeamEnterprise.AccountWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/veeam/veeamEnterprise/{serviceName}/confirmTermination
        public Task<System.String> PostV1VeeamVeeamEnterpriseServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] System.String? commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum? futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum? reason) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("commentary", commentary);
            _body.Add("futureUse", futureUse);
            _body.Add("reason", reason);
            _body.Add("token", token);
            string uri = $"/v1/veeam/veeamEnterprise/{serviceName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/veeam/veeamEnterprise/{serviceName}/register
        public Task<_veeam_veeamEnterprise.Task[]> PostV1VeeamVeeamEnterpriseServiceNameRegisterAsync(string ip, string password, string serviceName, string username) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("ip", ip);
            _body.Add("password", password);
            _body.Add("username", username);
            string uri = $"/v1/veeam/veeamEnterprise/{serviceName}/register";
            return this.SendAsync<_veeam_veeamEnterprise.Task[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/veeam/veeamEnterprise/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1VeeamVeeamEnterpriseServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/veeam/veeamEnterprise/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/veeam/veeamEnterprise/{serviceName}/serviceInfos
        public Task PutV1VeeamVeeamEnterpriseServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/veeam/veeamEnterprise/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/veeam/veeamEnterprise/{serviceName}/task
        public Task<System.Int64[]> GetV1VeeamVeeamEnterpriseServiceNameTaskAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? name, [System.Runtime.InteropServices.OptionalAttribute()] _veeamEnterprise.TaskStateEnum? state) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("name", name);
            queryParametersTemp.Add("state", state);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/veeam/veeamEnterprise/{serviceName}/task{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/veeam/veeamEnterprise/{serviceName}/task/{taskId}
        public Task<_veeam_veeamEnterprise.Task> GetV1VeeamVeeamEnterpriseServiceNameTaskTaskIdAsync(string serviceName, long taskId) {
            string uri = $"/v1/veeam/veeamEnterprise/{serviceName}/task/{taskId}";
            return this.SendAsync<_veeam_veeamEnterprise.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/veeam/veeamEnterprise/{serviceName}/terminate
        public Task<System.String> PostV1VeeamVeeamEnterpriseServiceNameTerminateAsync(string serviceName) {
            string uri = $"/v1/veeam/veeamEnterprise/{serviceName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/veeam/veeamEnterprise/{serviceName}/update
        public Task<_veeam_veeamEnterprise.Task[]> PostV1VeeamVeeamEnterpriseServiceNameUpdateAsync(string ip, string password, string serviceName, string username) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("ip", ip);
            _body.Add("password", password);
            _body.Add("username", username);
            string uri = $"/v1/veeam/veeamEnterprise/{serviceName}/update";
            return this.SendAsync<_veeam_veeamEnterprise.Task[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/veeamCloudConnect
        public Task<System.String[]> GetV1VeeamCloudConnectAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/veeamCloudConnect{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/veeamCloudConnect/{serviceName}
        public Task<_veeamCloudConnect.AccountWithIAM> GetV1VeeamCloudConnectServiceNameAsync(string serviceName) {
            string uri = $"/v1/veeamCloudConnect/{serviceName}";
            return this.SendAsync<_veeamCloudConnect.AccountWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/veeamCloudConnect/{serviceName}/backupRepository
        public Task<System.String[]> GetV1VeeamCloudConnectServiceNameBackupRepositoryAsync(string serviceName) {
            string uri = $"/v1/veeamCloudConnect/{serviceName}/backupRepository";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/veeamCloudConnect/{serviceName}/backupRepository
        public Task<_veeamCloudConnect.Task[]> PostV1VeeamCloudConnectServiceNameBackupRepositoryAsync(string serviceName) {
            string uri = $"/v1/veeamCloudConnect/{serviceName}/backupRepository";
            return this.SendAsync<_veeamCloudConnect.Task[]>("POST", uri, null, null, true);
        }
        
        // Path: /v1/veeamCloudConnect/{serviceName}/backupRepository/{inventoryName}
        public Task<_veeamCloudConnect.Task[]> DeleteV1VeeamCloudConnectServiceNameBackupRepositoryInventoryNameAsync(string inventoryName, string serviceName) {
            string uri = $"/v1/veeamCloudConnect/{serviceName}/backupRepository/{inventoryName}";
            return this.SendAsync<_veeamCloudConnect.Task[]>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/veeamCloudConnect/{serviceName}/backupRepository/{inventoryName}
        public Task<_veeamCloudConnect.BackupRepository> GetV1VeeamCloudConnectServiceNameBackupRepositoryInventoryNameAsync(string inventoryName, string serviceName) {
            string uri = $"/v1/veeamCloudConnect/{serviceName}/backupRepository/{inventoryName}";
            return this.SendAsync<_veeamCloudConnect.BackupRepository>("GET", uri, null, null, true);
        }
        
        // Path: /v1/veeamCloudConnect/{serviceName}/backupRepository/{inventoryName}/upgradeQuota
        public Task<_veeamCloudConnect.Task[]> PostV1VeeamCloudConnectServiceNameBackupRepositoryInventoryNameUpgradeQuotaAsync(string inventoryName, long newQuota, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("newQuota", newQuota);
            string uri = $"/v1/veeamCloudConnect/{serviceName}/backupRepository/{inventoryName}/upgradeQuota";
            return this.SendAsync<_veeamCloudConnect.Task[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/veeamCloudConnect/{serviceName}/capabilities
        public Task<_veeamCloudConnect.offerCapabilities> GetV1VeeamCloudConnectServiceNameCapabilitiesAsync(string serviceName) {
            string uri = $"/v1/veeamCloudConnect/{serviceName}/capabilities";
            return this.SendAsync<_veeamCloudConnect.offerCapabilities>("GET", uri, null, null, true);
        }
        
        // Path: /v1/veeamCloudConnect/{serviceName}/orderableUpgrade
        public Task<_veeamCloudConnect.Offer[]> GetV1VeeamCloudConnectServiceNameOrderableUpgradeAsync(string serviceName) {
            string uri = $"/v1/veeamCloudConnect/{serviceName}/orderableUpgrade";
            return this.SendAsync<_veeamCloudConnect.Offer[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/veeamCloudConnect/{serviceName}/resetPassword
        public Task<_veeamCloudConnect.Task> PostV1VeeamCloudConnectServiceNameResetPasswordAsync(string serviceName) {
            string uri = $"/v1/veeamCloudConnect/{serviceName}/resetPassword";
            return this.SendAsync<_veeamCloudConnect.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/veeamCloudConnect/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1VeeamCloudConnectServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/veeamCloudConnect/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/veeamCloudConnect/{serviceName}/serviceInfos
        public Task PutV1VeeamCloudConnectServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/veeamCloudConnect/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/veeamCloudConnect/{serviceName}/task
        public Task<System.Int64[]> GetV1VeeamCloudConnectServiceNameTaskAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? name, [System.Runtime.InteropServices.OptionalAttribute()] _veeamCloudConnect.TaskStateEnum? state) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("name", name);
            queryParametersTemp.Add("state", state);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/veeamCloudConnect/{serviceName}/task{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/veeamCloudConnect/{serviceName}/task/{taskId}
        public Task<_veeamCloudConnect.Task> GetV1VeeamCloudConnectServiceNameTaskTaskIdAsync(string serviceName, long taskId) {
            string uri = $"/v1/veeamCloudConnect/{serviceName}/task/{taskId}";
            return this.SendAsync<_veeamCloudConnect.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vip
        public Task<System.String[]> GetV1VipAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/vip{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vip/{serviceName}
        public Task<_vip.SupportVipWithIAM> GetV1VipServiceNameAsync(string serviceName) {
            string uri = $"/v1/vip/{serviceName}";
            return this.SendAsync<_vip.SupportVipWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vip/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1VipServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/vip/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vip/{serviceName}/serviceInfos
        public Task PutV1VipServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/vip/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/vps
        public Task<System.String[]> GetV1VpsAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/vps{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}
        public Task<_vps.VPSWithIAM> GetV1VpsServiceNameAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}";
            return this.SendAsync<_vps.VPSWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}
        public Task PutV1VpsServiceNameAsync(_vps.VPS _body, string serviceName) {
            string uri = $"/v1/vps/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/vps/{serviceName}/abortSnapshot
        public Task PostV1VpsServiceNameAbortSnapshotAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/abortSnapshot";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/activeOptions
        public Task<_vps.VpsOptionEnum[]> GetV1VpsServiceNameActiveOptionsAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/activeOptions";
            return this.SendAsync<_vps.VpsOptionEnum[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/automatedBackup
        public Task<_vps.AutomatedBackup> GetV1VpsServiceNameAutomatedBackupAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/automatedBackup";
            return this.SendAsync<_vps.AutomatedBackup>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/automatedBackup/attachedBackup
        public Task<_vps_automatedBackup.Attached[]> GetV1VpsServiceNameAutomatedBackupAttachedBackupAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/automatedBackup/attachedBackup";
            return this.SendAsync<_vps_automatedBackup.Attached[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/automatedBackup/detachBackup
        public Task<_vps.Task> PostV1VpsServiceNameAutomatedBackupDetachBackupAsync(_vps_automatedBackup_detachBackup.post _body, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/automatedBackup/detachBackup";
            return this.SendAsync<_vps.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/vps/{serviceName}/automatedBackup/reschedule
        public Task<_vps.Task> PostV1VpsServiceNameAutomatedBackupRescheduleAsync(_vps_automatedBackup_reschedule.post _body, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/automatedBackup/reschedule";
            return this.SendAsync<_vps.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/vps/{serviceName}/automatedBackup/restore
        public Task<_vps.Task> PostV1VpsServiceNameAutomatedBackupRestoreAsync(_vps_automatedBackup_restore.post _body, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/automatedBackup/restore";
            return this.SendAsync<_vps.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/vps/{serviceName}/automatedBackup/restorePoints
        public Task<System.DateTime[]> GetV1VpsServiceNameAutomatedBackupRestorePointsAsync(string serviceName, _vps.RestoreStateEnum state) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("state", state);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/vps/{serviceName}/automatedBackup/restorePoints{queryParameters}";
            return this.SendAsync<System.DateTime[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/availableUpgrade
        public Task<_vps.Model[]> GetV1VpsServiceNameAvailableUpgradeAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/availableUpgrade";
            return this.SendAsync<_vps.Model[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/backupftp
        public Task<_vps.BackupFtp> GetV1VpsServiceNameBackupftpAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/backupftp";
            return this.SendAsync<_vps.BackupFtp>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/backupftp/access
        public Task<System.String[]> GetV1VpsServiceNameBackupftpAccessAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/backupftp/access";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/backupftp/access
        public Task<_dedicated_server.Task> PostV1VpsServiceNameBackupftpAccessAsync(_vps_backupftp_access.post _body, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/backupftp/access";
            return this.SendAsync<_dedicated_server.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/vps/{serviceName}/backupftp/access/{ipBlock}
        public Task<_dedicated_server.Task> DeleteV1VpsServiceNameBackupftpAccessIpBlockAsync(string ipBlock, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/backupftp/access/{ipBlock}";
            return this.SendAsync<_dedicated_server.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/backupftp/access/{ipBlock}
        public Task<_dedicated_server.BackupFtpAcl> GetV1VpsServiceNameBackupftpAccessIpBlockAsync(string ipBlock, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/backupftp/access/{ipBlock}";
            return this.SendAsync<_dedicated_server.BackupFtpAcl>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/backupftp/access/{ipBlock}
        public Task PutV1VpsServiceNameBackupftpAccessIpBlockAsync(_dedicated_server.BackupFtpAcl _body, string ipBlock, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/backupftp/access/{ipBlock}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/vps/{serviceName}/backupftp/authorizableBlocks
        public Task<System.String[]> GetV1VpsServiceNameBackupftpAuthorizableBlocksAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/backupftp/authorizableBlocks";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/backupftp/password
        public Task<_dedicated_server.Task> PostV1VpsServiceNameBackupftpPasswordAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/backupftp/password";
            return this.SendAsync<_dedicated_server.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/changeContact
        public Task<System.Int64[]> PostV1VpsServiceNameChangeContactAsync(_services.changeContact _body, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/vps/{serviceName}/confirmTermination
        public Task<System.String> PostV1VpsServiceNameConfirmTerminationAsync(_services.confirmTermination _body, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/vps/{serviceName}/createSnapshot
        public Task<_vps.Task> PostV1VpsServiceNameCreateSnapshotAsync(_vps_createSnapshot.post _body, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/createSnapshot";
            return this.SendAsync<_vps.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/vps/{serviceName}/datacenter
        public Task<_vps.Datacenter> GetV1VpsServiceNameDatacenterAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/datacenter";
            return this.SendAsync<_vps.Datacenter>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/datacenter
        public Task<System.String[]> GetV1VpsDatacenterAsync([System.Runtime.InteropServices.OptionalAttribute()] _nichandle.CountryEnum? country) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("country", country);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/vps/datacenter{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/vps/{serviceName}/disks
        public Task<System.Int64[]> GetV1VpsServiceNameDisksAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/disks";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/disks/{id}
        public Task<_vps.Disk> GetV1VpsServiceNameDisksIdAsync(long id, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/disks/{id}";
            return this.SendAsync<_vps.Disk>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/disks/{id}
        public Task PutV1VpsServiceNameDisksIdAsync(_vps.Disk _body, long id, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/disks/{id}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/vps/{serviceName}/disks/{id}/monitoring
        public Task<_complexType_UnitAndValues_vps.VpsTimestampValue> GetV1VpsServiceNameDisksIdMonitoringAsync(long id, _vps.VpsMonitoringPeriodEnum period, string serviceName, _vps_disk.StatisticTypeEnum type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("period", period);
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/vps/{serviceName}/disks/{id}/monitoring{queryParameters}";
            return this.SendAsync<_complexType_UnitAndValues_vps.VpsTimestampValue>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/disks/{id}/use
        public Task<_complexType.UnitAndValue_double> GetV1VpsServiceNameDisksIdUseAsync(long id, string serviceName, _vps_disk.StatisticTypeEnum type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/vps/{serviceName}/disks/{id}/use{queryParameters}";
            return this.SendAsync<_complexType.UnitAndValue_double>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/distribution
        public Task<_vps.Template> GetV1VpsServiceNameDistributionAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/distribution";
            return this.SendAsync<_vps.Template>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/distribution/software
        public Task<System.Int64[]> GetV1VpsServiceNameDistributionSoftwareAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/distribution/software";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/distribution/software/{softwareId}
        public Task<_vps.Software> GetV1VpsServiceNameDistributionSoftwareSoftwareIdAsync(string serviceName, long softwareId) {
            string uri = $"/v1/vps/{serviceName}/distribution/software/{softwareId}";
            return this.SendAsync<_vps.Software>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/getConsoleUrl
        public Task<System.String> PostV1VpsServiceNameGetConsoleUrlAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/getConsoleUrl";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/images/available
        public Task<System.String[]> GetV1VpsServiceNameImagesAvailableAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/images/available";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/images/available/{id}
        public Task<_vps.Image> GetV1VpsServiceNameImagesAvailableIdAsync(string id, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/images/available/{id}";
            return this.SendAsync<_vps.Image>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/images/current
        public Task<_vps.Image> GetV1VpsServiceNameImagesCurrentAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/images/current";
            return this.SendAsync<_vps.Image>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/ipCountryAvailable
        public Task<_vps_ip.GeolocationEnum[]> GetV1VpsServiceNameIpCountryAvailableAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/ipCountryAvailable";
            return this.SendAsync<_vps_ip.GeolocationEnum[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/ips
        public Task<System.String[]> GetV1VpsServiceNameIpsAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/ips";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/ips/{ipAddress}
        public Task DeleteV1VpsServiceNameIpsIpAddressAsync(string ipAddress, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/ips/{ipAddress}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/ips/{ipAddress}
        public Task<_vps.Ip> GetV1VpsServiceNameIpsIpAddressAsync(string ipAddress, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/ips/{ipAddress}";
            return this.SendAsync<_vps.Ip>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/ips/{ipAddress}
        public Task PutV1VpsServiceNameIpsIpAddressAsync(_vps.Ip _body, string ipAddress, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/ips/{ipAddress}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/vps/{serviceName}/migration2016
        public Task<_vps_migration.VPS2016to2020> GetV1VpsServiceNameMigration2016Async(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/migration2016";
            return this.SendAsync<_vps_migration.VPS2016to2020>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/migration2016
        public Task<_vps.Task> PostV1VpsServiceNameMigration2016Async(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/migration2016";
            return this.SendAsync<_vps.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/migration2018
        public Task<_vps_migration.VPS2018to2020> GetV1VpsServiceNameMigration2018Async(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/migration2018";
            return this.SendAsync<_vps_migration.VPS2018to2020>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/migration2018
        public Task<_vps.Task> PostV1VpsServiceNameMigration2018Async(_vps_migration2018.post _body, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/migration2018";
            return this.SendAsync<_vps.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/vps/{serviceName}/models
        public Task<_vps.Model[]> GetV1VpsServiceNameModelsAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/models";
            return this.SendAsync<_vps.Model[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/monitoring
        public Task<_complexType_UnitAndValues_vps.VpsTimestampValue> GetV1VpsServiceNameMonitoringAsync(_vps.VpsMonitoringPeriodEnum period, string serviceName, _vps.VpsStatisticTypeEnum type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("period", period);
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/vps/{serviceName}/monitoring{queryParameters}";
            return this.SendAsync<_complexType_UnitAndValues_vps.VpsTimestampValue>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/openConsoleAccess
        public Task<_vps.Vnc> PostV1VpsServiceNameOpenConsoleAccessAsync(_vps_openConsoleAccess.post _body, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/openConsoleAccess";
            return this.SendAsync<_vps.Vnc>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/vps/{serviceName}/option
        public Task<_vps.VpsOptionEnum[]> GetV1VpsServiceNameOptionAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/option";
            return this.SendAsync<_vps.VpsOptionEnum[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/option/{option}
        public Task DeleteV1VpsServiceNameOptionOptionAsync(_vps.VpsOptionEnum option, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? deleteNow) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("deleteNow", deleteNow);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/vps/{serviceName}/option/{option}{queryParameters}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/option/{option}
        public Task<_vps.Option> GetV1VpsServiceNameOptionOptionAsync(_vps.VpsOptionEnum option, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/option/{option}";
            return this.SendAsync<_vps.Option>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/order/rule/datacenter
        public Task<_vps_order_rule.Datacenters> GetV1VpsOrderRuleDatacenterAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary, string planCode, [System.Runtime.InteropServices.OptionalAttribute()] System.String? os) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("os", os);
            queryParametersTemp.Add("ovhSubsidiary", ovhSubsidiary);
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/vps/order/rule/datacenter{queryParameters}";
            return this.SendAsync<_vps_order_rule.Datacenters>("GET", uri, null, null, false);
        }
        
        // Path: /v1/vps/order/rule/osChoices
        public Task<_vps_order_rule.OSChoices> GetV1VpsOrderRuleOsChoicesAsync(string datacenter, string os) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("datacenter", datacenter);
            queryParametersTemp.Add("os", os);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/vps/order/rule/osChoices{queryParameters}";
            return this.SendAsync<_vps_order_rule.OSChoices>("GET", uri, null, null, false);
        }
        
        // Path: /v1/vps/{serviceName}/reboot
        public Task<_vps.Task> PostV1VpsServiceNameRebootAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/reboot";
            return this.SendAsync<_vps.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/rebuild
        public Task<_vps.Task> PostV1VpsServiceNameRebuildAsync(_vps_rebuild.post _body, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/rebuild";
            return this.SendAsync<_vps.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/vps/{serviceName}/reinstall
        public Task<_vps.Task> PostV1VpsServiceNameReinstallAsync(_vps_reinstall.post _body, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/reinstall";
            return this.SendAsync<_vps.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/vps/{serviceName}/secondaryDnsDomains
        public Task<System.String[]> GetV1VpsServiceNameSecondaryDnsDomainsAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/secondaryDnsDomains";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/secondaryDnsDomains
        public Task PostV1VpsServiceNameSecondaryDnsDomainsAsync(_vps_secondaryDnsDomains.post _body, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/secondaryDnsDomains";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/vps/{serviceName}/secondaryDnsDomains/{domain}
        public Task DeleteV1VpsServiceNameSecondaryDnsDomainsDomainAsync(string domain, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/secondaryDnsDomains/{domain}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/secondaryDnsDomains/{domain}
        public Task<_secondaryDns.SecondaryDNS> GetV1VpsServiceNameSecondaryDnsDomainsDomainAsync(string domain, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/secondaryDnsDomains/{domain}";
            return this.SendAsync<_secondaryDns.SecondaryDNS>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/secondaryDnsDomains/{domain}
        public Task PutV1VpsServiceNameSecondaryDnsDomainsDomainAsync(_secondaryDns.SecondaryDNS _body, string domain, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/secondaryDnsDomains/{domain}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/vps/{serviceName}/secondaryDnsDomains/{domain}/dnsServer
        public Task<_secondaryDns.SecondaryDNSNameServer> GetV1VpsServiceNameSecondaryDnsDomainsDomainDnsServerAsync(string domain, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/secondaryDnsDomains/{domain}/dnsServer";
            return this.SendAsync<_secondaryDns.SecondaryDNSNameServer>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/secondaryDnsNameServerAvailable
        public Task<_secondaryDns.SecondaryDNSNameServer> GetV1VpsServiceNameSecondaryDnsNameServerAvailableAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/secondaryDnsNameServerAvailable";
            return this.SendAsync<_secondaryDns.SecondaryDNSNameServer>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1VpsServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/serviceInfos
        public Task PutV1VpsServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/vps/{serviceName}/setPassword
        public Task<_vps.Task> PostV1VpsServiceNameSetPasswordAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/setPassword";
            return this.SendAsync<_vps.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/snapshot
        public Task<_vps.Task> DeleteV1VpsServiceNameSnapshotAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/snapshot";
            return this.SendAsync<_vps.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/snapshot
        public Task<_vps.Snapshot> GetV1VpsServiceNameSnapshotAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/snapshot";
            return this.SendAsync<_vps.Snapshot>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/snapshot
        public Task PutV1VpsServiceNameSnapshotAsync(_vps.Snapshot _body, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/snapshot";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/vps/{serviceName}/snapshot/download
        public Task<_vps.DownloadSnapshotURL> GetV1VpsServiceNameSnapshotDownloadAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/snapshot/download";
            return this.SendAsync<_vps.DownloadSnapshotURL>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/snapshot/revert
        public Task<_vps.Task> PostV1VpsServiceNameSnapshotRevertAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/snapshot/revert";
            return this.SendAsync<_vps.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/start
        public Task<_vps.Task> PostV1VpsServiceNameStartAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/start";
            return this.SendAsync<_vps.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/statistics
        public Task<_vps.VpsMonitoringStatistics> GetV1VpsServiceNameStatisticsAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/statistics";
            return this.SendAsync<_vps.VpsMonitoringStatistics>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/status
        public Task<_vps_ip.ServiceStatus> GetV1VpsServiceNameStatusAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/status";
            return this.SendAsync<_vps_ip.ServiceStatus>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/stop
        public Task<_vps.Task> PostV1VpsServiceNameStopAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/stop";
            return this.SendAsync<_vps.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/tasks
        public Task<System.Int64[]> GetV1VpsServiceNameTasksAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _vps.TaskStateEnum? state, [System.Runtime.InteropServices.OptionalAttribute()] _vps.TaskTypeEnum? type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("state", state);
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/vps/{serviceName}/tasks{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/tasks/{id}
        public Task<_vps.Task> GetV1VpsServiceNameTasksIdAsync(long id, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/tasks/{id}";
            return this.SendAsync<_vps.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/templates
        public Task<System.Int64[]> GetV1VpsServiceNameTemplatesAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/templates";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/templates/{id}
        public Task<_vps.Template> GetV1VpsServiceNameTemplatesIdAsync(long id, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/templates/{id}";
            return this.SendAsync<_vps.Template>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/templates/{id}/software
        public Task<System.Int64[]> GetV1VpsServiceNameTemplatesIdSoftwareAsync(long id, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/templates/{id}/software";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/templates/{id}/software/{softwareId}
        public Task<_vps.Software> GetV1VpsServiceNameTemplatesIdSoftwareSoftwareIdAsync(long id, string serviceName, long softwareId) {
            string uri = $"/v1/vps/{serviceName}/templates/{id}/software/{softwareId}";
            return this.SendAsync<_vps.Software>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/terminate
        public Task<System.String> PostV1VpsServiceNameTerminateAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/use
        public Task<_complexType.UnitAndValue_double> GetV1VpsServiceNameUseAsync(string serviceName, _vps.VpsStatisticTypeEnum type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/vps/{serviceName}/use{queryParameters}";
            return this.SendAsync<_complexType.UnitAndValue_double>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/veeam
        public Task<_vps.Veeam> GetV1VpsServiceNameVeeamAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/veeam";
            return this.SendAsync<_vps.Veeam>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/veeam/restorePoints
        public Task<System.Int64[]> GetV1VpsServiceNameVeeamRestorePointsAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationTime) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("creationTime", creationTime);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/vps/{serviceName}/veeam/restorePoints{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/veeam/restorePoints/{id}
        public Task<_vps_veeam.RestorePoint> GetV1VpsServiceNameVeeamRestorePointsIdAsync(long id, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/veeam/restorePoints/{id}";
            return this.SendAsync<_vps_veeam.RestorePoint>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/veeam/restorePoints/{id}/restore
        public Task<_vps.Task> PostV1VpsServiceNameVeeamRestorePointsIdRestoreAsync(_vps_veeam_restorePoints_restore.post _body, long id, string serviceName) {
            string uri = $"/v1/vps/{serviceName}/veeam/restorePoints/{id}/restore";
            return this.SendAsync<_vps.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/vps/{serviceName}/veeam/restoredBackup
        public Task<_vps.Task> DeleteV1VpsServiceNameVeeamRestoredBackupAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/veeam/restoredBackup";
            return this.SendAsync<_vps.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/vps/{serviceName}/veeam/restoredBackup
        public Task<_vps_veeam.RestoredBackup> GetV1VpsServiceNameVeeamRestoredBackupAsync(string serviceName) {
            string uri = $"/v1/vps/{serviceName}/veeam/restoredBackup";
            return this.SendAsync<_vps_veeam.RestoredBackup>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack
        public Task<System.String[]> GetV1VrackAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/vrack{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}
        public Task<_vrack.vrackWithIAM> GetV1VrackServiceNameAsync(string serviceName) {
            string uri = $"/v1/vrack/{serviceName}";
            return this.SendAsync<_vrack.vrackWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}
        public Task PutV1VrackServiceNameAsync(_vrack.vrack _body, string serviceName) {
            string uri = $"/v1/vrack/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/vrack/{serviceName}/allowedServices
        public Task<_vrack.AllowedServices> GetV1VrackServiceNameAllowedServicesAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _vrack.AllowedServiceEnum? serviceFamily) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("serviceFamily", serviceFamily);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/vrack/{serviceName}/allowedServices{queryParameters}";
            return this.SendAsync<_vrack.AllowedServices>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/cloudProject
        public Task<System.String[]> GetV1VrackServiceNameCloudProjectAsync(string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/cloudProject";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/cloudProject
        public Task<_vrack.Task> PostV1VrackServiceNameCloudProjectAsync(string project, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("project", project);
            string uri = $"/v1/vrack/{serviceName}/cloudProject";
            return this.SendAsync<_vrack.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/vrack/{serviceName}/cloudProject/{project}
        public Task<_vrack.Task> DeleteV1VrackServiceNameCloudProjectProjectAsync(string project, string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/cloudProject/{project}";
            return this.SendAsync<_vrack.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/cloudProject/{project}
        public Task<_vrack.cloudProject> GetV1VrackServiceNameCloudProjectProjectAsync(string project, string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/cloudProject/{project}";
            return this.SendAsync<_vrack.cloudProject>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/confirmTermination
        public Task<System.String> PostV1VrackServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] System.String? commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum? futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum? reason) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("commentary", commentary);
            _body.Add("futureUse", futureUse);
            _body.Add("reason", reason);
            _body.Add("token", token);
            string uri = $"/v1/vrack/{serviceName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/vrack/{serviceName}/dedicatedCloud
        public Task<System.String[]> GetV1VrackServiceNameDedicatedCloudAsync(string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/dedicatedCloud";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/dedicatedCloud
        public Task<_vrack.Task> PostV1VrackServiceNameDedicatedCloudAsync(string dedicatedCloud, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("dedicatedCloud", dedicatedCloud);
            string uri = $"/v1/vrack/{serviceName}/dedicatedCloud";
            return this.SendAsync<_vrack.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/vrack/{serviceName}/dedicatedCloud/{dedicatedCloud}
        public Task<_vrack.Task> DeleteV1VrackServiceNameDedicatedCloudDedicatedCloudAsync(string dedicatedCloud, string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/dedicatedCloud/{dedicatedCloud}";
            return this.SendAsync<_vrack.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/dedicatedCloud/{dedicatedCloud}
        public Task<_vrack.dedicatedCloud> GetV1VrackServiceNameDedicatedCloudDedicatedCloudAsync(string dedicatedCloud, string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/dedicatedCloud/{dedicatedCloud}";
            return this.SendAsync<_vrack.dedicatedCloud>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/dedicatedCloudDatacenter
        public Task<System.String[]> GetV1VrackServiceNameDedicatedCloudDatacenterAsync(string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/dedicatedCloudDatacenter";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/dedicatedCloudDatacenter/{datacenter}
        public Task<_vrack.pccDatacenter> GetV1VrackServiceNameDedicatedCloudDatacenterDatacenterAsync(string datacenter, string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/dedicatedCloudDatacenter/{datacenter}";
            return this.SendAsync<_vrack.pccDatacenter>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/dedicatedCloudDatacenter/{datacenter}/allowedVrack
        public Task<System.String[]> GetV1VrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrackAsync(string datacenter, string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/dedicatedCloudDatacenter/{datacenter}/allowedVrack";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/dedicatedCloudDatacenter/{datacenter}/move
        public Task<_vrack.Task> PostV1VrackServiceNameDedicatedCloudDatacenterDatacenterMoveAsync(string datacenter, string serviceName, string targetServiceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("targetServiceName", targetServiceName);
            string uri = $"/v1/vrack/{serviceName}/dedicatedCloudDatacenter/{datacenter}/move";
            return this.SendAsync<_vrack.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/vrack/{serviceName}/dedicatedConnect
        public Task<System.String[]> GetV1VrackServiceNameDedicatedConnectAsync(string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/dedicatedConnect";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/dedicatedConnect/{name}
        public Task<_vrack.dedicatedConnect> GetV1VrackServiceNameDedicatedConnectNameAsync(string name, string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/dedicatedConnect/{name}";
            return this.SendAsync<_vrack.dedicatedConnect>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/dedicatedConnect/{name}
        public Task PutV1VrackServiceNameDedicatedConnectNameAsync(_vrack.dedicatedConnect _body, string name, string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/dedicatedConnect/{name}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/vrack/{serviceName}/dedicatedServer
        public Task<System.String[]> GetV1VrackServiceNameDedicatedServerAsync(string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/dedicatedServer";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/dedicatedServer
        public Task<_vrack.Task> PostV1VrackServiceNameDedicatedServerAsync(string dedicatedServer, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("dedicatedServer", dedicatedServer);
            string uri = $"/v1/vrack/{serviceName}/dedicatedServer";
            return this.SendAsync<_vrack.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/vrack/{serviceName}/dedicatedServer/{dedicatedServer}
        public Task<_vrack.Task> DeleteV1VrackServiceNameDedicatedServerDedicatedServerAsync(string dedicatedServer, string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/dedicatedServer/{dedicatedServer}";
            return this.SendAsync<_vrack.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/dedicatedServer/{dedicatedServer}
        public Task<_vrack.dedicatedServer> GetV1VrackServiceNameDedicatedServerDedicatedServerAsync(string dedicatedServer, string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/dedicatedServer/{dedicatedServer}";
            return this.SendAsync<_vrack.dedicatedServer>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/dedicatedServer/{dedicatedServer}/mrtg
        public Task<_dedicated_server.MrtgTimestampValue[]> GetV1VrackServiceNameDedicatedServerDedicatedServerMrtgAsync(string dedicatedServer, _dedicated_server.MrtgPeriodEnum period, string serviceName, _dedicated_server.MrtgTypeEnum type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("period", period);
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/vrack/{serviceName}/dedicatedServer/{dedicatedServer}/mrtg{queryParameters}";
            return this.SendAsync<_dedicated_server.MrtgTimestampValue[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/dedicatedServerInterface
        public Task<System.String[]> GetV1VrackServiceNameDedicatedServerInterfaceAsync(string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/dedicatedServerInterface";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/dedicatedServerInterface
        public Task<_vrack.Task> PostV1VrackServiceNameDedicatedServerInterfaceAsync(string dedicatedServerInterface, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("dedicatedServerInterface", dedicatedServerInterface);
            string uri = $"/v1/vrack/{serviceName}/dedicatedServerInterface";
            return this.SendAsync<_vrack.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/vrack/{serviceName}/dedicatedServerInterface/{dedicatedServerInterface}
        public Task<_vrack.Task> DeleteV1VrackServiceNameDedicatedServerInterfaceDedicatedServerInterfaceAsync(string dedicatedServerInterface, string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/dedicatedServerInterface/{dedicatedServerInterface}";
            return this.SendAsync<_vrack.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/dedicatedServerInterface/{dedicatedServerInterface}
        public Task<_vrack.dedicatedServerInterface> GetV1VrackServiceNameDedicatedServerInterfaceDedicatedServerInterfaceAsync(string dedicatedServerInterface, string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/dedicatedServerInterface/{dedicatedServerInterface}";
            return this.SendAsync<_vrack.dedicatedServerInterface>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/dedicatedServerInterfaceDetails
        public Task<_vrack.AllowedDedicatedServerInterfaces[]> GetV1VrackServiceNameDedicatedServerInterfaceDetailsAsync(string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/dedicatedServerInterfaceDetails";
            return this.SendAsync<_vrack.AllowedDedicatedServerInterfaces[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/eligibleServices
        public Task<_vrack.EligibleServicesResponse> GetV1VrackServiceNameEligibleServicesAsync(string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/eligibleServices";
            return this.SendAsync<_vrack.EligibleServicesResponse>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/ip
        public Task<System.String[]> GetV1VrackServiceNameIpAsync(string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/ip";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/ip
        public Task<_vrack.Task> PostV1VrackServiceNameIpAsync(string block, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("block", block);
            string uri = $"/v1/vrack/{serviceName}/ip";
            return this.SendAsync<_vrack.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/vrack/{serviceName}/ip/{ip}
        public Task<_vrack.Task> DeleteV1VrackServiceNameIpIpAsync(string ip, string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/ip/{ip}";
            return this.SendAsync<_vrack.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/ip/{ip}
        public Task<_vrack.ip> GetV1VrackServiceNameIpIpAsync(string ip, string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/ip/{ip}";
            return this.SendAsync<_vrack.ip>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/ip/{ip}/announceInZone
        public Task<_vrack.Task> PostV1VrackServiceNameIpIpAnnounceInZoneAsync(string ip, string serviceName, _vrack.VrackZoneEnum zone) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("zone", zone);
            string uri = $"/v1/vrack/{serviceName}/ip/{ip}/announceInZone";
            return this.SendAsync<_vrack.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/vrack/{serviceName}/ip/{ip}/availableZone
        public Task<_vrack.VrackZoneEnum[]> GetV1VrackServiceNameIpIpAvailableZoneAsync(string ip, string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/ip/{ip}/availableZone";
            return this.SendAsync<_vrack.VrackZoneEnum[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/ipLoadbalancing
        public Task<System.String[]> GetV1VrackServiceNameIpLoadbalancingAsync(string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/ipLoadbalancing";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/ipLoadbalancing
        public Task<_vrack.Task> PostV1VrackServiceNameIpLoadbalancingAsync(string ipLoadbalancing, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("ipLoadbalancing", ipLoadbalancing);
            string uri = $"/v1/vrack/{serviceName}/ipLoadbalancing";
            return this.SendAsync<_vrack.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/vrack/{serviceName}/ipLoadbalancing/{ipLoadbalancing}
        public Task<_vrack.Task> DeleteV1VrackServiceNameIpLoadbalancingIpLoadbalancingAsync(string ipLoadbalancing, string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/ipLoadbalancing/{ipLoadbalancing}";
            return this.SendAsync<_vrack.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/ipLoadbalancing/{ipLoadbalancing}
        public Task<_vrack.iplb> GetV1VrackServiceNameIpLoadbalancingIpLoadbalancingAsync(string ipLoadbalancing, string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/ipLoadbalancing/{ipLoadbalancing}";
            return this.SendAsync<_vrack.iplb>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/ipv6
        public Task<System.String[]> GetV1VrackServiceNameIpv6Async(string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/ipv6";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/ipv6
        public Task<_vrack.Task> PostV1VrackServiceNameIpv6Async(string block, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("block", block);
            string uri = $"/v1/vrack/{serviceName}/ipv6";
            return this.SendAsync<_vrack.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/vrack/{serviceName}/ipv6/{ipv6}
        public Task<_vrack.Task> DeleteV1VrackServiceNameIpv6Ipv6Async(string ipv6, string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/ipv6/{ipv6}";
            return this.SendAsync<_vrack.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/ipv6/{ipv6}
        public Task<_vrack.ipv6> GetV1VrackServiceNameIpv6Ipv6Async(string ipv6, string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/ipv6/{ipv6}";
            return this.SendAsync<_vrack.ipv6>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/ipv6/{ipv6}/bridgedSubrange
        public Task<System.String[]> GetV1VrackServiceNameIpv6Ipv6BridgedSubrangeAsync(string ipv6, string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/ipv6/{ipv6}/bridgedSubrange";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/ipv6/{ipv6}/bridgedSubrange/{bridgedSubrange}
        public Task<_vrack.bridgedSubrange> GetV1VrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrangeAsync(string bridgedSubrange, string ipv6, string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/ipv6/{ipv6}/bridgedSubrange/{bridgedSubrange}";
            return this.SendAsync<_vrack.bridgedSubrange>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/ipv6/{ipv6}/bridgedSubrange/{bridgedSubrange}
        public Task<_vrack.Task> PutV1VrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrangeAsync(_vrack.bridgedSubrange _body, string bridgedSubrange, string ipv6, string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/ipv6/{ipv6}/bridgedSubrange/{bridgedSubrange}";
            return this.SendAsync<_vrack.Task>("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/vrack/{serviceName}/ipv6/{ipv6}/routedSubrange
        public Task<System.String[]> GetV1VrackServiceNameIpv6Ipv6RoutedSubrangeAsync(string ipv6, string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/ipv6/{ipv6}/routedSubrange";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/ipv6/{ipv6}/routedSubrange
        public Task<_vrack.Task> PostV1VrackServiceNameIpv6Ipv6RoutedSubrangeAsync(string ipv6, string nexthop, string routedSubrange, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("nexthop", nexthop);
            _body.Add("routedSubrange", routedSubrange);
            string uri = $"/v1/vrack/{serviceName}/ipv6/{ipv6}/routedSubrange";
            return this.SendAsync<_vrack.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/vrack/{serviceName}/ipv6/{ipv6}/routedSubrange/{routedSubrange}
        public Task<_vrack.Task> DeleteV1VrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrangeAsync(string ipv6, string routedSubrange, string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/ipv6/{ipv6}/routedSubrange/{routedSubrange}";
            return this.SendAsync<_vrack.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/ipv6/{ipv6}/routedSubrange/{routedSubrange}
        public Task<_vrack.routedSubrange> GetV1VrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrangeAsync(string ipv6, string routedSubrange, string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/ipv6/{ipv6}/routedSubrange/{routedSubrange}";
            return this.SendAsync<_vrack.routedSubrange>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/legacyVrack
        public Task<System.String[]> GetV1VrackServiceNameLegacyVrackAsync(string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/legacyVrack";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/legacyVrack
        public Task<_vrack.Task> PostV1VrackServiceNameLegacyVrackAsync(string legacyVrack, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("legacyVrack", legacyVrack);
            string uri = $"/v1/vrack/{serviceName}/legacyVrack";
            return this.SendAsync<_vrack.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/vrack/{serviceName}/legacyVrack/{legacyVrack}
        public Task<_vrack.Task> DeleteV1VrackServiceNameLegacyVrackLegacyVrackAsync(string legacyVrack, string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/legacyVrack/{legacyVrack}";
            return this.SendAsync<_vrack.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/legacyVrack/{legacyVrack}
        public Task<_vrack.legacyVrack> GetV1VrackServiceNameLegacyVrackLegacyVrackAsync(string legacyVrack, string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/legacyVrack/{legacyVrack}";
            return this.SendAsync<_vrack.legacyVrack>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/ovhCloudConnect
        public Task<System.Guid[]> GetV1VrackServiceNameOvhCloudConnectAsync(string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/ovhCloudConnect";
            return this.SendAsync<System.Guid[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/ovhCloudConnect
        public Task<_vrack.Task> PostV1VrackServiceNameOvhCloudConnectAsync(System.Guid ovhCloudConnect, string serviceName) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("ovhCloudConnect", ovhCloudConnect);
            string uri = $"/v1/vrack/{serviceName}/ovhCloudConnect";
            return this.SendAsync<_vrack.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/vrack/{serviceName}/ovhCloudConnect/{ovhCloudConnect}
        public Task<_vrack.Task> DeleteV1VrackServiceNameOvhCloudConnectOvhCloudConnectAsync(System.Guid ovhCloudConnect, string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/ovhCloudConnect/{ovhCloudConnect}";
            return this.SendAsync<_vrack.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/ovhCloudConnect/{ovhCloudConnect}
        public Task<_vrack.ovhCloudConnect> GetV1VrackServiceNameOvhCloudConnectOvhCloudConnectAsync(System.Guid ovhCloudConnect, string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/ovhCloudConnect/{ovhCloudConnect}";
            return this.SendAsync<_vrack.ovhCloudConnect>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/serviceInfos
        public Task<_services.NonExpiringService> GetV1VrackServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/serviceInfos";
            return this.SendAsync<_services.NonExpiringService>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/task
        public Task<System.Int64[]> GetV1VrackServiceNameTaskAsync(string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/task";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/task/{taskId}
        public Task<_vrack.Task> GetV1VrackServiceNameTaskTaskIdAsync(string serviceName, long taskId) {
            string uri = $"/v1/vrack/{serviceName}/task/{taskId}";
            return this.SendAsync<_vrack.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/terminate
        public Task<System.String> PostV1VrackServiceNameTerminateAsync(string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/vrackServices
        public Task<System.String[]> GetV1VrackServiceNameVrackServicesAsync(string serviceName) {
            string uri = $"/v1/vrack/{serviceName}/vrackServices";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/vrackServices
        public Task<_vrack.Task> PostV1VrackServiceNameVrackServicesAsync(string serviceName, string vrackServices) {
            Dictionary<string, object> _body = new System.Collections.Generic.Dictionary<string, object>();
            _body.Add("vrackServices", vrackServices);
            string uri = $"/v1/vrack/{serviceName}/vrackServices";
            return this.SendAsync<_vrack.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/vrack/{serviceName}/vrackServices/{vrackServices}
        public Task<_vrack.Task> DeleteV1VrackServiceNameVrackServicesVrackServicesAsync(string serviceName, string vrackServices) {
            string uri = $"/v1/vrack/{serviceName}/vrackServices/{vrackServices}";
            return this.SendAsync<_vrack.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/vrack/{serviceName}/vrackServices/{vrackServices}
        public Task<_vrack.vrackServices> GetV1VrackServiceNameVrackServicesVrackServicesAsync(string serviceName, string vrackServices) {
            string uri = $"/v1/vrack/{serviceName}/vrackServices/{vrackServices}";
            return this.SendAsync<_vrack.vrackServices>("GET", uri, null, null, true);
        }
        
        // Path: /v1/webPaaS/capabilities
        public Task<_webPaaS.Capabilities> GetV1WebPaaSCapabilitiesAsync(_webPaaS.OfferEnum planCode) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("planCode", planCode);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/webPaaS/capabilities{queryParameters}";
            return this.SendAsync<_webPaaS.Capabilities>("GET", uri, null, null, true);
        }
        
        // Path: /v1/webPaaS/subscription
        public Task<System.String[]> GetV1WebPaaSSubscriptionAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/webPaaS/subscription{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/webPaaS/subscription/{serviceName}
        public Task<_webPaaS.SubscriptionWithIAM> GetV1WebPaaSSubscriptionServiceNameAsync(string serviceName) {
            string uri = $"/v1/webPaaS/subscription/{serviceName}";
            return this.SendAsync<_webPaaS.SubscriptionWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/webPaaS/subscription/{serviceName}/confirmTermination
        public Task<System.String> PostV1WebPaaSSubscriptionServiceNameConfirmTerminationAsync(_services.confirmTermination _body, string serviceName) {
            string uri = $"/v1/webPaaS/subscription/{serviceName}/confirmTermination";
            return this.SendAsync<string>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/webPaaS/subscription/{serviceName}/customer
        public Task<_webPaaS_subscription.Customer[]> GetV1WebPaaSSubscriptionServiceNameCustomerAsync(string serviceName) {
            string uri = $"/v1/webPaaS/subscription/{serviceName}/customer";
            return this.SendAsync<_webPaaS_subscription.Customer[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/webPaaS/subscription/{serviceName}/customer
        public Task<_webPaaS_subscription.Customer> PostV1WebPaaSSubscriptionServiceNameCustomerAsync(_webPaaS_subscription_project.AddCustomer _body, string serviceName) {
            string uri = $"/v1/webPaaS/subscription/{serviceName}/customer";
            return this.SendAsync<_webPaaS_subscription.Customer>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/webPaaS/subscription/{serviceName}/customer/{customerId}
        public Task<_webPaaS_subscription.Customer> DeleteV1WebPaaSSubscriptionServiceNameCustomerCustomerIdAsync(System.Guid customerId, string serviceName) {
            string uri = $"/v1/webPaaS/subscription/{serviceName}/customer/{customerId}";
            return this.SendAsync<_webPaaS_subscription.Customer>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/webPaaS/subscription/{serviceName}/customer/{customerId}
        public Task<_webPaaS_subscription.Customer> GetV1WebPaaSSubscriptionServiceNameCustomerCustomerIdAsync(System.Guid customerId, string serviceName) {
            string uri = $"/v1/webPaaS/subscription/{serviceName}/customer/{customerId}";
            return this.SendAsync<_webPaaS_subscription.Customer>("GET", uri, null, null, true);
        }
        
        // Path: /v1/webPaaS/subscription/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1WebPaaSSubscriptionServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/webPaaS/subscription/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/webPaaS/subscription/{serviceName}/serviceInfos
        public Task PutV1WebPaaSSubscriptionServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/webPaaS/subscription/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/webPaaS/subscription/{serviceName}/terminate
        public Task<System.String> PostV1WebPaaSSubscriptionServiceNameTerminateAsync(string serviceName) {
            string uri = $"/v1/webPaaS/subscription/{serviceName}/terminate";
            return this.SendAsync<string>("POST", uri, null, null, true);
        }
        
        // Path: /v1/xdsl
        public Task<System.String[]> GetV1XdslAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/xdsl{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}
        public Task<_xdsl.AccessWithIAM> GetV1XdslServiceNameAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}";
            return this.SendAsync<_xdsl.AccessWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}
        public Task PutV1XdslServiceNameAsync(_xdsl.Access _body, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/addressMove/extraIpRange
        public Task<_xdsl.ExtraIpRangeMove> GetV1XdslServiceNameAddressMoveExtraIpRangeAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/addressMove/extraIpRange";
            return this.SendAsync<_xdsl.ExtraIpRangeMove>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/addressMove/extraIpRangeMove
        public Task<_xdsl.Task> PostV1XdslServiceNameAddressMoveExtraIpRangeMoveAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/addressMove/extraIpRangeMove";
            return this.SendAsync<_xdsl.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/antiSpams
        public Task<System.String[]> GetV1XdslServiceNameAntiSpamsAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/antiSpams";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/antiSpams/{ip}
        public Task<_xdsl.AntiSpam> GetV1XdslServiceNameAntiSpamsIpAsync(string ip, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/antiSpams/{ip}";
            return this.SendAsync<_xdsl.AntiSpam>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/antiSpams/{ip}/evidences
        public Task<_xdsl_antiSpam.EvidencesInfo> GetV1XdslServiceNameAntiSpamsIpEvidencesAsync(string ip, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/antiSpams/{ip}/evidences";
            return this.SendAsync<_xdsl_antiSpam.EvidencesInfo>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/applyTemplateToModem
        public Task<_xdsl.Task> PostV1XdslServiceNameApplyTemplateToModemAsync(_xdsl_applyTemplateToModem.post _body, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/applyTemplateToModem";
            return this.SendAsync<_xdsl.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/canCancelResiliation
        public Task<System.Boolean> GetV1XdslServiceNameCanCancelResiliationAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/canCancelResiliation";
            return this.SendAsync<bool>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/cancelResiliation
        public Task PostV1XdslServiceNameCancelResiliationAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/cancelResiliation";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/changeContact
        public Task<System.Int64[]> PostV1XdslServiceNameChangeContactAsync(_xdsl_changeContact.post _body, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/changeContact";
            return this.SendAsync<long[]>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/diagnostic
        public Task<_xdsl.AccessDiagnostic> GetV1XdslServiceNameDiagnosticAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/diagnostic";
            return this.SendAsync<_xdsl.AccessDiagnostic>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/diagnostic
        public Task<_xdsl.Task> PostV1XdslServiceNameDiagnosticAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/diagnostic";
            return this.SendAsync<_xdsl.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/email/pro
        public Task<System.String[]> GetV1XdslEmailProAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/xdsl/email/pro{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/email/pro/{email}
        public Task DeleteV1XdslEmailProEmailAsync(string email) {
            string uri = $"/v1/xdsl/email/pro/{email}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/email/pro/{email}
        public Task<_xdsl.xdslEmailProWithIAM> GetV1XdslEmailProEmailAsync(string email) {
            string uri = $"/v1/xdsl/email/pro/{email}";
            return this.SendAsync<_xdsl.xdslEmailProWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/email/pro/{email}
        public Task PutV1XdslEmailProEmailAsync(_xdsl.xdslEmailPro _body, string email) {
            string uri = $"/v1/xdsl/email/pro/{email}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/email/pro/{email}/changePassword
        public Task<_xdsl_email_pro.Task> PostV1XdslEmailProEmailChangePasswordAsync(_xdsl_email_pro_changePassword.post _body, string email) {
            string uri = $"/v1/xdsl/email/pro/{email}/changePassword";
            return this.SendAsync<_xdsl_email_pro.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/fiberEligibilities
        public Task<System.Int64[]> GetV1XdslServiceNameFiberEligibilitiesAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _xdsl.FiberEligibilityStatusEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/xdsl/{serviceName}/fiberEligibilities{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/fiberEligibilities/{id}
        public Task<_xdsl.FiberEligibility> GetV1XdslServiceNameFiberEligibilitiesIdAsync(long id, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/fiberEligibilities/{id}";
            return this.SendAsync<_xdsl.FiberEligibility>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/incident
        public Task<_xdsl.Incident> GetV1XdslServiceNameIncidentAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/incident";
            return this.SendAsync<_xdsl.Incident>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/incidents
        public Task<System.Int64[]> GetV1XdslIncidentsAsync([System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? creationDate, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? endDate) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("creationDate", creationDate);
            queryParametersTemp.Add("endDate", endDate);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/xdsl/incidents{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, false);
        }
        
        // Path: /v1/xdsl/incidents/{id}
        public Task<_xdsl.Incident> GetV1XdslIncidentsIdAsync(long id) {
            string uri = $"/v1/xdsl/incidents/{id}";
            return this.SendAsync<_xdsl.Incident>("GET", uri, null, null, false);
        }
        
        // Path: /v1/xdsl/{serviceName}/ips
        public Task<System.String[]> GetV1XdslServiceNameIpsAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/ips";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/ips
        public Task<_xdsl.Task> PostV1XdslServiceNameIpsAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/ips";
            return this.SendAsync<_xdsl.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/ips/{ip}
        public Task DeleteV1XdslServiceNameIpsIpAsync(string ip, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/ips/{ip}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/ips/{ip}
        public Task<_xdsl.IP> GetV1XdslServiceNameIpsIpAsync(string ip, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/ips/{ip}";
            return this.SendAsync<_xdsl.IP>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/ipv6
        public Task<_xdsl.Task> PostV1XdslServiceNameIpv6Async(_xdsl_ipv6.post _body, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/ipv6";
            return this.SendAsync<_xdsl.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/lines
        public Task<System.String[]> GetV1XdslServiceNameLinesAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/lines";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/lines/{number}
        public Task<_xdsl.Line> GetV1XdslServiceNameLinesNumberAsync(string number, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/lines/{number}";
            return this.SendAsync<_xdsl.Line>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/lines/{number}/diagnostic/cancel
        public Task PostV1XdslServiceNameLinesNumberDiagnosticCancelAsync(string number, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/lines/{number}/diagnostic/cancel";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/lines/{number}/diagnostic/run
        public Task<_xdsl_lineDiagnostic.Diagnostic> PostV1XdslServiceNameLinesNumberDiagnosticRunAsync(_xdsl_lines_diagnostic_run.post _body, string number, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/lines/{number}/diagnostic/run";
            return this.SendAsync<_xdsl_lineDiagnostic.Diagnostic>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/lines/{number}/dslamPort
        public Task<_xdsl.DslamPort> GetV1XdslServiceNameLinesNumberDslamPortAsync(string number, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/lines/{number}/dslamPort";
            return this.SendAsync<_xdsl.DslamPort>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/lines/{number}/dslamPort/availableProfiles
        public Task<_xdsl.DslamLineProfile[]> GetV1XdslServiceNameLinesNumberDslamPortAvailableProfilesAsync(string number, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/lines/{number}/dslamPort/availableProfiles";
            return this.SendAsync<_xdsl.DslamLineProfile[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/lines/{number}/dslamPort/changeProfile
        public Task<_xdsl.Task> PostV1XdslServiceNameLinesNumberDslamPortChangeProfileAsync(_xdsl_lines_dslamPort_changeProfile.post _body, string number, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/lines/{number}/dslamPort/changeProfile";
            return this.SendAsync<_xdsl.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/lines/{number}/dslamPort/logs
        public Task<_xdsl.DslamPortLog[]> GetV1XdslServiceNameLinesNumberDslamPortLogsAsync(long limit, string number, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("limit", limit);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/xdsl/{serviceName}/lines/{number}/dslamPort/logs{queryParameters}";
            return this.SendAsync<_xdsl.DslamPortLog[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/lines/{number}/dslamPort/reset
        public Task<_xdsl.Task> PostV1XdslServiceNameLinesNumberDslamPortResetAsync(string number, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/lines/{number}/dslamPort/reset";
            return this.SendAsync<_xdsl.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/lines/{number}/statistics
        public Task<_complexType_UnitAndValues_xdsl.TimestampAndValue> GetV1XdslServiceNameLinesNumberStatisticsAsync(string number, _xdsl.StatisticsPeriodEnum period, string serviceName, _xdsl.LineStatisticsTypeEnum type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("period", period);
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/xdsl/{serviceName}/lines/{number}/statistics{queryParameters}";
            return this.SendAsync<_complexType_UnitAndValues_xdsl.TimestampAndValue>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/mailSending
        public Task<_xdsl.Task> PostV1XdslServiceNameMailSendingAsync(_xdsl_mailSending.post _body, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/mailSending";
            return this.SendAsync<_xdsl.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem
        public Task<_xdsl.Modem> GetV1XdslServiceNameModemAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem";
            return this.SendAsync<_xdsl.Modem>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem
        public Task PutV1XdslServiceNameModemAsync(_xdsl.Modem _body, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/availableACSBackend
        public Task<System.String[]> GetV1XdslServiceNameModemAvailableACSBackendAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/availableACSBackend";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/availableWLANChannel
        public Task<System.Int64[]> GetV1XdslServiceNameModemAvailableWLANChannelAsync(_xdsl.WLANFrequencyEnum frequency, string serviceName) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("frequency", frequency);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/xdsl/{serviceName}/modem/availableWLANChannel{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/blocIp
        public Task<_xdsl.ServiceStatusEnum> GetV1XdslServiceNameModemBlocIpAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/blocIp";
            return this.SendAsync<_xdsl.ServiceStatusEnum>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/blocIp
        public Task<_xdsl.Task> PostV1XdslServiceNameModemBlocIpAsync(_xdsl_modem_blocIp.post _body, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/blocIp";
            return this.SendAsync<_xdsl.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/callWaiting
        public Task<_xdsl.ServiceStatusEnum> GetV1XdslServiceNameModemCallWaitingAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/callWaiting";
            return this.SendAsync<_xdsl.ServiceStatusEnum>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/callWaiting
        public Task<_xdsl.Task> PostV1XdslServiceNameModemCallWaitingAsync(_xdsl_modem_callWaiting.post _body, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/callWaiting";
            return this.SendAsync<_xdsl.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/comfortExchange
        public Task<_xdsl.ModemExchangeInfo> GetV1XdslServiceNameModemComfortExchangeAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/comfortExchange";
            return this.SendAsync<_xdsl.ModemExchangeInfo>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/comfortExchange
        public Task<_order.Order> PostV1XdslServiceNameModemComfortExchangeAsync(_xdsl_modem_comfortExchange.post _body, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/comfortExchange";
            return this.SendAsync<_order.Order>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/connectedDevices
        public Task<System.String[]> GetV1XdslServiceNameModemConnectedDevicesAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/connectedDevices";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/connectedDevices/{macAddress}
        public Task<_xdsl.connectedDevice> GetV1XdslServiceNameModemConnectedDevicesMacAddressAsync(string macAddress, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/connectedDevices/{macAddress}";
            return this.SendAsync<_xdsl.connectedDevice>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/contentSharing
        public Task<_xdsl.ServiceStatusEnum> GetV1XdslServiceNameModemContentSharingAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/contentSharing";
            return this.SendAsync<_xdsl.ServiceStatusEnum>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/contentSharing
        public Task<_xdsl.Task> PostV1XdslServiceNameModemContentSharingAsync(_xdsl_modem_contentSharing.post _body, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/contentSharing";
            return this.SendAsync<_xdsl.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/firmware
        public Task<System.String> GetV1XdslServiceNameModemFirmwareAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/firmware";
            return this.SendAsync<string>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/firmware
        public Task<_xdsl.Task> PostV1XdslServiceNameModemFirmwareAsync(_xdsl_modem_firmware.post _body, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/firmware";
            return this.SendAsync<_xdsl.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/firmwareAvailable
        public Task<System.String[]> GetV1XdslServiceNameModemFirmwareAvailableAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/firmwareAvailable";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/ftp
        public Task<_xdsl.ServiceStatusEnum> GetV1XdslServiceNameModemFtpAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/ftp";
            return this.SendAsync<_xdsl.ServiceStatusEnum>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/ftp
        public Task<_xdsl.Task> PostV1XdslServiceNameModemFtpAsync(_xdsl_modem_ftp.post _body, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/ftp";
            return this.SendAsync<_xdsl.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/ipsecAlg
        public Task<_xdsl.ServiceStatusEnum> GetV1XdslServiceNameModemIpsecAlgAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/ipsecAlg";
            return this.SendAsync<_xdsl.ServiceStatusEnum>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/ipsecAlg
        public Task<_xdsl.Task> PostV1XdslServiceNameModemIpsecAlgAsync(_xdsl_modem_ipsecAlg.post _body, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/ipsecAlg";
            return this.SendAsync<_xdsl.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/lan
        public Task<System.String[]> GetV1XdslServiceNameModemLanAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/lan";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/lan/{lanName}
        public Task<_xdsl.LAN> GetV1XdslServiceNameModemLanLanNameAsync(string lanName, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/lan/{lanName}";
            return this.SendAsync<_xdsl.LAN>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/lan/{lanName}
        public Task PutV1XdslServiceNameModemLanLanNameAsync(_xdsl.LAN _body, string lanName, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/lan/{lanName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/lan/{lanName}/dhcp
        public Task<System.String[]> GetV1XdslServiceNameModemLanLanNameDhcpAsync(string lanName, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/lan/{lanName}/dhcp";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}
        public Task<_xdsl.DHCP> GetV1XdslServiceNameModemLanLanNameDhcpDhcpNameAsync(string dhcpName, string lanName, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}";
            return this.SendAsync<_xdsl.DHCP>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}
        public Task PutV1XdslServiceNameModemLanLanNameDhcpDhcpNameAsync(_xdsl.DHCP _body, string dhcpName, string lanName, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}/DHCPStaticAddresses
        public Task<System.String[]> GetV1XdslServiceNameModemLanLanNameDhcpDhcpNameDHCPStaticAddressesAsync(string dhcpName, string lanName, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}/DHCPStaticAddresses";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}/DHCPStaticAddresses
        public Task<_xdsl.DHCPStaticAddress> PostV1XdslServiceNameModemLanLanNameDhcpDhcpNameDHCPStaticAddressesAsync(_xdsl_modem_lan_dhcp_DHCPStaticAddresses.post _body, string dhcpName, string lanName, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}/DHCPStaticAddresses";
            return this.SendAsync<_xdsl.DHCPStaticAddress>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}/DHCPStaticAddresses/{MACAddress}
        public Task<_xdsl.Task> DeleteV1XdslServiceNameModemLanLanNameDhcpDhcpNameDHCPStaticAddressesMACAddressAsync(string MACAddress, string dhcpName, string lanName, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}/DHCPStaticAddresses/{MACAddress}";
            return this.SendAsync<_xdsl.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}/DHCPStaticAddresses/{MACAddress}
        public Task<_xdsl.DHCPStaticAddress> GetV1XdslServiceNameModemLanLanNameDhcpDhcpNameDHCPStaticAddressesMACAddressAsync(string MACAddress, string dhcpName, string lanName, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}/DHCPStaticAddresses/{MACAddress}";
            return this.SendAsync<_xdsl.DHCPStaticAddress>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}/DHCPStaticAddresses/{MACAddress}
        public Task PutV1XdslServiceNameModemLanLanNameDhcpDhcpNameDHCPStaticAddressesMACAddressAsync(_xdsl.DHCPStaticAddress _body, string MACAddress, string dhcpName, string lanName, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}/DHCPStaticAddresses/{MACAddress}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/portMappings
        public Task<System.String[]> GetV1XdslServiceNameModemPortMappingsAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/portMappings";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/portMappings
        public Task<_xdsl.PortMapping> PostV1XdslServiceNameModemPortMappingsAsync(_xdsl_modem_portMappings.post _body, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/portMappings";
            return this.SendAsync<_xdsl.PortMapping>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/portMappings/{name}
        public Task<_xdsl.Task> DeleteV1XdslServiceNameModemPortMappingsNameAsync(string name, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/portMappings/{name}";
            return this.SendAsync<_xdsl.Task>("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/portMappings/{name}
        public Task<_xdsl.PortMapping> GetV1XdslServiceNameModemPortMappingsNameAsync(string name, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/portMappings/{name}";
            return this.SendAsync<_xdsl.PortMapping>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/portMappings/{name}
        public Task PutV1XdslServiceNameModemPortMappingsNameAsync(_xdsl.PortMapping _body, string name, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/portMappings/{name}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/reboot
        public Task<_xdsl.Task> PostV1XdslServiceNameModemRebootAsync(_xdsl_modem_reboot.post _body, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/reboot";
            return this.SendAsync<_xdsl.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/reconfigureVoip
        public Task PostV1XdslServiceNameModemReconfigureVoipAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/reconfigureVoip";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/refreshConnectedDevices
        public Task<_xdsl.Task> PostV1XdslServiceNameModemRefreshConnectedDevicesAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/refreshConnectedDevices";
            return this.SendAsync<_xdsl.Task>("POST", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/reset
        public Task<_xdsl.Task> PostV1XdslServiceNameModemResetAsync(_xdsl_modem_reset.post _body, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/reset";
            return this.SendAsync<_xdsl.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/resetPortMappingConfig
        public Task PostV1XdslServiceNameModemResetPortMappingConfigAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/resetPortMappingConfig";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/retrieveInfo
        public Task<_xdsl_AsyncTask_xdsl.ModemInfo> PostV1XdslServiceNameModemRetrieveInfoAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/retrieveInfo";
            return this.SendAsync<_xdsl_AsyncTask_xdsl.ModemInfo>("POST", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/sipAlg
        public Task<_xdsl.ServiceStatusEnum> GetV1XdslServiceNameModemSipAlgAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/sipAlg";
            return this.SendAsync<_xdsl.ServiceStatusEnum>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/sipAlg
        public Task<_xdsl.Task> PostV1XdslServiceNameModemSipAlgAsync(_xdsl_modem_sipAlg.post _body, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/sipAlg";
            return this.SendAsync<_xdsl.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/upnp
        public Task<_xdsl.ServiceStatusEnum> GetV1XdslServiceNameModemUpnpAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/upnp";
            return this.SendAsync<_xdsl.ServiceStatusEnum>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/upnp
        public Task<_xdsl.Task> PostV1XdslServiceNameModemUpnpAsync(_xdsl_modem_upnp.post _body, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/upnp";
            return this.SendAsync<_xdsl.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/wifi
        public Task<System.String[]> GetV1XdslServiceNameModemWifiAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/wifi";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/wifi/{wifiName}
        public Task<_xdsl.WLAN> GetV1XdslServiceNameModemWifiWifiNameAsync(string serviceName, string wifiName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/wifi/{wifiName}";
            return this.SendAsync<_xdsl.WLAN>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/wifi/{wifiName}
        public Task PutV1XdslServiceNameModemWifiWifiNameAsync(_xdsl.WLAN _body, string serviceName, string wifiName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/wifi/{wifiName}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/modem/wifi/{wifiName}/qrCode
        public Task<System.String> GetV1XdslServiceNameModemWifiWifiNameQrCodeAsync(string serviceName, string wifiName) {
            string uri = $"/v1/xdsl/{serviceName}/modem/wifi/{wifiName}/qrCode";
            return this.SendAsync<string>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/monitoringNotifications
        public Task<System.Int64[]> GetV1XdslServiceNameMonitoringNotificationsAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/monitoringNotifications";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/monitoringNotifications
        public Task<_xdsl.MonitoringNotification> PostV1XdslServiceNameMonitoringNotificationsAsync(_xdsl_monitoringNotifications.post _body, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/monitoringNotifications";
            return this.SendAsync<_xdsl.MonitoringNotification>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/monitoringNotifications/{id}
        public Task DeleteV1XdslServiceNameMonitoringNotificationsIdAsync(long id, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/monitoringNotifications/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/monitoringNotifications/{id}
        public Task<_xdsl.MonitoringNotification> GetV1XdslServiceNameMonitoringNotificationsIdAsync(long id, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/monitoringNotifications/{id}";
            return this.SendAsync<_xdsl.MonitoringNotification>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/monitoringNotifications/{id}
        public Task PutV1XdslServiceNameMonitoringNotificationsIdAsync(_xdsl.MonitoringNotification _body, long id, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/monitoringNotifications/{id}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/ont
        public Task<_xdsl.Ont> GetV1XdslServiceNameOntAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/ont";
            return this.SendAsync<_xdsl.Ont>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/orderFollowup
        public Task<_xdsl_orderFollowup.Step[]> GetV1XdslServiceNameOrderFollowupAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/orderFollowup";
            return this.SendAsync<_xdsl_orderFollowup.Step[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/orderMeeting
        public Task PostV1XdslServiceNameOrderMeetingAsync(_xdsl_orderMeeting.post _body, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/orderMeeting";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/pendingAction
        public Task<_xdsl.PendingAction> GetV1XdslServiceNamePendingActionAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/pendingAction";
            return this.SendAsync<_xdsl.PendingAction>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/radiusConnectionLogs
        public Task<_xdsl.RadiusConnectionLog[]> GetV1XdslServiceNameRadiusConnectionLogsAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/radiusConnectionLogs";
            return this.SendAsync<_xdsl.RadiusConnectionLog[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/requestPPPLoginMail
        public Task PostV1XdslServiceNameRequestPPPLoginMailAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/requestPPPLoginMail";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/requestTotalDeconsolidation
        public Task<_xdsl.Task> PostV1XdslServiceNameRequestTotalDeconsolidationAsync(_xdsl_requestTotalDeconsolidation.post _body, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/requestTotalDeconsolidation";
            return this.SendAsync<_xdsl.Task>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/resiliate
        public Task<_xdsl.ResiliationFollowUpDetail> PostV1XdslServiceNameResiliateAsync(_xdsl_resiliate.post _body, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/resiliate";
            return this.SendAsync<_xdsl.ResiliationFollowUpDetail>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/resiliationFollowup
        public Task<_xdsl.ResiliationFollowUpDetail> GetV1XdslServiceNameResiliationFollowupAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/resiliationFollowup";
            return this.SendAsync<_xdsl.ResiliationFollowUpDetail>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/resiliationTerms
        public Task<_xdsl.ResiliationTerms> GetV1XdslServiceNameResiliationTermsAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? resiliationDate) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("resiliationDate", resiliationDate);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/xdsl/{serviceName}/resiliationTerms{queryParameters}";
            return this.SendAsync<_xdsl.ResiliationTerms>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/rma
        public Task<System.String[]> GetV1XdslServiceNameRmaAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/rma";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/rma/{id}
        public Task DeleteV1XdslServiceNameRmaIdAsync(string id, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/rma/{id}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/rma/{id}
        public Task<_telephony.Rma> GetV1XdslServiceNameRmaIdAsync(string id, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/rma/{id}";
            return this.SendAsync<_telephony.Rma>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/rma/{id}
        public Task PutV1XdslServiceNameRmaIdAsync(_telephony.Rma _body, string id, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/rma/{id}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/rma/{id}/changeType
        public Task PostV1XdslServiceNameRmaIdChangeTypeAsync(_xdsl_rma_changeType.post _body, string id, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/rma/{id}/changeType";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/searchOrderMeetings
        public Task<_xdsl_AsyncTask_connectivity_eligibility.Meetings> PostV1XdslServiceNameSearchOrderMeetingsAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/searchOrderMeetings";
            return this.SendAsync<_xdsl_AsyncTask_connectivity_eligibility.Meetings>("POST", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/sendOrderToProvider
        public Task PostV1XdslServiceNameSendOrderToProviderAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/sendOrderToProvider";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/serviceInfos
        public Task<_services.Service> GetV1XdslServiceNameServiceInfosAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/serviceInfos
        public Task PutV1XdslServiceNameServiceInfosAsync(_services.Service _body, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/spare
        public Task<System.String[]> GetV1XdslSpareAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/xdsl/spare{queryParameters}";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/spare/{spare}
        public Task DeleteV1XdslSpareSpareAsync(string spare) {
            string uri = $"/v1/xdsl/spare/{spare}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/spare/{spare}
        public Task<_spare_xdsl.XdslSpareWithIAM> GetV1XdslSpareSpareAsync(string spare) {
            string uri = $"/v1/xdsl/spare/{spare}";
            return this.SendAsync<_spare_xdsl.XdslSpareWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/spare/brands
        public Task<System.String[]> GetV1XdslSpareBrandsAsync() {
            string uri = $"/v1/xdsl/spare/brands";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/spare/{spare}/compatibleReplacement
        public Task<System.String[]> GetV1XdslSpareSpareCompatibleReplacementAsync(string spare) {
            string uri = $"/v1/xdsl/spare/{spare}/compatibleReplacement";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/spare/{spare}/replace
        public Task PostV1XdslSpareSpareReplaceAsync(_xdsl_spare_replace.post _body, string spare) {
            string uri = $"/v1/xdsl/spare/{spare}/replace";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/spare/{spare}/returnMerchandise
        public Task PostV1XdslSpareSpareReturnMerchandiseAsync(string spare) {
            string uri = $"/v1/xdsl/spare/{spare}/returnMerchandise";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/spare/{spare}/serviceInfos
        public Task<_services.Service> GetV1XdslSpareSpareServiceInfosAsync(string spare) {
            string uri = $"/v1/xdsl/spare/{spare}/serviceInfos";
            return this.SendAsync<_services.Service>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/spare/{spare}/serviceInfos
        public Task PutV1XdslSpareSpareServiceInfosAsync(_services.Service _body, string spare) {
            string uri = $"/v1/xdsl/spare/{spare}/serviceInfos";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/statistics
        public Task<_complexType_UnitAndValues_xdsl.AccessLatency> GetV1XdslServiceNameStatisticsAsync(_xdsl.StatisticsPeriodEnum period, string serviceName, _xdsl.AccessStatisticsTypeEnum type) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("period", period);
            queryParametersTemp.Add("type", type);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/xdsl/{serviceName}/statistics{queryParameters}";
            return this.SendAsync<_complexType_UnitAndValues_xdsl.AccessLatency>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/tasks
        public Task<System.Int64[]> GetV1XdslServiceNameTasksAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? function, [System.Runtime.InteropServices.OptionalAttribute()] _xdsl.TaskStatusEnum? status) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("function", function);
            queryParametersTemp.Add("status", status);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v1/xdsl/{serviceName}/tasks{queryParameters}";
            return this.SendAsync<long[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/tasks/{id}
        public Task<_xdsl.Task> GetV1XdslServiceNameTasksIdAsync(long id, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/tasks/{id}";
            return this.SendAsync<_xdsl.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/tasks/{id}/archive
        public Task PostV1XdslServiceNameTasksIdArchiveAsync(long id, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/tasks/{id}/archive";
            return this.SendAsync("POST", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/templateModem
        public Task<System.String[]> GetV1XdslTemplateModemAsync() {
            string uri = $"/v1/xdsl/templateModem";
            return this.SendAsync<string[]>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/templateModem
        public Task<_xdsl.TemplateModem> PostV1XdslTemplateModemAsync(_xdsl_templateModem.post _body) {
            string uri = $"/v1/xdsl/templateModem";
            return this.SendAsync<_xdsl.TemplateModem>("POST", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/templateModem/{name}
        public Task DeleteV1XdslTemplateModemNameAsync(string name) {
            string uri = $"/v1/xdsl/templateModem/{name}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/templateModem/{name}
        public Task<_xdsl.TemplateModem> GetV1XdslTemplateModemNameAsync(string name) {
            string uri = $"/v1/xdsl/templateModem/{name}";
            return this.SendAsync<_xdsl.TemplateModem>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/templateModem/{name}
        public Task PutV1XdslTemplateModemNameAsync(_xdsl.TemplateModem _body, string name) {
            string uri = $"/v1/xdsl/templateModem/{name}";
            return this.SendAsync("PUT", uri, null, _body, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/totalDeconsolidationTerms
        public Task<_xdsl.DeconsolidationTerms> GetV1XdslServiceNameTotalDeconsolidationTermsAsync(string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/totalDeconsolidationTerms";
            return this.SendAsync<_xdsl.DeconsolidationTerms>("GET", uri, null, null, true);
        }
        
        // Path: /v1/xdsl/{serviceName}/updateInvalidOrMissingRio
        public Task PostV1XdslServiceNameUpdateInvalidOrMissingRioAsync(_xdsl_updateInvalidOrMissingRio.post _body, string serviceName) {
            string uri = $"/v1/xdsl/{serviceName}/updateInvalidOrMissingRio";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v2/domain/name
        public Task<_domain.DomainWithIAM[]> GetV2DomainNameAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size, [System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/domain/name{queryParameters}";
            return this.SendAsync<_domain.DomainWithIAM[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/domain/name/{domainName}
        public Task<_domain.DomainWithIAM> GetV2DomainNameDomainNameAsync(string domainName) {
            string uri = $"/v2/domain/name/{domainName}";
            return this.SendAsync<_domain.DomainWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v2/domain/name/{domainName}
        public Task<_domain.Domain> PutV2DomainNameDomainNameAsync(_domain.Domain _body, string domainName) {
            string uri = $"/v2/domain/name/{domainName}";
            return this.SendAsync<_domain.Domain>("PUT", uri, null, _body, true);
        }
        
        // Path: /v2/domain/name/{domainName}/task
        public Task<_common.Task[]> GetV2DomainNameDomainNameTaskAsync(string domainName, [System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size) {
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/domain/name/{domainName}/task";
            return this.SendAsync<_common.Task[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/domain/name/{domainName}/task/{taskId}
        public Task<_common.Task> GetV2DomainNameDomainNameTaskTaskIdAsync(string domainName, System.Guid taskId) {
            string uri = $"/v2/domain/name/{domainName}/task/{taskId}";
            return this.SendAsync<_common.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v2/iam/log/kind
        public Task<System.String[]> GetV2IamLogKindAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size) {
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/iam/log/kind";
            return this.SendAsync<string[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/iam/log/kind/{name}
        public Task<_dbaas_logs.LogKind> GetV2IamLogKindNameAsync(string name) {
            string uri = $"/v2/iam/log/kind/{name}";
            return this.SendAsync<_dbaas_logs.LogKind>("GET", uri, null, null, true);
        }
        
        // Path: /v2/iam/log/subscription
        public Task<System.Guid[]> GetV2IamLogSubscriptionAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size, [System.Runtime.InteropServices.OptionalAttribute()] System.String? kind) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("kind", kind);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/iam/log/subscription{queryParameters}";
            return this.SendAsync<System.Guid[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/iam/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostV2IamLogSubscriptionAsync(_dbaas_logs.LogSubscriptionCreation _body) {
            string uri = $"/v2/iam/log/subscription";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v2/iam/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteV2IamLogSubscriptionSubscriptionIdAsync(System.Guid subscriptionId) {
            string uri = $"/v2/iam/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscriptionResponse>("DELETE", uri, null, null, true);
        }
        
        // Path: /v2/iam/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetV2IamLogSubscriptionSubscriptionIdAsync(System.Guid subscriptionId) {
            string uri = $"/v2/iam/log/subscription/{subscriptionId}";
            return this.SendAsync<_dbaas_logs.LogSubscription>("GET", uri, null, null, true);
        }
        
        // Path: /v2/iam/log/url
        public Task<_dbaas_logs.TemporaryLogsLink> PostV2IamLogUrlAsync(_dbaas_logs.LogUrlCreation _body) {
            string uri = $"/v2/iam/log/url";
            return this.SendAsync<_dbaas_logs.TemporaryLogsLink>("POST", uri, null, _body, true);
        }
        
        // Path: /v2/iam/logs/forward
        public Task<_iam_logs.ForwardResponse> PostV2IamLogsForwardAsync(_iam_logs.ForwardRequest _body) {
            string uri = $"/v2/iam/logs/forward";
            return this.SendAsync<_iam_logs.ForwardResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v2/iam/permissionsGroup
        public Task<_iam.PermissionsGroup[]> GetV2IamPermissionsGroupAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size) {
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/iam/permissionsGroup";
            return this.SendAsync<_iam.PermissionsGroup[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/iam/permissionsGroup
        public Task<_iam.PermissionsGroup> PostV2IamPermissionsGroupAsync(_iam.PermissionsGroup _body) {
            string uri = $"/v2/iam/permissionsGroup";
            return this.SendAsync<_iam.PermissionsGroup>("POST", uri, null, _body, true);
        }
        
        // Path: /v2/iam/permissionsGroup/{permissionsGroupURN}
        public Task DeleteV2IamPermissionsGroupPermissionsGroupURNAsync(string permissionsGroupURN) {
            string uri = $"/v2/iam/permissionsGroup/{permissionsGroupURN}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v2/iam/permissionsGroup/{permissionsGroupURN}
        public Task<_iam.PermissionsGroup> GetV2IamPermissionsGroupPermissionsGroupURNAsync(string permissionsGroupURN) {
            string uri = $"/v2/iam/permissionsGroup/{permissionsGroupURN}";
            return this.SendAsync<_iam.PermissionsGroup>("GET", uri, null, null, true);
        }
        
        // Path: /v2/iam/permissionsGroup/{permissionsGroupURN}
        public Task<_iam.PermissionsGroup> PutV2IamPermissionsGroupPermissionsGroupURNAsync(_iam.PermissionsGroup _body, string permissionsGroupURN) {
            string uri = $"/v2/iam/permissionsGroup/{permissionsGroupURN}";
            return this.SendAsync<_iam.PermissionsGroup>("PUT", uri, null, _body, true);
        }
        
        // Path: /v2/iam/policy
        public Task<_iam_policy.Response[]> GetV2IamPolicyAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? action, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? details, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? identity, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? readOnly, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? resourceURN) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("action", action);
            queryParametersTemp.Add("details", details);
            queryParametersTemp.Add("identity", identity);
            queryParametersTemp.Add("readOnly", readOnly);
            queryParametersTemp.Add("resourceURN", resourceURN);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/iam/policy{queryParameters}";
            return this.SendAsync<_iam_policy.Response[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/iam/policy
        public Task<_iam_policy.Response> PostV2IamPolicyAsync(_iam_policy.Creation _body) {
            string uri = $"/v2/iam/policy";
            return this.SendAsync<_iam_policy.Response>("POST", uri, null, _body, true);
        }
        
        // Path: /v2/iam/policy/{policyId}
        public Task DeleteV2IamPolicyPolicyIdAsync(System.Guid policyId) {
            string uri = $"/v2/iam/policy/{policyId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v2/iam/policy/{policyId}
        public Task<_iam_policy.Response> GetV2IamPolicyPolicyIdAsync(System.Guid policyId, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? details) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("details", details);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v2/iam/policy/{policyId}{queryParameters}";
            return this.SendAsync<_iam_policy.Response>("GET", uri, null, null, true);
        }
        
        // Path: /v2/iam/policy/{policyId}
        public Task<_iam_policy.Response> PutV2IamPolicyPolicyIdAsync(_iam_policy.Update _body, System.Guid policyId) {
            string uri = $"/v2/iam/policy/{policyId}";
            return this.SendAsync<_iam_policy.Response>("PUT", uri, null, _body, true);
        }
        
        // Path: /v2/iam/reference/action
        public Task<_iam_reference.Action[]> GetV2IamReferenceActionAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? resourceType) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("resourceType", resourceType);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/iam/reference/action{queryParameters}";
            return this.SendAsync<_iam_reference.Action[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/iam/reference/resource/type
        public Task<System.String[]> GetV2IamReferenceResourceTypeAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size) {
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/iam/reference/resource/type";
            return this.SendAsync<string[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/iam/resource
        public Task<_iam_resource.Resource[]> GetV2IamResourceAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? resourceName, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? resourceType, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? resourceURN, [System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? tags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("resourceName", resourceName);
            queryParametersTemp.Add("resourceType", resourceType);
            queryParametersTemp.Add("resourceURN", resourceURN);
            queryParametersTemp.Add("tags", tags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/iam/resource{queryParameters}";
            return this.SendAsync<_iam_resource.Resource[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/iam/resource/{resourceURN}
        public Task<_iam_resource.Resource> GetV2IamResourceResourceURNAsync(string resourceURN) {
            string uri = $"/v2/iam/resource/{resourceURN}";
            return this.SendAsync<_iam_resource.Resource>("GET", uri, null, null, true);
        }
        
        // Path: /v2/iam/resource/{resourceURN}
        public Task<_iam_resource.Resource> PutV2IamResourceResourceURNAsync(_iam_resource.Resource _body, string resourceURN) {
            string uri = $"/v2/iam/resource/{resourceURN}";
            return this.SendAsync<_iam_resource.Resource>("PUT", uri, null, _body, true);
        }
        
        // Path: /v2/iam/resource/{resourceURN}/authorization/check
        public Task<_iam.AuthorizeResponse> PostV2IamResourceResourceURNAuthorizationCheckAsync(_iam.AuthorizeRequest _body, string resourceURN) {
            string uri = $"/v2/iam/resource/{resourceURN}/authorization/check";
            return this.SendAsync<_iam.AuthorizeResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v2/iam/resource/{resourceURN}/tag/{key}
        public Task DeleteV2IamResourceResourceURNTagKeyAsync(string key, string resourceURN) {
            string uri = $"/v2/iam/resource/{resourceURN}/tag/{key}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v2/iam/resource/{resourceURN}/tag
        public Task PostV2IamResourceResourceURNTagAsync(_iam_resource.AddTag _body, string resourceURN) {
            string uri = $"/v2/iam/resource/{resourceURN}/tag";
            return this.SendAsync("POST", uri, null, _body, true);
        }
        
        // Path: /v2/iam/resourceGroup
        public Task<_iam_group.Response[]> GetV2IamResourceGroupAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? details) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("details", details);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/iam/resourceGroup{queryParameters}";
            return this.SendAsync<_iam_group.Response[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/iam/resourceGroup
        public Task<_iam_group.Response> PostV2IamResourceGroupAsync(_iam_group.Creation _body) {
            string uri = $"/v2/iam/resourceGroup";
            return this.SendAsync<_iam_group.Response>("POST", uri, null, _body, true);
        }
        
        // Path: /v2/iam/resourceGroup/{groupId}
        public Task DeleteV2IamResourceGroupGroupIdAsync(System.Guid groupId) {
            string uri = $"/v2/iam/resourceGroup/{groupId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v2/iam/resourceGroup/{groupId}
        public Task<_iam_group.Response> GetV2IamResourceGroupGroupIdAsync(System.Guid groupId, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? details) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("details", details);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v2/iam/resourceGroup/{groupId}{queryParameters}";
            return this.SendAsync<_iam_group.Response>("GET", uri, null, null, true);
        }
        
        // Path: /v2/iam/resourceGroup/{groupId}
        public Task<_iam_group.Response> PutV2IamResourceGroupGroupIdAsync(_iam_group.Update _body, System.Guid groupId) {
            string uri = $"/v2/iam/resourceGroup/{groupId}";
            return this.SendAsync<_iam_group.Response>("PUT", uri, null, _body, true);
        }
        
        // Path: /v2/networkDefense/vac/event
        public Task<_networkDefense_Vac.EventsResponse> GetV2NetworkDefenseVacEventAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? after, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? before, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? ongoingOnly, [System.Runtime.InteropServices.OptionalAttribute()] _networkDefense.RegionEnum? region, [System.Runtime.InteropServices.OptionalAttribute()] System.String[]? subnets) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("after", after);
            queryParametersTemp.Add("before", before);
            queryParametersTemp.Add("ongoingOnly", ongoingOnly);
            queryParametersTemp.Add("region", region);
            queryParametersTemp.Add("subnets", subnets);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/networkDefense/vac/event{queryParameters}";
            return this.SendAsync<_networkDefense_Vac.EventsResponse>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/networkDefense/vac/traffic
        public Task<_networkDefense_Vac.TrafficResponse> GetV2NetworkDefenseVacTrafficAsync(System.DateTime after, string subnet, [System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime? before) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("after", after);
            queryParametersTemp.Add("before", before);
            queryParametersTemp.Add("subnet", subnet);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/networkDefense/vac/traffic{queryParameters}";
            return this.SendAsync<_networkDefense_Vac.TrafficResponse>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/okms/reference/serviceKey
        public Task<_okms_reference_serviceKey.Response[]> GetV2OkmsReferenceServiceKeyAsync(_okms.RegionEnum region, [System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("region", region);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/okms/reference/serviceKey{queryParameters}";
            return this.SendAsync<_okms_reference_serviceKey.Response[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/okms/resource
        public Task<_okms_resource.ResponseWithIAM[]> GetV2OkmsResourceAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size, [System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/okms/resource{queryParameters}";
            return this.SendAsync<_okms_resource.ResponseWithIAM[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/okms/resource/{okmsId}
        public Task<_okms_resource.ResponseWithIAM> GetV2OkmsResourceOkmsIdAsync(System.Guid okmsId, [System.Runtime.InteropServices.OptionalAttribute()] System.Boolean? publicCA) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("publicCA", publicCA);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v2/okms/resource/{okmsId}{queryParameters}";
            return this.SendAsync<_okms_resource.ResponseWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v2/okms/resource/{okmsId}/credential
        public Task<_okms_credential.GetResponse[]> GetV2OkmsResourceOkmsIdCredentialAsync(System.Guid okmsId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size) {
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/okms/resource/{okmsId}/credential";
            return this.SendAsync<_okms_credential.GetResponse[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/okms/resource/{okmsId}/credential
        public Task<_okms_credential.CreationResponse> PostV2OkmsResourceOkmsIdCredentialAsync(_okms_credential.Creation _body, System.Guid okmsId) {
            string uri = $"/v2/okms/resource/{okmsId}/credential";
            return this.SendAsync<_okms_credential.CreationResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v2/okms/resource/{okmsId}/credential/{credentialId}
        public Task<_okms_credential.GetResponse> DeleteV2OkmsResourceOkmsIdCredentialCredentialIdAsync(System.Guid credentialId, System.Guid okmsId) {
            string uri = $"/v2/okms/resource/{okmsId}/credential/{credentialId}";
            return this.SendAsync<_okms_credential.GetResponse>("DELETE", uri, null, null, true);
        }
        
        // Path: /v2/okms/resource/{okmsId}/credential/{credentialId}
        public Task<_okms_credential.GetResponse> GetV2OkmsResourceOkmsIdCredentialCredentialIdAsync(System.Guid credentialId, System.Guid okmsId) {
            string uri = $"/v2/okms/resource/{okmsId}/credential/{credentialId}";
            return this.SendAsync<_okms_credential.GetResponse>("GET", uri, null, null, true);
        }
        
        // Path: /v2/okms/resource/{okmsId}/serviceKey
        public Task<_okms_serviceKey.Response[]> GetV2OkmsResourceOkmsIdServiceKeyAsync(System.Guid okmsId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size) {
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/okms/resource/{okmsId}/serviceKey";
            return this.SendAsync<_okms_serviceKey.Response[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/okms/resource/{okmsId}/serviceKey
        public Task<_okms_serviceKey.Response> PostV2OkmsResourceOkmsIdServiceKeyAsync(_okms_serviceKey.Creation _body, System.Guid okmsId) {
            string uri = $"/v2/okms/resource/{okmsId}/serviceKey";
            return this.SendAsync<_okms_serviceKey.Response>("POST", uri, null, _body, true);
        }
        
        // Path: /v2/okms/resource/{okmsId}/serviceKey/{keyId}
        public Task DeleteV2OkmsResourceOkmsIdServiceKeyKeyIdAsync(System.Guid keyId, System.Guid okmsId) {
            string uri = $"/v2/okms/resource/{okmsId}/serviceKey/{keyId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v2/okms/resource/{okmsId}/serviceKey/{keyId}
        public Task<_okms_serviceKey.Response> GetV2OkmsResourceOkmsIdServiceKeyKeyIdAsync(System.Guid keyId, System.Guid okmsId, [System.Runtime.InteropServices.OptionalAttribute()] _okms.KeyFormatEnum? format) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("format", format);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            string uri = $"/v2/okms/resource/{okmsId}/serviceKey/{keyId}{queryParameters}";
            return this.SendAsync<_okms_serviceKey.Response>("GET", uri, null, null, true);
        }
        
        // Path: /v2/okms/resource/{okmsId}/serviceKey/{keyId}
        public Task<_okms_serviceKey.Response> PutV2OkmsResourceOkmsIdServiceKeyKeyIdAsync(_okms_serviceKey.Update _body, System.Guid keyId, System.Guid okmsId) {
            string uri = $"/v2/okms/resource/{okmsId}/serviceKey/{keyId}";
            return this.SendAsync<_okms_serviceKey.Response>("PUT", uri, null, _body, true);
        }
        
        // Path: /v2/publicCloud/project
        public Task<_publicCloud.ProjectWithIAM[]> GetV2PublicCloudProjectAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size, [System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/publicCloud/project{queryParameters}";
            return this.SendAsync<_publicCloud.ProjectWithIAM[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/publicCloud/project/{projectId}
        public Task<_publicCloud.ProjectWithIAM> GetV2PublicCloudProjectProjectIdAsync(string projectId) {
            string uri = $"/v2/publicCloud/project/{projectId}";
            return this.SendAsync<_publicCloud.ProjectWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v2/publicCloud/project/{projectId}/rancher
        public Task<_publicCloud_rancher.Rancher[]> GetV2PublicCloudProjectProjectIdRancherAsync(string projectId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size) {
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/publicCloud/project/{projectId}/rancher";
            return this.SendAsync<_publicCloud_rancher.Rancher[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/publicCloud/project/{projectId}/rancher
        public Task<_publicCloud_rancher.Rancher> PostV2PublicCloudProjectProjectIdRancherAsync(_publicCloud_rancher.RancherCreation _body, string projectId) {
            string uri = $"/v2/publicCloud/project/{projectId}/rancher";
            return this.SendAsync<_publicCloud_rancher.Rancher>("POST", uri, null, _body, true);
        }
        
        // Path: /v2/publicCloud/project/{projectId}/rancher/{rancherId}
        public Task<_publicCloud_rancher.Rancher> DeleteV2PublicCloudProjectProjectIdRancherRancherIdAsync(string projectId, System.Guid rancherId) {
            string uri = $"/v2/publicCloud/project/{projectId}/rancher/{rancherId}";
            return this.SendAsync<_publicCloud_rancher.Rancher>("DELETE", uri, null, null, true);
        }
        
        // Path: /v2/publicCloud/project/{projectId}/rancher/{rancherId}
        public Task<_publicCloud_rancher.Rancher> GetV2PublicCloudProjectProjectIdRancherRancherIdAsync(string projectId, System.Guid rancherId) {
            string uri = $"/v2/publicCloud/project/{projectId}/rancher/{rancherId}";
            return this.SendAsync<_publicCloud_rancher.Rancher>("GET", uri, null, null, true);
        }
        
        // Path: /v2/publicCloud/project/{projectId}/rancher/{rancherId}
        public Task<_publicCloud_rancher.Rancher> PutV2PublicCloudProjectProjectIdRancherRancherIdAsync(_publicCloud_rancher.RancherUpdate _body, string projectId, System.Guid rancherId) {
            string uri = $"/v2/publicCloud/project/{projectId}/rancher/{rancherId}";
            return this.SendAsync<_publicCloud_rancher.Rancher>("PUT", uri, null, _body, true);
        }
        
        // Path: /v2/publicCloud/project/{projectId}/rancher/{rancherId}/adminCredentials
        public Task<_publicCloud_rancher.Credentials> PostV2PublicCloudProjectProjectIdRancherRancherIdAdminCredentialsAsync(string projectId, System.Guid rancherId) {
            string uri = $"/v2/publicCloud/project/{projectId}/rancher/{rancherId}/adminCredentials";
            return this.SendAsync<_publicCloud_rancher.Credentials>("POST", uri, null, null, true);
        }
        
        // Path: /v2/publicCloud/project/{projectId}/rancher/{rancherId}/capabilities/plan
        public Task<_publicCloud_rancher.PlanCapability[]> GetV2PublicCloudProjectProjectIdRancherRancherIdCapabilitiesPlanAsync(string projectId, System.Guid rancherId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size) {
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/publicCloud/project/{projectId}/rancher/{rancherId}/capabilities/plan";
            return this.SendAsync<_publicCloud_rancher.PlanCapability[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/publicCloud/project/{projectId}/rancher/{rancherId}/capabilities/version
        public Task<_publicCloud_rancher.VersionCapability[]> GetV2PublicCloudProjectProjectIdRancherRancherIdCapabilitiesVersionAsync(string projectId, System.Guid rancherId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size) {
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/publicCloud/project/{projectId}/rancher/{rancherId}/capabilities/version";
            return this.SendAsync<_publicCloud_rancher.VersionCapability[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/publicCloud/project/{projectId}/rancher/{rancherId}/event
        public Task<_common.Event[]> GetV2PublicCloudProjectProjectIdRancherRancherIdEventAsync(string projectId, System.Guid rancherId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size) {
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/publicCloud/project/{projectId}/rancher/{rancherId}/event";
            return this.SendAsync<_common.Event[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/publicCloud/project/{projectId}/rancher/{rancherId}/task
        public Task<_common.Task[]> GetV2PublicCloudProjectProjectIdRancherRancherIdTaskAsync(string projectId, System.Guid rancherId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size) {
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/publicCloud/project/{projectId}/rancher/{rancherId}/task";
            return this.SendAsync<_common.Task[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/publicCloud/project/{projectId}/rancher/{rancherId}/task/{taskId}
        public Task<_common.Task> GetV2PublicCloudProjectProjectIdRancherRancherIdTaskTaskIdAsync(string projectId, System.Guid rancherId, System.Guid taskId) {
            string uri = $"/v2/publicCloud/project/{projectId}/rancher/{rancherId}/task/{taskId}";
            return this.SendAsync<_common.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v2/publicCloud/project/{projectId}/reference/rancher/plan
        public Task<_publicCloud_rancher.PlanReference[]> GetV2PublicCloudProjectProjectIdReferenceRancherPlanAsync(string projectId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size) {
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/publicCloud/project/{projectId}/reference/rancher/plan";
            return this.SendAsync<_publicCloud_rancher.PlanReference[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/publicCloud/project/{projectId}/reference/rancher/version
        public Task<_publicCloud_rancher.VersionReference[]> GetV2PublicCloudProjectProjectIdReferenceRancherVersionAsync(string projectId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size) {
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/publicCloud/project/{projectId}/reference/rancher/version";
            return this.SendAsync<_publicCloud_rancher.VersionReference[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/publicCloud/reference/rancher/plan
        public Task<_publicCloud_rancher.PlanReference[]> GetV2PublicCloudReferenceRancherPlanAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size) {
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/publicCloud/reference/rancher/plan";
            return this.SendAsync<_publicCloud_rancher.PlanReference[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/publicCloud/reference/rancher/version
        public Task<_publicCloud_rancher.VersionReference[]> GetV2PublicCloudReferenceRancherVersionAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size) {
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/publicCloud/reference/rancher/version";
            return this.SendAsync<_publicCloud_rancher.VersionReference[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/vrackServices/reference/compatibleManagedServiceType
        public Task<System.String[]> GetV2VrackServicesReferenceCompatibleManagedServiceTypeAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size) {
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/vrackServices/reference/compatibleManagedServiceType";
            return this.SendAsync<string[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/vrackServices/reference/region
        public Task<_vrackServices.Region[]> GetV2VrackServicesReferenceRegionAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size) {
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/vrackServices/reference/region";
            return this.SendAsync<_vrackServices.Region[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/vrackServices/resource
        public Task<_vrackServices.VrackServicesWithIAM[]> GetV2VrackServicesResourceAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size, [System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/vrackServices/resource{queryParameters}";
            return this.SendAsync<_vrackServices.VrackServicesWithIAM[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/vrackServices/resource/{vrackServicesId}
        public Task<_vrackServices.VrackServicesWithIAM> GetV2VrackServicesResourceVrackServicesIdAsync(string vrackServicesId) {
            string uri = $"/v2/vrackServices/resource/{vrackServicesId}";
            return this.SendAsync<_vrackServices.VrackServicesWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v2/vrackServices/resource/{vrackServicesId}
        public Task<_vrackServices.VrackServices> PutV2VrackServicesResourceVrackServicesIdAsync(_vrackServices.VrackServicesInput _body, string vrackServicesId) {
            string uri = $"/v2/vrackServices/resource/{vrackServicesId}";
            return this.SendAsync<_vrackServices.VrackServices>("PUT", uri, null, _body, true);
        }
        
        // Path: /v2/vrackServices/resource/{vrackServicesId}/eligibleManagedService
        public Task<_vrackServices.EligibleManagedService[]> GetV2VrackServicesResourceVrackServicesIdEligibleManagedServiceAsync(string vrackServicesId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size) {
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/vrackServices/resource/{vrackServicesId}/eligibleManagedService";
            return this.SendAsync<_vrackServices.EligibleManagedService[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/vrackServices/resource/{vrackServicesId}/task
        public Task<_common.Task[]> GetV2VrackServicesResourceVrackServicesIdTaskAsync(string vrackServicesId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size) {
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/vrackServices/resource/{vrackServicesId}/task";
            return this.SendAsync<_common.Task[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/vrackServices/resource/{vrackServicesId}/task/{taskId}
        public Task<_common.Task> GetV2VrackServicesResourceVrackServicesIdTaskTaskIdAsync(System.Guid taskId, string vrackServicesId) {
            string uri = $"/v2/vrackServices/resource/{vrackServicesId}/task/{taskId}";
            return this.SendAsync<_common.Task>("GET", uri, null, null, true);
        }
        
        // Path: /v2/zimbra/platform
        public Task<_zimbra.PlatformResponseWithIAM[]> GetV2ZimbraPlatformAsync([System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size, [System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]>? iamTags, [System.Runtime.InteropServices.OptionalAttribute()] System.Guid? projectId) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("iamTags", iamTags);
            queryParametersTemp.Add("projectId", projectId);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/zimbra/platform{queryParameters}";
            return this.SendAsync<_zimbra.PlatformResponseWithIAM[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/zimbra/platform/{platformId}
        public Task<_zimbra.PlatformResponseWithIAM> GetV2ZimbraPlatformPlatformIdAsync(System.Guid platformId) {
            string uri = $"/v2/zimbra/platform/{platformId}";
            return this.SendAsync<_zimbra.PlatformResponseWithIAM>("GET", uri, null, null, true);
        }
        
        // Path: /v2/zimbra/platform/{platformId}/account
        public Task<_zimbra.AccountResponse[]> GetV2ZimbraPlatformPlatformIdAccountAsync(System.Guid platformId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size, [System.Runtime.InteropServices.OptionalAttribute()] System.Guid? domainId, [System.Runtime.InteropServices.OptionalAttribute()] System.Guid? organizationId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? organizationLabel) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("domainId", domainId);
            queryParametersTemp.Add("organizationId", organizationId);
            queryParametersTemp.Add("organizationLabel", organizationLabel);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/zimbra/platform/{platformId}/account{queryParameters}";
            return this.SendAsync<_zimbra.AccountResponse[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/zimbra/platform/{platformId}/account
        public Task<_zimbra.AccountResponse> PostV2ZimbraPlatformPlatformIdAccountAsync(_zimbra.AccountPostPayload _body, System.Guid platformId) {
            string uri = $"/v2/zimbra/platform/{platformId}/account";
            return this.SendAsync<_zimbra.AccountResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v2/zimbra/platform/{platformId}/account/{accountId}
        public Task DeleteV2ZimbraPlatformPlatformIdAccountAccountIdAsync(System.Guid accountId, System.Guid platformId) {
            string uri = $"/v2/zimbra/platform/{platformId}/account/{accountId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v2/zimbra/platform/{platformId}/account/{accountId}
        public Task<_zimbra.AccountResponse> GetV2ZimbraPlatformPlatformIdAccountAccountIdAsync(System.Guid accountId, System.Guid platformId) {
            string uri = $"/v2/zimbra/platform/{platformId}/account/{accountId}";
            return this.SendAsync<_zimbra.AccountResponse>("GET", uri, null, null, true);
        }
        
        // Path: /v2/zimbra/platform/{platformId}/account/{accountId}
        public Task<_zimbra.AccountResponse> PutV2ZimbraPlatformPlatformIdAccountAccountIdAsync(_zimbra.AccountPutPayload _body, System.Guid accountId, System.Guid platformId) {
            string uri = $"/v2/zimbra/platform/{platformId}/account/{accountId}";
            return this.SendAsync<_zimbra.AccountResponse>("PUT", uri, null, _body, true);
        }
        
        // Path: /v2/zimbra/platform/{platformId}/domain
        public Task<_zimbra.DomainResponse[]> GetV2ZimbraPlatformPlatformIdDomainAsync(System.Guid platformId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size, [System.Runtime.InteropServices.OptionalAttribute()] System.Guid? organizationId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? organizationLabel) {
            Dictionary<string, object> queryParametersTemp = new System.Collections.Generic.Dictionary<string, object>();
            queryParametersTemp.Add("organizationId", organizationId);
            queryParametersTemp.Add("organizationLabel", organizationLabel);
            var queryParameters = this.CreateQueryParams(queryParametersTemp);
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/zimbra/platform/{platformId}/domain{queryParameters}";
            return this.SendAsync<_zimbra.DomainResponse[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/zimbra/platform/{platformId}/domain
        public Task<_zimbra.DomainResponse> PostV2ZimbraPlatformPlatformIdDomainAsync(_zimbra.DomainPostPayload _body, System.Guid platformId) {
            string uri = $"/v2/zimbra/platform/{platformId}/domain";
            return this.SendAsync<_zimbra.DomainResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v2/zimbra/platform/{platformId}/domain/{domainId}
        public Task DeleteV2ZimbraPlatformPlatformIdDomainDomainIdAsync(System.Guid domainId, System.Guid platformId) {
            string uri = $"/v2/zimbra/platform/{platformId}/domain/{domainId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v2/zimbra/platform/{platformId}/domain/{domainId}
        public Task<_zimbra.DomainResponse> GetV2ZimbraPlatformPlatformIdDomainDomainIdAsync(System.Guid domainId, System.Guid platformId) {
            string uri = $"/v2/zimbra/platform/{platformId}/domain/{domainId}";
            return this.SendAsync<_zimbra.DomainResponse>("GET", uri, null, null, true);
        }
        
        // Path: /v2/zimbra/platform/{platformId}/domain/{domainId}
        public Task<_zimbra.DomainResponse> PutV2ZimbraPlatformPlatformIdDomainDomainIdAsync(_zimbra.DomainPutPayload _body, System.Guid domainId, System.Guid platformId) {
            string uri = $"/v2/zimbra/platform/{platformId}/domain/{domainId}";
            return this.SendAsync<_zimbra.DomainResponse>("PUT", uri, null, _body, true);
        }
        
        // Path: /v2/zimbra/platform/{platformId}/organization
        public Task<_zimbra.OrganizationResponse[]> GetV2ZimbraPlatformPlatformIdOrganizationAsync(System.Guid platformId, [System.Runtime.InteropServices.OptionalAttribute()] System.String? X_Pagination_Cursor, [System.Runtime.InteropServices.OptionalAttribute()] System.Int64? X_Pagination_Size) {
            Dictionary<string, object> headersTemp = new System.Collections.Generic.Dictionary<string, object>();
            headersTemp.Add("X-Pagination-Cursor", X_Pagination_Cursor);
            headersTemp.Add("X-Pagination-Size", X_Pagination_Size);
            var headers = this.CreateHeaders(headersTemp);
            string uri = $"/v2/zimbra/platform/{platformId}/organization";
            return this.SendAsync<_zimbra.OrganizationResponse[]>("GET", uri, headers, null, true);
        }
        
        // Path: /v2/zimbra/platform/{platformId}/organization
        public Task<_zimbra.OrganizationResponse> PostV2ZimbraPlatformPlatformIdOrganizationAsync(_zimbra.OrganizationPostPayload _body, System.Guid platformId) {
            string uri = $"/v2/zimbra/platform/{platformId}/organization";
            return this.SendAsync<_zimbra.OrganizationResponse>("POST", uri, null, _body, true);
        }
        
        // Path: /v2/zimbra/platform/{platformId}/organization/{organizationId}
        public Task DeleteV2ZimbraPlatformPlatformIdOrganizationOrganizationIdAsync(System.Guid organizationId, System.Guid platformId) {
            string uri = $"/v2/zimbra/platform/{platformId}/organization/{organizationId}";
            return this.SendAsync("DELETE", uri, null, null, true);
        }
        
        // Path: /v2/zimbra/platform/{platformId}/organization/{organizationId}
        public Task<_zimbra.OrganizationResponse> GetV2ZimbraPlatformPlatformIdOrganizationOrganizationIdAsync(System.Guid organizationId, System.Guid platformId) {
            string uri = $"/v2/zimbra/platform/{platformId}/organization/{organizationId}";
            return this.SendAsync<_zimbra.OrganizationResponse>("GET", uri, null, null, true);
        }
        
        // Path: /v2/zimbra/platform/{platformId}/organization/{organizationId}
        public Task<_zimbra.OrganizationResponse> PutV2ZimbraPlatformPlatformIdOrganizationOrganizationIdAsync(_zimbra.OrganizationPutPayload _body, System.Guid organizationId, System.Guid platformId) {
            string uri = $"/v2/zimbra/platform/{platformId}/organization/{organizationId}";
            return this.SendAsync<_zimbra.OrganizationResponse>("PUT", uri, null, _body, true);
        }
    }
}
